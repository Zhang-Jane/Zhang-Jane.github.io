<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>go语言基础</title>
      <link href="/post/80db8027.html"/>
      <url>/post/80db8027.html</url>
      
        <content type="html"><![CDATA[<p><strong>Go是一门强类型静态编程语言</strong></p><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p>GO语言提供了类型推导的语法糖，<code>:=</code>，注意，使用此声明变量的时候，左边的值中至少要有一个变量必须是为定义，否则会出现<code>no new variables on left side of := </code>，而且它不能出现在全局的变量声明和初始化。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">10</span></span><br><span class="line">或则</span><br><span class="line">a := <span class="number">10</span></span><br></pre></td></tr></table></figure><h3 id="bool类型"><a href="#bool类型" class="headerlink" title="bool类型"></a>bool类型</h3><p>布尔型的值只可以是常量 true 或者 false。一个简单的例子：var b bool &#x3D; true</p><h3 id="数值型"><a href="#数值型" class="headerlink" title="数值型"></a>数值型</h3><h4 id="整数型"><a href="#整数型" class="headerlink" title="整数型"></a>整数型</h4><p>范围的计算机规则$$无符号的：0-2^n \ 有符号：-2^{n}&#x2F;2,2^{n}&#x2F;2 -1$$</p><ul><li>int8 有符号 8 位整型 (-128 到 127) 长度：8bit</li><li>int16 有符号 16 位整型 (-32768 到 32767)</li><li>int32 有符号 32 位整型 (-2147483648 到 2147483647)</li><li>int64 有符号 64 位整型 (-9223372036854775808 到 9223372036854775807)</li><li>uint8 无符号 8 位整型 (0 到 255) 8位都用于表示数值：</li><li>uint16 无符号 16 位整型 (0 到 65535)</li><li>uint32 无符号 32 位整型 (0 到 4294967295)</li><li>uint64 无符号 64 位整型 (0 到 18446744073709551615)</li></ul><h4 id="浮点型"><a href="#浮点型" class="headerlink" title="浮点型"></a>浮点型</h4><ul><li>float32  32位浮点型数</li><li>float64  64位浮点型数</li></ul><h3 id="字符"><a href="#字符" class="headerlink" title="字符"></a>字符</h3><p>Golang中没有专门的字符类型，如果要存储单个字符(字母)，一般使用byte来保存。</p><p>字符串就是一串固定长度的字符连接起来的字符序列。Go的字符串是由单个字节连接起来的。也就是说<span style="background:#ff4d4f">对于传统的字符串是由字符组成的，而Go的字符串不同，它是由字节组成的</span>。<br>字符常量只能使用单引号(<code>&#39;&#39;</code>)括起来</p><p><strong>go语言的字符有俩种类型</strong></p><ul><li>byte（代表ASCII编码的一个字符）</li><li>rune（代表UTF-8编码的一个字符）</li></ul><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><p>字符串就是一串固定长度的字符连接起来的字符序列。Go 的字符串是由单个字节连接起来的。Go 语言的字符串的字节使用 UTF-8 编码标识 Unicode 文本。<br>用双引号(<code>&quot;&quot;</code>)括起来</p><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><ul><li>byte 等于 uint8</li><li>rune 等于 int32</li><li>多行字符串用``</li><li>统计字符长度<ul><li>ASCII 字符串长度使用 len() 函数。</li><li>Unicode 字符串长度使用 utf8.RuneCountInString() 函数。</li></ul></li><li>最好使用<code>for range</code>来遍历数组，切片，字符串，map，以及channel</li></ul><h2 id="code"><a href="#code" class="headerlink" title="code"></a>code</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 关于字符串遍历的时候出现的某些问题，中文的采用的是utf-8的编码（一个中文占三个字节）</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">   <span class="keyword">var</span> str = <span class="string">&quot;abc北京&quot;</span></span><br><span class="line">    str2 := []<span class="type">rune</span>(str)</span><br><span class="line"><span class="keyword">for</span> i :=<span class="number">0</span>; i &lt; <span class="built_in">len</span>(str); i++ &#123;</span><br><span class="line">    ch := str[i]</span><br><span class="line">      fmt.Printf(<span class="string">&quot;str[%d]=%c\n&quot;</span>, i, ch)</span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">// range自动帮你转换了</span></span><br><span class="line">    <span class="keyword">for</span> i, ch := <span class="keyword">range</span> str &#123;</span><br><span class="line">        fmt.Printf(<span class="string">&quot;str[%d]=%c\n&quot;</span>, i, ch)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">/* 定义局部变量 */</span></span><br><span class="line"><span class="keyword">var</span> a <span class="type">int</span> = <span class="number">1</span></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">    循环:</span></span><br><span class="line"><span class="comment">    break: 中止当前的循环，如果有嵌套，无法影响后面的运行</span></span><br><span class="line"><span class="comment">    goto:无条件的跳转到相同函数中带标签的语句</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">LOOP: <span class="keyword">for</span> a &lt; <span class="number">10</span> &#123;</span><br><span class="line"><span class="keyword">if</span> a == <span class="number">5</span> &#123;</span><br><span class="line"><span class="comment">/* 跳过迭代 */</span></span><br><span class="line">a = a + <span class="number">1</span></span><br><span class="line"><span class="keyword">goto</span> LOOP</span><br><span class="line">&#125;</span><br><span class="line">        <span class="keyword">if</span> a == <span class="number">3</span> &#123;</span><br><span class="line">    fmt.Printf(<span class="string">&quot;a的break值为 : %d\n&quot;</span>, a)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        &#125; </span><br><span class="line">fmt.Printf(<span class="string">&quot;a的值为 : %d\n&quot;</span>, a)</span><br><span class="line">a++</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;strings&quot;</span></span><br><span class="line"></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//字符串基本操作</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//1. 求解字符串的长度</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回的是字节的长度</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//涉及到中文问题就产生了变化</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//unicode 字符集， 存储的时候需要编码 utf8编码规则， utf8编码是一个动态的编码规则</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//utf8编码， 还能够用一个字节表示英文</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//var name string = &quot;bobby:\&quot;慕课网\&quot;&quot; //转义符</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//fmt.Println(len(name))</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">////类型转换</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//name_arr := []int32(name)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//fmt.Println(len(name_arr))</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">    <span class="comment">//date := &quot;2020\\06\\18&quot; //转义符</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//fmt.Println(date)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//2. 是否包含某个子串</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> name <span class="type">string</span> = <span class="string">&quot;bobby:\&quot;慕课网\&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    fmt.Println(strings.Contains(name, <span class="string">&quot;慕课网&quot;</span>))</span><br><span class="line"></span><br><span class="line">    fmt.Println(strings.Index(name, <span class="string">&quot;慕课网&quot;</span>))</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">    <span class="comment">//2. 统计出现的次数</span></span><br><span class="line"></span><br><span class="line">    fmt.Println(strings.Count(name, <span class="string">&quot;b&quot;</span>))</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">    <span class="comment">//3. 前缀和后缀</span></span><br><span class="line"></span><br><span class="line">    fmt.Println(strings.HasPrefix(name, <span class="string">&quot;o&quot;</span>))</span><br><span class="line"></span><br><span class="line">    fmt.Println(strings.HasSuffix(name, <span class="string">&quot;\&quot;&quot;</span>))</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">    <span class="comment">//4. 大小写转换</span></span><br><span class="line"></span><br><span class="line">    fmt.Println(strings.ToUpper(<span class="string">&quot;bobby&quot;</span>))</span><br><span class="line"></span><br><span class="line">    fmt.Println(strings.ToLower(<span class="string">&quot;BOBBY&quot;</span>))</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">    <span class="comment">//5. 字符串的比较</span></span><br><span class="line"></span><br><span class="line">    fmt.Println(strings.Compare(<span class="string">&quot;ab&quot;</span>, <span class="string">&quot;aa&quot;</span>)) <span class="comment">//字符的比较就是ascii的比较 返回-1， 1， 0</span></span><br><span class="line"></span><br><span class="line">    fmt.Println(strings.Compare(<span class="string">&quot;b&quot;</span>, <span class="string">&quot;a&quot;</span>))   <span class="comment">//字符的比较就是ascii的比较 返回-1， 1， 0</span></span><br><span class="line"></span><br><span class="line">    fmt.Println(strings.Compare(<span class="string">&quot;b&quot;</span>, <span class="string">&quot;b&quot;</span>))   <span class="comment">//字符的比较就是ascii的比较 返回-1， 1， 0</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">    <span class="comment">//6. 去掉空格和指定字符串</span></span><br><span class="line"></span><br><span class="line">    fmt.Println(strings.TrimSpace(<span class="string">&quot; bobby &quot;</span>))</span><br><span class="line"></span><br><span class="line">    fmt.Println(strings.TrimLeft(<span class="string">&quot;bobby&quot;</span>, <span class="string">&quot;b&quot;</span>))</span><br><span class="line"></span><br><span class="line">    fmt.Println(strings.Trim(<span class="string">&quot;bobby&quot;</span>, <span class="string">&quot;b&quot;</span>))</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">    <span class="comment">//7. split方法</span></span><br><span class="line"></span><br><span class="line">    fmt.Println(strings.Split(<span class="string">&quot;bobby imooc&quot;</span>, <span class="string">&quot; &quot;</span>))</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">    <span class="comment">//8. 合并 join方法将字符串数组连接起来</span></span><br><span class="line"></span><br><span class="line">    arrs := strings.Split(<span class="string">&quot;bobby imooc&quot;</span>, <span class="string">&quot; &quot;</span>)</span><br><span class="line"></span><br><span class="line">    fmt.Println(strings.Join(arrs, <span class="string">&quot;-&quot;</span>))</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">    <span class="comment">//9. 字符串替换</span></span><br><span class="line"></span><br><span class="line">    fmt.Println(strings.Replace(<span class="string">&quot;bobby: 18 电话：18888888&quot;</span>, <span class="string">&quot;18&quot;</span>, <span class="string">&quot;19&quot;</span>, <span class="number">2</span>))</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="高级类型"><a href="#高级类型" class="headerlink" title="高级类型"></a>高级类型</h2><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><p>Go 语言提供了数组类型的数据结构。 数组是具有相同唯一类型的一组已编号且长度固定的数据项序列，这种类型可以是任意的原始类型例如整形、字符串或者自定义类型。<br>数组元素可以通过索引（位置）来读取（或者修改），索引从0开始，第一个元素索引为 0，第二个索引为 1，以此类推。数组的下标取值范围是从0开始，到长度减1。<br>数组一旦定义后，大小不能更改。</p><p><font color="#00b050">如果我就想在数组中定义不同类型，怎么办？</font></p><p>使用interface</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="keyword">type</span> container <span class="keyword">interface</span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="comment">// li := [] int &#123;1, 2, 4, 6&#125;</span></span><br><span class="line">  li2 := [...] container &#123;<span class="number">1</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;一&#x27;</span>, <span class="literal">true</span>&#125;</span><br><span class="line">  fmt.Println(li2)</span><br><span class="line">  <span class="comment">// 默认给指定的位置初始化值</span></span><br><span class="line">  f := [...]<span class="type">int</span>&#123;<span class="number">0</span>:<span class="number">1</span>, <span class="number">4</span>:<span class="number">1</span>, <span class="number">9</span>:<span class="number">100</span>&#125;</span><br><span class="line">  fmt.Println(f)</span><br><span class="line">  f2 := [<span class="number">2</span>] <span class="type">string</span> &#123;<span class="string">&quot;helo&quot;</span>, <span class="string">&quot;world&quot;</span>, <span class="string">&quot;nihao&quot;</span>&#125;</span><br><span class="line">  fmt.Println(f2)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><span style="background:#b1ffff">需要注意的是：数组是值类型</span><br>数组是值类型 Go中的数组是值类型，而不是引用类型。这意味着当它们被分配给一个新变量时，将把原始数组的副本分配给新变量。如果对新变量进行了更改，则不会在原始数组中反映。</p><p>注意：</p><ul><li>数组的大小是类型的一部分。因此[5]int和[25]int是不同的类型。因此，数组不能被调整大小</li></ul><h3 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h3><p>Go 数组的长度不可改变，在特定场景中这样的集合就不太适用，Go中提供了一种灵活，功能强悍的内置类型切片(“动态数组”),与数组相比切片的长度是不固定的，可以追加元素，在追加时可能使切片的容量增大。<br>注意：</p><ul><li> 切片的传递是引用传递<br>直接声明<br><code>var slice []int</code></li></ul><p>new<br><code>slice := *new([]int)</code></p><p>字面量<br><code>slice := []int&#123;1,2,3,4,5&#125;</code></p><p>make<br><code>slice := make([]int, 5, 10)</code></p><p>从切片或数组“截取”<br><code>slice := array[1:5]</code> 或 <code>slice := sourceSlice[1:5]</code></p><p>底层存储</p><p><a href="https://blog.csdn.net/kikajack/article/details/79833674">https://blog.csdn.net/kikajack/article/details/79833674</a></p><p>go和python的切片区别</p><p><a href="https://blog.csdn.net/qq_15437667/article/details/70191873">https://blog.csdn.net/qq_15437667&#x2F;article&#x2F;details&#x2F;70191873</a></p><p>slice扩容机制</p><ol><li><p>如果当前所需容量 （cap） 大于原先容量的两倍 （doublecap），则最终申请容量（newcap）为当前所需容量（cap）；</p></li><li><p>如果&lt;条件1&gt;不满足，表示当前所需容量（cap）不大于原容量的两倍（doublecap），则进行如下判断；</p></li><li><p>如果原切片长度（old.len）小于1024，则最终申请容量（newcap）等于原容量的两倍（doublecap）；</p></li><li><p>否则，最终申请容量（newcap，初始值等于 old.cap）每次增加 newcap&#x2F;4，直到大于所需容量（cap）为止，然后，判断最终申请容量（newcap）是否溢出，如果溢出，最终申请容量（newcap）等于所需容量（cap）；</p></li></ol><h3 id="map"><a href="#map" class="headerlink" title="map"></a>map</h3><p>在 Go 语言中，map 中的 key 类型必须是可比较的类型。这意味着 key 类型必须是能够进行相等性比较的类型，比如整数类型、字符串类型、指针类型等。<br>key的常用类型：int, rune, string, 结构体(每个元素需要支持 &#x3D;&#x3D; or !&#x3D; 操作), 指针</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1 字面值</span></span><br><span class="line">&#123;</span><br><span class="line">    m1 := <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">string</span>&#123;<span class="string">&quot;m1&quot;</span>: <span class="string">&quot;v1&quot;</span>, <span class="comment">// 定义时指定的初始key/value, 后面可以继续添加    &#125;   </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 2 使用make函数</span></span><br><span class="line">&#123;</span><br><span class="line">    m2 := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">string</span>]<span class="type">string</span>) <span class="comment">// 创建时，里面不含元素，元素都需要后续添加    </span></span><br><span class="line">    m2[<span class="string">&quot;m2&quot;</span>] = <span class="string">&quot;v2&quot;</span>               <span class="comment">// 添加元素    </span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 定义一个空的map</span></span><br><span class="line">&#123;</span><br><span class="line">    m3 := <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">string</span>&#123;&#125;    </span><br><span class="line">    m4 := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">string</span>]<span class="type">string</span>)    </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// m0 可以, key类型为string, 支持 == 比较操作</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">var</span> m0 <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">string</span> <span class="comment">// 定义map类型变量m0，key的类型为string，value的类型string</span></span><br><span class="line">fmt.Println(m0)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// m1 不可以, []byte是slice，不支持 == != 操作，不可以作为map key的数据类型</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">var</span> m1 <span class="keyword">map</span>[[]<span class="type">byte</span>]<span class="type">string</span> <span class="comment">// 报错： invalid map key type []byte</span></span><br><span class="line">fmt.Println(m1)</span><br><span class="line"></span><br><span class="line">准确说slice类型只能与<span class="literal">nil</span>比较，其他的都不可以，可以通过如下测试：</span><br><span class="line"><span class="keyword">var</span> b1,b2 []<span class="type">byte</span></span><br><span class="line">fmt.Println(b1==b2) <span class="comment">// 报错： invalid operation: b1 == b2 (slice can only be compared to nil)</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// m2 可以, interface&#123;&#125;类型可以作为key，但是需要加入的key的类型是可以比较的</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">var</span> m2 <span class="keyword">map</span>[<span class="keyword">interface</span>&#123;&#125;]<span class="type">string</span></span><br><span class="line">m2 = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">interface</span>&#123;&#125;]<span class="type">string</span>)</span><br><span class="line">m2[[]<span class="type">byte</span>(<span class="string">&quot;k2&quot;</span>)]=<span class="string">&quot;v2&quot;</span> <span class="comment">// panic: runtime error: hash of unhashable type []uint8</span></span><br><span class="line">m2[<span class="number">123</span>] = <span class="string">&quot;123&quot;</span></span><br><span class="line">m2[<span class="number">12.3</span>] = <span class="string">&quot;123&quot;</span></span><br><span class="line">fmt.Println(m2)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// m3 可以， 数组支持比较</span></span><br><span class="line">&#123;</span><br><span class="line">a3 := [<span class="number">3</span>]<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line"><span class="keyword">var</span> m3 <span class="keyword">map</span>[[<span class="number">3</span>]<span class="type">int</span>]<span class="type">string</span></span><br><span class="line">m3 = <span class="built_in">make</span>(<span class="keyword">map</span>[[<span class="number">3</span>]<span class="type">int</span>]<span class="type">string</span>)</span><br><span class="line">m3[a3] = <span class="string">&quot;m3&quot;</span></span><br><span class="line">fmt.Println(m3)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// m4 可以，book1里面的元素都是支持== !=</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">type</span> book1 <span class="keyword">struct</span> &#123;</span><br><span class="line">name <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> m4 <span class="keyword">map</span>[book1]<span class="type">string</span></span><br><span class="line">fmt.Println(m4)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// m5 不可以, text元素类型为[]byte, 不满足key的要求</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">type</span> book2 <span class="keyword">struct</span> &#123;</span><br><span class="line">name <span class="type">string</span></span><br><span class="line">text []<span class="type">byte</span> <span class="comment">//没有这个就可以</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> m5 <span class="keyword">map</span>[book2]<span class="type">string</span> <span class="comment">//invalid map key type book2</span></span><br><span class="line">fmt.Println(m5)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>注意：</p><ul><li>遍历的顺序是随机的</li><li>使用for range遍历的时候，k,v使用的同一块内存，这也是容易出现错误的地方<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 遍历的顺序是随机的</span></span><br><span class="line">m := <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">int</span>&#123;</span><br><span class="line"><span class="string">&quot;a&quot;</span>: <span class="number">1</span>,</span><br><span class="line"><span class="string">&quot;b&quot;</span>: <span class="number">2</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> k, v := <span class="keyword">range</span> m &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;k:[%v].v:[%v]\n&quot;</span>, k, v) <span class="comment">// 输出k,v值</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">k:[b].v:[2]</span></span><br><span class="line"><span class="comment">k:[a].v:[1]</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 虽然v的_地址没有变化_，但v的_内容在一直变化_，当遍历完成后，v的内容是map遍历时最后遍历的元素的。当程序将v的地址放入到slice中的时候，slice在不断地将v的地址插入，由于v一直是那块地址，因此slice中的每个元素记录的都是v的地址。因此当打印slice中的内容的时候，都是同一个值。就好比一直在给一个变量赋不同的值</span></span><br><span class="line">m := <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">int</span>&#123;</span><br><span class="line"><span class="string">&quot;a&quot;</span>: <span class="number">1</span>,</span><br><span class="line"><span class="string">&quot;b&quot;</span>: <span class="number">2</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> bs []*<span class="type">int</span></span><br><span class="line"><span class="keyword">for</span> k, v := <span class="keyword">range</span> m &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;k:[%p].v:[%p]\n&quot;</span>, &amp;k, &amp;v) <span class="comment">// 这里的输出可以看到，k一直使用同一块内存，v也是这个状况</span></span><br><span class="line">bs = <span class="built_in">append</span>(bs, &amp;v) <span class="comment">// 对v取了地址</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line"><span class="keyword">for</span> _, b := <span class="keyword">range</span> bs &#123;</span><br><span class="line">fmt.Println(*b) <span class="comment">// 输出都是1或者都是2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="make和new"><a href="#make和new" class="headerlink" title="make和new"></a>make和new</h3><p>Go语言中 new 和 make 是两个内置函数，主要用来创建并分配类型的内存。<br>在声明变量的时候，都有默认值：</p><ul><li>默认值是它所属类型的零值。<ul><li><code>int</code> 型它的零值为 <code>0</code></li><li><code>string</code> 的零值为 <code>&quot;&quot;</code></li><li>引用类型的零值为 <code>nil</code>。</li></ul></li><li>如果是一个<font color="#7030a0">引用类型，我们不仅要声明它，还要为它分配内存空间，否则我们赋值就无处安放</font>。</li><li>值类型的声明不需要我们分配内存空间，因为已经默认给我们分配好啦。<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 此内置函数用于分配内存，第一个参数接收一个类型而不是一个值，函数返回一个指向该类型内存地址的指针，同时把分配的内存置为该类型的零值。</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">new</span><span class="params">(Type)</span></span> *Type</span><br><span class="line"><span class="keyword">var</span> p *<span class="type">int</span> = <span class="built_in">new</span>(<span class="type">int</span>) <span class="comment">//go的编译器就知道先申请一个内存空间，这里的内存中的值全部设置为0</span></span><br><span class="line">*p = <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 与 new 不同的是，它一般只用于 `chan`，`map`，`slice` 的初始化，并且直接返回这三种类型本身</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">make</span><span class="params">(t Type, size ...IntegerType)</span></span> Type</span><br><span class="line">d := <span class="built_in">make</span>([]<span class="type">int</span>, <span class="number">0</span>)</span><br></pre></td></tr></table></figure>区别：</li><li>new函数返回的是这个值的地址指针； make函数返回的是指定类型的实例</li><li>new 用于给类型分配内存空间，并且置零；make 只用于 chan，map，slice 的初始化。</li></ul><h3 id="接口-接口命名习惯以-er-结尾"><a href="#接口-接口命名习惯以-er-结尾" class="headerlink" title="接口( 接口命名习惯以 er 结尾)"></a>接口( 接口命名习惯以 er 结尾)</h3><p>在Go语言中接口（interface）是一种类型，一种抽象的类型。</p><p>interface是一组method的集合，是duck-type programming的一种体现。接口做的事情就像是定义一个协议（规则），只要一台机器有洗衣服和甩干的功能，我就称它为洗衣机。不关心属性（数据），只关心行为（方法）。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> 接口类型名 <span class="keyword">interface</span>&#123;</span><br><span class="line">方法名<span class="number">1</span>( 参数列表<span class="number">1</span> ) 返回值列表<span class="number">1</span></span><br><span class="line">方法名<span class="number">2</span>( 参数列表<span class="number">2</span> ) 返回值列表<span class="number">2</span></span><br><span class="line">…</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">//接口是一个协议- 程序员 - 只要你能够 1. 写代码 2. 解决bug 其实就是一组方法的集合</span></span><br><span class="line"><span class="keyword">type</span> Programmer <span class="keyword">interface</span> &#123;</span><br><span class="line">Coding() <span class="type">string</span> <span class="comment">//方法只是申明</span></span><br><span class="line">Debug() <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> Designer <span class="keyword">interface</span> &#123;</span><br><span class="line">Design() <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> Manger <span class="keyword">interface</span> &#123;</span><br><span class="line">Programmer</span><br><span class="line">Designer</span><br><span class="line">Manage() <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> G <span class="keyword">struct</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//java的话 java里面一种类型只要继承一个接口 才行 如果你继承了这个接口的话 那么这个接口里面的所有方法你必须要全部实现</span></span><br><span class="line"><span class="keyword">type</span> UIDesigner <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(d UIDesigner)</span></span> Design() <span class="type">string</span>&#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;我会ui设计&quot;</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;我会ui设计&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Pythoner <span class="keyword">struct</span> &#123;</span><br><span class="line">UIDesigner</span><br><span class="line">lib []<span class="type">string</span></span><br><span class="line">kj []<span class="type">string</span></span><br><span class="line">years <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p G)</span></span> Coding() <span class="type">string</span>&#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;go开发者&quot;</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;go开发者&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p G)</span></span> Debug() <span class="type">string</span>&#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;我会go的debug&quot;</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;我会go的debug&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p Pythoner)</span></span> Coding() <span class="type">string</span>&#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;python开发者&quot;</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;python开发者&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p Pythoner)</span></span> Debug() <span class="type">string</span>&#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;我会python的debug&quot;</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;我会python的debug&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p Pythoner)</span></span> Manage() <span class="type">string</span>&#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;不好意思，管理我也懂&quot;</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;不好意思，管理我也懂&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>  &#123;</span><br><span class="line"><span class="comment">//新的语言出来了, 接口帮我们完成了go语言的多态</span></span><br><span class="line"><span class="comment">//var pro Programmer = Pythoner&#123;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> pros []Programmer</span><br><span class="line">pros = <span class="built_in">append</span>(pros, Pythoner&#123;&#125;)</span><br><span class="line">pros = <span class="built_in">append</span>(pros, G&#123;&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//接口虽然是一种类型 但是和其他类型不太一样 接口是一种抽象类型 struct是具象</span></span><br><span class="line">p := Pythoner&#123;&#125;</span><br><span class="line">fmt.Printf(<span class="string">&quot;%T\n&quot;</span>, p)</span><br><span class="line"><span class="keyword">var</span> pro Programmer = Pythoner&#123;&#125;</span><br><span class="line">fmt.Printf(<span class="string">&quot;%T\n&quot;</span>, pro)</span><br><span class="line"><span class="keyword">var</span> pro2 Programmer = G&#123;&#125;</span><br><span class="line">fmt.Printf(<span class="string">&quot;%T&quot;</span>, pro2)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结构体-首字母大写公共，小写私有"><a href="#结构体-首字母大写公共，小写私有" class="headerlink" title="结构体(首字母大写公共，小写私有)"></a>结构体(首字母大写公共，小写私有)</h3><p>Go 语言中的结构体（struct）是一种自定义的类型，它可以用来组合多个不同类型的数据字段（field）成为一个单独的实体。例如，你可以定义一个结构体表示人的信息，包括他的名字、年龄、身高等，而每个字段的类型可以是 string、int 或 float64 等。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;unsafe&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Course <span class="keyword">struct</span> &#123;</span><br><span class="line">Name <span class="type">string</span></span><br><span class="line">Price <span class="type">int</span></span><br><span class="line">Url <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//函数的接收者</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c Course)</span></span> printCourseInfo()  &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;课程名:%s, 课程价格: %d, 课程的地址:%s&quot;</span>, c.Name, c.Price, c.Url)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Course)</span></span> setPrice(price <span class="type">int</span>)&#123;</span><br><span class="line">c.Price = price</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//1. 结构体的方法只能和结构体在同一个包中</span></span><br><span class="line"><span class="comment">//2. 内置的int类型不能加方法</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>  &#123;</span><br><span class="line"><span class="comment">//go语言不支持面向对象</span></span><br><span class="line"><span class="comment">//面向对象的三个基本特征： 1. 封装 2. 继承 3. 多态 4. 方法重载 4. 抽象基类</span></span><br><span class="line"><span class="comment">//定义struct go语言没有class这个概念 所以说对于很多人来说会少理解很多面向对象抽象的概念</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//1. 实例化- kv形式</span></span><br><span class="line"><span class="keyword">var</span> c Course = Course&#123;</span><br><span class="line">Name: <span class="string">&quot;django&quot;</span>,</span><br><span class="line">Price: <span class="number">100</span>,</span><br><span class="line">Url: <span class="string">&quot;https://www.imooc.com&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//访问</span></span><br><span class="line">fmt.Println(c.Name, c.Price, c.Url)</span><br><span class="line"></span><br><span class="line"><span class="comment">//大小写在go语言中的重要性 可见性</span></span><br><span class="line"><span class="comment">//一个包中的变量或者结构体如果首字母是小写 那么对于另一个包不可见</span></span><br><span class="line"><span class="comment">//机构体定义的 名称 以及属性首字母大写很重要</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2. 第二种实例化方式 - 顺序形式</span></span><br><span class="line">c2 := Course&#123;<span class="string">&quot;scrapy&quot;</span>, <span class="number">110</span>, <span class="string">&quot;https://www.imooc.com&quot;</span>&#125;</span><br><span class="line">fmt.Println(c2.Name, c2.Price, c2.Url)</span><br><span class="line"></span><br><span class="line"><span class="comment">//3. 如果一个指向结构体的指针, 通过结构体指针获取对象的值， 让很多人莫名其妙</span></span><br><span class="line">c3 := &amp;Course&#123;<span class="string">&quot;tornado&quot;</span>, <span class="number">100</span>, <span class="string">&quot;https://www.imooc.com&quot;</span>&#125;</span><br><span class="line"><span class="comment">//fmt.Printf(&quot;%T&quot;, c3)</span></span><br><span class="line"><span class="comment">//应该能看出来 go语言实际上在借鉴动态语言的特性 - 很多地方不管如何写都是正确的</span></span><br><span class="line"><span class="comment">//另一个根本的原因 - go语言的指针是受限的</span></span><br><span class="line">fmt.Println(c3.Name, c3.Price, c3.Url) <span class="comment">//这里其实是go语言的一个语法糖 go语言内部会将c3.Name转换成 (*c3).Name</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//4. 零值 如果不给结构体赋值， go语言会默认给每个字段采用默认值</span></span><br><span class="line">c4 := Course&#123;&#125;</span><br><span class="line">fmt.Println(c4.Price,)</span><br><span class="line"></span><br><span class="line"><span class="comment">//5. 多种方式零值初始结构体</span></span><br><span class="line"><span class="keyword">var</span> c5 Course = Course&#123;&#125;</span><br><span class="line"><span class="keyword">var</span> c6 Course</span><br><span class="line"><span class="keyword">var</span> c7 *Course = &amp;Course&#123;&#125;</span><br><span class="line"><span class="comment">//为什么c6和c8表现出来的结果不一样 指针如果只申明不赋值 默认值是nil c6不是指针 是结构体的类型</span></span><br><span class="line"><span class="comment">//slice map</span></span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">&quot;零值初始化&quot;</span>)</span><br><span class="line">fmt.Println(c5.Price)</span><br><span class="line">fmt.Println(c6.Price)</span><br><span class="line">fmt.Println(c7.Price)</span><br><span class="line"></span><br><span class="line"><span class="comment">//6. 结构体是值类型</span></span><br><span class="line">c8 := Course&#123;<span class="string">&quot;scrapy&quot;</span>, <span class="number">110</span>, <span class="string">&quot;https://www.imooc.com&quot;</span>&#125;</span><br><span class="line">c9 := c8</span><br><span class="line">fmt.Println(c8)</span><br><span class="line">fmt.Println(c9)</span><br><span class="line">c8.Price = <span class="number">200</span></span><br><span class="line">fmt.Println(c8)</span><br><span class="line">fmt.Println(c9)</span><br><span class="line"></span><br><span class="line"><span class="comment">//go语言中struct无处不在</span></span><br><span class="line"><span class="comment">//7. 结构体的大小 占用内存的大小 可以使用sizeof来查看对象占用的类型</span></span><br><span class="line">fmt.Println(unsafe.Sizeof(<span class="number">1</span>))</span><br><span class="line"><span class="comment">//go语言string的本质 其实string是一个结构体</span></span><br><span class="line">fmt.Println(unsafe.Sizeof(<span class="string">&quot;&quot;</span>))</span><br><span class="line">fmt.Println(unsafe.Sizeof(c8))</span><br><span class="line"></span><br><span class="line"><span class="comment">//8. slice的大小</span></span><br><span class="line"><span class="keyword">type</span> slice <span class="keyword">struct</span> &#123;</span><br><span class="line">array unsafe.Pointer  <span class="comment">// 底层数组的地址</span></span><br><span class="line"><span class="built_in">len</span> <span class="type">int</span> <span class="comment">// 长度</span></span><br><span class="line"><span class="built_in">cap</span> <span class="type">int</span> <span class="comment">// 容量</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">s1 := []<span class="type">string</span>&#123;<span class="string">&quot;django&quot;</span>, <span class="string">&quot;tornado&quot;</span>, <span class="string">&quot;scrapy&quot;</span>, <span class="string">&quot;celery&quot;</span>, <span class="string">&quot;snaic&quot;</span>, <span class="string">&quot;flask&quot;</span>&#125;</span><br><span class="line">fmt.Println(<span class="string">&quot;切片占用的内存:&quot;</span>, unsafe.Sizeof(s1))</span><br><span class="line"></span><br><span class="line">m1 := <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">string</span> &#123;</span><br><span class="line"><span class="string">&quot;bobby1&quot;</span>: <span class="string">&quot;django&quot;</span>,</span><br><span class="line"><span class="string">&quot;bobby2&quot;</span>: <span class="string">&quot;tornado&quot;</span>,</span><br><span class="line"><span class="string">&quot;bobby3&quot;</span>: <span class="string">&quot;scrapy&quot;</span>,</span><br><span class="line"><span class="string">&quot;bobby4&quot;</span>: <span class="string">&quot;celery&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(unsafe.Sizeof(m1))</span><br><span class="line"></span><br><span class="line"><span class="comment">//结构体方法， 达到了封装数据和封装方法的效果</span></span><br><span class="line">c10 := Course&#123;<span class="string">&quot;scrapy&quot;</span>, <span class="number">110</span>, <span class="string">&quot;https://www.imooc.com&quot;</span>&#125;</span><br><span class="line"><span class="comment">//Course.setPrice(c10, 200)</span></span><br><span class="line">(&amp;c10).setPrice(<span class="number">200</span>) <span class="comment">//修改c10的price? 为什么呢？ 语法糖 函数参数的传递是怎么传递的？ 结构体是值传递</span></span><br><span class="line">fmt.Println(c10.Price)</span><br><span class="line"><span class="comment">//c10.printCourseInfo()</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//结构体的接收者有两种形式 1. 值传递 2. 指针传递 如果你想改结构体的值 如果结构体的数据很大</span></span><br><span class="line"><span class="comment">//go语言不支持继承 但是有办法能达到同样的效果 组合</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="结构体标签"><a href="#结构体标签" class="headerlink" title="结构体标签"></a>结构体标签</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;encoding/json&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;reflect&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">//结构体能基本上达到类的一个效果 多态</span></span><br><span class="line"><span class="keyword">type</span> Info <span class="keyword">struct</span> &#123; <span class="comment">//能表述的信息是有限的</span></span><br><span class="line">Name <span class="type">string</span> <span class="string">`json:&quot;name&quot;`</span><span class="comment">//name是映射成mysql中char类型还是varchar类型还是text类型， 即使能够说明 但是额外的信息 max_length</span></span><br><span class="line">Age <span class="type">int</span> <span class="string">`json:&quot;age,omitempty&quot;`</span></span><br><span class="line">Gender <span class="type">string</span> <span class="string">`json:&quot;-&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//type Info struct &#123; //能表述的信息是有限的</span></span><br><span class="line"><span class="comment">//Name string `orm:&quot;name, max_length=17, min_length=5&quot;`</span></span><br><span class="line"><span class="comment">//Age int `orm:&quot;age, min=18, max=70&quot;`</span></span><br><span class="line"><span class="comment">//Gender string `orm:&quot;gender, required&quot;`</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//反射包</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>  &#123;</span><br><span class="line"><span class="comment">//结构体标签</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">结构体的字段除了名字和类型外，还可以有一个可选的标签（tag）：</span></span><br><span class="line"><span class="comment">它是一个附属于字段的字符串，可以是文档或其他的重要标记。</span></span><br><span class="line"><span class="comment">比如在我们解析json或生成json文件时，常用到encoding/json包，</span></span><br><span class="line"><span class="comment">它提供一些默认标签，例如：omitempty标签可以在序列化的时候忽略0值或者空值。</span></span><br><span class="line"><span class="comment">而-标签的作用是不进行序列化，其效果和和直接将结构体中的字段写成小写的效果一样。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">info := Info&#123;</span><br><span class="line">Name: <span class="string">&quot;bobby&quot;</span>,</span><br><span class="line">Gender:<span class="string">&quot;男&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line">re, _ := json.Marshal(info)</span><br><span class="line">fmt.Println(<span class="type">string</span>(re))</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过反射包去识别这些tag 简单的体验了一下反射的威力 spring 底层都是反射</span></span><br><span class="line">t := reflect.TypeOf(info)</span><br><span class="line">fmt.Println(<span class="string">&quot;Type:&quot;</span>, t.Name())</span><br><span class="line">fmt.Println(<span class="string">&quot;Kind:&quot;</span>, t.Kind())</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i&lt;t.NumField(); i++ &#123;</span><br><span class="line">field := t.Field(i) <span class="comment">//获取结构体的每一个字段</span></span><br><span class="line">tag := field.Tag.Get(<span class="string">&quot;orm&quot;</span>)</span><br><span class="line">fmt.Printf(<span class="string">&quot;%d. %v (%v), tag: &#x27;%v&#x27;\n&quot;</span>, i+<span class="number">1</span>, field.Name, field.Type.Name(), tag)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//具体的应用绝大部分情况之下我们是不需要使用到反射的 实际开发的项目中会用到的</span></span><br><span class="line"><span class="comment">//接口 java 实际上在go语言中接口这个概念的地位和java中接口的地位是不一样， go语言的接口实际上就是python中的协议 - 鸭子类型</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="结构体-方法"><a href="#结构体-方法" class="headerlink" title="结构体-方法"></a>结构体-方法</h4><p>Go 语言不是面向对象的语言，它里面不存在类的概念，结构体正是类的替代品。类可以附加很多成员方法，结构体也可以。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;math&quot;</span></span><br><span class="line"><span class="keyword">type</span> Circle <span class="keyword">struct</span> &#123;</span><br><span class="line"> x <span class="type">int</span> y <span class="type">int</span> Radius <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 面积</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c Circle)</span></span> Area() <span class="type">float64</span> &#123;</span><br><span class="line"> <span class="keyword">return</span> math.Pi * <span class="type">float64</span>(c.Radius) * <span class="type">float64</span>(c.Radius)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 周长</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c Circle)</span></span> Circumference() <span class="type">float64</span> &#123;</span><br><span class="line"> <span class="keyword">return</span> <span class="number">2</span> * math.Pi * <span class="type">float64</span>(c.Radius)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"> <span class="keyword">var</span> c = Circle &#123;Radius: <span class="number">50</span>&#125; </span><br><span class="line"> fmt.Println(c.Area(), c.Circumference()) <span class="comment">// 指针变量调用方法形式上是一样的 var pc = &amp;c fmt.Println(pc.Area(), pc.Circumference())</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="go语言中的type"><a href="#go语言中的type" class="headerlink" title="go语言中的type"></a>go语言中的type</h3><p>Go语言中的<code>type</code>关键字用于定义新的数据类型。在Go语言中，一个新的类型可以是一个结构体类型，接口类型，函数类型或基本类型（如int、string等）的别名。</p><p>例如，你可以使用<code>type</code>关键字定义一个新的类型<code>MyInt</code>，它是<code>int</code>类型的别名：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> MyInt <span class="type">int</span></span><br></pre></td></tr></table></figure><p>之后，你可以使用<code>MyInt</code>类型定义新的变量，就像使用其它基本类型一样：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myIntVar MyInt = <span class="number">5</span></span><br></pre></td></tr></table></figure><h2 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h2><p><strong>golang中根据首字母的大小写来确定可以访问的权限。无论是方法名、常量、变量名还是结构体的名称，如果首字母大写，则可以被其他的包访问；如果首字母小写，则只能在本包中使用。</strong><br>函数内部声明&#x2F;定义的变量叫局部变量，作用域仅限于函数内部</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// age 和 Name的作用域就只在test函数内部，即便是首字母为大写</span></span><br><span class="line">age := <span class="number">10</span></span><br><span class="line">Name := <span class="string">&quot;tom~&quot;</span></span><br><span class="line">    fmt.Println(<span class="string">&quot;age=&quot;</span>, age) </span><br><span class="line">fmt.Println(<span class="string">&quot;Name=&quot;</span>, Name)  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>函数外部声明&#x2F;定义的变量叫全局变量，作用域在整个包都有效，如果其首字母为大写，则作用域在整个程序有效</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 函数外部声明/定义的变量叫全局变量，</span></span><br><span class="line"><span class="comment">// 作用域在整个包都有效，如果其首字母为大写，则作用域在整个程序有效</span></span><br><span class="line"><span class="keyword">var</span> age <span class="type">int</span> = <span class="number">50</span></span><br><span class="line"><span class="keyword">var</span> Name <span class="type">string</span> = <span class="string">&quot;jack~&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;age=&quot;</span>, age) <span class="comment">//  50</span></span><br><span class="line">fmt.Println(<span class="string">&quot;Name=&quot;</span>, Name) <span class="comment">// jack~</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如果变量是在一个代码块，比如 for &#x2F; if 中，那么这个变量的的作用域就在该代码块</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 如果变量是在一个代码块，比如 for </span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt;= <span class="number">10</span>; i++ &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;i=&quot;</span>, i)</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> i <span class="type">int</span> <span class="comment">//局部变量</span></span><br><span class="line"><span class="keyword">for</span> i = <span class="number">0</span>; i &lt;= <span class="number">10</span>; i++ &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;i=&quot;</span>, i)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">&quot;i=&quot;</span>, i)</span><br></pre></td></tr></table></figure><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">  <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">xx</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// Go语法上不允许函数嵌套，但是支持匿名函数的嵌套</span></span><br><span class="line">  <span class="comment">// func xy() &#123;</span></span><br><span class="line">  <span class="comment">//   fmt.println(a)</span></span><br><span class="line">  <span class="comment">// &#125;</span></span><br><span class="line">  fu := <span class="function"><span class="keyword">func</span> <span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(a)</span><br><span class="line">  &#125;</span><br><span class="line">  fu()</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">20</span> </span><br><span class="line">  fmt.Println(a) </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  xx()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>函数声明包含一个函数名，参数列表， 返回值列表和函数体。如果函数没有返回值，则返回列表可以省略。函数从第一条语句开始执行，直到执行return语句或者执行函数的最后一条语句。</p><p>函数可以没有参数或接受多个参数。</p><p>注意类型在变量名之后 。</p><p>当两个或多个连续的函数命名参数是同一类型，则除了最后一个类型之外，其他都可以省略。</p><p>函数可以返回任意数量的返回值。</p><p>使用关键字 func 定义函数，左大括号依旧不能另起一行。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test</span><span class="params">(fn <span class="keyword">func</span>()</span></span> <span class="type">int</span>) <span class="type">int</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> fn()</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 定义函数类型。</span></span><br><span class="line"><span class="keyword">type</span> FormatFunc <span class="function"><span class="keyword">func</span><span class="params">(s <span class="type">string</span>, x, y <span class="type">int</span>)</span></span> <span class="type">string</span> </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">format</span><span class="params">(fn FormatFunc, s <span class="type">string</span>, x, y <span class="type">int</span>)</span></span> <span class="type">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> fn(s, x, y)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    s1 := test(<span class="function"><span class="keyword">func</span><span class="params">()</span></span> <span class="type">int</span> &#123; <span class="keyword">return</span> <span class="number">100</span> &#125;) <span class="comment">// 直接将匿名函数当参数。</span></span><br><span class="line"></span><br><span class="line">    s2 := format(<span class="function"><span class="keyword">func</span><span class="params">(s <span class="type">string</span>, x, y <span class="type">int</span>)</span></span> <span class="type">string</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> fmt.Sprintf(s, x, y)</span><br><span class="line">    &#125;, <span class="string">&quot;%d, %d&quot;</span>, <span class="number">10</span>, <span class="number">20</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println</span>(s1, s2)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 100 10, 20</span></span><br></pre></td></tr></table></figure><h2 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">swap</span><span class="params">(a *<span class="type">int</span>, b *<span class="type">int</span>)</span></span>&#123;</span><br><span class="line"><span class="comment">//用于交换a和b</span></span><br><span class="line">c := *a</span><br><span class="line">*a = *b</span><br><span class="line">*b = c</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">//什么指针，我们提一个问题</span></span><br><span class="line">a := <span class="number">10</span></span><br><span class="line">b := <span class="number">20</span></span><br><span class="line"><span class="comment">//swap(a, b)</span></span><br><span class="line">fmt.Println(a, b)</span><br><span class="line"><span class="comment">//为什么交换不成功， 这个函数运行完成以后 我想要把a和b的值变掉</span></span><br><span class="line"><span class="comment">//指针 - 对于内存来说，每一个字节其实都是有地址-通过16进制打印出来</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;%p\n&quot;</span>, &amp;a) <span class="comment">//变量有地址</span></span><br><span class="line"><span class="comment">//现在有一种特殊的变量类型，这个变量只能保存地址值</span></span><br><span class="line"><span class="keyword">var</span> ip *<span class="type">int</span> <span class="comment">//这个变量里面就只能保存地址类型这种值</span></span><br><span class="line">ip = &amp;a</span><br><span class="line"></span><br><span class="line"><span class="comment">//如果要修改指针指向的变量的值，用法也比较特殊</span></span><br><span class="line">*ip = <span class="number">30</span></span><br><span class="line">fmt.Println(a)</span><br><span class="line"><span class="comment">//如何定义指针变量 如果修改指针变量指向的内存中的值。 通过指针去取值的时候不知道应该取多大的连续内存空间</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;ip所指向的内存空间地址是：%p, 内存中的值是: %d\n&quot;</span>,ip, *ip)</span><br><span class="line">swap(&amp;a, &amp;b)</span><br><span class="line">fmt.Println(a, b)</span><br><span class="line"><span class="comment">//还不足以说服大家</span></span><br><span class="line"><span class="comment">//但是go中数组是值传递 数组中有100万个值， 对于这种一般我们都采用切片来传递</span></span><br><span class="line"><span class="comment">//在python中list和dict这种传递都是引用传递</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//指针还可以指向数组 指向数组的指针 数组是值类型</span></span><br><span class="line">arr := [<span class="number">3</span>]<span class="type">int</span>&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;</span><br><span class="line"><span class="keyword">var</span> ip *[<span class="number">3</span>]<span class="type">int</span> = &amp;arr</span><br><span class="line"><span class="comment">//指针数组</span></span><br><span class="line"><span class="keyword">var</span> ptrs [<span class="number">3</span>]*<span class="type">int</span> <span class="comment">//创建能够存放三个指针变量的数组</span></span><br><span class="line"><span class="comment">//很多时候都是函数参数的时候指明的类型</span></span><br><span class="line"><span class="comment">//指针的默认值是nil</span></span><br><span class="line"><span class="keyword">if</span> ip != <span class="literal">nil</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//像python和java这种语言都是极力的屏蔽指针， c/c++ 都提供了指针 指针本身是很强大</span></span><br><span class="line"><span class="comment">//c和c++中指针的功能很强大 指针的转换 指针的偏移 指针的运算</span></span><br><span class="line"><span class="comment">//go语言没有屏蔽指针，但是go语言在指针上做了大量的限制，安全性高很多，相比较 c和c++灵活性就降低了</span></span><br><span class="line"><span class="comment">//指针变量中涉及到两个符号 &amp; 和 *</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//make， new， nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="defer-panic-error-recover"><a href="#defer-panic-error-recover" class="headerlink" title="defer,panic,error,recover"></a>defer,panic,error,recover</h2><h3 id="defer特性"><a href="#defer特性" class="headerlink" title="defer特性"></a>defer特性</h3><pre><code>1. 关键字 defer 用于注册延迟调用。2. 这些调用直到 return 前才被执。因此，可以用来做资源清理。3. 多个defer语句，按先进后出的方式执行。4. defer语句中的变量，在defer声明时就决定了。5. defer之后只能是函数调用 不能是表达式</code></pre><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>  &#123;</span><br><span class="line"><span class="comment">//defer语句执行时的拷贝机制</span></span><br><span class="line">x := <span class="number">10</span></span><br><span class="line"><span class="comment">//此处的defer函数并没有参数，函数内部使用的值是全局的值</span></span><br><span class="line"><span class="keyword">defer</span> <span class="function"><span class="keyword">func</span> <span class="params">(a *<span class="type">int</span>)</span></span> &#123;</span><br><span class="line">fmt.Println(x)</span><br><span class="line">fmt.Println(*a)</span><br><span class="line">&#125;(&amp;x)</span><br><span class="line">    <span class="keyword">defer</span> <span class="function"><span class="keyword">func</span> <span class="params">()</span></span> &#123;</span><br><span class="line">      x++</span><br><span class="line">      fmt.Println(x)</span><br><span class="line">    &#125;()</span><br><span class="line">x++</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">12</span></span><br><span class="line"><span class="comment">12</span></span><br><span class="line"><span class="comment">12</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 比较下面俩种方式输出结果</span></span><br><span class="line">x := <span class="number">10</span></span><br><span class="line"><span class="keyword">defer</span> <span class="function"><span class="keyword">func</span> <span class="params">()</span></span> &#123;</span><br><span class="line">  x++</span><br><span class="line">  fmt.Println(x)</span><br><span class="line">&#125;()</span><br><span class="line">x++</span><br><span class="line"><span class="comment">//output: 12</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">a</span><span class="params">()</span></span> <span class="type">int</span> &#123;</span><br><span class="line">x := <span class="number">10</span></span><br><span class="line"><span class="keyword">defer</span> <span class="function"><span class="keyword">func</span> <span class="params">(a <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">  fmt.Println(x)</span><br><span class="line">  x++</span><br><span class="line">&#125;(x)</span><br><span class="line">tmp := x</span><br><span class="line"><span class="keyword">return</span> tmp</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(a())</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">output: </span></span><br><span class="line"><span class="comment">10</span></span><br><span class="line"><span class="comment">10</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="panic-和-error"><a href="#panic-和-error" class="headerlink" title="panic 和 error"></a>panic 和 error</h3><p>在go语言中，异常和错误是区分的。</p><ul><li>错误是程序中可能出现的问题，比如连接数据库失败，连接网络失败等，在程序设计中，错误处理是业务的一部分。</li><li>而异常指的是不应该出现问题的地方出现了问题，比如空指针引用，下标越界，向空 map 添加键值等，这种情况在人们的意料之外</li><li>对于真正意外的情况，那些表示不可恢复的程序错误，不可恢复才使用 panic。对于其他的错误情况，我们应该是期望使用 error 来进行判定<br>Go 提供了两种创建error的方法，分别是：<br><code>errors.New</code>  (<a href="https://pkg.go.dev/github.com/pkg/errors">https://pkg.go.dev/github.com/pkg/errors</a>)<br>如果有一个现成的 <code>error</code> ，我们需要对他进行再次包装处理，这时候有三个函数可以选择<br>&#x2F;&#x2F; 新生成一个错误, 带堆栈信息<br>func New(message string) error</li></ul><p>&#x2F;&#x2F; 只附加新的信息<br>func WithMessage(err error, message string) error</p><p>&#x2F;&#x2F; 只附加调用堆栈信息<br>func WithStack(err error) error</p><p>&#x2F;&#x2F; 同时附加堆栈和信息<br>func Wrapf(err error, format string, args …interface{}) error</p><p>如果需要对源错误类型进行自定义判断可以使用 Cause,可以获得最根本的错误原因<br>&#x2F;&#x2F; 获得最根本的错误原因<br>func Cause(err error) error</p><p><code>fmt.Errorf</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;errors&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">res1, err1 := div(<span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">fmt.Println(res1, err1)</span><br><span class="line"></span><br><span class="line">res2, err2 := div(<span class="number">1</span>, <span class="number">0</span>)</span><br><span class="line">fmt.Println(res2, err2)</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回一个error</span></span><br><span class="line">e := fmt.Errorf(<span class="string">&quot;自定义error&quot;</span>)</span><br><span class="line">fmt.Println(e)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">div</span><span class="params">(n, m <span class="type">int</span>)</span></span> (<span class="type">int</span>, <span class="type">error</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> m == <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>, errors.New(<span class="string">&quot;0不能作为分母&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> m / n, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><font color="#7030a0">一般在没有recover的情况下panic会导致程序崩溃，panic，defer和recover经常同时出现，用于异常处理。</font></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">//注册捕获panic的函数,必须先注册，若在panic之后则无效</span></span><br><span class="line"><span class="keyword">defer</span> doPanic()</span><br><span class="line">n := <span class="number">0</span></span><br><span class="line">res := <span class="number">1</span> / n</span><br><span class="line">fmt.Println(res) <span class="comment">//panic 之后的代码不会执行</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//当捕获到panic时触发此函数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">doPanic</span><span class="params">()</span></span> &#123;</span><br><span class="line">err := <span class="built_in">recover</span>()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;捕获到panic&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Goroutine"><a href="#Goroutine" class="headerlink" title="Goroutine"></a>Goroutine</h2><p>进程，线程，协程：<br><a href="https://juejin.cn/post/7147756611929374756">https://juejin.cn/post/7147756611929374756</a><br><a href="https://zhuanlan.zhihu.com/p/94018082">https://zhuanlan.zhihu.com/p/94018082</a><br><span style="background:#fdbfff">A. 进程是程序在操作系统中的一次执行过程，系统进行资源分配和调度的一个独立单位。</span><br><span style="background:#fdbfff">B. 线程是进程的一个执行实体,是CPU调度和分派的基本单位,它是比进程更小的能独立运行的基本单位。</span><br><span style="background:#fdbfff">C.一个进程可以创建和撤销多个线程;同一个进程中的多个线程之间可以并发执行。</span><br><span style="background:#fdbfff">协程：独立的栈空间，共享堆空间，调度由用户自己控制，本质上有点类似于用户级线程，这些用户级线程的调度也是自己实现的。</span><br><span style="background:#fdbfff">线程：一个线程上可以跑多个协程，协程是轻量级的线程。</span></p><p>在java&#x2F;c++中我们要实现并发编程的时候，我们通常需要自己维护一个线程池，并且需要自己去包装一个又一个的任务，同时需要自己去调度线程执行任务并维护上下文切换，这一切通常会耗费程序员大量的心智。那么能不能有一种机制，程序员只需要定义很多个任务，让系统去帮助我们把这些任务分配到CPU上实现并发执行呢？</p><p>Go语言中的goroutine就是这样一种机制，goroutine的概念类似于线程，但 goroutine是由Go的运行时（runtime）调度和管理的。Go程序会智能地将 goroutine 中的任务合理地分配给每个CPU。Go语言之所以被称为现代化的编程语言，就是因为它在语言层面已经内置了调度和上下文切换的机制。</p><p>Go语言中使用goroutine非常简单，只需要在调用函数的时候在前面加上go关键字，就可以为一个函数创建一个goroutine。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;sync&quot;</span></span><br><span class="line">)</span><br><span class="line"><span class="comment">// 当main()函数返回的时候该goroutine就结束了，所有在main()函数中启动的goroutine会一同结束</span></span><br><span class="line"><span class="keyword">var</span> wg sync.WaitGroup</span><br><span class="line"><span class="comment">//WaitGroup提供了三个很有用的函数</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Add</span></span><br><span class="line"><span class="comment">Done</span></span><br><span class="line"><span class="comment">Wait</span></span><br><span class="line"><span class="comment">Add的数量和Done的数量必须相等</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">f</span><span class="params">(n <span class="type">int</span>)</span></span>  &#123;</span><br><span class="line"><span class="keyword">defer</span> wg.Done()</span><br><span class="line">fmt.Println(n)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">wg.Add(<span class="number">5</span>)</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i&lt;<span class="number">5</span>; i++ &#123;</span><br><span class="line"><span class="keyword">go</span> f(i)</span><br><span class="line">&#125;</span><br><span class="line">wg.Wait()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>go轻松开启100万个协程</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;sync&quot;</span></span><br><span class="line">    <span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> wx sync.WaitGroup</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">for</span> i:=<span class="number">0</span>; i &lt; <span class="number">1000000</span>; i++ &#123;</span><br><span class="line">        wx.Add(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(i <span class="type">int</span>)</span></span>&#123;</span><br><span class="line">            <span class="keyword">defer</span> wx.Done()</span><br><span class="line">            <span class="keyword">for</span> &#123;</span><br><span class="line">                fmt.Println(i)</span><br><span class="line">                time.Sleep(time.Second*<span class="number">1</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;(i)</span><br><span class="line">    &#125;</span><br><span class="line">    wx.Wait()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意，主协程退出了，其他任务也会退出</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 合起来写</span></span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        i := <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> &#123;</span><br><span class="line">            i++</span><br><span class="line">            fmt.Printf(<span class="string">&quot;new goroutine: i = %d\n&quot;</span>, i)</span><br><span class="line">            time.Sleep(time.Second)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;()</span><br><span class="line">    i := <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> &#123;</span><br><span class="line">        i++</span><br><span class="line">        fmt.Printf(<span class="string">&quot;main goroutine: i = %d\n&quot;</span>, i)</span><br><span class="line">        time.Sleep(time.Second)</span><br><span class="line">        <span class="keyword">if</span> i == <span class="number">2</span> &#123;</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">main goroutine: i = 1</span></span><br><span class="line"><span class="comment">new goroutine: i = 1</span></span><br><span class="line"><span class="comment">new goroutine: i = 2</span></span><br><span class="line"><span class="comment">main goroutine: i = 2</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">解决这个问题，使用runtime包</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">runtime.Goexit()</span></span><br><span class="line"><span class="comment">调用此函数会立即使当前的goroutine的运行终止（终止协程），而其它的goroutine并不会受此影响。</span></span><br><span class="line"><span class="comment">runtime.Goexit在终止当前goroutine前会先执行此goroutine的还未执行的defer语句。请注意千万别在主函数调用runtime.Goexit，因为会引发panic。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">runtime.GOMAXPROCS()</span></span><br><span class="line"><span class="comment">用来设置可以并行计算的CPU核数最大值，并返回之前的值。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;runtime&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;  <span class="comment">//让子协程先执行</span></span><br><span class="line">        <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">5</span>; i++ &#123;</span><br><span class="line">            fmt.Println(<span class="string">&quot;go&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">2</span>; i++ &#123;</span><br><span class="line">        <span class="comment">//让出时间片，先让别的协议执行，它执行完，再回来执行此协程</span></span><br><span class="line">        runtime.Gosched()</span><br><span class="line">        fmt.Println(<span class="string">&quot;hello&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;runtime&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">defer</span> fmt.Println(<span class="string">&quot;A.defer&quot;</span>)</span><br><span class="line">        <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">            <span class="keyword">defer</span> fmt.Println(<span class="string">&quot;B.defer&quot;</span>)</span><br><span class="line">            <span class="comment">// 结束协程</span></span><br><span class="line">            runtime.Goexit()</span><br><span class="line">            <span class="keyword">defer</span> fmt.Println(<span class="string">&quot;C.defer&quot;</span>)</span><br><span class="line">            fmt.Println(<span class="string">&quot;B&quot;</span>)</span><br><span class="line">        &#125;()</span><br><span class="line">        fmt.Println(<span class="string">&quot;A&quot;</span>)</span><br><span class="line">    &#125;()</span><br><span class="line">    <span class="keyword">for</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结：<br>单从线程调度讲，Go语言相比起其他语言的优势在于OS线程是由OS内核来调度的，goroutine则是由Go运行时（runtime）自己的调度器调度的，这个调度器使用一个称为m:n调度的技术（复用&#x2F;调度m个goroutine到n个OS线程）。 其一大特点是goroutine的调度是在用户态下完成的， 不涉及内核态与用户态之间的频繁切换，包括内存的分配与释放，都是在用户态维护着一块大的内存池， 不直接调用系统的malloc函数（除非内存池需要改变），成本比调度OS线程低很多。 另一方面充分利用了多核的硬件资源，近似的把若干goroutine均分在物理线程上， 再加上本身goroutine的超轻量，以上种种保证了go调度方面的性能。</p><h3 id="Channel"><a href="#Channel" class="headerlink" title="Channel"></a>Channel</h3><p>虽然可以使用共享内存进行数据交换，但是共享内存在不同的goroutine中容易发生竞态问题。为了保证数据交换的正确性，必须使用互斥量对内存进行加锁，这种做法势必造成性能问题。</p><p>Go 语言中的通道（channel）是一种特殊的类型。通道像一个传送带或者队列，总是遵循先入先出（First In First Out）的规则，保证收发数据的顺序。每一个通道都是一个具体类型的导管，也就是声明channel的时候需要为其指定元素类型。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> 变量 <span class="keyword">chan</span> 元素类型</span><br><span class="line">声明</span><br><span class="line"><span class="keyword">var</span> msg <span class="keyword">chan</span> <span class="type">int</span></span><br><span class="line">初始化</span><br><span class="line">msg = <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>) <span class="comment">// 不带缓冲区，无缓冲的通道只有在有人接收值的时候才能发送值</span></span><br><span class="line">msg = <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>, <span class="number">16</span>) <span class="comment">// 带缓冲区</span></span><br><span class="line">将一个值发送到通道中</span><br><span class="line">ch &lt;- <span class="number">10</span> <span class="comment">// 把10发送到ch中</span></span><br><span class="line">从一个通道中接收值</span><br><span class="line">x := &lt;- ch <span class="comment">// 从ch中接收值并赋值给变量x</span></span><br><span class="line">&lt;-ch       <span class="comment">// 从ch中接收值，忽略结果</span></span><br><span class="line"><span class="built_in">close</span>函数来关闭通道</span><br><span class="line"><span class="built_in">close</span>(ch)</span><br><span class="line">v, ok := &lt;-ch <span class="comment">// 它可以用来检查Channel是否已经被关闭了</span></span><br><span class="line">单向通道</span><br><span class="line"><span class="number">1.</span><span class="keyword">chan</span>&lt;- <span class="type">int</span>是一个只能发送的通道，可以发送但是不能接收；</span><br><span class="line"><span class="number">2.</span>&lt;-<span class="keyword">chan</span> <span class="type">int</span>是一个只能接收的通道，可以接收但是不能发送。</span><br><span class="line"></span><br><span class="line">关于关闭通道需要注意的事情是，只有在通知接收方goroutine所有的数据都发送完毕的时候才需要关闭通道。通道是可以被垃圾回收机制回收的，它和关闭文件是不一样的，在结束操作之后关闭文件是必须要做的，但关闭通道不是必须的。</span><br><span class="line"></span><br><span class="line">关闭后的通道有以下特点：</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span>对一个关闭的通道再发送值就会导致<span class="built_in">panic</span>。</span><br><span class="line"><span class="number">2.</span>对一个关闭的通道进行接收会一直获取值直到通道为空。</span><br><span class="line"><span class="number">3.</span>对一个关闭的并且没有值的通道执行接收操作会得到对应类型的零值。</span><br><span class="line"><span class="number">4.</span>关闭一个已经关闭的通道会导致<span class="built_in">panic</span>。</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">recv</span><span class="params">(c <span class="keyword">chan</span> <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">    ret := &lt;-c</span><br><span class="line">    fmt.Println(<span class="string">&quot;接收成功&quot;</span>, ret)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>)</span><br><span class="line">    <span class="keyword">go</span> recv(ch) <span class="comment">// 启用goroutine从通道接收值</span></span><br><span class="line">    ch &lt;- <span class="number">10</span></span><br><span class="line">    fmt.Println(<span class="string">&quot;发送成功&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="select"><a href="#select" class="headerlink" title="select"></a>select</h3><p><code>select</code>语句选择一组可能的send操作和receive操作去处理。它类似<code>switch</code>,但是只是用来处理通讯(communication)操作。</p><p>如果有同时多个case去处理,比如同时有多个channel可以接收数据，那么Go会伪随机的选择一个case处理(pseudo-random)。如果没有case需要处理，则会选择<code>default</code>去处理，如果<code>default case</code>存在的情况下。如果没有<code>default case</code>，则<code>select</code>语句会阻塞，直到某个case需要处理。</p><p>需要注意的是，nil channel上的操作会一直被阻塞，如果没有default case,只有nil channel的select会一直被阻塞。</p><h3 id="timeout"><a href="#timeout" class="headerlink" title="timeout"></a>timeout</h3><p><code>select</code>有很重要的一个应用就是超时处理。 因为上面我们提到，如果没有case需要处理，select语句就会一直阻塞着。这时候我们可能就需要一个超时操作，用来处理超时的情况。</p><p>下面这个例子我们会在2秒后往channel c1中发送一个数据，但是<code>select</code>设置为1秒超时,因此我们会打印出<code>timeout 1</code>,而不是<code>result 1</code>。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;time&quot;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    c1 := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">string</span>, <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        time.Sleep(time.Second * <span class="number">2</span>)</span><br><span class="line">        c1 &lt;- <span class="string">&quot;result 1&quot;</span></span><br><span class="line">    &#125;()</span><br><span class="line">    <span class="keyword">select</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> res := &lt;-c1:</span><br><span class="line">        fmt.Println(res)</span><br><span class="line">    <span class="keyword">case</span> &lt;-time.After(time.Second * <span class="number">1</span>):</span><br><span class="line">        fmt.Println(<span class="string">&quot;timeout 1&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实它利用的是<code>time.After</code>方法，它返回一个类型为<code>&lt;-chan Time</code>的单向的channel，在指定的时间发送一个当前时间给返回的channel中。</p><h3 id="Timer和Ticker"><a href="#Timer和Ticker" class="headerlink" title="Timer和Ticker"></a>Timer和Ticker</h3><p>timer是一个定时器，代表未来的一个单一事件，你可以告诉timer你要等待多长时间，它提供一个Channel，在将来的那个时间那个Channel提供了一个时间值。下面的例子中第二行会阻塞2秒钟左右的时间，直到时间到了才会继续执行。</p><p>当然如果你只是想单纯的等待的话，可以使用<code>time.Sleep</code>来实现。</p><p>你还可以使用<code>timer.Stop</code>来停止计时器。</p><p><code>ticker</code>是一个定时触发的计时器，它会以一个间隔(interval)往Channel发送一个事件(当前时间)，而Channel的接收者可以以固定的时间间隔从Channel中读取事件。下面的例子中ticker每500毫秒触发一次，你可以观察输出的时间。</p><p>类似timer, ticker也可以通过<code>Stop</code>方法来停止。一旦它停止，接收者不再会从channel中接收数据了。</p>]]></content>
      
      
      <categories>
          
          <category> go语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go语言 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>日常使用的工具</title>
      <link href="/post/897196e0.html"/>
      <url>/post/897196e0.html</url>
      
        <content type="html"><![CDATA[<h1 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h1><h2 id="mycli-python"><a href="#mycli-python" class="headerlink" title="mycli(python)"></a>mycli(python)</h2><p>github:<a href="https://github.com/dbcli/mycli">https://github.com/dbcli/mycli</a></p><p>A command line client for MySQL that can do auto-completion and syntax highlighting.</p><h2 id="dbeaver-free"><a href="#dbeaver-free" class="headerlink" title="dbeaver(free)"></a>dbeaver(free)</h2><h2 id="Robo-3T-free"><a href="#Robo-3T-free" class="headerlink" title="Robo 3T(free)"></a>Robo 3T(free)</h2><h2 id="Navicat"><a href="#Navicat" class="headerlink" title="Navicat"></a>Navicat</h2><h1 id="开发-amp-文本编辑"><a href="#开发-amp-文本编辑" class="headerlink" title="开发&amp;文本编辑"></a>开发&amp;文本编辑</h1><h2 id="sublime"><a href="#sublime" class="headerlink" title="sublime"></a>sublime</h2><h2 id="vscode"><a href="#vscode" class="headerlink" title="vscode"></a>vscode</h2><h1 id="ssh-命令行工具"><a href="#ssh-命令行工具" class="headerlink" title="ssh+命令行工具"></a>ssh+命令行工具</h1><h2 id="iTerm2-zsh-oh-my-zsh-Mac-OS-tmux"><a href="#iTerm2-zsh-oh-my-zsh-Mac-OS-tmux" class="headerlink" title="iTerm2 + zsh + oh-my-zsh(Mac OS) + tmux"></a>iTerm2 + zsh + oh-my-zsh(Mac OS) + tmux</h2><h2 id="windows-windows-terminal-powershell-oh-my-push-neovim"><a href="#windows-windows-terminal-powershell-oh-my-push-neovim" class="headerlink" title="windows + windows terminal + powershell + oh-my-push + neovim"></a>windows + windows terminal + powershell + oh-my-push + neovim</h2><h2 id="Windterm-Windows-Terminal-WSL（ubuntu22）"><a href="#Windterm-Windows-Terminal-WSL（ubuntu22）" class="headerlink" title="Windterm + Windows Terminal + WSL（ubuntu22）"></a>Windterm + Windows Terminal + WSL（ubuntu22）</h2><h2 id="FInallshell"><a href="#FInallshell" class="headerlink" title="FInallshell"></a>FInallshell</h2><h2 id="https-github-com-zimfw-zimfw"><a href="#https-github-com-zimfw-zimfw" class="headerlink" title="https://github.com/zimfw/zimfw"></a><a href="https://github.com/zimfw/zimfw">https://github.com/zimfw/zimfw</a></h2><h2 id="Tabyy"><a href="#Tabyy" class="headerlink" title="Tabyy"></a>Tabyy</h2><h1 id="进程管理工具"><a href="#进程管理工具" class="headerlink" title="进程管理工具"></a>进程管理工具</h1><h2 id="PM2（nodejs）"><a href="#PM2（nodejs）" class="headerlink" title="PM2（nodejs）"></a>PM2（nodejs）</h2><h2 id="Supervisor（python）"><a href="#Supervisor（python）" class="headerlink" title="Supervisor（python）"></a>Supervisor（python）</h2><h3 id="supervisor配置以及命令"><a href="#supervisor配置以及命令" class="headerlink" title="supervisor配置以及命令"></a>supervisor配置以及命令</h3><p>一、开启命令<br>supervisor的服务器端部分启动命令：<br>sudo unlink &#x2F;var&#x2F;run&#x2F;supervisor.sock<br>supervisord -c &#x2F;etc&#x2F;supervisor&#x2F;supervisord.conf   此时默认开启了所有服务<br>二、supervisor的客户端部分命令：<br>supervisorctl status 查看进程运行状态<br>supervisorctl start 进程名 启动进程<br>supervisorctl stop 进程名 关闭进程<br>supervisorctl restart 进程名 重启进程<br>supervisorctl update 重新载入配置文件<br>supervisorctl shutdown 关闭supervisord<br>supervisorctl 进入到交互模式下。使用help查看所有命令</p><h1 id="docker管理"><a href="#docker管理" class="headerlink" title="docker管理"></a>docker管理</h1><h2 id="Lazydocker"><a href="#Lazydocker" class="headerlink" title="Lazydocker"></a>Lazydocker</h2><p><a href="https://github.com/jesseduffield/lazydocker">https://github.com/jesseduffield/lazydocker</a></p><h2 id="Poratiner"><a href="#Poratiner" class="headerlink" title="Poratiner"></a>Poratiner</h2><h1 id="日常"><a href="#日常" class="headerlink" title="日常"></a>日常</h1><h2 id="windows工具"><a href="#windows工具" class="headerlink" title="windows工具"></a>windows工具</h2><p><a href="https://www.sordum.org/">https://www.sordum.org</a></p><h2 id="随机生产useragent"><a href="#随机生产useragent" class="headerlink" title="随机生产useragent"></a>随机生产useragent</h2><p><a href="https://lemon399.gitee.io/user-agent-share-page/">https://lemon399.gitee.io/user-agent-share-page/</a></p><h2 id="电脑手机互传"><a href="#电脑手机互传" class="headerlink" title="电脑手机互传"></a>电脑手机互传</h2><p><a href="https://github.com/parvardegr/sharing">https://github.com/parvardegr/sharing</a></p><h2 id="监控-uptime-status"><a href="#监控-uptime-status" class="headerlink" title="监控-uptime-status"></a>监控-uptime-status</h2><p><a href="https://github.com/imsyy/status">https://github.com/imsyy/status</a></p><h2 id="打印wifi二维码"><a href="#打印wifi二维码" class="headerlink" title="打印wifi二维码"></a>打印wifi二维码</h2><p><a href="https://github.com/bndw/wifi-card">https://github.com/bndw/wifi-card</a></p><h2 id="局域网聊天，互传"><a href="#局域网聊天，互传" class="headerlink" title="局域网聊天，互传"></a>局域网聊天，互传</h2><p>speed_share (<a href="https://github.com/nightmare-space/speed_share">https://github.com/nightmare-space/speed_share</a>) 这是一款完全基于局域网的文件互传终端，速享不使用任何服务器，不使用您的移动流量，不收集任何用户数据，完全的点对点传输。</p><h2 id="画图工具：draw-io"><a href="#画图工具：draw-io" class="headerlink" title="画图工具：draw.io"></a>画图工具：draw.io</h2><h2 id="思维导图工具：xmind"><a href="#思维导图工具：xmind" class="headerlink" title="思维导图工具：xmind"></a>思维导图工具：xmind</h2><h2 id="代码贴图工具：carbon"><a href="#代码贴图工具：carbon" class="headerlink" title="代码贴图工具：carbon"></a>代码贴图工具：carbon</h2><h2 id="编程查询工具"><a href="#编程查询工具" class="headerlink" title="编程查询工具"></a>编程查询工具</h2><p><a href="https://github.com/chubin/cheat.sh#installation">https://github.com/chubin/cheat.sh#installation</a></p><h1 id="生活"><a href="#生活" class="headerlink" title="生活"></a>生活</h1><h2 id="学习-amp-计划-amp-管理"><a href="#学习-amp-计划-amp-管理" class="headerlink" title="学习&amp;计划&amp;管理"></a>学习&amp;计划&amp;管理</h2><h3 id="MacOS-or-Windows-OS"><a href="#MacOS-or-Windows-OS" class="headerlink" title="MacOS or Windows OS"></a>MacOS or Windows OS</h3><ul><li>碎片化收集：<a href="https://www.cubox.pro/#download">https://www.cubox.pro/#download</a></li><li>FocusTodo专注任务：<a href="https://www.focustodo.cn/">https://www.focustodo.cn/</a><ul><li>它主要是在Todo List基础上更细化的任务，是它的子集，每天具体要做的事情会时时显示在上面</li></ul></li><li>笔记&amp;日记：Obsidian，typora<ul><li>Obsidian 配合remote save + 坚果云保存到云端</li><li>Obsidian插件<ul><li>COMMUNITY PLUGINS（详细看GITHUB仓库）<ul><li>Activity History</li><li>Admonition</li><li>Advanced Tables</li><li>Annotator</li><li>Banners</li><li>Dataview</li><li>Emoji Toolbar</li><li>Hover Editor</li><li>Mind Map</li><li>Obsidian Editing Toolbar</li><li>Obsidian Memos</li><li>Omnisearch</li><li>QuickAdd</li><li>Recent Files</li><li>Remotely Save</li><li>Style Settings</li><li>Templater</li></ul></li></ul></li></ul></li><li>Calendar：不管是Windows，Mac OS 还是移动端的系统，自身都带有日历日程设置以及提醒功能。我主要用来个人提醒，日程提醒，比较容易忘记的东西，比如：每日工作打卡，某天即将发生重要的事情</li><li>Calibre-ebook（<a href="https://calibre-ebook.com/zh_HK/download%EF%BC%89">https://calibre-ebook.com/zh_HK/download）</a><ul><li>电子书管理软件</li></ul></li></ul><h3 id="Windows11-OS"><a href="#Windows11-OS" class="headerlink" title="Windows11 OS"></a>Windows11 OS</h3><ul><li>Lislie Note<ul><li><a href="http://www.leslienote.com/">http://www.leslienote.com/</a></li></ul></li><li>Files App（Microsoft Store）<ul><li>文件管理</li></ul></li><li>Windows Terminal（Microsoft Store）<ul><li>命令行终端程序</li></ul></li><li>QuickLook（Microsoft Store）<ul><li>通过敲击空格键来快速预览文件内容</li></ul></li><li>能源之星X（Microsoft Store）<ul><li>提升您设备的电池续航！能源之星X 利用 Windows 11 的 EcoQos API 来限制后台应用的资源占用，从而提高散热表现和电池续航。</li></ul></li><li>MyDockFinder（<a href="https://www.mydockfinder.com/%EF%BC%89">https://www.mydockfinder.com/）</a><ul><li>系统UI设置</li></ul></li><li>WallpaperEngine（<a href="https://www.wallpaperengine.io/en%EF%BC%89">https://www.wallpaperengine.io/en）</a><ul><li>好看的壁纸</li></ul></li><li>IDM（<a href="https://www.internetdownloadmanager.com/%EF%BC%89">https://www.internetdownloadmanager.com/）</a><ul><li>下载器</li></ul></li><li>Windows和 Ipad 效率互传<ul><li>同一局域网下，打开<a href="https://snapdrop.net/%EF%BC%8C%E7%84%B6%E5%90%8E%E7%82%B9%E5%87%BB%E9%9C%80%E8%A6%81%E4%BC%A0%E8%BE%93%E7%9A%84%E6%96%87%E4%BB%B6%E3%80%82">https://snapdrop.net/，然后点击需要传输的文件。</a></li></ul></li><li>Snipaste<ul><li>截屏软件</li></ul></li><li>Geek<ul><li>软件卸载工具</li></ul></li><li>GestureSign OR FastGestures<ul><li>触控板手势</li></ul></li><li>Volume Control for Windows（Microsoft Store）<ul><li>音量控制</li></ul></li><li>PowerShell（Microsoft Store）<ul><li>命令行工具（别用自带的）</li></ul></li><li>多台win鼠标共享<ul><li><a href="https://www.microsoft.com/en-us/download/details.aspx?id=35460">https://www.microsoft.com/en-us/download/details.aspx?id=35460</a></li></ul></li></ul><h3 id="Chrome-插件"><a href="#Chrome-插件" class="headerlink" title="Chrome 插件"></a>Chrome 插件</h3><ul><li>Bitwarden - Free Password Manager<ul><li>密码管理生成工具</li></ul></li><li>Cubox<ul><li>一个收藏工具，各个平台共享</li></ul></li><li>EditThisCookie<ul><li>网页cookie管理</li></ul></li><li>Download Plus<ul><li>网页下载管理器</li></ul></li><li>iTab New Tab</li><li>Mate Translate – translator, dictionary<ul><li>翻译器</li></ul></li><li>Tampermonkey<ul><li>在线辞典切换器 &#x2F; Online Dictionary Switcher</li><li>搜索引擎切换器 &#x2F; Search Engine Switcher</li></ul></li><li>The Great Suspender Original<ul><li>定时关闭网页，节约内存</li></ul></li><li>Vimium<ul><li>键盘操作网页</li></ul></li><li>Bookmark Manager and Viewer<ul><li>书签管理器</li></ul></li><li>Extension Manager<ul><li>插件管理器</li></ul></li><li><a href="https://github.com/iamadamdev/bypass-paywalls-chrome">https://github.com/iamadamdev/bypass-paywalls-chrome</a></li></ul><h1 id="摸鱼看看"><a href="#摸鱼看看" class="headerlink" title="摸鱼看看"></a>摸鱼看看</h1><h2 id="移动芯片性能天梯图"><a href="#移动芯片性能天梯图" class="headerlink" title="移动芯片性能天梯图"></a>移动芯片性能天梯图</h2><p><a href="https://www.socpk.com/">https://www.socpk.com/</a></p><h2 id="电池-GPU-CPU天梯图-超能网天梯图"><a href="#电池-GPU-CPU天梯图-超能网天梯图" class="headerlink" title="电池,GPU,CPU天梯图-超能网天梯图"></a>电池,GPU,CPU天梯图-超能网天梯图</h2><p><a href="https://topic.expreview.com/GPU/">https://topic.expreview.com/GPU/</a><br><a href="https://topic.expreview.com/CPU/">https://topic.expreview.com/CPU/</a></p><h2 id="盲盒搜索"><a href="#盲盒搜索" class="headerlink" title="盲盒搜索"></a>盲盒搜索</h2><p><a href="http://www.xbinweb.com/search/">http://www.xbinweb.com/search/</a></p><h2 id="macbook排行"><a href="#macbook排行" class="headerlink" title="macbook排行"></a>macbook排行</h2><p><a href="https://browser.geekbench.com/mac-benchmarks">https://browser.geekbench.com/mac-benchmarks</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 工具箱 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端开发库</title>
      <link href="/post/45a48b42.html"/>
      <url>/post/45a48b42.html</url>
      
        <content type="html"><![CDATA[<h2 id="vscode插件"><a href="#vscode插件" class="headerlink" title="vscode插件"></a>vscode插件</h2><ul><li>Open in browser：在浏览器打开文件</li><li>WSl：windows子系统连接</li><li>Vscode Nvim：vim编辑</li><li>Arkham Theme：暗黑系主题</li><li>ESLint：代码规范检测</li><li>Turbo Console Log：快速生产debug log</li><li>EasyLess Or Easysass: 自动转换styles.less –&gt; styles.css</li><li>Auto Rename Tag: 重命名标签, 只需要改开始,结束跟着自动变化</li><li>JS-CSS-HTML Formatter: 格式化代码</li><li>HTML CSS Support: 提示类名, 需要配置<ul><li>vscode的左下角找到设置 - 搜索setting - 在setting.json中编辑 - 粘贴代码  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&quot;editor.quickSuggestions&quot;: &#123;</span><br><span class="line">&quot;other&quot;: true,</span><br><span class="line">&quot;comments&quot;: true,</span><br><span class="line">&quot;strings&quot;: true</span><br><span class="line">&#125;注意: 如果代码的前后有内容加逗号</span><br></pre></td></tr></table></figure></li></ul></li><li>Live Server: 以服务器模式打开网页(不需要刷新）</li></ul><h2 id="开发桌面程序"><a href="#开发桌面程序" class="headerlink" title="开发桌面程序"></a>开发桌面程序</h2><p><a href="https://www.electronjs.org/zh/docs/latest/tutorial/installation">https://www.electronjs.org/zh/docs/latest/tutorial/installation</a>  </p><h2 id="UI组件"><a href="#UI组件" class="headerlink" title="UI组件"></a>UI组件</h2><h3 id="Element-UI"><a href="#Element-UI" class="headerlink" title="Element UI"></a>Element UI</h3><p>文档：<a href="https://links.jianshu.com/go?to=https://element.eleme.io/%23/zh-CN/component/installation">https://element.eleme.io/#/zh-CN/component/installation</a><br>vue-element-admin预览：<a href="https://links.jianshu.com/go?to=https://panjiachen.github.io/vue-element-admin/%23/login">https://panjiachen.github.io/vue-element-admin/#/login</a><br>vue-element-admin项目文档：<a href="https://links.jianshu.com/go?to=https://panjiachen.github.io/vue-element-admin-site/zh/">https://panjiachen.github.io/vue-element-admin-site/zh/</a><br>vue-element-admin项目源码：<a href="https://links.jianshu.com/go?to=https://github.com/PanJiaChen/vue-element-admin">https://github.com/PanJiaChen/vue-element-admin</a></p><h3 id="Ant-Design-Vue"><a href="#Ant-Design-Vue" class="headerlink" title="Ant Design Vue"></a>Ant Design Vue</h3><p>文档：<a href="https://links.jianshu.com/go?to=https://vue.ant.design/docs/vue/introduce-cn/">https://vue.ant.design/docs/vue/introduce-cn/</a><br>Ant Design Pro预览：<a href="https://links.jianshu.com/go?to=https://preview.pro.ant.design/dashboard/analysis">https://preview.pro.ant.design/dashboard/analysis</a><br>Ant Design Pro项目文档：<a href="https://links.jianshu.com/go?to=https://pro.ant.design/zh-CN/">https://pro.ant.design/zh-CN/</a><br>Ant Design Pro项目源码：<a href="https://links.jianshu.com/go?to=https://github.com/sendya/ant-design-pro-vue">https://github.com/sendya/ant-design-pro-vue</a></p><h2 id="UI设计"><a href="#UI设计" class="headerlink" title="UI设计"></a>UI设计</h2><p><a href="https://mastergo.com/community/">https://mastergo.com/community/</a>  </p><h2 id="前端框架"><a href="#前端框架" class="headerlink" title="前端框架"></a>前端框架</h2><p><a href="https://blog.csdn.net/qq_39826207/article/details/105886005">https://blog.csdn.net/qq_39826207/article/details/105886005</a></p><p>1.百度的： <a href="https://github.com/baidu/amis">https://github.com/baidu/amis</a><br>2.阿里的： <a href="https://www.yuque.com/lce">https://www.yuque.com/lce</a><br>3.<a href="https://github.com/iofod">https://github.com/iofod</a><br>4.<a href="https://github.com/jeecgboot/jeecg-boot">https://github.com/jeecgboot/jeecg-boot</a><br>5.<a href="http://vue.easydo.work/">http://vue.easydo.work/</a></p><h2 id="css框架"><a href="#css框架" class="headerlink" title="css框架"></a>css框架</h2><p><a href="https://www.tailwindcss.cn/">https://www.tailwindcss.cn/</a></p><p><a href="https://cn.windicss.org/guide/">https://cn.windicss.org/guide/</a></p><h2 id="全栈"><a href="#全栈" class="headerlink" title="全栈"></a>全栈</h2><p>Go + HTML Template + Vue（<a href="https://simplecss.org/demo%EF%BC%89">https://simplecss.org/demo）</a></p><p><a href="https://github.com/TeaOSLab/EdgeAdmin">https://github.com/TeaOSLab/EdgeAdmin</a></p><p><a href="https://mp.weixin.qq.com/s/MuwyfbT5eg0QfRpqF18eJg">https://mp.weixin.qq.com/s/MuwyfbT5eg0QfRpqF18eJg</a></p><p><a href="https://htmx.org/examples/">https://htmx.org/examples/</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线程和进程</title>
      <link href="/post/b3a6abb4.html"/>
      <url>/post/b3a6abb4.html</url>
      
        <content type="html"><![CDATA[<h2 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h2><p>1.进程：可以理解为：你运行一个python程序，最终“进程已结束，退出代码 0”，<br>就是该python程序所有的内容执行完毕。<br>2.主线程：应用程序运行即为主线程（从程序第一行到最后一行执行完毕，<br>中间遇到子线程的start,子线程去执行它的函数，主线程继续往下执行其他语句）<br>3.用户线程（子线程）：在主线程中可以创建和启动新线程，默认为用户线程（子线程）<br>4.daemon线程：守护线程，设置子线程为守护线程时，主线程一旦执行结束，则全部线程全部被终止执行，可能出现的情况就是，子线程的任务还没有完全执行结束，就被迫停止。t.daemon 属性，设置为True，则为daemon线程，必须在start()之前调用<br>5.join：所有的子线程都执行完成再结束主线程，此时需要用到join()</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyThreadDaemon</span>(threading.Thread):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, n</span>):</span><br><span class="line">        threading.Thread.__init__(self)</span><br><span class="line">        self.n = n</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">demo</span>(<span class="params">self</span>):</span><br><span class="line">        t = threading.current_thread()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;线程<span class="subst">&#123;t.name&#125;</span> -- <span class="subst">&#123;t&#125;</span> 开始&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">            time.sleep(self.n)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&#x27;daemon线程<span class="subst">&#123;t.name&#125;</span> -- <span class="subst">&#123;t&#125;</span> 正在运行&#x27;</span>)</span><br><span class="line">        <span class="comment"># 执行不到哦 主线程结束后进程不等待守护线程完成，立即结束</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;daemon线程<span class="subst">&#123;t.name&#125;</span> -- <span class="subst">&#123;t&#125;</span> 结束&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):</span><br><span class="line">        self.demo()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mytest</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;主线程开始 <span class="subst">&#123;threading.current_thread()&#125;</span>&#x27;</span>)</span><br><span class="line">    t = MyThreadDaemon(<span class="number">1</span>)  <span class="comment"># 创建子线程</span></span><br><span class="line">    t.name = <span class="string">&#x27;daemon&#x27;</span></span><br><span class="line">    t.daemon = <span class="literal">True</span>  <span class="comment"># 设置为守护线程</span></span><br><span class="line">    t.start()</span><br><span class="line">    time.sleep(<span class="number">2</span>)  <span class="comment"># 延时2秒，print(&#x27;主线程结束&#x27;)主线程语句延迟2秒执行即主线程延迟2秒结束，期间守护线程‘正在运行’</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;主线程结束 <span class="subst">&#123;threading.current_thread()&#125;</span>&#x27;</span>)  <span class="comment"># 此语句执行完毕后主线程结束，守护线程立即停止</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fun</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;线程 <span class="subst">&#123;threading.current_thread()&#125;</span> 正在运行&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;start fun&quot;</span>)</span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;end fun&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mytest2</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;main thread <span class="subst">&#123;threading.current_thread()&#125;</span>&quot;</span>)</span><br><span class="line">    t1 = threading.Thread(target=fun, args=())</span><br><span class="line">    t1.setDaemon(<span class="literal">False</span>)</span><br><span class="line">    t1.start()</span><br><span class="line">    t1.join()</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;main thread end <span class="subst">&#123;threading.current_thread()&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mytest3</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;main thread is <span class="subst">&#123;threading.current_thread()&#125;</span>&quot;</span>)</span><br><span class="line">    event = threading.Event()</span><br><span class="line">    thread = threading.Thread(target=f, args=(event,))</span><br><span class="line">    thread.start()</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">            time.sleep(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">except</span> KeyboardInterrupt:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Ctrl+C pressed...&quot;</span>)</span><br><span class="line">        event.<span class="built_in">set</span>()  <span class="comment"># notify the child thread to exit</span></span><br><span class="line">        sys.exit(<span class="number">1</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;main thread end&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">event</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;son thread is <span class="subst">&#123;threading.current_thread()&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span> event.is_set():</span><br><span class="line">        time.sleep(<span class="number">2</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="number">1</span>)  <span class="comment"># do the actual work</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    mytest3()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> signal</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">run_proc</span>(<span class="params">name</span>):</span><br><span class="line">    pid = os.getpid()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;子进程开始 <span class="subst">&#123;name&#125;</span>--<span class="subst">&#123;pid&#125;</span>...&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;pid&#125;</span>的主线程开始 <span class="subst">&#123;threading.current_thread()&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    time.sleep(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;子进程结束 <span class="subst">&#123;name&#125;</span>--<span class="subst">&#123;pid&#125;</span>...&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;pid&#125;</span>的主线程结束 <span class="subst">&#123;threading.current_thread()&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">term</span>(<span class="params">sig_num, addtion</span>):</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;current pid is %s, group id is %s&#x27;</span> % (os.getpid(), os.getpgrp()))</span><br><span class="line"></span><br><span class="line">    os.kill(os.getpid(), signal.SIGKILL)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    main_pid = os.getpid()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;主进程开始: <span class="subst">&#123;Process.name&#125;</span> -- <span class="subst">&#123;main_pid&#125;</span>&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;main_pid&#125;</span>的线程开始 <span class="subst">&#123;threading.current_thread()&#125;</span>&quot;</span>)</span><br><span class="line">    p = Process(target=run_proc, args=(<span class="string">&#x27;test&#x27;</span>,))</span><br><span class="line">    p.start()</span><br><span class="line">    p.join()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;main_pid&#125;</span>的线程结束 <span class="subst">&#123;threading.current_thread()&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;主进程结束: <span class="subst">&#123;Process.name&#125;</span> -- <span class="subst">&#123;main_pid&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h2 id="Windows11工具"><a href="#Windows11工具" class="headerlink" title="Windows11工具"></a>Windows11工具</h2><p><a href="https://learn.microsoft.com/en-us/sysinternals/downloads/pslist">https://learn.microsoft.com/en-us/sysinternals/downloads/pslist</a><br>pslist -dmx <pid></pid></p><h2 id="变量共享"><a href="#变量共享" class="headerlink" title="变量共享"></a>变量共享</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">a = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">a</span>):</span><br><span class="line">    a += <span class="number">100</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;add a is <span class="subst">&#123;a&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">calculator</span>(<span class="params">name</span>):</span><br><span class="line">    <span class="comment"># 创建的一个新的进程</span></span><br><span class="line">    <span class="keyword">global</span> a</span><br><span class="line">    a += <span class="number">1</span></span><br><span class="line">    <span class="comment"># 结果 a = 2</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;calculator a is <span class="subst">&#123;a&#125;</span>&quot;</span>)</span><br><span class="line">    t1 = threading.Thread(target=add, args=(a, ))</span><br><span class="line">    t1.start()</span><br><span class="line">    a += <span class="number">1</span></span><br><span class="line">    <span class="comment"># 结果 a = 3</span></span><br><span class="line">    t2 = threading.Thread(target=add, args=(a, ))</span><br><span class="line">    t2.start()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="comment"># simple_cal()</span></span><br><span class="line">    p = Process(target=calculator, args=(<span class="string">&#x27;test&#x27;</span>,))</span><br><span class="line">    p.start()</span><br><span class="line">    p.join()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">simple_cal</span>():</span><br><span class="line">    <span class="keyword">global</span> a</span><br><span class="line">    a += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;main a is <span class="subst">&#123;a&#125;</span>&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">a = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>():</span><br><span class="line">    <span class="keyword">global</span> a</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">        a += <span class="number">1</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;add a is <span class="subst">&#123;a&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">calculator</span>(<span class="params">name</span>):</span><br><span class="line">    <span class="comment"># 创建的一个新的进程</span></span><br><span class="line">    <span class="comment"># 结果 a = 2</span></span><br><span class="line"></span><br><span class="line">    t1 = threading.Thread(target=add)</span><br><span class="line">    t1.start()</span><br><span class="line">    t1.join()</span><br><span class="line">    <span class="comment"># 结果 a = 3</span></span><br><span class="line">    t2 = threading.Thread(target=add)</span><br><span class="line">    t2.start()</span><br><span class="line">    t2.join()</span><br><span class="line">    p = Process(target=add)</span><br><span class="line">    p.start()</span><br><span class="line">    p.join()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="comment"># simple_cal()</span></span><br><span class="line">    p = Process(target=calculator, args=(<span class="string">&#x27;test&#x27;</span>,))</span><br><span class="line">    p.start()</span><br><span class="line">    p.join()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">simple_cal</span>():</span><br><span class="line">    <span class="keyword">global</span> a</span><br><span class="line">    a += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;main a is <span class="subst">&#123;a&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>IDA手册</title>
      <link href="/post/bbdeeae3.html"/>
      <url>/post/bbdeeae3.html</url>
      
        <content type="html"><![CDATA[<h2 id="IDA使用说明"><a href="#IDA使用说明" class="headerlink" title="IDA使用说明"></a>IDA使用说明</h2><h3 id="1-常用快捷键"><a href="#1-常用快捷键" class="headerlink" title="1.常用快捷键"></a>1.常用快捷键</h3><p>IDA中的快捷键都是和菜单栏的各个功能选项一一对应的，基本上你只要能在菜单栏上找到某个功能，也就能看到相应的快捷键，这里记录几个常用的：</p><p>a：将数据转换为字符串</p><p>f5：一键反汇编</p><p>esc：回退键，能够倒回上一部操作的视图（只有在反汇编窗口才是这个作用，如果是在其他窗口按下esc，会关闭该窗口）</p><p>shift+f12：可以打开string窗口，一键找出所有的字符串，右击setup，还能对窗口的属性进行设置</p><p>ctrl+w：保存ida数据库</p><p>ctrl+s：选择某个数据段，直接进行跳转</p><p>ctrl+鼠标滚轮：能够调节流程视图的大小</p><p>x：对着某个函数、变量按该快捷键，可以查看它的交叉引用</p><p>g：直接跳转到某个地址</p><p>n：更改变量的名称</p><p>y：更改变量的类型</p><p>&#x2F; ：在反编译后伪代码的界面中写下注释</p><p>\：在反编译后伪代码的界面中隐藏&#x2F;显示变量和函数的类型描述，有时候变量特别多的时候隐藏掉类型描述看起来会轻松很多</p><p>；：在反汇编后的界面中写下注释</p><p>ctrl+shift+w：拍摄IDA快照</p><p>u：undefine，取消定义函数、代码、数据的定义</p><h3 id="2-IDA动态调试："><a href="#2-IDA动态调试：" class="headerlink" title="2.IDA动态调试："></a>2.IDA动态调试：</h3><p><strong>IDA动态调试有俩种:</strong></p><p>​<strong>2.1.一种是直接动态调试app应用</strong></p><p>​1.首先把ida目录中的dbgsrv文件夹中的android_server文件push 到手机中</p><p>​adb push &lt;文件&gt;  &#x2F;data&#x2F;local&#x2F;tmp</p><p>​2.adb shell , cd &#x2F;data&#x2F;local&#x2F;tmp</p><p>​3.chmod 777 &lt;文件&gt;</p><p>​4. 运行.&#x2F;&lt;文件名&gt;</p><p>​5.adb forward tcp:23946 tcp:23946</p><p>​6.打开IDA选择Go</p><p>​7.点击Debugger 中的Attach，有俩个选择①Remote ARM(一般真机调试)②Remote Linux(一般模拟器调式)</p><p>​8.输入信息Hostname:127.0.0.1,点击ok</p><p>​9.点击ok之后会弹出Choose process to attach to的界面，然后选择需要调试的进程。可能报错，原因没有打开app。</p><p>​缺点，可能运行的时候，so已经加载，无法断点调试。</p><p>​<strong>2.2.二是以DEBUG的方式调式运行的类</strong></p><p>​前面操作和上面1-5步骤一样</p><p>​1.adb  shell  am start -D -n 包名&#x2F;.类名（入口主mainactivity）</p><p>​2.需要的话打开DDMS,查看app进程，或者adb shell 命令ps -ef | grep 应用包名，为了第六步。</p><p>​3.重新打开IDA,点击Debugger 中的Attach，有俩个选择①Remote ARM(一般真机调试)②Remote Linux(一般模拟器调式)，选择Debug options,选择三项，然后输入信息Hostname:127.0.0.1,点击ok</p><p>​4.选择需要调式的进程，进入调式界面，注意这里还需要设置一次Debug options的三项</p><p>​5.按F9开始运行，app应用还会处于debug调式</p><p>​6.使用jdb命名让app开始恢复运行:</p><p>​jdb  -connect  com.sun.jdi.SocketAttach:hostname&#x3D;127.0.0.1,port&#x3D;&lt;端口&gt;</p><p>​7.F9开始运行，让他加载响应的so库文件</p><p>​8.打开debuuger中的module_list进入需要调式的so,下断点</p><h3 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a>注意事项：</h3><p>​如果app 的AndroidManifest.xml如果没有debug权限，需要手动修改，重新打包签名安装。</p><p>查看flags里面时候允许debug选项,adb shell dumpsys package 包名，搜索flags，或者查看 cat &#x2F;default.prop，查看debuggable&#x3D;1(1，是允许设备中所有应用可以调试，0则检测AndroidManifest.xml中是否android:debuggabel&#x3D;true)，因此修改&#x2F;default.prop是最方便的。具体修改方法参见工具mprop：.&#x2F;mprop ro.debuggable 1（它的原理是注入init进程修改它的值）</p><hr><p>下面介绍一些常用的快捷键</p><p><code>F7</code> 单步步入，遇到函数，将进入函数代码内部<br><code>F8</code> 单步步过，执行下一条指令，不进入函数代码内部<br><code>F4</code> 运行到光标处（断点处）<br><code>F9</code> 继续运行<br><code>CTRL+F2</code> 终止一个正在运行的调试进程<br><code>CTRL+F7</code> 运行至返回,直到遇到RETN（或断点）时才停止.</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>zookeeper</title>
      <link href="/post/3ad834c9.html"/>
      <url>/post/3ad834c9.html</url>
      
        <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>Zookeeper是一个开源的分布式的，为分布式应用提供协调服务的Apache项目。</p><p>工作机制：</p><p>是一个基于观察者模式设计的分布式服务管理框架，它负责存储和管理大家都关心的数据，然后接收观察者的注册，一旦这些数据状态发生变化，Zookeeper就将负责通知已经在Zookeeper上的那些观察者做出相应的反应。</p><p><img src="/../images/zookeeper/zookeeper%E5%B7%A5%E4%BD%9C%E6%9C%BA%E5%88%B6.png"></p><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><p><img src="/../images/zookeeper/zookeeper%E7%89%B9%E7%82%B9.png"></p><h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><p><img src="/../images/zookeeper/zookeeper%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84.png"></p><p>每个节点既能存数据也能有子节点</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>消息队列kafka</title>
      <link href="/post/2e2628ab.html"/>
      <url>/post/2e2628ab.html</url>
      
        <content type="html"><![CDATA[<h1 id="认识KafKa"><a href="#认识KafKa" class="headerlink" title="认识KafKa"></a>认识KafKa</h1><h2 id="1-什么是KafKa："><a href="#1-什么是KafKa：" class="headerlink" title="1.什么是KafKa："></a>1.什么是KafKa：</h2><p>kafka是一种高吞吐量的分布式发布订阅消息<strong>消息队列</strong>，有如下特性：</p><ul><li>通过O(1)的磁盘数据结构提供消息的持久化，这种结构对于即使数以TB的消息存储也能够保持长时间的稳定性能。</li><li>高吞吐量：即使是非常普通的硬件kafka也可以支持每秒数十万的消息。</li><li>支持通过kafka服务器和消费机集群来分区消息。</li><li>支持Hadoop并行数据加载。</li></ul><p>Kafka的目的是提供一个发布订阅解决方案，它可以处理消费者规模的网站中的所有动作流数据。 这种动作（网页浏览，搜索和其他用户的行动）是在现代网络上的许多社会功能的一个关键因素。 这些数据通常是由于吞吐量的要求而通过处理日志和日志聚合来解决。 对于像Hadoop的一样的日志数据和离线分析系统，但又要求实时处理的限制，这是一个可行的解决方案。kafka的目的是通过Hadoop的并行加载机制来统一线上和离线的消息处理，也是为了通过集群机来提供实时的消费。</p><p>在Kafka有几个比较重要的概念：</p><ul><li><p>broker</p><p>用于标识每一个Kafka服务，当然同一台服务器上可以开多个broker,只要他们的broker id不相同即可</p></li><li><p>Topic</p><p>消息主题，从逻辑上区分不同的消息类型</p></li><li><p>Partition</p><p>用于存放消息的队列，存放的消息都是有序的，同一主题可以分多个partition，如分多个partiton时，同样会以如partition1存放1,3,5消息,partition2存放2,4,6消息。</p></li><li><p>Produce</p><p>消息生产者，生产消息，可指定向哪个topic，topic哪个分区中生成消息。</p></li><li><p>Consumer</p><p>消息消费者，消费消息，同一消息只能被同一个consumer group中的consumer所消费。consumer是通过offset进行标识消息被消费的位置。当然consumer的个数取决于此topic所划分的partition，如同一group中的consumer个数大于partition的个数，多出的consumer将不会处理消息。</p></li></ul><p><a href="https://github.com/confluentinc/confluent-kafka-python">https://github.com/confluentinc/confluent-kafka-python</a></p><p>使用文档：<a href="https://docs.confluent.io/current/clients/confluent-kafka-python/index.html">https://docs.confluent.io/current/clients/confluent-kafka-python/index.html</a></p><p><strong>Producer</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> confluent_kafka <span class="keyword">import</span> Producer</span><br><span class="line"></span><br><span class="line"><span class="comment"># bootstrap.servers 对应的服务器地址，可以有多个mybroker</span></span><br><span class="line">p = Producer(&#123;<span class="string">&#x27;bootstrap.servers&#x27;</span>: <span class="string">&#x27;mybroker1,mybroker2&#x27;</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delivery_report</span>(<span class="params">err, msg</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot; Called once for each message produced to indicate delivery result.</span></span><br><span class="line"><span class="string">        Triggered by poll() or flush(). &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> err <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Message delivery failed: &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(err))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Message delivered to &#123;&#125; [&#123;&#125;]&#x27;</span>.<span class="built_in">format</span>(msg.topic(), msg.partition()))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> data <span class="keyword">in</span> some_data_source:</span><br><span class="line">    <span class="comment"># Trigger any available delivery report callbacks from previous produce() calls</span></span><br><span class="line">    p.poll(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Asynchronously produce a message, the delivery report callback</span></span><br><span class="line">    <span class="comment"># will be triggered from poll() above, or flush() below, when the message has</span></span><br><span class="line">    <span class="comment"># been successfully delivered or failed permanently.</span></span><br><span class="line">    p.produce(<span class="string">&#x27;mytopic&#x27;</span>, data.encode(<span class="string">&#x27;utf-8&#x27;</span>), callback=delivery_report)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Wait for any outstanding messages to be delivered and delivery report</span></span><br><span class="line"><span class="comment"># callbacks to be triggered.</span></span><br><span class="line">p.flush()</span><br></pre></td></tr></table></figure><p><strong>High-level Consumer</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> confluent_kafka <span class="keyword">import</span> Consumer, KafkaError</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">c = Consumer(&#123;</span><br><span class="line">    <span class="string">&#x27;bootstrap.servers&#x27;</span>: <span class="string">&#x27;mybroker&#x27;</span>, <span class="comment"># Producer中对应的bootstrap.servers 对应的服务器地址</span></span><br><span class="line">    <span class="string">&#x27;group.id&#x27;</span>: <span class="string">&#x27;mygroup&#x27;</span>, </span><br><span class="line">    <span class="string">&#x27;auto.offset.reset&#x27;</span>: <span class="string">&#x27;earliest&#x27;</span> <span class="comment"># topic的一些配置</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">c.subscribe([<span class="string">&#x27;mytopic&#x27;</span>]) <span class="comment"># 指定消费的topic，与生产时的topic一致</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    msg = c.poll(<span class="number">1.0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> msg <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">if</span> msg.error():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Consumer error: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(msg.error()))</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Received message: &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(msg.value().decode(<span class="string">&#x27;utf-8&#x27;</span>)))</span><br><span class="line"></span><br><span class="line">c.close()</span><br></pre></td></tr></table></figure><h2 id="2-kafka特征："><a href="#2-kafka特征：" class="headerlink" title="2.kafka特征："></a>2.kafka特征：</h2><h3 id="1-在设置一个分区的时候，生产和消费的顺序是一致的，因为只有一个分区。而设置多个分区时，消费获取分区时候是无序的，因此导致生产和消费之间顺序不一致。分区之间是无序的，分区内的消息是有序的。"><a href="#1-在设置一个分区的时候，生产和消费的顺序是一致的，因为只有一个分区。而设置多个分区时，消费获取分区时候是无序的，因此导致生产和消费之间顺序不一致。分区之间是无序的，分区内的消息是有序的。" class="headerlink" title="1.在设置一个分区的时候，生产和消费的顺序是一致的，因为只有一个分区。而设置多个分区时，消费获取分区时候是无序的，因此导致生产和消费之间顺序不一致。分区之间是无序的，分区内的消息是有序的。"></a>1.在设置一个分区的时候，生产和消费的顺序是一致的，因为只有一个分区。而设置多个分区时，消费获取分区时候是无序的，因此导致生产和消费之间顺序不一致。<strong>分区之间是无序的，分区内的消息是有序的。</strong></h3><h3 id="2-为了解决多个分区导致的生产与消费之间的顺序不一致，我们需要向指定的分区生产以及消费，代码如下："><a href="#2-为了解决多个分区导致的生产与消费之间的顺序不一致，我们需要向指定的分区生产以及消费，代码如下：" class="headerlink" title="2.为了解决多个分区导致的生产与消费之间的顺序不一致，我们需要向指定的分区生产以及消费，代码如下："></a>2.为了解决多个分区导致的生产与消费之间的顺序不一致，我们需要向指定的分区生产以及消费，代码如下：</h3><p><strong>Producer</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> confluent_kafka <span class="keyword">import</span> Producer</span><br><span class="line"></span><br><span class="line"><span class="comment"># bootstrap.servers 对应的服务器地址，可以有多个mybroker</span></span><br><span class="line">p = Producer(&#123;<span class="string">&#x27;bootstrap.servers&#x27;</span>: <span class="string">&#x27;mybroker1,mybroker2&#x27;</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delivery_report</span>(<span class="params">err, msg</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot; Called once for each message produced to indicate delivery result.</span></span><br><span class="line"><span class="string">        Triggered by poll() or flush(). &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> err <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Message delivery failed: &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(err))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Message delivered to &#123;&#125; [&#123;&#125;]&#x27;</span>.<span class="built_in">format</span>(msg.topic(), msg.partition()))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> data <span class="keyword">in</span> some_data_source:</span><br><span class="line">    <span class="comment"># Trigger any available delivery report callbacks from previous produce() calls</span></span><br><span class="line">    p.poll(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Asynchronously produce a message, the delivery report callback</span></span><br><span class="line">    <span class="comment"># will be triggered from poll() above, or flush() below, when the message has</span></span><br><span class="line">    <span class="comment"># been successfully delivered or failed permanently.</span></span><br><span class="line">    <span class="comment"># 修改此处设定partition= n, n代表几个分区</span></span><br><span class="line">    p.produce(<span class="string">&#x27;mytopic&#x27;</span>, data.encode(<span class="string">&#x27;utf-8&#x27;</span>), partition=<span class="number">3</span>, callback=delivery_report)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Wait for any outstanding messages to be delivered and delivery report</span></span><br><span class="line"><span class="comment"># callbacks to be triggered.</span></span><br><span class="line">p.flush()</span><br></pre></td></tr></table></figure><p><strong>High-level Consumer</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> confluent_kafka <span class="keyword">import</span> Consumer, KafkaError</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">c = Consumer(&#123;</span><br><span class="line">    <span class="string">&#x27;bootstrap.servers&#x27;</span>: <span class="string">&#x27;mybroker&#x27;</span>, <span class="comment"># Producer中对应的bootstrap.servers 对应的服务器地址</span></span><br><span class="line">    <span class="string">&#x27;group.id&#x27;</span>: <span class="string">&#x27;mygroup&#x27;</span>, </span><br><span class="line">    <span class="string">&#x27;auto.offset.reset&#x27;</span>: <span class="string">&#x27;earliest&#x27;</span> <span class="comment"># topic的一些配置</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">#c.subscribe([&#x27;mytopic&#x27;]) # 指定消费的topic，与生产时的topic一致</span></span><br><span class="line"><span class="comment"># 此处修改，需要消费的分区</span></span><br><span class="line">tp = TopicPartition(<span class="string">&quot;mytopic&quot;</span>, <span class="number">0</span>, <span class="number">0</span>) <span class="comment"># 第一个0是分区，第二个0是auto.offset.reset，不能为负数</span></span><br><span class="line">c.assign([tp])</span><br><span class="line">c.seek(tp)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    msg = c.poll(<span class="number">1.0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> msg <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">if</span> msg.error():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Consumer error: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(msg.error()))</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Received message: &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(msg.value().decode(<span class="string">&#x27;utf-8&#x27;</span>)))</span><br><span class="line"></span><br><span class="line">c.close()</span><br></pre></td></tr></table></figure><h3 id="3-在订阅消费模式下（c-subscribe-‘mytopic’-），kafka保证每条消息在同一个Consumer-Group中只会被某一个Consumer消费，就是同一个组下面的Consumer，A消费了，B就不会消费。"><a href="#3-在订阅消费模式下（c-subscribe-‘mytopic’-），kafka保证每条消息在同一个Consumer-Group中只会被某一个Consumer消费，就是同一个组下面的Consumer，A消费了，B就不会消费。" class="headerlink" title="3.在订阅消费模式下（c.subscribe([‘mytopic’])），kafka保证每条消息在同一个Consumer Group中只会被某一个Consumer消费，就是同一个组下面的Consumer，A消费了，B就不会消费。"></a>3.在订阅消费模式下（c.subscribe([‘mytopic’])），kafka保证每条消息在同一个Consumer Group中只会被某一个Consumer消费，就是同一个组下面的Consumer，A消费了，B就不会消费。</h3><h3 id="4-一个消费者可以同时消费多个topic"><a href="#4-一个消费者可以同时消费多个topic" class="headerlink" title="4.一个消费者可以同时消费多个topic"></a>4.一个消费者可以同时消费多个topic</h3><h3 id="5-消费者的数量应不多于该topic分区的数量，否则多余的消费者必定无法收到消息"><a href="#5-消费者的数量应不多于该topic分区的数量，否则多余的消费者必定无法收到消息" class="headerlink" title="5.消费者的数量应不多于该topic分区的数量，否则多余的消费者必定无法收到消息"></a>5.消费者的数量应不多于该topic分区的数量，否则多余的消费者必定无法收到消息</h3><h3 id="6-多个消费者，消费同一个分区，消费到的数据由生产的发往那个分区决定的"><a href="#6-多个消费者，消费同一个分区，消费到的数据由生产的发往那个分区决定的" class="headerlink" title="6.多个消费者，消费同一个分区，消费到的数据由生产的发往那个分区决定的"></a>6.多个消费者，消费同一个分区，消费到的数据由生产的发往那个分区决定的</h3><h1 id="kafka原理"><a href="#kafka原理" class="headerlink" title="kafka原理"></a>kafka原理</h1><h2 id="基础架构"><a href="#基础架构" class="headerlink" title="基础架构"></a>基础架构</h2><p><img src="/../images/kafka/kafka.png"></p><ol><li>Producer <strong>：</strong>消息生产者，就是向kafka broker发消息的客户端；</li><li>Consumer <strong>：</strong>消息消费者，向kafka broker取消息的客户端；</li><li>Consumer Group（CG）：<strong>消费者组，由多个consumer组成。</strong>消费者组内每个消费者负责消费不同分区的数据，一个分区只能由一个消费者消费；消费者组之间互不影响。<strong>所有的消费者都属于某个消费者组，即</strong>消费者组是逻辑上的一个订阅者**。</li><li>Broker ：一台kafka服务器就是一个broker。一个集群由多个broker组成。一个broker可以容纳多个topic。</li><li>Topic ：可以理解为一个队列，生产者和消费者面向的都是一个<strong>topic</strong>；</li><li>Partition：为了实现扩展性，一个非常大的topic可以分布到多个broker（即服务器）上，一个topic可以分为多个partition，每个partition是一个有序的队列；</li><li>Replica：<strong>副本，为保证集群中的某个节点发生故障时，该节点上的partition数据不丢失，且kafka仍然能够继续工作，kafka提供了副本机制，一个topic的每个分区都有若干个副本，一个</strong>leader<strong>和若干个</strong>follower。</li><li>leader：每个分区多个副本的“主”，生产者发送数据的对象，以及消费者消费数据的对象都是leader。</li><li>follower：每个分区多个副本中的“从”，实时从leader中同步数据，保持和leader数据的同步。leader发生故障时，某个follower会成为新的follower。</li></ol><h2 id="kafka工作流程及文件存储机制"><a href="#kafka工作流程及文件存储机制" class="headerlink" title="kafka工作流程及文件存储机制"></a>kafka工作流程及文件存储机制</h2><p><img src="/../images/kafka/kafka%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B.png"></p><p>Kafka中消息是以<strong>topic</strong>进行分类的，生产者生产消息，消费者消费消息，都是面向topic的。</p><p>topic是逻辑上的概念，而partition是物理上的概念，每个partition对应于一个log文件，该log文件中存储的就是producer生产的数据。Producer生产的数据会被不断追加到该log文件末端，且每条数据都有自己的offset。消费者组中的每个消费者，都会实时记录自己消费到了哪个offset，以便出错恢复时，从上次的位置继续消费。</p><h3 id="文件储存机制"><a href="#文件储存机制" class="headerlink" title="文件储存机制"></a>文件储存机制</h3><p><img src="/../images/kafka/kafka%E6%96%87%E4%BB%B6%E5%82%A8%E5%AD%98%E6%9C%BA%E5%88%B6.png"></p><p>由于生产者生产的消息会不断追加到log文件末尾，为防止log文件过大导致数据定位效率低下，Kafka采取了<strong>分片</strong>和<strong>索引</strong>机制，将每个partition分为多个segment。每个segment对应两个文件——“.index”文件和“.log”文件。这些文件位于一个文件夹下，该文件夹的命名规则为：topic名称+分区序号。例如，first这个topic有三个分区，则其对应的文件夹为first-0,first-1,first-2。</p><p><img src="/../images/kafka/index%E6%96%87%E4%BB%B6%E5%92%8Clog%E6%96%87%E4%BB%B6.png"></p><p>“.index”文件存储大量的索引信息，“.log”文件存储大量的数据，索引文件中的元数据指向对应数据文件中message的物理偏移地址。比如1-237</p><h2 id="分区策略"><a href="#分区策略" class="headerlink" title="分区策略"></a>分区策略</h2><h4 id="生产者Producer"><a href="#生产者Producer" class="headerlink" title="生产者Producer"></a>生产者Producer</h4><p>producer发送的数据封装成一个<strong>ProducerRecord</strong>对象。</p><p>（1）指明 partition 的情况下，直接将指明的值直接作为 partiton 值；</p><p>（2）没有指明 partition 值但有 key 的情况下，将 key 的 hash 值与 topic 的 partition 数进行取余得到 partition 值；</p><p>（3）既没有 partition 值又没有 key 值的情况下，第一次调用时随机生成一个整数（后面每次调用在这个整数上自增），将这个值与 topic 可用的 partition 总数取余得到 partition 值，也就是常说的 round-robin 算法。</p><h4 id="消费者consumer"><a href="#消费者consumer" class="headerlink" title="消费者consumer"></a>消费者consumer</h4><p>一个consumer group中有多个consumer，一个 topic有多个partition，所以必然会涉及到partition的分配问题，即确定那个partition由哪个consumer来消费。</p><p>Kafka有两种分配策略，一是roundrobin（默认的），一是range。</p><h2 id="数据可靠性保证"><a href="#数据可靠性保证" class="headerlink" title="数据可靠性保证"></a>数据可靠性保证</h2><p><img src="/../images/kafka/%E5%8F%91%E9%80%81%E6%B6%88%E6%81%AF.png"></p><p><strong>副本数据同步策略</strong></p><table><thead><tr><th><strong>方案</strong></th><th><strong>优点</strong></th><th><strong>缺点</strong></th></tr></thead><tbody><tr><td><strong>半数以上完成同步，就发送ack</strong></td><td>延迟低</td><td>选举新的leader时，容忍n台节点的故障，需要2n+1个副本</td></tr><tr><td><strong>全部完成同步，才发送ack</strong></td><td>选举新的leader时，容忍n台节点的故障，需要n+1个副本</td><td>延迟高</td></tr></tbody></table><p>Kafka选择了第二种方案，原因如下：</p><p>1.同样为了容忍n台节点的故障，第一种方案需要2n+1个副本，而第二种方案只需要n+1个副本，而Kafka的每个分区都有大量的数据，第一种方案会造成大量数据的冗余。</p><p>2.虽然第二种方案的网络延迟会比较高，但网络延迟对Kafka的影响较小。</p><h3 id="投票的机制："><a href="#投票的机制：" class="headerlink" title="投票的机制："></a>投票的机制：</h3><p>比如说3台机器，推选一个leader，每个人手里都有一票，可以投自己，发现一个人只要半数以上的票就已经可以成为leader</p><h3 id="ISR"><a href="#ISR" class="headerlink" title="ISR"></a>ISR</h3><p>​    采用第二种方案之后，设想以下情景：leader收到数据，所有follower都开始同步数据，但有一个follower，因为某种故障，迟迟不能与leader进行同步，那leader就要一直等下去，直到它完成同步，才能发送ack。这个问题怎么解决呢？</p><p>​    Leader维护了一个动态的in-sync replica set (ISR)，意为和leader保持同步的follower集合。当ISR中的follower完成数据的同步之后，leader就会给follower发送ack。如果follower长时间未向leader同步数据，则该follower将被踢出ISR，该时间阈值由<strong>replica.lag.time.max.ms</strong>参数设定。Leader发生故障之后，就会从ISR中选举新的leader。</p><h3 id="ack应答机制"><a href="#ack应答机制" class="headerlink" title="ack应答机制"></a>ack应答机制</h3><p>对于某些不太重要的数据，对数据的可靠性要求不是很高，能够容忍数据的少量丢失，所以没必要等ISR中的follower全部接收成功。</p><p>所以Kafka为用户提供了三种可靠性级别，用户根据对可靠性和延迟的要求进行权衡，选择以下的配置。</p><p><strong>acks</strong>参数配置：</p><p><strong>acks</strong>：</p><p>0：producer不等待broker的ack，这一操作提供了一个最低的延迟，broker一接收到还没有写入磁盘就已经返回，当broker故障时有可能<strong>丢失数据</strong>；</p><p>1：producer等待broker的ack，partition的leader落盘成功后返回ack，如果在follower同步成功之前leader故障，那么将会<strong>丢失数据</strong></p><p>-1（all）：producer等待broker的ack，partition的leader和follower全部落盘成功后才返回ack。但是如果在follower同步完成后，broker发送ack之前，leader发生故障，那么会</p><h2 id="自动提交offset"><a href="#自动提交offset" class="headerlink" title="自动提交offset"></a>自动提交offset</h2><p>为了使我们能够专注于自己的业务逻辑，Kafka提供了自动提交offset的功能。 </p><p>自动提交offset的相关参数：</p><p><strong>enable.auto.commit</strong>：是否开启自动提交offset功能</p><p><strong>auto.commit.interval.ms</strong>：自动提交offset的时间间隔</p><h2 id="producer发送消息过程"><a href="#producer发送消息过程" class="headerlink" title="producer发送消息过程"></a>producer发送消息过程</h2><p><img src="/../images/kafka/producer%E5%8F%91%E9%80%81%E6%B6%88%E6%81%AF.png" alt="producer发送消息"></p><p>Kafka的Producer发送消息采用的是<strong>异步发送</strong>的方式。在消息发送的过程中，涉及到了两个线程——main线程和Sender线程，以及一个线程共享变量——RecordAccumulator。main线程将消息发送给RecordAccumulator，Sender线程不断从RecordAccumulator中拉取消息发送到Kafka broker。</p><h2 id="拦截器原理"><a href="#拦截器原理" class="headerlink" title="拦截器原理"></a>拦截器原理</h2><p>Producer拦截器(interceptor)是在Kafka 0.10版本被引入的，主要用于实现clients端的定制化控制逻辑。</p><p>对于producer而言，interceptor使得用户在消息发送前以及producer回调逻辑前有机会对消息做一些定制化需求，比如修改消息等。同时，producer允许用户指定多个interceptor按序作用于同一条消息从而形成一个拦截链(interceptor chain)。Intercetpor的实现接口是org.apache.kafka.clients.producer.ProducerInterceptor，其定义的方法包括：</p><p>（1）configure(configs)</p><p>获取配置信息和初始化数据时调用。</p><p>（2）onSend(ProducerRecord)：</p><p>该方法封装进KafkaProducer.send方法中，即它运行在用户主线程中。Producer确保在消息被序列化以及计算分区前调用该方法。用户可以在该方法中对消息做任何操作，但最好保证不要修改消息所属的topic和分区，否则会影响目标分区的计算。</p><p>（3）onAcknowledgement(RecordMetadata, Exception)：</p><p>该方法会在消息从RecordAccumulator成功发送到Kafka Broker之后，或者在发送过程中失败时调用。并且通常都是在producer回调逻辑触发之前。onAcknowledgement运行在producer的IO线程中，因此不要在该方法中放入很重的逻辑，否则会拖慢producer的消息发送效率。</p><p>（4）close：</p><p>关闭interceptor，主要用于执行一些资源清理工作</p><p>如前所述，interceptor可能被运行在多个线程中，因此在具体实现时用户需要自行确保线程安全。另外倘若指定了多个interceptor，则producer将按照指定顺序调用它们，并仅仅是捕获每个interceptor可能抛出的异常记录到错误日志中而非在向上传递。这在使用过程中要特别留意。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>mysql进阶</title>
      <link href="/post/20311105.html"/>
      <url>/post/20311105.html</url>
      
        <content type="html"><![CDATA[<h1 id="mysql进阶"><a href="#mysql进阶" class="headerlink" title="mysql进阶"></a>mysql进阶</h1><p>参考：小林coding，mysql实战45讲，mysql技术内幕，Google Search</p><h2 id="mysql基本架构图"><a href="#mysql基本架构图" class="headerlink" title="mysql基本架构图"></a>mysql基本架构图</h2><p><img src="https://static001.geekbang.org/resource/image/0d/d9/0d2070e8f84c4801adbfa03bda1f98d9.png" alt="img"><br><img src="/../images/mysql/sql%E4%BA%A4%E4%BA%92.png" alt="mysql架构"><br>Server 层负责建立连接、分析和执行 SQL。MySQL 大多数的核心功能模块都在这实现，主要包括连接器，查询缓存、解析器、预处理器、优化器、执行器等。另外，所有的内置函数（如日期、时间、数学和加密函数等）和所有跨存储引擎的功能（如存储过程、触发器、视图等。）都在 Server 层实现。</p><p>存储引擎层负责数据的存储和提取。支持 InnoDB、MyISAM、Memory 等多个存储引擎，不同的存储引擎共用一个 Server 层。现在最常用的存储引擎是 InnoDB，从 MySQL 5.5 版本开始， InnoDB 成为了 MySQL 的默认存储引擎。我们常说的索引数据结构，就是由存储引擎层实现的，不同的存储引擎支持的索引类型也不相同，比如 InnoDB 支持索引类型是 B+树 ，且是默认使用，也就是说在数据表中创建的主键索引和二级索引默认使用的是 B+ 树索引。</p><h2 id="mysql的连接问题"><a href="#mysql的连接问题" class="headerlink" title="mysql的连接问题"></a>mysql的连接问题</h2><p><strong>MySQL是基于TCP协议进行传输的</strong></p><p><code>show processlist;</code>查看 MySQL 服务被多少个客户端连接了</p><p>mysql的最大连接时间：<br><code>show variables like &#39;max_connections&#39;;</code><br>MySQL 定义了空闲连接的最大空闲时长，由 wait_timeout 参数控制的，默认值是 8 小时（28880秒），如果空闲连接超过了这个时间，连接器就会自动将它断开。</p><p>MySQL的最大连接数:<br><code>show variables like &#39;max_connections&#39;;</code></p><h2 id="查询缓存"><a href="#查询缓存" class="headerlink" title="查询缓存"></a>查询缓存</h2><p>查询缓存的失效非常频繁，只要有对一个表的更新，这个表上所有的查询缓存都会被清空。<br>MySQL 8.0 去除查询缓存功能的文章：<a href="https://mysqlserverteam.com/mysql-8-0-retiring-support-for-the-query-cache/">https://mysqlserverteam.com/mysql-8-0-retiring-support-for-the-query-cache/</a></p><h2 id="解析器"><a href="#解析器" class="headerlink" title="解析器"></a>解析器</h2><p>解析器会做如下两件事情。</p><p>第一件事情，词法分析。MySQL 会根据你输入的字符串识别出关键字出来，构建出 SQL 语法树，这样方便后面模块获取 SQL 类型、表名、字段名、 where 条件等等。</p><p>第二件事情，语法分析。根据词法分析的结果，语法解析器会根据语法规则，判断你输入的这个 SQL 语句是否满足 MySQL 语法。</p><h2 id="执行阶段"><a href="#执行阶段" class="headerlink" title="执行阶段"></a>执行阶段</h2><p>每条SELECT 查询语句流程主要可以分为下面这三个阶段：</p><ul><li>prepare 阶段，也就是预处理阶段；<ul><li>检查 SQL 查询语句中的表或者字段是否存在；</li><li>将 select * 中的 * 符号，扩展为表上的所有列；</li></ul></li><li>optimize 阶段，也就是优化阶段；<ul><li>优化器主要负责将 SQL 查询语句的执行方案确定下来，比如在表里面有多个索引的时候，优化器会基于查询成本的考虑，来决定选择使用哪个索引。</li></ul></li><li>execute 阶段，也就是执行阶段；</li></ul><h2 id="InnoDB表空间文件"><a href="#InnoDB表空间文件" class="headerlink" title="InnoDB表空间文件"></a>InnoDB表空间文件</h2><p><img src="/../images/mysql/%E8%A1%A8%E7%A9%BA%E9%97%B4%E7%BB%93%E6%9E%84.webp"></p><h3 id="1、行（row）"><a href="#1、行（row）" class="headerlink" title="1、行（row）"></a>1、行（row）</h3><p>数据库表中的记录都是按行（row）进行存放的，每行记录根据不同的行格式，有不同的存储结构。</p><h3 id="2、页（page）"><a href="#2、页（page）" class="headerlink" title="2、页（page）"></a>2、页（page）</h3><p>记录是按照行来存储的，但是数据库的读取并不以「行」为单位，否则一次读取（也就是一次 I&#x2F;O 操作）只能处理一行数据，效率会非常低。</p><p>因此，InnoDB 的数据是按「页」为单位来读写的，也就是说，当需要读一条记录的时候，并不是将这个行记录从磁盘读出来，而是以页为单位，将其整体读入内存。</p><p>默认每个页的大小为 16KB，也就是最多能保证 16KB 的连续存储空间。</p><p>页是 InnoDB 存储引擎磁盘管理的最小单元，意味着数据库每次读写都是以 16KB 为单位的，一次最少从磁盘中读取 16K 的内容到内存中，一次最少把内存中的 16K 内容刷新到磁盘中。</p><p>页的类型有很多，常见的有数据页、undo 日志页、溢出页等等。数据表中的行记录是用「数据页」来管理的，数据页的结构这里我就不讲细说了，之前文章有说过，感兴趣的可以去看这篇文章：换一个角度看 B+ 树(opens new window)</p><p>总之知道表中的记录存储在「数据页」里面就行。</p><h3 id="3、区（extent）"><a href="#3、区（extent）" class="headerlink" title="3、区（extent）"></a>3、区（extent）</h3><p>我们知道 InnoDB 存储引擎是用 B+ 树来组织数据的。</p><p>B+ 树中每一层都是通过双向链表连接起来的，如果是以页为单位来分配存储空间，那么链表中相邻的两个页之间的物理位置并不是连续的，可能离得非常远，那么磁盘查询时就会有大量的随机I&#x2F;O，随机 I&#x2F;O 是非常慢的。</p><p>解决这个问题也很简单，就是让链表中相邻的页的物理位置也相邻，这样就可以使用顺序 I&#x2F;O 了，那么在范围查询（扫描叶子节点）的时候性能就会很高。</p><p>那具体怎么解决呢？</p><p>在表中数据量大的时候，为某个索引分配空间的时候就不再按照页为单位分配了，而是按照区（extent）为单位分配。每个区的大小为 1MB，对于 16KB 的页来说，连续的 64 个页会被划为一个区，这样就使得链表中相邻的页的物理位置也相邻，就能使用顺序 I&#x2F;O 了。</p><h3 id="4、段（segment）"><a href="#4、段（segment）" class="headerlink" title="4、段（segment）"></a>4、段（segment）</h3><p>表空间是由各个段（segment）组成的，段是由多个区（extent）组成的。段一般分为数据段、索引段和回滚段等。</p><p>索引段：存放 B + 树的非叶子节点的区的集合；<br>数据段：存放 B + 树的叶子节点的区的集合；<br>回滚段：存放的是回滚数据的区的集合；</p><h3 id="varchar数据存储"><a href="#varchar数据存储" class="headerlink" title="varchar数据存储"></a>varchar数据存储</h3><p>MySQL 规定除了 TEXT、BLOBs 这种大对象类型之外，其他所有的列（不包括隐藏列和记录头信息）占用的字节长度加起来不能超过 65535 个字节（一行记录除了 TEXT、BLOBs 类型的列，限制最大为 65535 字节，注意是一行的总长度，不是一列。）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mysql-8.0.31 &gt; CREATE TABLE <span class="built_in">test</span> (</span><br><span class="line">    -&gt; `name` VARCHAR(65535)  NULL</span><br><span class="line">    -&gt; ) ENGINE = InnoDB DEFAULT CHARACTER SET = ascii ROW_FORMAT = COMPACT;</span><br><span class="line">ERROR 1118 (42000): Row size too large. The maximum row size <span class="keyword">for</span> the used table <span class="built_in">type</span>, not counting BLOBs, is 65535. This includes storage overhead, check the manual. You have to change some columns to TEXT or BLOBs</span><br></pre></td></tr></table></figure><p>从报错信息就可以知道一行数据的最大字节数是 65535（不包含 TEXT、BLOBs 这种大对象类型），其中包含了 storage overhead。</p><p>问题来了，这个 storage overhead 是什么呢？其实就是「变长字段长度列表」和 「NULL 值列表」，也就是说一行数据的最大字节数 65535，其实是包含「变长字段长度列表」和 「NULL 值列表」所占用的字节数的。所以， 我们在算 varchar(n) 中 n 最大值时，需要减去 storage overhead 占用的字节数。<br><code>「变长字段长度列表」所占用的字节数 = 所有「变长字段长度」占用的字节数之和。</code></p><p>若变长字段的长度小于255字节，就用1字节表示；若大于255字节，用2字节表示，最大不会不超过2字节，因为MySQL中VARCHAR类型的最大字节长度限制为65535。</p><p>这是因为我们存储字段类型为 varchar(n) 的数据时，其实分成了三个部分来存储：</p><ul><li>真实数据</li><li>真实数据占用的字节数</li><li>NULL 标识，如果不允许为NULL，这部分不需要，如果字段是允许为 NULL 的，会用 1 字节来表示「NULL 值列表」。</li></ul><p><strong>如果有多个字段的话，要保证所有字段的长度 + 变长字段字节数列表所占用的字节数 + NULL值列表所占用的字节数 &lt;&#x3D; 65535。</strong></p><h3 id="innoDB的行格式"><a href="#innoDB的行格式" class="headerlink" title="innoDB的行格式"></a>innoDB的行格式</h3><p>InnoDB 表的默认行格式由参数 innodb_default_row_format 定义，默认值为 DYNAMIC。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysql-8.0.31 &gt; show variables like <span class="string">&#x27;innodb_default_row_format&#x27;</span>;</span><br><span class="line">+---------------------------+---------+</span><br><span class="line">| Variable_name             | Value   |</span><br><span class="line">+---------------------------+---------+</span><br><span class="line">| innodb_default_row_format | dynamic |</span><br><span class="line">+---------------------------+---------+</span><br></pre></td></tr></table></figure><p>InnoDB 提供了 4 种行格式，分别是 Redundant、Compact、Dynamic和 Compressed 行格式。</p><p>Redundant 是很古老的行格式了， MySQL 5.0 版本之前用的行格式，现在基本没人用了。<br>由于 Redundant 不是一种紧凑的行格式，所以 MySQL 5.0 之后引入了 Compact 行记录存储方式，Compact 是一种紧凑的行格式，设计的初衷就是为了让一个数据页中可以存放更多的行记录，从 MySQL 5.1 版本之后，行格式默认设置成 Compact。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 假如有三个字段 id,name,age其中name是变长类型（Varchar）</span></span><br><span class="line">|<span class="built_in">id</span>|name|age|</span><br><span class="line">|1|wang|18|</span><br><span class="line">|2|li|20|</span><br><span class="line"></span><br><span class="line">磁盘里的存储为：</span><br><span class="line">0x04 null值列表 数据头 1 wang 18 0x02 null值列表 数据头 2 li 20</span><br></pre></td></tr></table></figure><p>Dynamic 和 Compressed 两个都是紧凑的行格式，它们的行格式都和 Compact 差不多，因为都是基于 Compact 改进一点东西。从 MySQL5.7 版本之后，默认使用 Dynamic 行格式。<br><img src="/../images/mysql/compact%E6%A0%BC%E5%BC%8F.png"><br>记录真实数据部分除了我们定义的字段，还有三个隐藏字段，分别为：row_id、trx_id、roll_pointer，我们来看下这三个字段是什么。</p><p><strong>row_id</strong><br>如果我们建表的时候指定了主键或者唯一约束列，那么就没有 row_id 隐藏字段了。如果既没有指定主键，又没有唯一约束，那么 InnoDB 就会为记录添加 row_id 隐藏字段。row_id不是必需的，占用 6 个字节。</p><p><strong>trx_id</strong><br>事务id，表示这个数据是由哪个事务生成的。 trx_id是必需的，占用 6 个字节。</p><p><strong>roll_pointer</strong><br>这条记录上一个版本的指针。roll_pointer 是必需的，占用 7 个字节。</p><h4 id="文件查看"><a href="#文件查看" class="headerlink" title="文件查看"></a>文件查看</h4><p><code>SHOW VARIABLES LIKE &#39;datadir&#39;;</code><br>我们每创建一个 database（数据库） 都会在 &#x2F;var&#x2F;lib&#x2F;mysql&#x2F; 目录里面创建一个以 database 为名的目录，然后保存表结构和表数据的文件都会存放在这个目录里。<br>文件类别：</p><ul><li>db.opt，用来存储当前数据库的默认字符集和字符校验规则。</li><li>xx.frm ，表结构会保存在这个文件。在 MySQL 中建立一张表都会生成一个.frm 文件，该文件是用来保存每个表的元数据信息的，主要包含表结构定义。</li><li>xx.ibd，表数据会保存在这个文件。表数据既可以存在共享表空间文件（文件名：ibdata1）里，也可以存放在独占表空间文件（文件名：表名字.ibd）。这个行为是由参数 innodb_file_per_table 控制的，若设置了参数 innodb_file_per_table 为 1，则会将存储的数据、索引等信息单独存储在一个独占表空间，从 MySQL 5.6.6 版本开始，它的默认值就是 1 了，因此从这个版本之后， MySQL 中每一张表的数据都存放在一个独立的 .ibd 文件。<br><img src="/../images/mysql/InnoDB%E7%9A%84compact.png"></li></ul><h2 id="mysql的日志系统"><a href="#mysql的日志系统" class="headerlink" title="mysql的日志系统"></a>mysql的日志系统</h2><h3 id="redo-log（引擎层：重做日志）"><a href="#redo-log（引擎层：重做日志）" class="headerlink" title="redo log（引擎层：重做日志）"></a>redo log（引擎层：重做日志）</h3><p>InnoDB 的 redo log 是固定大小的，比如可以配置为一组 4 个文件，每个文件的大小是 1GB，总共就可以记录 4GB 的操作。从头开始写，写到末尾就又回到开头循环写。如果写满了则要擦除最开始记录的数据。</p><p>redo log 是 InnoDB引擎所特有的，所以我们如果再使用InnoDB引擎创建表时，如果数据库发生异常重启，之前提交的记录都不会丢失。 InnoDB正因为有了 redo log(重做日志)，才有了 crash-safe 的能力（即使mysql服务宕机，也不会丢失数据的能力）</p><p>写redo log的方式是顺序IO。更新操作是随机IO，随机IO相比顺序IO有一个寻址的过程，所以顺序写盘更快</p><p>关于：<strong>WAL（Write-Ahead Logging）</strong></p><h3 id="binlog（server层：归档日志）"><a href="#binlog（server层：归档日志）" class="headerlink" title="binlog（server层：归档日志）"></a>binlog（server层：归档日志）</h3><h3 id="俩种日志的区别"><a href="#俩种日志的区别" class="headerlink" title="俩种日志的区别"></a>俩种日志的区别</h3><ul><li>redo log 是 InnoDB 引擎特有的；binlog 是 MySQL 的 Server 层实现的，所有引擎都可以使用。</li><li>redo log 是物理日志，记录的是“在某个数据页上做了什么修改”；binlog 是逻辑日志，记录的是这个语句的原始逻辑，比如“给 ID&#x3D;2 这一行的 c 字段加 1 ”。</li><li>redo log 是循环写的，空间固定会用完；binlog 是可以追加写入的。“追加写”是指 binlog 文件写到一定大小后会切换到下一个，并不会覆盖以前的日志。</li></ul><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><p><code>mysql&gt; update T set c=c+1 where ID=2;</code></p><p><img src="https://static001.geekbang.org/resource/image/2e/be/2e5bff4910ec189fe1ee6e2ecc7b4bbe.png" alt="img"></p><p>最后commit阶段redo log会写入binlog的文件名和位置信息来保证binlog和redo log的一致性。</p><p>binlog 只记录逻辑操作，并无操作状态，即无法确定该操作是否完成。redo log是有状态的，所以没办法直接检查binlog。只有在redo log状态为prepare时，才会去检查binlog是否存在，否则只校验redo log是否是 commit就可以啦。 怎么检查binlog: 一个完整事物binlog结尾有固定的格式.</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">通过实例演示如何利用binlog恢复数据：</span><br><span class="line">    </span><br><span class="line">    a.首先，看下当前binlog位置</span><br><span class="line">        mysql&gt; show master status;</span><br><span class="line">        +------------------+----------+--------------+------------------+-------------------+</span><br><span class="line">        | File             | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set |</span><br><span class="line">        +------------------+----------+--------------+------------------+-------------------+</span><br><span class="line">        | mysql-bin.000008 |     1847 |              |                  |                   |</span><br><span class="line">        +------------------+----------+--------------+------------------+-------------------+</span><br><span class="line">    b.向表tb_person中插入两条记录：</span><br><span class="line">        insert into tb_person  set name=&quot;person_1&quot;, address=&quot;beijing&quot;, sex=&quot;man&quot;, other=&quot;test-1&quot;;</span><br><span class="line">        insert into tb_person  set name=&quot;person_2&quot;, address=&quot;beijing&quot;, sex=&quot;man&quot;, other=&quot;test-2&quot;;</span><br><span class="line">    c.记录当前binlog位置：</span><br><span class="line">        mysql&gt; show master status;</span><br><span class="line">        +------------------+----------+--------------+------------------+-------------------+</span><br><span class="line">        | File             | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set |</span><br><span class="line">        +------------------+----------+--------------+------------------+-------------------+</span><br><span class="line">        | mysql-bin.000008 |     2585 |              |                  |                   |</span><br><span class="line">        +------------------+----------+--------------+------------------+-------------------+</span><br><span class="line">    d.查询数据 </span><br><span class="line">        mysql&gt; select *  from tb_person where name =&quot;person_2&quot; or name=&quot;person_1&quot;;</span><br><span class="line">        +----+----------+---------+-----+--------+</span><br><span class="line">        | id | name     | address | sex | other  |</span><br><span class="line">        +----+----------+---------+-----+--------+</span><br><span class="line">        |  6 | person_1 | beijing | man | test-1 |</span><br><span class="line">        |  7 | person_2 | beijing | man | test-2 |</span><br><span class="line">        +----+----------+---------+-----+--------+</span><br><span class="line">    e.删除一条: delete from tb_person where name =&quot;person_2&quot;;</span><br><span class="line">        mysql&gt; select *  from tb_person where name =&quot;person_2&quot; or name=&quot;person_1&quot;;</span><br><span class="line">        +----+----------+---------+-----+--------+</span><br><span class="line">        | id | name     | address | sex | other  |</span><br><span class="line">        +----+----------+---------+-----+--------+</span><br><span class="line">        |  6 | person_1 | beijing | man | test-1 |</span><br><span class="line">        +----+----------+---------+-----+--------+</span><br><span class="line">    f. binlog恢复（指定pos点恢复/部分恢复）</span><br><span class="line">        mysqlbinlog   --start-position=1847  --stop-position=2585  mysql-bin.000008  &gt; test.sql</span><br><span class="line">        mysql&gt; source /var/lib/mysql/3306/test.sql</span><br><span class="line">    d.数据恢复完成 </span><br><span class="line">        mysql&gt; select *  from tb_person where name =&quot;person_2&quot; or name=&quot;person_1&quot;;</span><br><span class="line">        +----+----------+---------+-----+--------+</span><br><span class="line">        | id | name     | address | sex | other  |</span><br><span class="line">        +----+----------+---------+-----+--------+</span><br><span class="line">        |  6 | person_1 | beijing | man | test-1 |</span><br><span class="line">        |  7 | person_2 | beijing | man | test-2 |</span><br><span class="line">        +----+----------+---------+-----+--------+</span><br><span class="line">    e.总结</span><br><span class="line">        恢复，就是让mysql将保存在binlog日志中指定段落区间的sql语句逐个重新执行一次而已</span><br></pre></td></tr></table></figure><h2 id="什么是MVCC"><a href="#什么是MVCC" class="headerlink" title="什么是MVCC"></a>什么是MVCC</h2><blockquote><p>MVCC，全称Multi-Version Concurrency Control，即多版本并发控制。MVCC是一种并发控制的方法，一般在数据库管理系统中，实现对数据库的并发访问，在编程语言中实现事务内存</p></blockquote><p>多版本并发控制（MVCC） 是通过保存数据在某个时间点的快照来实现并发控制的。也就是说，不管事务执行多长时间，事务内部看到的数据是不受其它事务影响的，根据事务开始的时间不同，每个事务对同一张表，同一时刻看到的数据可能是不一样的。</p><p>简单来说，多版本并发控制 的思想就是保存数据的历史版本，通过对数据行的多个版本管理来实现数据库的并发控制。这样我们就可以通过比较版本号决定数据是否显示出来，读取数据的时候不需要加锁也可以保证事务的隔离效果。</p><h3 id="快照读与当前读"><a href="#快照读与当前读" class="headerlink" title="快照读与当前读"></a>快照读与当前读</h3><ul><li>当前读像select lock in share mode(共享锁), select for update ; update, insert ,delete(排他锁)这些操作都是一种当前读，为什么叫当前读？就是它读取的是记录的最新版本，读取时还要保证其他并发事务不能修改当前记录，会对读取的记录进行加锁</li><li>像不加锁的select操作就是快照读，即不加锁的非阻塞读；快照读的前提是隔离级别不是串行级别，串行级别下的快照读会退化成当前读；之所以出现快照读的情况，是基于提高并发性能的考虑，快照读的实现是基于多版本并发控制，即MVCC,可以认为MVCC是行锁的一个变种，但它在很多情况下，避免了加锁操作，降低了开销；既然是基于多版本，即快照读可能读到的并不一定是数据的最新版本，而有可能是之前的历史版本</li></ul><h2 id="事物"><a href="#事物" class="headerlink" title="事物"></a>事物</h2><h3 id="事物的特性"><a href="#事物的特性" class="headerlink" title="事物的特性"></a>事物的特性</h3><ul><li>A (Atomicity) 原子性：整个事务中的所有操作，要么全部完成，要么全部不完成，不可能停滞在中间某个环节。事务在执行过程中发生错误，会被回滚（Rollback）到事务开始前的状态，就像这个事务从来没有执行过一样</li><li>C (Consistency) 一致性：在事务开始之前和事务结束以后，数据库的完整性约束没有被破坏<ul><li>原子性和一致性的的侧重点不同：<strong>原子性关注状态，要么全部成功，要么全部失败，不存在部分成功的状态。</strong>而<strong>一致性关注数据的可见性，中间状态的数据对外部不可见，只有最初状态和最终状态的数据对外可见</strong></li></ul></li><li>I(Isolation)隔离性：一个事务的执行不能被其它事务干扰。即一个事务内部的操作及使用的数据对其它并发事务是隔离的，并发执行的各个事务之间不能互相干扰。举个例子，张三给李四转账100元。事务要做的是从张三账户上减掉100元，李四账户上加上100元。一致性的含义是其他事务要么看到张三还没有给李四转账的状态，要么张三已经成功转账给李四的状态，而对于张三少了100元，李四还没加上100元这个中间状态是不可见的。<ul><li>转账过程中可能存在的状态：<ol><li><strong>张三未扣减、李四未收到</strong></li><li>张三已扣减、李四未收到（中间状态）</li><li><strong>张三已扣减，李四已收到</strong></li></ol></li><li>数据库事务的隔离级别有4种，由低到高分别为<ul><li><code>READ-UNCOMMITTED</code>(读未提交)：最低的隔离级别，允许读取尚未提交的数据变更，可能会导致脏读、幻读或不可重复读。</li><li><code>READ-COMMITTED</code>(读已提交)：允许读取并发事务已经提交的数据，可以阻止脏读，但是幻读或不可重复读仍有可能发生。</li><li><code>REPEATABLE-READ</code>(可重复读)：对同一字段的多次读取结果都是一致的，除非数据是被本身事务自己所修改，可以阻止脏读和不可重复读，但幻读仍有可能发生。</li><li><code>SERIALIZABLE</code>(可串行化)：最高的隔离级别，完全服从ACID的隔离级别。所有的事务依次逐个执行，这样事务之间就完全不可能产生干扰，也就是说，该级别可以防止脏读、不可重复读以及幻读。</li></ul></li></ul></li><li>D (Durability) 持久性：在事务完成以后，该事务所对数据库所作的更改便持久的保存在数据库之中，并不会被回滚</li></ul><h3 id="事物之隔离"><a href="#事物之隔离" class="headerlink" title="事物之隔离"></a>事物之隔离</h3><p><strong>脏读：</strong></p><p>一个事务正在访问数据，并且对数据进行了修改，而这种修改还没有提交到<em>数据库</em>中，这时，另外一个事务也访问这个数据，然后使用了这个数据。</p><p>事例：老板要给程序员发工资，程序员的工资是3.6万&#x2F;月。但是发工资时老板不小心按错了数字，按成3.9万&#x2F;月，该钱已经打到程序员的户口，但是事务还没有提交，就在这时，程序员去查看自己这个月的工资，发现比往常多了3千元，以为涨工资了非常高兴。但是老板及时发现了不对，马上回滚差点就提交了的事务，将数字改成3.6万再提交。</p><p>分析：实际程序员这个月的工资还是3.6万，但是程序员看到的是3.9万。他看到的是老板还没提交事务时的数据。这就是<strong>脏读</strong>。</p><p>那怎么解决脏读呢？Read committed！读提交，能解决脏读问题。</p><p><strong>不可重复读：</strong></p><p>在一个事务内，多次读同一个数据。在这个事务还没有结束时，另一个事务也访问该同一数据并修改数据。那么，在第一个事务的两次读数据之间。由于另一个事务的修改，那么第一个事务两次读到的数据可能不一样，这样就发生了在一个事务内两次读到的数据是不一样的，因此称为不可重复读，即原始读取不可重复。</p><p>事例：程序员拿着信用卡去享受生活（卡里当然是只有3.6万），当他买单时（程序员事务开启），收费系统事先检测到他的卡里有3.6万，就在这个时候！！程序员的妻子要把钱全部转出充当家用，并提交。当收费系统准备扣款时，再检测卡里的金额，发现已经没钱了（第二次检测金额当然要等待妻子转出金额事务提交完）。程序员就会很郁闷，明明卡里是有钱的…</p><p>分析：这就是读提交，若有事务对数据进行更新（UPDATE）操作时，读操作事务要等待这个更新操作事务提交后才能读取数据，可以解决脏读问题。但在这个事例中，出现了一个事务范围内两个相同的查询却返回了不同数据，这就是<strong>不可重复读</strong>。</p><p>那怎么解决可能的不可重复读问题？Repeatable read ！</p><p><strong>幻读：</strong></p><p>当某个事务在读取某个范围的记录的时候，另外一个事务又在该范围插入了新的记录，当前事务再次读取这个范围的记录</p><p>程序员某一天去消费，花了2千元，然后他的妻子去查看他今天的消费记录（全表扫描FTS，妻子事务开启），看到确实是花了2千元，就在这个时候，程序员花了1万买了一部电脑，即新增INSERT了一条消费记录，并提交。当妻子打印程序员的消费记录清单时（妻子事务提交），发现花了1.2万元，似乎出现了幻觉，这就是<strong>幻读</strong></p><p>那怎么解决幻读问题？Serializable！</p><p>数据库事务的隔离级别有4种，由低到高分别为</p><ul><li><code>READ-UNCOMMITTED</code>(读未提交)：最低的隔离级别，允许读取尚未提交的数据变更，可能会导致脏读、幻读或不可重复读。</li><li><code>READ-COMMITTED</code>(读已提交)：允许读取并发事务已经提交的数据，可以阻止脏读，但是幻读或不可重复读仍有可能发生。</li><li><code>REPEATABLE-READ</code>(可重复读)：对同一字段的多次读取结果都是一致的，除非数据是被本身事务自己所修改，可以阻止脏读和不可重复读，但幻读仍有可能发生。</li><li><code>SERIALIZABLE</code>(可串行化)：最高的隔离级别，完全服从ACID的隔离级别。所有的事务依次逐个执行，这样事务之间就完全不可能产生干扰，也就是说，该级别可以防止脏读、不可重复读以及幻读。</li></ul><p>MySQL InnoDB 存储引擎的默认支持的隔离级别是 REPEATABLE-READ（可重读）。我们可以通过<code>SELECT @@tx_isolation</code>;命令来查看，MySQL 8.0 该命令改为<code>SELECT @@transaction_isolation</code>;</p><p>InnoDB 引擎通过什么技术来保证事务的这四个特性的呢？</p><ul><li>持久性是通过 redo log （重做日志）来保证的；</li><li>原子性是通过 undo log（回滚日志） 来保证的；</li><li>隔离性是通过 MVCC（多版本并发控制） 或锁机制来保证的；</li><li>一致性则是通过持久性+原子性+隔离性来保证；<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> #开启事务</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">begin</span>;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"> </span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+------+-----+</span></span><br><span class="line"><span class="operator">|</span> Id <span class="operator">|</span> Name <span class="operator">|</span> Age <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+------+-----+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> 李华 <span class="operator">|</span>  <span class="number">23</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">2</span> <span class="operator">|</span> 李强 <span class="operator">|</span>  <span class="number">22</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">3</span> <span class="operator">|</span> 刘明 <span class="operator">|</span>  <span class="number">26</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">4</span> <span class="operator">|</span> 杰克 <span class="operator">|</span>  <span class="number">21</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+------+-----+</span></span><br><span class="line"><span class="number">4</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.06</span> sec)</span><br><span class="line"> </span><br><span class="line">mysql<span class="operator">&gt;</span> #插入操作</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">insert</span> <span class="keyword">into</span> student <span class="keyword">values</span>(<span class="number">5</span>,<span class="string">&#x27;Jimmy&#x27;</span>,<span class="number">20</span>);</span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"> </span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------+-----+</span></span><br><span class="line"><span class="operator">|</span> Id <span class="operator">|</span> Name  <span class="operator">|</span> Age <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------+-----+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> 李华  <span class="operator">|</span>  <span class="number">23</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">2</span> <span class="operator">|</span> 李强  <span class="operator">|</span>  <span class="number">22</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">3</span> <span class="operator">|</span> 刘明  <span class="operator">|</span>  <span class="number">26</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">4</span> <span class="operator">|</span> 杰克  <span class="operator">|</span>  <span class="number">21</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">5</span> <span class="operator">|</span> Jimmy <span class="operator">|</span>  <span class="number">20</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------+-----+</span></span><br><span class="line"><span class="number">5</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.06</span> sec)</span><br><span class="line"> </span><br><span class="line">mysql<span class="operator">&gt;</span> #回滚操作</span><br><span class="line">    <span class="operator">-</span><span class="operator">&gt;</span> <span class="keyword">rollback</span>;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.05</span> sec)</span><br><span class="line"> </span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+------+-----+</span></span><br><span class="line"><span class="operator">|</span> Id <span class="operator">|</span> Name <span class="operator">|</span> Age <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+------+-----+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> 李华 <span class="operator">|</span>  <span class="number">23</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">2</span> <span class="operator">|</span> 李强 <span class="operator">|</span>  <span class="number">22</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">3</span> <span class="operator">|</span> 刘明 <span class="operator">|</span>  <span class="number">26</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">4</span> <span class="operator">|</span> 杰克 <span class="operator">|</span>  <span class="number">21</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+------+-----+</span></span><br><span class="line"><span class="number">4</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.06</span> sec)</span><br><span class="line"> </span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">insert</span> <span class="keyword">into</span> student <span class="keyword">values</span>(<span class="number">5</span>,<span class="string">&#x27;Jimmy&#x27;</span>,<span class="number">20</span>);</span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.08</span> sec)</span><br><span class="line"> </span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">commit</span>;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"> </span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------+-----+</span></span><br><span class="line"><span class="operator">|</span> Id <span class="operator">|</span> Name  <span class="operator">|</span> Age <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------+-----+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> 李华  <span class="operator">|</span>  <span class="number">23</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">2</span> <span class="operator">|</span> 李强  <span class="operator">|</span>  <span class="number">22</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">3</span> <span class="operator">|</span> 刘明  <span class="operator">|</span>  <span class="number">26</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">4</span> <span class="operator">|</span> 杰克  <span class="operator">|</span>  <span class="number">21</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">5</span> <span class="operator">|</span> Jimmy <span class="operator">|</span>  <span class="number">20</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------+-----+</span></span><br><span class="line"><span class="number">5</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.06</span> sec)</span><br><span class="line"> </span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">rollback</span>;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"> </span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------+-----+</span></span><br><span class="line"><span class="operator">|</span> Id <span class="operator">|</span> Name  <span class="operator">|</span> Age <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------+-----+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> 李华  <span class="operator">|</span>  <span class="number">23</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">2</span> <span class="operator">|</span> 李强  <span class="operator">|</span>  <span class="number">22</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">3</span> <span class="operator">|</span> 刘明  <span class="operator">|</span>  <span class="number">26</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">4</span> <span class="operator">|</span> 杰克  <span class="operator">|</span>  <span class="number">21</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">5</span> <span class="operator">|</span> Jimmy <span class="operator">|</span>  <span class="number">20</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------+-----+</span></span><br><span class="line"><span class="number">5</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.05</span> sec</span><br></pre></td></tr></table></figure></li></ul><p><strong>当提交事务的时候才会真正操作并写入到数据库中，如果选择的不是提交而是回滚，就不会将事务中定义的操作运用到数据库中。</strong></p><h2 id="mysql索引的选择"><a href="#mysql索引的选择" class="headerlink" title="mysql索引的选择"></a>mysql索引的选择</h2><p>由于mysql数据库的索引是保存到磁盘上的，因此当我们通过索引查找某行数据的时候，就需要先从磁盘读取索引到内存，再通过索引从磁盘中找到某行数据，然后读入到内存，也就是说查询过程中会发生多次磁盘 I&#x2F;O，而磁盘 I&#x2F;O 次数越多，所消耗的时间也就越大</p><h3 id="哈希表"><a href="#哈希表" class="headerlink" title="哈希表"></a>哈希表</h3><p>哈希索引做区间查询的速度是很慢的，他是无序的</p><p>哈希表这种结构适用于只有等值查询的场景</p><h3 id="有序数组"><a href="#有序数组" class="headerlink" title="有序数组"></a>有序数组</h3><p>假设我们现在用数组来存储索引<br>如果仅仅看查询效率，有序数组就是最好的数据结构了（数组<strong>已排序时</strong>用二分法查询最快，时间复杂度是 O(log(N))）。但是，在需要更新数据的时候就麻烦了，你往中间插入一个记录就必须得挪动后面所有的记录，成本太高</p><h3 id="二叉查找树"><a href="#二叉查找树" class="headerlink" title="二叉查找树"></a>二叉查找树</h3><p><img src="/../images/datastruct/%E4%BA%8C%E5%8F%89%E6%A0%91.png"></p><p><strong>二叉查找树的特点是一个节点的左子树的所有节点都小于这个节点，右子树的所有节点都大于这个节点</strong></p><p>二叉查找树由于存在退化成链表(就是形成一个单支的树)的可能性，会使得查询操作的时间复杂度从 O(logn)降低为 O(n)。</p><p>而且会随着插入的元素越多，树的高度也变高，意味着需要磁盘 IO 操作的次数就越多，这样导致查询性能严重下降，再加上不能范围查询，所以不适合作为数据库的索引结构。</p><h3 id="平衡二叉查找树（AVL-树）"><a href="#平衡二叉查找树（AVL-树）" class="headerlink" title="平衡二叉查找树（AVL 树）"></a>平衡二叉查找树（AVL 树）</h3><p>在二叉查找树的基础上增加了一些条件约束：<strong>每个节点的左子树和右子树的高度差不能超过 1</strong><br><img src="/../images/datastruct/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%AB%98%E5%BA%A6.png"><br>但是<strong>不管平衡二叉查找树还是红黑树，都会随着插入的元素增多，而导致树的高度变高，这就意味着磁盘 I&#x2F;O 操作次数多，会影响整体数据查询的效率</strong>。</p><h3 id="N叉树"><a href="#N叉树" class="headerlink" title="N叉树"></a>N叉树</h3><p><img src="/../images/datastruct/%E4%B8%89%E5%8F%89%E6%A0%91.png"><br>当树的节点越多的时候，并且树的分叉数 M 越大的时候，M 叉树的高度会远小于二叉树的高度。</p><h3 id="B树"><a href="#B树" class="headerlink" title="B树"></a>B树</h3><p>自平衡二叉树虽然能保持查询操作的时间复杂度在O(logn)，但是因为它本质上是一个二叉树，每个节点只能有 2 个子节点，那么当节点个数越多的时候，树的高度也会相应变高，这样就会增加磁盘的 I&#x2F;O 次数，从而影响数据查询的效率。</p><p>为了解决降低树的高度的问题，后面就出来了 B 树，它不再限制一个节点就只能有 2 个子节点，而是允许 M 个子节点 (M&gt;2)，从而降低树的高度。</p><p>B 树的每一个节点最多可以包括 M 个子节点，M 称为 B 树的阶，所以 B 树就是一个多叉树。</p><p>而如果同样的节点数量在平衡二叉树的场景下，树的高度就会很高，意味着磁盘 I&#x2F;O 操作会更多。所以，B 树在数据查询中比平衡二叉树效率要高。</p><p>但是 B 树的每个节点都包含数据（索引+记录），而用户的记录数据的大小很有可能远远超过了索引数据，这就需要花费更多的磁盘 I&#x2F;O 操作次数来读到「有用的索引数据」</p><h3 id="B-树"><a href="#B-树" class="headerlink" title="B+树"></a>B+树</h3><p><img src="/../images/datastruct/B+%E6%A0%91.png"><br>B+ 树与 B 树差异的点，主要是以下这几点：</p><p>叶子节点（最底部的节点）才会存放实际数据（索引+记录），非叶子节点只会存放索引；</p><p>所有索引都会在叶子节点出现，叶子节点之间构成一个有序链表；</p><p>非叶子节点的索引也会同时存在在子节点中，并且是在子节点中所有索引的最大（或最小）。</p><p>非叶子节点中有多少个子节点，就有多少个索引；</p><p>B+ 树的非叶子节点不存放实际的记录数据，仅存放索引，因此数据量相同的情况下，相比存储即存索引又存记录的 B 树，B+树的非叶子节点可以存放更多的索引，因此 B+ 树可以比 B 树更「矮胖」，查询底层节点的磁盘 I&#x2F;O次数会更少。</p><h3 id="Innodb的索引模型"><a href="#Innodb的索引模型" class="headerlink" title="Innodb的索引模型"></a>Innodb的索引模型</h3><p><img src="/../images/datastruct/Innodb%E7%9A%84B+%E6%A0%91.png"><br>在Innodb中，表都是根据主键顺序以索引的形式存放的，这种存储方式的表称为索引组织表。Innodb使用的B+树索引类型。每一个索引在InnoDB里面对应一棵B+树。<br>Innodb 根据索引类型不同，分为聚集和二级索引。他们区别在于，聚集索引的叶子节点存放的是实际数据，所有完整的用户记录都存放在聚集索引的叶子节点，而二级索引的叶子节点存放的是主键值，而不是实际数据。</p><ul><li>索引类型<ul><li>主键索引（聚簇索引），值存的是整行内容</li><li>非主键索引（二级索引），值存的是主键内容</li></ul></li><li>B+ 树能够很好地配合磁盘的读写特性，减少单次查询的磁盘访问次数</li></ul><p>索引的实现由存储引擎来决定，InnoDB使用B+树（N叉树，比如1200叉树），把整颗树的高度维持在很小的范围内，同时在内存里缓存前面若干层的节点，可以极大地降低访问磁盘的次数，提高读的效率。</p><p>B+树的插入可能会引起数据页的分裂，删除可能会引起数据页的合并，二者都是比较重的IO消耗，所以比较好的方式是顺序插入数据，这也是我们一般使用自增主键的原因之一</p><p>【基于主键索引和普通索引的查询有什么区别】</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">mysql&gt; create table T(</span><br><span class="line"><span class="built_in">id</span> int primary key, </span><br><span class="line">k int not null, </span><br><span class="line">name varchar(16),</span><br><span class="line">index (k))engine=InnoDB;</span><br><span class="line"></span><br><span class="line">insert into T values(100,1),(200,2),(300,3),(500,5),(600,6),(700,7);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/../images/datastruct/%E7%B4%A2%E5%BC%95%E6%9F%A5%E6%89%BE.png"><br>主键索引的叶子节点存的是整行数据。在 InnoDB 里，主键索引也被称为聚簇索引（clustered index）。非主键索引的叶子节点内容是主键的值。在 InnoDB 里，非主键索引也被称为二级索引（secondary index）。</p><p>（1）如果语句为select * from T where ID&#x3D;500, 主键索引，只需要搜索ID这个B+树<br>（2）如果语句为select * from T where k &#x3D; 5 , 普通索引，先查询k这个B+树，然后得到id的值，再搜索ID这个B+树，这个过程叫做回表。</p><p>总结：<br>1、覆盖索引：如果查询条件使用的是普通索引（或是联合索引的最左原则字段），查询结果是联合索引的字段或是主键，不用回表操作，直接返回结果，减少IO磁盘读写读取正行数据<br>2、最左前缀：联合索引的最左 N 个字段，也可以是字符串索引的最左 M 个字符<br>3、联合索引：根据创建联合索引的顺序，以最左原则进行where检索，比如（age，name）以age&#x3D;1 或 age&#x3D; 1 and name&#x3D;‘张三’可以使用索引，单以name&#x3D;‘张三’ 不会使用索引，考虑到存储空间的问题，还请根据业务需求，将查找频繁的数据进行靠左创建索引。<br>4、索引下推：like ‘hello%’and age &gt;10 检索，MySQL5.6版本之前，会对匹配的数据进行回表查询。5.6版本后，会先过滤掉age&lt;10的数据，再进行回表查询，减少回表率，提升检索速度</p><p>innoDB 这种引擎导致的,虽然删除了表的部分记录,但是它的索引还在, 并未释放.<br>只能是重新建表才能重建索引</p><h2 id="锁"><a href="#锁" class="headerlink" title="锁"></a>锁</h2><p><strong>锁机制用于管理对共享资源的并发访问。</strong><br>分类：</p><ul><li>全局锁：<code>flush tables with read lock</code>当你需要让整个库处于只读状态的时候，可以使用这个命令，之后其他线程的以下语句会被阻塞：数据更新语句（数据的增删改）、数据定义语句（包括建表、修改表结构等）和更新类事务的提交语句。</li><li>表级锁：<code>表锁的语法是 lock tables … read/write</code><ul><li>表锁</li><li>元数据锁</li><li>意向锁<ul><li>意向锁的目的是为了快速判断表里是否有记录被加锁</li></ul></li><li>AUTO-INC 锁<ul><li>在插入数据时，可以不指定主键的值，数据库会自动给主键赋值递增的值，这主要是通过 AUTO-INC 锁实现的</li></ul></li></ul></li><li>行级锁：InnoDB 引擎是支持行级锁的，而 MyISAM 引擎并不支持行级锁。<ul><li>Record Lock，记录锁，也就是仅仅把一条记录锁上；<ul><li>共享锁（Share Lock），是读取操作创建的锁。其他用户可以并发读取数据，但任何事务都不能对数据进行修改（获取数据上的排他锁），直到已释放所有共享锁。<code>SELECT ... LOCK IN SHARE MODE;</code><ul><li>读读共享，读写互斥</li></ul></li><li>排他锁（Exclusive Lock），如果事务T对数据A加上排他锁后，则其他事务不能再对A加任何类型的封锁。获准排他锁的事务既能读数据，又能修改数据。<code>SELECT ... FOR UPDATE;</code><ul><li>写写互斥、读写互斥</li></ul></li></ul></li><li>Gap Lock，间隙锁，锁定一个范围，但是不包含记录本身；</li><li>Next-Key Lock（临键锁）：Record Lock + Gap Lock 的组合，锁定一个范围，并且锁定记录本身。</li></ul></li></ul><h2 id="全局锁"><a href="#全局锁" class="headerlink" title="全局锁"></a>全局锁</h2><p>加上全局锁，意味着整个数据库都是只读状态。</p><p>那么如果数据库里有很多数据，备份就会花费很多的时间，关键是备份期间，业务只能读数据，而不能更新数据，这样会造成业务停滞。</p><p><strong>但是，如果数据库的引擎支持的事务支持可重复读的隔离级别，那么在备份数据库之前先开启事务，会先创建 Read View，然后整个事务执行期间都在用这个 Read View，而且由于 MVCC 的支持，备份期间业务依然可以对数据进行更新操作。</strong><br>因为在可重复读的隔离级别下，即使其他事务更新了表的数据，也不会影响备份数据库时的 Read View，这就是事务四大特性中的隔离性，这样备份期间备份的数据一直是在开启事务时的数据。</p><p>备份数据库的工具是 mysqldump，在使用 mysqldump 时加上 –single-transaction 参数的时候，就会在备份数据库之前先开启事务。这种方法只适用于支持「可重复读隔离级别的事务」的存储引擎。</p><p>对于 MyISAM 这种不支持事务的引擎，如果备份过程中有更新，总是只能取到最新的数据，那么就破坏了备份的一致性。这时，我们就需要使用 FTWRL（Flush tables with read lock） 命令了。</p><h2 id="表锁"><a href="#表锁" class="headerlink" title="表锁"></a>表锁</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//表级别的共享锁，也就是读锁；</span><br><span class="line">lock tables t_student <span class="built_in">read</span>;</span><br><span class="line"></span><br><span class="line">//表级别的独占锁，也就是写锁；</span><br><span class="line">lock tables t_stuent write;</span><br></pre></td></tr></table></figure><p>lock tables 语法除了会限制别的线程的读写外，也限定了本线程接下来的操作对象</p><h3 id="表级的锁MDL（metadata-lock"><a href="#表级的锁MDL（metadata-lock" class="headerlink" title="表级的锁MDL（metadata lock)"></a>表级的锁MDL（metadata lock)</h3><p>在 MySQL 5.5 版本中引入了 MDL，当对一个表做增删改查操作的时候，加 MDL 读锁；当要对表做结构变更操作的时候，加 MDL 写锁。读锁之间不互斥，因此你可以有多个线程同时对一张表增删改查。读写锁之间、写锁之间是互斥的，用来保证变更表结构操作的安全性。因此，如果有两个线程要同时给一个表加字段，其中一个要等另一个执行完才能开始执行。<br>我们不需要显示的使用 MDL，因为当我们对数据库表进行操作时，会自动给这个表加上 MDL：</p><ul><li>对一张表进行 CRUD 操作时，加的是 MDL 读锁；</li><li>对一张表做结构变更操作的时候，加的是 MDL 写锁；</li></ul><p>注意：MDL 是在事务提交后才会释放，这意味着事务执行期间，MDL 是一直持有的。</p><h2 id="行级锁"><a href="#行级锁" class="headerlink" title="行级锁"></a>行级锁</h2><p>MySQL 的行锁是在引擎层由各个引擎自己实现的。但并不是所有的引擎都支持行锁，比如 MyISAM 引擎就不支持行锁。不支持行锁意味着并发控制只能使用表锁，对于这种引擎的表，同一张表上任何时刻只能有一个更新在执行，这就会影响到业务并发度。InnoDB 是支持行锁的，这也是 MyISAM 被 InnoDB 替代的重要原因之一。</p><p>不同隔离级别下，行级锁的种类是不同的。</p><ul><li><p>在读已提交隔离级别下，行级锁的种类只有记录锁，也就是仅仅把一条记录锁上。</p></li><li><p>在可重复读隔离级别下，行级锁的种类除了有记录锁，还有间隙锁（目的是为了避免幻读）</p></li></ul><h3 id="记录锁"><a href="#记录锁" class="headerlink" title="记录锁"></a>记录锁</h3><p>Record Lock 称为记录锁，锁住的是一条记录。而且记录锁是有 S 锁和 X 锁之分的：</p><p>当一个事务对一条记录加了 S 型记录锁后，其他事务也可以继续对该记录加 S 型记录锁（S 型与 S 锁兼容），但是不可以对该记录加 X 型记录锁（S 型与 X 锁不兼容）;<br>当一个事务对一条记录加了 X 型记录锁后，其他事务既不可以对该记录加 S 型记录锁（S 型与 X 锁不兼容），也不可以对该记录加 X 型记录锁（X 型与 X 锁不兼容）。</p><h3 id="间隙锁"><a href="#间隙锁" class="headerlink" title="间隙锁"></a>间隙锁</h3><p>Gap Lock 称为间隙锁，只存在于可重复读隔离级别，目的是为了解决可重复读隔离级别下幻读的现象。<br>假设，表中有一个范围 id 为（3，5）间隙锁，那么其他事务就无法插入 id &#x3D; 4 这条记录了，这样就有效的防止幻读现象的发生</p><h3 id="临键锁"><a href="#临键锁" class="headerlink" title="临键锁"></a>临键锁</h3><p>假设，表中有一个范围 id 为（3，5] 的 next-key lock，那么其他事务即不能插入 id &#x3D; 4 记录，也不能修改和删除 id &#x3D; 5 这条记录。<br>next-key lock 是包含间隙锁+记录锁的，如果一个事务获取了 X 型的 next-key lock，那么另外一个事务在获取相同范围的 X 型的 next-key lock 时，是会被阻塞的。<br><strong>加锁机制</strong></p><p><strong>乐观锁与悲观锁是两种并发控制的思想，可用于解决丢失更新问题</strong></p><p>乐观锁会“乐观地”假定大概率不会发生并发更新冲突，访问、处理数据过程中不加锁，只在更新数据时再根据版本号或时间戳判断是否有冲突，有则处理，无则提交事务。用数据版本（Version）记录机制实现，这是乐观锁最常用的一种实现方式</p><p>悲观锁会“悲观地”假定大概率会发生并发更新冲突，访问、处理数据前就加排他锁，在整个数据处理过程中锁定数据，事务提交或回滚后才释放锁。另外与乐观锁相对应的，<strong>悲观锁是由数据库自己实现了的，要用的时候，我们直接调用数据库的相关语句就可以了。</strong></p><h3 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a><strong>死锁</strong></h3><p><strong>死锁产生：</strong></p><ul><li>死锁是指两个或多个事务在同一资源上相互占用，并请求锁定对方占用的资源，从而导致恶性循环</li><li>当事务试图以不同的顺序锁定资源时，就可能产生死锁。多个事务同时锁定同一个资源时也可能会产生死锁</li><li>锁的行为和顺序和存储引擎相关。以同样的顺序执行语句，有些存储引擎会产生死锁有些不会——死锁有双重原因：真正的数据冲突；存储引擎的实现方式。</li></ul><p><strong>检测死锁</strong>：数据库系统实现了各种死锁检测和死锁超时的机制。InnoDB存储引擎能检测到死锁的循环依赖并立即返回一个错误。</p><p><strong>死锁恢复</strong>：死锁发生以后，只有部分或完全回滚其中一个事务，才能打破死锁，InnoDB目前处理死锁的方法是，将持有最少行级排他锁的事务进行回滚。所以事务型应用程序在设计时必须考虑如何处理死锁，多数情况下只需要重新执行因死锁回滚的事务即可。</p><p><strong>外部锁的死锁检测</strong>：发生死锁后，InnoDB 一般都能自动检测到，并使一个事务释放锁并回退，另一个事务获得锁，继续完成事务。但在涉及外部锁，或涉及表锁的情况下，InnoDB 并不能完全自动检测到死锁， 这需要通过设置锁等待超时参数 innodb_lock_wait_timeout 来解决</p><p><strong>死锁影响性能</strong>：死锁会影响性能而不是会产生严重错误，因为InnoDB会自动检测死锁状况并回滚其中一个受影响的事务。在高并发系统上，当许多线程等待同一个锁时，死锁检测可能导致速度变慢。有时当发生死锁时，禁用死锁检测（使用<code>innodb_deadlock_detect</code>配置选项）可能会更有效，这时可以依赖<code>innodb_lock_wait_timeout</code>设置进行事务回滚。</p><p><strong>MyISAM避免死锁：</strong></p><ul><li>在自动加锁的情况下，MyISAM 总是一次获得 SQL 语句所需要的全部锁，所以 MyISAM 表不会出现死锁。</li></ul><p><strong>InnoDB避免死锁：</strong></p><ul><li>为了在单个InnoDB表上执行多个并发写入操作时避免死锁，可以在事务开始时通过为预期要修改的每个元祖（行）使用<code>SELECT ... FOR UPDATE</code>语句来获取必要的锁，即使这些行的更改语句是在之后才执行的。</li><li>在事务中，如果要更新记录，应该直接申请足够级别的锁，即排他锁，而不应先申请共享锁、更新时再申请排他锁，因为这时候当用户再申请排他锁时，其他事务可能又已经获得了相同记录的共享锁，从而造成锁冲突，甚至死锁</li><li>如果事务需要修改或锁定多个表，则应在每个事务中以相同的顺序使用加锁语句。在应用中，如果不同的程序会并发存取多个表，应尽量约定以相同的顺序来访问表，这样可以大大降低产生死锁的机会</li><li>通过SELECT … LOCK IN SHARE MODE获取行的读锁后，如果当前事务再需要对该记录进行更新操作，则很有可能造成死锁。</li><li>改变事务隔离级别</li></ul><p>如果出现死锁，可以用 <code>show engine innodb status;</code>命令来确定最后一个死锁产生的原因。返回结果中包括死锁相关事务的详细信息，如引发死锁的 SQL 语句，事务已经获得的锁，正在等待什么锁，以及被回滚的事务等。据此可以分析死锁产生的原因和改进措施。</p><h2 id="普通索引和唯一索引"><a href="#普通索引和唯一索引" class="headerlink" title="普通索引和唯一索引"></a>普通索引和唯一索引</h2><h3 id="关于change-buffer"><a href="#关于change-buffer" class="headerlink" title="关于change buffer"></a>关于change buffer</h3><p>当需要更新一个数据页时，如果数据页在内存中就直接更新，而如果这个数据页还没有在内存中的话，在不影响数据一致性的前提下，InnoDB 会将这些更新操作缓存在 change buffer 中，这样就不需要从磁盘中读入这个数据页了。在下次查询需要访问这个数据页的时候，将数据页读入内存，然后执行 change buffer 中与这个页有关的操作。通过这种方式就能保证这个数据逻辑的正确性。</p><p>需要说明的是，虽然名字叫作 change buffer，实际上它是可以持久化的数据。也就是说，change buffer 在内存中有拷贝，也会被写入到磁盘上。</p><p>查看：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> variables <span class="keyword">like</span> <span class="string">&#x27;%change_buffer%&#x27;</span>;</span><br></pre></td></tr></table></figure><p>innodb_change_buffer_max_size：表示change buffer在buffer pool中的最大占比，默认25%，最大50%</p><p>innodb_change_buffering：表示索引列merge对象，all表示对IDU索引列都起作用，都进行merge，如果只想对insert索引列进行merge，就把all改为inserts。</p><h2 id="字符串字段创建索引"><a href="#字符串字段创建索引" class="headerlink" title="字符串字段创建索引"></a>字符串字段创建索引</h2><p>直接创建完整索引，这样可能比较占用空间；</p><ol><li>创建前缀索引，节省空间，但会增加查询扫描次数，并且不能使用覆盖索引；</li><li>倒序存储，再创建前缀索引，用于绕过字符串本身前缀的区分度不够的问题；</li><li>创建 hash 字段索引，查询性能稳定，有额外的存储和计算消耗，跟第三种方式一样，都不支持范围扫描。</li></ol><h2 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h2><p>1：为啥删除了表的一半数据，表文文件大小没变化？</p><p>因为delete 命令其实只是把记录的位置，或者数据页标记为了“可复用”，但磁盘文件的大小是不会变的。也可以认为是一种逻辑删除，所以物理空间没有实际释放，只是标记为可复用，表文件的大小当然是不变的啦！</p><p>2：表的数据信息存在哪里？</p><p>表数据信息可能较小也可能巨大无比，它可以存储在共享表空间里，也可以单独存储在一个以.ibd为后缀的文件里，由参数innodb_file_per_table来控制，老师建议总是作为一个单独的文件来存储，这样非常容易管理，并且在不需要的时候，使用drop table命令也能直接把对应的文件删除，如果存储在共享空间之中即使表删除了空间也不会释放。</p><p>3：表的结构信息存在哪里？</p><p>首先，表结构定义占有的存储空间比较小，在MySQL8.0之前，表结构的定义信息存在以.frm为后缀的文件里，在MySQL8.0之后，则允许把表结构的定义信息存在系统数据表之中。</p><p>系统数据表，主要用于存储MySQL的系统数据，比如：数据字典、undo log(默认)等文件</p><p>4：如何才能删除表数据后，表文件大小就变小？</p><p>重建表，消除表因为进行大量的增删改操作而产生的空洞，使用如下命令：</p><p>1：alter table t engine&#x3D;InnoDB</p><p>2：optimize table t( 等于 recreate+analyze)。</p><p>3：truntace table t (等于drop+create)</p><p>5：空洞是啥？咋产生的？</p><p>空洞就是那些被标记可复用但是还没被使用的存储空间。</p><p>使用delete命令删除数据会产生空洞，标记为可复用</p><p>插入新的数据可能引起页分裂，也可能产生空洞</p><p>修改操作，有时是一种先删后插的动作也可能产生空洞</p><h1 id="CAP理论"><a href="#CAP理论" class="headerlink" title="CAP理论"></a>CAP理论</h1><p>cap理论是分布式系统的理论基石</p><p><strong>Consistency (一致性)：</strong></p><p>“all nodes see the same data at the same time”,即更新操作成功并返回客户端后，所有节点在同一时间的数据完全一致，这就是分布式的一致性。一致性的问题在并发系统中不可避免，对于客户端来说，一致性指的是并发访问时更新过的数据如何获取的问题。从服务端来看，则是更新如何复制分布到整个系统，以保证数据最终一致。</p><p><strong>Availability (可用性):</strong></p><p>可用性指“Reads and writes always succeed”，即服务一直可用，而且是正常响应时间。好的可用性主要是指系统能够很好的为用户服务，不出现用户操作失败或者访问超时等用户体验不好的情况。</p><p><strong>Partition Tolerance (分区容错性):</strong></p><p>即分布式系统在遇到某节点或网络分区故障的时候，仍然能够对外提供满足一致性和可用性的服务。分区容错性要求能够使应用虽然是一个分布式系统，而看上去却好像是在一个可以运转正常的整体。比如现在的分布式系统中有某一个或者几个机器宕掉了，其他剩下的机器还能够正常运转满足系统需求，对于用户而言并没有什么体验上的影响。</p><h3 id="CAP三个特性只能满足其中两个"><a href="#CAP三个特性只能满足其中两个" class="headerlink" title="CAP三个特性只能满足其中两个"></a>CAP三个特性只能满足其中两个</h3><p><strong>CA without P：</strong>如果不要求P（不允许分区），则C（强一致性）和A（可用性）是可以保证的。但放弃P的同时也就意味着放弃了系统的扩展性，也就是分布式节点受限，没办法部署子节点，这是违背分布式系统设计的初衷的。</p><p><strong>CP without A：</strong>如果不要求A（可用），相当于每个请求都需要在服务器之间保持强一致，而P（分区）会导致同步时间无限延长(也就是等待数据同步完才能正常访问服务)，一旦发生网络故障或者消息丢失等情况，就要牺牲用户的体验，等待所有数据全部一致了之后再让用户访问系统。设计成CP的系统其实不少，最典型的就是分布式数据库，如Redis、HBase等。对于这些分布式数据库来说，数据的一致性是最基本的要求，因为如果连这个标准都达不到，那么直接采用关系型数据库就好，没必要再浪费资源来部署分布式数据库。</p><p><strong>AP wihtout C：</strong>要高可用并允许分区，则需放弃一致性。一旦分区发生，节点之间可能会失去联系，为了高可用，每个节点只能用本地数据提供服务，而这样会导致全局数据的不一致性。典型的应用就如某米的抢购手机场景，可能前几秒你浏览商品的时候页面提示是有库存的，当你选择完商品准备下单的时候，系统提示你下单失败，商品已售完。这其实就是先在 A（可用性）方面保证系统可以正常的服务，然后在数据的一致性方面做了些牺牲，虽然多少会影响一些用户体验，但也不至于造成用户购物流程的严重阻塞。</p><h1 id="Base理论"><a href="#Base理论" class="headerlink" title="Base理论"></a>Base理论</h1><p>分布式系统中的一致性是 弱一致性 单数据库 mysql的一致性 强一致性</p><p>BASE是Basically Available（基本可用）、Soft state（软状态）和Eventually consistent（最终一致性）三个短语的缩写。BASE理论是对CAP中一致性和可用性权衡的结果，其来源于对大规模互联网系统分布式实践的总结， 是基于CAP定理逐步演化而来的。BASE理论的核心思想是：即使无法做到强一致性，但每个应用都可以根据自身业务特点，采用适当的方式来使系统达到最终一致性。接下来看一下BASE中的三要素：</p><p><strong>1、基本可用</strong></p><p>基本可用是指分布式系统在出现不可预知故障的时候，允许损失部分可用性—-注意，这绝不等价于系统不可用。比如：</p><p>（1）响应时间上的损失。正常情况下，一个在线搜索引擎需要在0.5秒之内返回给用户相应的查询结果，但由于出现故障，查询结果的响应时间增加了1~2秒</p><p>（2）系统功能上的损失：正常情况下，在一个电子商务网站上进行购物的时候，消费者几乎能够顺利完成每一笔订单，但是在一些节日大促购物高峰的时候，由于消费者的购物行为激增，为了保护购物系统的稳定性，部分消费者可能会被引导到一个降级页面</p><p><strong>2、软状态</strong></p><p>软状态指允许系统中的数据存在中间状态，并认为该中间状态的存在不会影响系统的整体可用性，即允许系统在不同节点的数据副本之间进行数据同步的过程存在延时</p><p><strong>3、最终一致性</strong></p><p>最终一致性强调的是所有的数据副本，在经过一段时间的同步之后，最终都能够达到一个一致的状态。因此，最终一致性的本质是需要系统保证最终数据能够达到一致，而不需要实时保证系统数据的强一致性。总的来说，BASE理论面向的是大型高可用可扩展的分布式系统，和传统的事物ACID特性是相反的，它完全不同于ACID的强一致性模型，而是通过牺牲强一致性来获得可用性，并允许数据在一段时间内是不一致的，但最终达到一致状态。但同时，在实际的分布式场景中，不同业务单元和组件对数据一致性的要求是不同的，因此在具体的分布式系统架构设计过程中，ACID特性和BASE理论往往又会结合在一起。</p><h2 id="常见分布式事务解决方案"><a href="#常见分布式事务解决方案" class="headerlink" title="常见分布式事务解决方案"></a>常见分布式事务解决方案</h2><ul><li>两阶段提交（2PC, Two-phase Commit）</li><li>TCC 补偿模式</li><li>基于本地消息表实现最终一致性</li><li>最大努力通知</li><li><strong>基于可靠消息最终一致性方案</strong></li></ul><p><a href="https://zhuanlan.zhihu.com/p/183753774">https://zhuanlan.zhihu.com/p/183753774</a></p>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mongoDB</title>
      <link href="/post/41106fe2.html"/>
      <url>/post/41106fe2.html</url>
      
        <content type="html"><![CDATA[<h1 id="mongo数据库的简介"><a href="#mongo数据库的简介" class="headerlink" title="mongo数据库的简介"></a>mongo数据库的简介</h1><p>mongoDB是一个基于分布式文件存储的数据库。它是非关系型数据库</p><h1 id="mongo的特点"><a href="#mongo的特点" class="headerlink" title="mongo的特点"></a>mongo的特点</h1><p>它的特点是高性能、易部署、易使用，存储数据非常方便。主要功能特性有：<br>1.面向集合存储，易存储对象类型的数据。<br>2.模式自由。<br>3.支持动态查询。<br>4.支持完全索引，包含内部对象。<br>5.支持查询。<br>6.支持复制和故障恢复。<br>7.使用高效的二进制数据存储，包括大型对象（如视频等）。<br>8.自动处理碎片，以支持云计算层次的扩展性<br>9.支持RUBY，PYTHON，JAVA，C++，PHP等多种语言。<br>10.文件存储格式为BSON（一种JSON的扩展）</p><h1 id="mongo的数据逻辑结构"><a href="#mongo的数据逻辑结构" class="headerlink" title="mongo的数据逻辑结构"></a>mongo的数据逻辑结构</h1><ul><li><table><thead><tr><th>SQL</th><th>MongoDB</th></tr></thead><tbody><tr><td>表（Table）</td><td>集合（Collection）</td></tr><tr><td>行（Row）</td><td>文档（Document）</td></tr><tr><td>列（Col）</td><td>字段（Field）</td></tr><tr><td>主键（PrimaryKey）</td><td>对象（ObjectId）</td></tr></tbody></table></li><li><p>文档 -&gt; 关系库中的一行数据</p></li><li><p>多个文档组成一个集合 -&gt; 关系数据库的表</p></li><li><p>多个集合构成数据库 包含 -&gt; 集合 -&gt; 包含 -&gt; 文档</p></li></ul><h1 id="mongo数据存储结构"><a href="#mongo数据存储结构" class="headerlink" title="mongo数据存储结构"></a>mongo数据存储结构</h1><p>mongo默认的数据目录是&#x2F;data&#x2F;db，它负责存储所有的数据文件。mongo内部有预分配空间的机制，以至于mongo始终保持额外的的空间，从而避免了由于数据暴增带来的磁盘压力过大，每个数据文件最大2G。<br>1.命名空间文件：命名空间(.ns结尾文件) 它存储了分配和正在使用的磁盘空间<br>2.数据库文件：以(0,1,2,3…)结尾的，并且后面的文件大小是前面一个文件大小的2倍！</p><p>为什么MongodDB物理存储使用这种方式设计呢？好处是什么？：当一方面如果数据库很小的时候，不至于数据库小而浪费存储空间，另外一方面如果数据库增长比较快，通过预分配的方式，是上一个文件的两倍的办法，来避免数据的剧增造成分配文件造成的性能下降，来预分配空间，以空间的办法来换取性能的提升。</p><h1 id="什么是BSON"><a href="#什么是BSON" class="headerlink" title="什么是BSON"></a>什么是BSON</h1><p>BSON是一种类似json的二进制形式的存储格式，简称Binary JSON，它和JSON一样，支持内嵌的文档对象和数组对象，但是BSON有JSON没有的一些数据类型，如Date和BinData类型。</p><p>BSON可以做为网络数据交换的一种存储形式，这个有点类似于Google的Protocol Buffer，但是BSON是一种schema-less的存储形式，它的优点是灵活性高，但它的缺点是空间利用率不是很理想。</p><p>BSON有三个特点：轻量性、可遍历性、高效性。</p><h1 id="mongo的分片"><a href="#mongo的分片" class="headerlink" title="mongo的分片"></a>mongo的分片</h1><p>分片是将数据水平切分到不同的物理节点。当应用数据越来越大的时候，数据量也会越来越大。当数据量增长时，单台机器有可能无法存储数据或可接受的读取写入吞吐量。利用分片技术可以添加更多的机器来应对数据量增加<br>以及读写操作的要求。</p><h1 id="mongo的索引"><a href="#mongo的索引" class="headerlink" title="mongo的索引"></a>mongo的索引</h1><p>索引用于高效的执行查询,没有索引的MongoDB将扫描整个集合中的所有文档,这种扫描效率很低,需要处理大量的数据.索引是一种特殊的数据结构,将一小块数据集合保存为容易遍历的形式.索引能够存储某种特殊字段或字段集的<br>值,并按照索引指定的方式将字段值进行排序</p><h1 id="ObjectID"><a href="#ObjectID" class="headerlink" title="ObjectID"></a>ObjectID</h1><p>它由十六进制构成<br>前4个字节表示时间戳<br>接下来的3个字节是机器标识码<br>紧接的两个字节由进程id组成（PID）<br>最后三个字节是自增计数器</p><h1 id="mongo操作"><a href="#mongo操作" class="headerlink" title="mongo操作"></a>mongo操作</h1><ul><li>mongo的or和and</li><li>查询子文档或者数组中的数据的时候，可以用访问.访问，这个.不仅可以访问子文档，还可以访问数组中的索引</li><li>聚合查询，它可以把数据按照一定的规则进行筛选和处理<ul><li>聚合的命名，aggregate，格式<code>aggregate(1-N个阶段)</code>。</li></ul></li><li>管道操作符<ul><li>$project 修改输入文档的结构，可以重命名，增加，删除域。</li><li>$match 用与过滤数据只输出符合条件的文档，它和find功能完全一样，虽然如此，但是，match可以组合其他操作</li><li>$limit 用来限制mongodb聚合管道返回的文档数</li><li>$skip 跳过制定数量的文档</li><li>$unwind 将文档中的某一个数组类型字段拆分多条，每条包含数组中的一个值。</li><li>$group 将集合中文档分组，可用于统计结果</li><li>$sort 排序</li><li>$lookup 用于同一数据库中其他集合之间进行join操作</li></ul></li><li>聚合表达式<ul><li>$sum </li><li>$avg</li><li>$min</li><li>$max</li><li>$push</li><li>$first</li><li>$last</li></ul></li><li>字段含有特殊字符用$literal表示</li></ul><h1 id="mongo常用的操作"><a href="#mongo常用的操作" class="headerlink" title="mongo常用的操作"></a>mongo常用的操作</h1><h2 id="python操作mongo对应的方法"><a href="#python操作mongo对应的方法" class="headerlink" title="python操作mongo对应的方法"></a>python操作mongo对应的方法</h2><table><thead><tr><th>MongoDB</th><th>PyMongo</th></tr></thead><tbody><tr><td>insertOne</td><td>insert_one</td></tr><tr><td>insertMany</td><td>insert_many</td></tr><tr><td>find</td><td>find</td></tr><tr><td>updateMany</td><td>update_many</td></tr><tr><td>updateOne</td><td>update_one</td></tr><tr><td>deleteOne</td><td>delete_one</td></tr><tr><td>deleteMany</td><td>delete_many</td></tr><tr><td>null</td><td>None</td></tr><tr><td>true</td><td>True</td></tr><tr><td>false</td><td>False</td></tr><tr><td>sort({_id:-1})</td><td>sort([(_id, -1)])</td></tr></tbody></table><h2 id="根据mongo的-id获取入库的时间"><a href="#根据mongo的-id获取入库的时间" class="headerlink" title="根据mongo的_id获取入库的时间"></a>根据mongo的_id获取入库的时间</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> pymongo <span class="keyword">import</span> MongoClient</span><br><span class="line"><span class="keyword">from</span> bson <span class="keyword">import</span> ObjectId</span><br><span class="line"></span><br><span class="line">test_db = MongoClient().test1</span><br><span class="line">test_db_client = test_db.test2</span><br><span class="line">c_list = test_db_client.find(&#123;&#125;, batch_size=<span class="number">1</span>).limit(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> c_list:</span><br><span class="line">    <span class="built_in">id</span> = c[<span class="string">&quot;_id&quot;</span>]</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">id</span>.generation_time.timetuple())</span><br><span class="line">    ts = time.strftime(<span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>, <span class="built_in">id</span>.generation_time.timetuple())</span><br><span class="line">    <span class="built_in">print</span>(ts)</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>数据库概论</title>
      <link href="/post/bef137fa.html"/>
      <url>/post/bef137fa.html</url>
      
        <content type="html"><![CDATA[<h1 id="数据库的概念"><a href="#数据库的概念" class="headerlink" title="数据库的概念"></a>数据库的概念</h1><p>数据库rank：<a href="https://db-engines.com/en/ranking">https://db-engines.com/en/ranking</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">按照数据结构来组织，存储，管理数据的仓库</span><br><span class="line">不管使用什么存储的介质，数据库的数据模型才是核心技术</span><br></pre></td></tr></table></figure><h1 id="数据库的构成"><a href="#数据库的构成" class="headerlink" title="数据库的构成"></a>数据库的构成</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">- 数据（Data）</span><br><span class="line">- 数据库中存储的基本对象（文本，视频，音频，图像等）凡是可以描述事物的符号</span><br><span class="line">- 数据库（DataBase简称DB）</span><br><span class="line">- 存放数据的仓库</span><br><span class="line">- 数据库管理系统（DataBaseManagementSystem简称DBMS）</span><br><span class="line">- 用来维护和管理数据</span><br><span class="line">- 数据库系统（DataBaseSystem）</span><br><span class="line">- 由数据库，数据库管理系统以及其他应用开发工具，应用程序和数据库管理员组成的存储，管理，处理和维护数据的系统</span><br></pre></td></tr></table></figure><h1 id="数据库的数据模型"><a href="#数据库的数据模型" class="headerlink" title="数据库的数据模型"></a>数据库的数据模型</h1><ul><li>层次结构<ul><li>以树型结构表示实体及其之间的联系。关系支持一对多。代表数据库IBM IMS</li></ul></li><li>网状结构<ul><li>节点描述数据，节点的联系就是数据的关系，一个节点允许有多个父节点</li></ul></li><li>关系型结构（最重要的）<ul><li>关系型数据库：指采用了关系模型来组织数据的数据库。关系模型指的就是二维表格模型，而一个关系型数据库就是由二维表及其之间的联系所组成的一个数据组织。</li><li>关系模型中常用的概念：<ul><li>关系：一张二维表，每个关系都具有一个关系名，也就是表名</li><li>元组：二维表中的一行，在数据库中被称为记录</li><li>属性：二维表中的一列，在数据库中被称为字段</li><li>域：属性的取值范围，也就是数据库中某一列的取值限制</li><li>关键字：一组可以唯一标识元组的属性，数据库中常称为主键，由一个或多个列组成</li><li>关系模式：指对关系的描述。其格式为：关系名(属性1，属性2， … … ，属性N)，在数据库中成为表结构</li></ul></li></ul></li><li>mysql以及分支<ul><li>oracle公司的收购了mysql</li><li>mysql的分支MariaDB</li><li>mysql支持多种引擎</li></ul></li></ul><h1 id="NoSQL"><a href="#NoSQL" class="headerlink" title="NoSQL"></a>NoSQL</h1><p>非传统关系型数据库的统称。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ascii、unicode、utf-8、gbk 区别？</title>
      <link href="/post/d530ae3c.html"/>
      <url>/post/d530ae3c.html</url>
      
        <content type="html"><![CDATA[<p>ascii、unicode、utf-8、gbk 区别？</p><ul><li>ASCII (American Standard Code for Information Interchange–美国信息交换标准代码)</li><li>Unicode（Universal Multiple-Octet Coded Character Set），简称 UCS</li><li>GBK（Chinese Internal Code Specification–汉字内码扩展规范）</li><li>UTF（Unicode Transformation Format–Unicode转换格式）</li></ul><p>注意:</p><ul><li><p>字符集（Charset）charset &#x3D; char + set，char 是字符，set是集合，charset就是字符的集合。字符集就是是这个编码方式涵盖了哪些字符，每个字符都有一个数字序号。</p></li><li><p>编码方式（Encoding）编码方式就是一个字符要怎样编码成二进制字节序，或者反过来怎么解析。也即给你一个数字序号，要编码成几个字节，字节顺序如何，或者其他特殊规则。</p></li><li><p>Unicode 只是字符集</p></li><li><p>UTF-8 是一种 Unicode 字符集的编码方式</p></li></ul><p>由于计算机是美国人发明的，因此，最早只有127个字符被编码到计算机里，也就是大小写英文字母、数字和一些符号，这个编码表被称为ASCII编码，比如大写字母A的编码是65，小写字母z的编码是122<br>你可以想得到的是，全世界有上百种语言，日本把日文编到Shift_JIS里，韩国把韩文编到Euc-kr里，各国有各国的标准，就会不可避免地出现冲突，结果就是，在多语言混合的文本中，显示出来会有乱码。<br>因此，Unicode应运而生。Unicode把所有语言都统一到一套编码里，这样就不会再有乱码问题了。<br>但是，新的问题又出现了：如果统一成Unicode编码，乱码问题从此消失了。但是，如果你写的文本基本上全部是英文的话，用Unicode编码比ASCII编码需要多一倍的存储空间，在存储和传输上就十分不划算。<br>所以，本着节约的精神，又出现了把Unicode编码转化为“可变长编码”的UTF-8编码。UTF-8编码把一个Unicode字符根据不同的数字大小编码成1-6个字节，常用的英文字母被编码成1个字节，汉字通常是3个字节，只有很生僻的字符才会被编码成4-6个字节。如果你要传输的文本包含大量英文字符，用UTF-8编码就能节省空间。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">bytes</span>(<span class="string">&quot;爱&quot;</span>.decode())</span><br><span class="line"><span class="string">b&#x27;\xe7\x88\xb1&#x27;</span></span><br><span class="line"><span class="built_in">bin</span>(<span class="number">0xe7</span>)</span><br><span class="line"><span class="string">&#x27;0b11100111&#x27;</span></span><br><span class="line"><span class="built_in">bin</span>(<span class="number">0x88</span>)</span><br><span class="line"><span class="string">&#x27;0b10001000&#x27;</span></span><br><span class="line"><span class="built_in">bin</span>(<span class="number">0xb1</span>)</span><br><span class="line"><span class="string">&#x27;0b10110001&#x27;</span></span><br><span class="line"><span class="number">11100111</span>-<span class="number">10001000</span>-<span class="number">10110001</span></span><br></pre></td></tr></table></figure><blockquote><p>UTF-8编码字节含义<br>对于UTF-8编码中的任意字节B，如果B的第一位为0，则B独立的表示一个字符(ASCII码)；<br>如果B的第一位为1，第二位为0，则B为一个多字节字符中的一个字节(非ASCII字符)；<br>如果B的前两位为1，第三位为0，则B为两个字节表示的字符中的第一个字节；<br>如果B的前三位为1，第四位为0，则B为三个字节表示的字符中的第一个字节；<br>如果B的前四位为1，第五位为0，则B为四个字节表示的字符中的第一个字节；</p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>rpc</title>
      <link href="/post/53b02c38.html"/>
      <url>/post/53b02c38.html</url>
      
        <content type="html"><![CDATA[<h1 id="关于RPC和REST还有SOAP"><a href="#关于RPC和REST还有SOAP" class="headerlink" title="关于RPC和REST还有SOAP"></a>关于RPC和REST还有SOAP</h1><p><img src="/../images/rpc/rpc-soap-rest.jpeg"><br>具体看看这个：<a href="https://www.iculture.cc/cybersecurity/pig=25911?only_author=1">https://www.iculture.cc/cybersecurity/pig=25911?only_author=1</a></p><h2 id="REST"><a href="#REST" class="headerlink" title="REST"></a>REST</h2><p>REST，是Representational State Transfer 的简写，中文描述表述性状态传递（是指某个瞬间状态的资源数据的快照，包括资源数据的内容、表述格式(XML、JSON)等信息。）。REST 是一种软件架构风格。 这种风格的典型应用，就是HTTP。</p><ul><li>如何理解<ul><li>引用阮一峰博客的文字：<br>-（1）每一个URI代表一种资源；<br>　　-（2）客户端和服务器之间，传递这种资源的某种表现层；<br>　　-（3）客户端通过四个HTTP动词，对服务器端资源进行操作，实现”表现层状态转化”。</li></ul></li></ul><h2 id="RPC"><a href="#RPC" class="headerlink" title="RPC"></a>RPC</h2><ul><li>RPC，是Remote Procedure Call Protocol的简写，中文描述是远程过程调用，它可以实现客户端像调用本地服务(方法)一样调用服务器的服务(方法)。它本身并不是一个具体的协议，而是一种调用方式。<br><img src="/../images/rpc/RPC%E7%9A%84%E8%BF%87%E7%A8%8B.png"></li><li>RPC框架要做到的最基本的三件事：<br>1、服务端如何确定客户端要调用的函数；<br>在远程调用中，客户端和服务端分别维护一个【ID-&gt;函数】的对应表， ID在所有进程中都是唯一确定的。客户端在做远程过程调用时，附上这个ID，服务端通过查表，来确定客户端需要调用的函数，然后执行相应函数的代码。<br>2、如何进行序列化和反序列化；<br>客户端和服务端交互时将参数或结果转化为字节流在网络中传输，那么数据转化为字节流的或者将字节流转换成能读取的固定格式时就需要进行序列化和反序列化，序列化和反序列化的速度也会影响远程调用的效率。<br>3、如何进行网络传输（选择何种网络协议）；<br>多数RPC框架选择TCP作为传输协议，也有部分选择HTTP。如gRPC使用HTTP2。不同的协议各有利弊。TCP更加高效，而HTTP在实际应用中更加的灵活。</li><li>俩者区别<ul><li>REST 是服务端把方法写好，客户端并不知道具体方法。客户端只想获取资源，所以发起HTTP请求，而服务端接收到请求后根据URI经过一系列的路由才定位到方法上面去。</li><li>PRC是服务端提供好方法给客户端调用，客户端需要知道服务端的具体类，具体方法，然后像调用本地方法一样直接调用它。</li></ul></li></ul><h2 id="SOAP"><a href="#SOAP" class="headerlink" title="SOAP"></a>SOAP</h2><p>SOAP（Simple Objects Access Protocol），它是一种 XML 格式、高度标准化的 Web 通信协议</p><h2 id="GraphQL"><a href="#GraphQL" class="headerlink" title="GraphQL"></a>GraphQL</h2><p><a href="https://graphql.cn/learn/serving-over-http/">https://graphql.cn/learn/serving-over-http/</a><br>HTTP 通常与 REST 相关联，REST 使用“资源”作为其核心概念。相比之下，GraphQL 的概念模型是一个实体图。因此，GraphQL 中的实体无法通过 URL 识别。相反，GraphQL 服务器在单个 URL &#x2F;入口端点（通常是 &#x2F;graphql）上运行，并且所有提供服务的 GraphQL 请求都应被导向此入口端点。</p><h1 id="python实现远程调用的三种方式"><a href="#python实现远程调用的三种方式" class="headerlink" title="python实现远程调用的三种方式"></a>python实现远程调用的三种方式</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>基于xml-rpc</span><br><span class="line"><span class="keyword">import</span> SimpleXMLRPCServer</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">calculate</span>:</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">self, x, y</span>):</span><br><span class="line">    <span class="keyword">return</span> x + y</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">multiply</span>(<span class="params">self, x, y</span>):</span><br><span class="line">    <span class="keyword">return</span> x * y</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">subtract</span>(<span class="params">self, x, y</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">abs</span>(x-y)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">divide</span>(<span class="params">self, x, y</span>):</span><br><span class="line">    <span class="keyword">return</span> x/y</span><br><span class="line"></span><br><span class="line">obj = calculate()</span><br><span class="line">server = SimpleXMLRPCServer.SimpleXMLRPCServer((<span class="string">&quot;localhost&quot;</span>, <span class="number">8088</span>))</span><br><span class="line"><span class="comment">#将实例注册给rpc server</span></span><br><span class="line">server.register_instance(obj)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Listening on port 8088&quot;</span>)</span><br><span class="line">server.serve_forever()</span><br><span class="line"><span class="comment">#调用</span></span><br><span class="line"><span class="keyword">import</span> xmlrpclib</span><br><span class="line">server = xmlrpclib.ServerProxy(<span class="string">&quot;http://localhost:8088&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>基于json-rpc</span><br><span class="line">俩种：</span><br><span class="line"><span class="number">1.j</span>sonrpclib</span><br><span class="line"><span class="number">2.</span>python-jsonrpc</span><br><span class="line"><span class="number">3.</span>zerorpc</span><br><span class="line"><span class="keyword">import</span> zerorpc</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">caculate</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hello</span>(<span class="params">self, name</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;hello, &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(name)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">self, x, y</span>):</span><br><span class="line">    <span class="keyword">return</span> x + y</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">multiply</span>(<span class="params">self, x, y</span>):</span><br><span class="line">    <span class="keyword">return</span> x * y</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">subtract</span>(<span class="params">self, x, y</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">abs</span>(x-y)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">divide</span>(<span class="params">self, x, y</span>):</span><br><span class="line">    <span class="keyword">return</span> x/y</span><br><span class="line"></span><br><span class="line">s = zerorpc.Server(caculate())</span><br><span class="line"></span><br><span class="line">s.bind(<span class="string">&quot;tcp://0.0.0.0:4242&quot;</span>)</span><br><span class="line">s.run()</span><br><span class="line"><span class="comment">#调用</span></span><br><span class="line"><span class="keyword">import</span> zerorpc</span><br><span class="line">c = zerorpc.Client()</span><br><span class="line">c.connect(<span class="string">&quot;tcp://127.0.0.1:4242&quot;</span>)</span><br></pre></td></tr></table></figure><p>​</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>到底什么是云计算和云原生</title>
      <link href="/post/8f5ec121.html"/>
      <url>/post/8f5ec121.html</url>
      
        <content type="html"><![CDATA[<h1 id="云计算"><a href="#云计算" class="headerlink" title="云计算"></a>云计算</h1><h2 id="什么是云计算？"><a href="#什么是云计算？" class="headerlink" title="什么是云计算？"></a>什么是云计算？</h2><p>这是AWS官方的解释：</p><blockquote><p>云计算通过互联网按需提供 IT 资源，并且采用按使用量付费的定价方式。您可以根据需要从诸如 Amazon Web Services (AWS) 之类的云提供商那里获得技术服务，例如计算能力、存储和数据库，而无需购买、拥有和维护物理数据中心及服务器。</p></blockquote><p>特点：</p><ul><li>敏捷性<ul><li>云使您可以轻松使用各种技术，从而可以更快地进行创新，并构建几乎任何可以想象的东西</li></ul></li><li>弹性<ul><li>云使您可以轻松使用各种技术，从而可以更快地进行创新，并构建几乎任何可以想象的东西</li></ul></li><li>节约成本<ul><li>云技术将您的固定支出（如数据中心和物理服务器）转变为可变支出，并且只需按实际用量付费</li></ul></li></ul><h2 id="云计算模型："><a href="#云计算模型：" class="headerlink" title="云计算模型："></a>云计算模型：</h2><h3 id="基础设施即服务-IaaS"><a href="#基础设施即服务-IaaS" class="headerlink" title="基础设施即服务 (IaaS)"></a>基础设施即服务 (IaaS)</h3><p>基础设施即服务有时缩写为 IaaS，包含云 IT 的基本构建块，通常提供对联网功能、计算机（虚拟或专用硬件）以及数据存储空间的访问。基础设施即服务提供最高等级的灵活性和对 IT 资源的管理控制，其机制与现今众多 IT 部门和开发人员所熟悉的现有 IT 资源最为接近。</p><h3 id="平台即服务-PaaS-："><a href="#平台即服务-PaaS-：" class="headerlink" title="平台即服务 (PaaS)："></a>平台即服务 (PaaS)：</h3><p>平台即服务消除了组织对底层基础设施（一般是硬件和操作系统）的管理需要，让您可以将更多精力放在应用程序的部署和管理上面。这有助于提高效率，因为您不用操心资源购置、容量规划、软件维护、补丁安装或与应用程序运行有关的任何无差别的繁重工作。</p><h3 id="软件即服务-SaaS"><a href="#软件即服务-SaaS" class="headerlink" title="软件即服务 (SaaS)"></a>软件即服务 (SaaS)</h3><p>软件即服务提供了一种完善的产品，其运行和管理皆由服务提供商负责。人们通常所说的软件即服务指的是终端用户应用程序。使用 SaaS 产品时，服务的维护和底层基础设施的管理都不用您操心，您只需要考虑怎样使用 SaaS 软件就可以了。SaaS 的常见应用是基于 Web 的电子邮件，在这种应用场景中，您可以收发电子邮件而不用管理电子邮件产品的功能添加，也不需要维护电子邮件程序运行所在的服务器和操作系统。<br><img src="/../images/could/%E4%BA%91%E8%AE%A1%E7%AE%97%E4%B8%89%E7%A7%8D%E6%A8%A1%E5%9E%8B.png"></p><h2 id="云计算部署模型"><a href="#云计算部署模型" class="headerlink" title="云计算部署模型"></a>云计算部署模型</h2><h3 id="公有云（Public-Cloud）"><a href="#公有云（Public-Cloud）" class="headerlink" title="公有云（Public Cloud）"></a>公有云（Public Cloud）</h3><p>基于云的应用程序完全部署在云中且应用程序的所有组件都在云中运行。云中的应用程序分为两种，一种是在云中创建，另一种是从现有基础设施迁移到云中以利用云计算的优势。基于云的应用程序可以构建在基础设施组件上，也可以使用较高级别的服务，这些服务提供了从核心基础设施的管理、架构和扩展要求中抽象提取的能力。</p><h3 id="私有云（Private-Cloud）"><a href="#私有云（Private-Cloud）" class="headerlink" title="私有云（Private Cloud）"></a>私有云（Private Cloud）</h3><p>使用虚拟化和资源管理工具在本地部署资源往往被称作“私有云”。本地部署无法提供云计算的诸多优势，但有时采用这种方案是为了能够提供专用资源。大多数情况下，这种部署模型与旧式 IT 基础设施无异，都通过应用程序管理和虚拟化技术尽可能提高资源利用率。</p><h3 id="混合云（Hybird-Cloud）"><a href="#混合云（Hybird-Cloud）" class="headerlink" title="混合云（Hybird Cloud）"></a>混合云（Hybird Cloud）</h3><p>混合部署是一种在基于云的资源和非云现有资源之间连接基础设施和应用程序的方法。混合部署最常见的方法是在云和现有本地基础设施之间将组织的基础设施扩展到云中，同时将云资源与内部系统进行连接</p><h1 id="什么是云原生"><a href="#什么是云原生" class="headerlink" title="什么是云原生"></a>什么是云原生</h1><p><a href="https://12factor.net/zh_cn/">https://12factor.net/zh_cn/</a></p><p><a href="https://wiki.teamssix.com/cloudnative/#_0x02-%E4%BA%91%E5%8E%9F%E7%94%9F%E5%AE%89%E5%85%A8">https://wiki.teamssix.com/cloudnative/#_0x02-%E4%BA%91%E5%8E%9F%E7%94%9F%E5%AE%89%E5%85%A8</a></p><h2 id="核心"><a href="#核心" class="headerlink" title="核心"></a>核心</h2><h3 id="微服务"><a href="#微服务" class="headerlink" title="微服务"></a>微服务</h3><p><a href="https://www.topgoer.com/%E5%BE%AE%E6%9C%8D%E5%8A%A1/%E8%AE%A4%E8%AF%86%E5%BE%AE%E6%9C%8D%E5%8A%A1.html">https://www.topgoer.com/%E5%BE%AE%E6%9C%8D%E5%8A%A1/%E8%AE%A4%E8%AF%86%E5%BE%AE%E6%9C%8D%E5%8A%A1.html</a></p><h4 id="微服务设计的六大原则"><a href="#微服务设计的六大原则" class="headerlink" title="微服务设计的六大原则"></a>微服务设计的六大原则</h4><p>1.高内聚，低耦合<br>每个服务针对单一的业务负责，而且耦合性很低，不依赖外部服务<br>2.高度自治<br>能够独立开发部署和发布，独立的部门业务<br>3.以业务为中心<br>每个服务代表了特定的业务<br>4.弹性设计<br>可容错性强，可降级，熔断，防止雪崩等<br>5.日志与监控<br>能够快速定位错误，以及即使通知异常<br>6.自动化</p><h3 id="容器，容器编排"><a href="#容器，容器编排" class="headerlink" title="容器，容器编排"></a>容器，容器编排</h3><p>简单理解：Docker + K8s</p><h3 id="服务网格"><a href="#服务网格" class="headerlink" title="服务网格"></a>服务网格</h3><p>微服务技术架构实践中主要有侵入式架构和非侵入式架构</p><ul><li>侵入式：服务框架侵入程序代码，开发者组合各种组件。</li><li>非侵入式：以代理的形式，与应用程序部署在一起。<br>为了解决微服务框架侵入性的问题，引入Service Mesh</li></ul><p>服务网格核心在于将客户端 SDK 剥离，以 Proxy 组件方式独立进程运行，每个服务都额外部署这个 Proxy 组件，所有出站入站的流量都通过该组件进行处理和转发。<br><img src="/../images/could/%E6%9C%8D%E5%8A%A1%E7%BD%91%E6%A0%BC.png" alt="服务网格"></p><p><strong>Service Mesh</strong><br>可以将它比作是应用程序或者说微服务间的 TCP&#x2F;IP，负责服务之间的网络调用、限流、熔断和监控。对于编写应用程序来说一般无须关心 TCP&#x2F;IP 这一层（比如通过 HTTP 协议的 RESTful 应用），同样使用 Service Mesh 也就无须关心服务之间的那些原本通过服务框架实现的事情，比如 Spring Cloud、Netflix OSS 和其他中间件，现在只要交给 Service Mesh 就可以了。<br><a href="https://philcalcado.com/2017/08/03/pattern_service_mesh.html">https://philcalcado.com/2017/08/03/pattern_service_mesh.html</a><br>Service Mesh 有如下几个特点：</p><ul><li>应用程序间通信的中间层</li><li>轻量级网络代理</li><li>应用程序无感知</li><li>解耦应用程序的重试&#x2F;超时、监控、追踪和服务发现</li></ul><h3 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h3><p>DevOps（Development 和 Operations 的组合词）是一组过程、方法与系统的统称，用于促进开发（应用程序&#x2F;软件工程）、技术运营和质量保障（QA）部门之间的沟通、协作与整合。<br>DevOps 的两个核心理念是 CI（持续集成）和 CD（持续交付&#x2F;部署）。</p><p><strong>持续集成（CI）</strong></p><p>重点是将各个开发人员的工作集合到一个代码仓库中。通常，每天都要进行几次，主要目的是尽早发现集成错误，使团队更加紧密结合，更好地协作。<br>在传统软件开发过程中，集成通常发生在每个人都完成了各自的工作之后。在项目尾声阶段，通常集成还要痛苦的花费数周或者数月的时间来完成。持续集成是一个将集成提前至开发周期的早期阶段的实践方式，让构建、测试和集成代码更经常反复地发生。</p><p><strong>持续交付（CD）</strong></p><p>持续交付是持续集成的延伸，将集成后的代码部署到类生产环境，确保可以以可持续的方式快速向客户发布新的更改。如果代码没有问题，可以继续手工部署到生产环境中。</p><p><strong>持续部署（CD）</strong></p><p>是一种更高程度的自动化，无论何时对代码进行重大更改，都会自动进行构建&#x2F;部署。但最终是否需要发布仍然需要人工操作。</p><p><strong>为什么需要DevOps？</strong><br>软件开发过程可采用大量手动操作，但这会导致大量代码错误。开发团队和运营团队可能常常信息不同步，而这可能会拖慢软件交付速度，辜负企业利益干系人的期望。DevOps 在软件开发、部署和维护所涉的全部任务中都可提高效率。</p><p>将开发和运营连接起来可增强可视性、使需求更为准确、改善沟通并加快上市。</p><p><strong>CICD 工具选择</strong></p><ul><li>Travis CI</li><li>Jenkins</li><li>Gitlab CICD</li><li>Github Actions</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>熔断-限流-降级-链路追踪</title>
      <link href="/post/e1cf582c.html"/>
      <url>/post/e1cf582c.html</url>
      
        <content type="html"><![CDATA[<h2 id="熔断机制"><a href="#熔断机制" class="headerlink" title="熔断机制"></a>熔断机制</h2><p>发起服务调用的时候，如果被调用方返回的错误率超过一定的阈值或触发某些特定策略，那么后续的请求将不会真正发起请求，而是在调用方直接返回错误。</p><h2 id="限流"><a href="#限流" class="headerlink" title="限流"></a>限流</h2><p>当系统的处理能力不能应对外部请求的突增流量时，为了不让系统奔溃，必须采取限流的措施。<br><a href="https://blog.csdn.net/qq_37362891/article/details/123299341">https://blog.csdn.net/qq_37362891/article/details/123299341</a></p><h2 id="降级"><a href="#降级" class="headerlink" title="降级"></a>降级</h2><p>服务降级是指 当服务器压力剧增的情况下，根据实际业务情况及流量，对一些服务和页面有策略的不处理或换种简单的方式处理，从而释放服务器资源以保证核心业务正常运作或高效运作。说白了，就是尽可能的把系统资源让给优先级高的服务。</p><h2 id="链路追踪"><a href="#链路追踪" class="headerlink" title="链路追踪"></a>链路追踪</h2><ul><li>zipkin（OpenTracing兼容）<br>拦截请求，侵入<br>传输协议支持：HTTP,MQ</li><li>jaeger（OpenTracing兼容）<br>拦截请求，侵入<br>传输协议支持：UDP&#x2F;HTTP</li><li>skywalking（OpenTracing兼容）<br>字节码注入，无侵入<br>传输协议支持：gRPC</li><li>pinpoint（OpenTracing不兼容）<br>字节码注入，无侵入<br>传输协议支持：Thrift<br>客户端支持语言不支持GO<br>TLog<br><a href="https://tlog.yomahub.com/pages/5b7bd2/">https://tlog.yomahub.com/pages/5b7bd2/</a></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>身份认证、授权、鉴权、权限管理</title>
      <link href="/post/5c1d7fbd.html"/>
      <url>/post/5c1d7fbd.html</url>
      
        <content type="html"><![CDATA[<h2 id="认证-identification"><a href="#认证-identification" class="headerlink" title="认证(identification)"></a>认证(identification)</h2><p>确认声明者的身份<br>根据声明者独特的识别信息</p><h2 id="授权-authorization"><a href="#授权-authorization" class="headerlink" title="授权(authorization)"></a>授权(authorization)</h2><p>获取用户的委派权限<br>颁发一个授信媒介，不可被篡改，不可伪造，受保护</p><ul><li>Http Basic Authentication(<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Authorization">https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Authorization</a>)</li><li>session-cookie</li><li>token&#x2F;jwt</li><li>OAuth</li></ul><h2 id="鉴权-authentication"><a href="#鉴权-authentication" class="headerlink" title="鉴权(authentication)"></a>鉴权(authentication)</h2><p><a href="https://blog.csdn.net/sxf1061700625/article/details/124753095">https://blog.csdn.net/sxf1061700625/article/details/124753095</a><br>对所声明的权限真实性进行鉴别的过程权限是一个抽象的逻辑概念，定义和配置可执行的操作，而控制是具体的实现方式，通过一定的方式控制操作的允许和禁止<br>鉴权和授权是一一对应关系，解析授信媒介，确认其合法性、有效性</p><h2 id="权限控制-access-x2F-permission-control"><a href="#权限控制-access-x2F-permission-control" class="headerlink" title="权限控制(access&#x2F;permission control)"></a>权限控制(access&#x2F;permission control)</h2><p>权限是一个抽象的逻辑概念，定义和配置可执行的操作，而控制是具体的实现方式，通过一定的方式控制操作的允许和禁止<br>实现方式多样，根据具体情况来实现。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>cookie,token,session,jwt你们是不是在讨论同一件事</title>
      <link href="/post/598151c0.html"/>
      <url>/post/598151c0.html</url>
      
        <content type="html"><![CDATA[<h1 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h1><ul><li>cookie只是一个载体，可以承载各种认证内容，这是http协议请求头携带的一种规定形式。</li><li>token是一个很广泛的概念，他既可以做用户身份认证，也可以做安全机制的认证，简单理解他就是一段认证的字符串</li><li>jwt是token的一种实现方式</li><li><strong>JWT与OAuth的区别（<a href="https://segmentfault.com/a/1190000040920592%EF%BC%89">https://segmentfault.com/a/1190000040920592）</a></strong><ul><li>OAuth2是一种授权框架 ，JWT是一种认证协议</li><li>OAuth2用在使用第三方账号登录的情况(比如使用weibo, qq, github登录某个app)，而JWT是用在前后端分离, 需要简单的对后台API进行保护时使用。</li></ul></li><li>浏览器发起跨域请求的时候，是不会主动带上cookie的，详细查看ajax这篇文章</li><li>就本质来说 JWT 没有对 “状态” 这件事任何规定和限制，其本身只是一种数据格式而已，所以在实现上甚至可以把 Session ID 放在 JWT 里，把 JWT 当 Cookie 用</li></ul><h1 id="cookie实现方式"><a href="#cookie实现方式" class="headerlink" title="cookie实现方式"></a>cookie实现方式</h1><p><img src="/../images/cookie/cookie%E5%A4%84%E7%90%86%E6%9C%BA%E5%88%B6.png" alt="cookie"></p><ul><li>http协议是无状态的协议，相同的请求请求多次，他不会记录，他也不认识。因此引入cookie技术，客户端请求服务器，如果服务器需要记录该用户状态，就使用response向客户端浏览器颁发一个Cookie。客户端会把Cookie保存起来。当浏览器再请求该网站时，浏览器把请求的网址连同该Cookie一同提交给服务器。服务器检查该Cookie，以此来辨认用户状态。</li><li>cookie问题<ul><li>数据保存在在客户端，信息容易被泄露</li></ul></li></ul><h1 id="cookie-session实现方式"><a href="#cookie-session实现方式" class="headerlink" title="cookie+session实现方式"></a>cookie+session实现方式</h1><p><img src="/../images/cookie/cookie%E5%8A%A0session%E7%9A%84%E6%9C%BA%E5%88%B6.png" alt="cookie+session"></p><ul><li>Session是另一种记录客户状态的机制，不同的是Cookie保存在客户端浏览器中，而Session保存在服务器上。客户端浏览器访问服务器的时候，服务器把客户端信息以某种形式记录在服务器上。这就是Session。客户端浏览器再次访问时只需要从该Session中查找该客户的状态就可以了。每个用户访问服务器都会建立一个session，那服务器是怎么标识用户的唯一身份呢？事实上，用户与服务器建立连接的同时，服务器会自动为其分配一个SessionId，把sessionId添加在cookie中请求。</li><li>session问题<ul><li>服务器保存大量的session信息，很消耗服务器性能，如果考虑多台服务器部署，还要考虑session共享的问题</li></ul></li></ul><h1 id="第三方案"><a href="#第三方案" class="headerlink" title="第三方案"></a>第三方案</h1><ul><li>服务器通过加密算法对信息加密，然后返回给客户端，客户端再发送的时候携带此信息。增加了加密解密验证的环节，由于加密的密码在服务器，导致人为很难伪造，再加上过期时间。</li><li>token是无状态的，token字符串里就保存了所有的用户信息。客户端登陆传递信息给服务端，服务端收到后把用户信息加密（token）传给客户端，客户端将token存放于localStroage等容器中。客户端每次访问都传递token，服务端解密token，就知道这个用户是谁了。通过cpu加解密，服务端就不需要存储session占用存储空间，就很好的解决负载均衡多服务器的问题了。这个方法叫做JWT(Json Web Token)</li></ul><h1 id="jwt"><a href="#jwt" class="headerlink" title="jwt"></a>jwt</h1><p><img src="/../images/cookie/jwt.png" alt="jwt"></p><h2 id="python3安装"><a href="#python3安装" class="headerlink" title="python3安装"></a>python3安装</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">pip3 install pyjwt</span><br><span class="line"></span><br><span class="line">pip3 install djangorestframework-jwt</span><br><span class="line">djangoresframework-jwt本质是调用pyjwt实现</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="基于传统的token认证"><a href="#基于传统的token认证" class="headerlink" title="基于传统的token认证"></a>基于传统的token认证</h2><p>用户登录,服务端给返回token,并将token保存在服务端. 以后用户再来访问时,需要携带token,服务端获取token后,再去数据库中获取token进行校验.</p><h2 id="jwt-1"><a href="#jwt-1" class="headerlink" title="jwt"></a>jwt</h2><p><a href="http://www.ruanyifeng.com/blog/2018/07/json_web_token-tutorial.html">http://www.ruanyifeng.com/blog/2018/07/json_web_token-tutorial.html</a></p><p>用户登录,服务端给用户返回一个token(服务端不保存). 以后用户再来访问,需要携带token,服务端获取token后,再做token的校验.</p><p>优势:相较于传统的token相比,它无需在服务端保存token</p><h2 id="jwt实现过程"><a href="#jwt实现过程" class="headerlink" title="jwt实现过程"></a>jwt实现过程</h2><p><a href="https://jwt.io/#debugger-io%EF%BC%8C%E5%8F%AF%E4%BB%A5%E6%9F%A5%E7%9C%8Bjwt%E7%9A%84%E7%BB%84%E6%88%90%E9%83%A8%E5%88%86%E3%80%82">https://jwt.io/#debugger-io，可以查看jwt的组成部分。</a></p><p>无论何时用户想要访问受保护的路由或者资源的时候，用户代理（通常是浏览器）都应该带上JWT，典型的，通常放在Authorization header中，用Bearer schema。</p><p>header应该看起来是这样的：</p><blockquote><p>Authorization: Bearer</p></blockquote><p>服务器上的受保护的路由将会检查Authorization header中的JWT是否有效，如果有效，则用户可以访问受保护的资源。如果JWT包含足够多的必需的数据，那么就可以减少对某些操作的数据库查询的需要，尽管可能并不总是如此。</p><ul><li><p>用户提交用户名和密码给服务端,如果登录成功,使用jwt创建一个token,并给用户返回. </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c</span><br></pre></td></tr></table></figure><p>注意:jwt生成的token是由三段字符串组成,并且用.连接起来. </p><ul><li><p>第一段字符串,HEADER, 内部包含算法&#x2F;token类型.<br>json转化成字符串,然后做 base64url 加密(base64加密 ; + _ ).</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;alg&quot;: &quot;HS256&quot;,</span><br><span class="line">  &quot;typ&quot;: &quot;JWT&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>第二段字符串,payload,自定义值.<br>json转化成字符串,然后做 base64url 加密(base64加密 ; + _ ).</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;id&quot;: &quot;123123&quot;,</span><br><span class="line">  &quot;name&quot;: &quot;chenggen&quot;,</span><br><span class="line">  &quot;exp&quot;: 1516239022 # 超时时间</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>第三段字符串:  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">第一步: 第1,2部分密文拼接起来</span><br><span class="line">eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ</span><br><span class="line">第二步:对前2部分密文进行HS256加密 + 加盐</span><br><span class="line">第三步:对HS256加密后的密文再做base64url加密</span><br></pre></td></tr></table></figure></li></ul></li><li><p>以后用户再来访问时候,需要携带token,后端需要对token进行校验</p><ul><li><p>获取token</p></li><li><p>第一步: 对token进行切割</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c</span><br></pre></td></tr></table></figure></li><li><p>第二步: 对第二段进行base64url解密,并获取payload信息,检测token是否已经超时?</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;id&quot;: &quot;123123&quot;,</span><br><span class="line">  &quot;name&quot;: &quot;chenggen&quot;,</span><br><span class="line">  &quot;exp&quot;: 1516239022 # 超时时间</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>第三步: 把第1,2端拼接,再次执行sha256加密</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">HMACSHA256(</span><br><span class="line">  base64UrlEncode(header) + &quot;.&quot; +</span><br><span class="line">  base64UrlEncode(payload),</span><br><span class="line">  secret)</span><br><span class="line">第一步: 第1,2部分密文拼接起来</span><br><span class="line">eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ</span><br><span class="line">第二步:对前2部分密文进行HS256加密 + 加盐（secret这个密钥只有服务器才知道，避免泄露）</span><br><span class="line"></span><br><span class="line">密文 = base64解密(SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c)</span><br><span class="line">如果相等,表示token未被修改过.(认证通过)</span><br></pre></td></tr></table></figure></li></ul></li></ul><h1 id="为什么要抛弃session，使用token"><a href="#为什么要抛弃session，使用token" class="headerlink" title="为什么要抛弃session，使用token"></a>为什么要抛弃session，使用token</h1><p>现代架构之所以用 token ，是因为后端普遍采用分布式，各服务器之间同步状态（比如 session ）的开销很大，所以干脆不用状态，而是给个 token ，后端各自验证 token 的有效性而无需与其他服务器沟通，这就是所谓的 stateless 。</p><p>stateless 在绝大多数时候都没问题，但我们却不太可能实现彻底的无状态。比如用户修改了密码，服务端想强制他重新登录，这就得通知各个服务器不要再接受之前的 token 了。</p><p>要解决这个问题，常见的有 3 种方法：<br>1 、找个地方（内存、数据库等）记录合法的 token ，每次验证 token 都查一下这个 token 是否还在。<br>2 、找个地方（内存、数据库等）记录 token 的黑名单，每次验证 token 都查一下这个 token 是否在黑名单里。<br>3 、让 token 自己失效。</p><p>前两种都是有状态的方法，仍然避免不了状态同步的瓶颈，所以我们一般采用第三种方法。</p><p>那怎么让 token 自己失效呢？ token 里一般都有时间信息，所以只需把有效期设得短一点，不再更新它，它就过期失效了。</p><p>这就引出了更新的问题，怎么更新 token 呢？我们一般用另一个 token ，这就是所谓的 refresh token 。服务端收到 refresh token 以后，是要检查黑名单或者白名单的，所以更新 token 这一步是有状态的。只有 refresh token 有效，才会下发 access token ，这样就把对状态同步的需求限制到了一个很小的范围内，从而降低状态同步成本。</p><h1 id="其他："><a href="#其他：" class="headerlink" title="其他："></a>其他：</h1><ul><li>refreshToken 获取新 token 即可（对用户来说是无感知的替换了 accessToken ）。jwt 和 redis 选择一种方案即可，jwt 本身有附带信息解密即可，如果用 redis 关联 token-用户信息查询也很快。（<a href="https://blog.csdn.net/NSPOKS/article/details/101771817/%EF%BC%89">https://blog.csdn.net/NSPOKS/article/details/101771817/）</a>　</li><li>JWT 可以有 JTI 唯一 ID ，需要支持注销的话广播一下 JTI 到各个访问控制点作为黑名单就行了。平时不用每次访问都去 redis 或者数据库验证，使用 JWT 自带的签名校验。</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> cookie </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vim命令</title>
      <link href="/post/7de3426c.html"/>
      <url>/post/7de3426c.html</url>
      
        <content type="html"><![CDATA[<h2 id="help"><a href="#help" class="headerlink" title="help"></a>help</h2><p><strong>:h {TEXT}</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">:h motion  <span class="comment"># 第一章我们讲过了motion，可以试着自己看看</span></span><br><span class="line">:h buffer  <span class="comment"># buffer是vim处理文件缓存的方式</span></span><br><span class="line">:h tab     <span class="comment"># tab和浏览器、vscode的tab一样</span></span><br><span class="line">:h window  <span class="comment"># 窗口的概念 和窗口相关的是split，窗口分割</span></span><br><span class="line">:h         <span class="comment"># 当然可以打开整个帮助手册</span></span><br><span class="line">:h z       <span class="comment"># z命令帮助</span></span><br></pre></td></tr></table></figure><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><p>1.转到文件结尾<br>G<br>2.或转到第9行<br>9G<br>3.删除所有内容(先用G转到文件尾) ，使用<code>:</code><br>:1,.d<br>或者删除第9行到第200行的内容(先用200G转到第200行) ，使用<br>:9,.d<br>4.删除光标所在处字符<br>x<br>5.删除光标所在前字符（大写 X ）<br>X<br>6.删除到下一个单词开头<br>dw<br>7.删除到本单词末尾<br>de<br>8.删除到本单词末尾包括标点在内<br>dE<br>9.删除到前一个单词<br>db<br>10.删除到前一个单词包括标点在内<br>dB<br>11.删除一整行<br>dd<br>12.删除光标位置到本行结尾<br>D d$<br>13.删除光标位置到本行开头<br>d0<br>说明：这是在vim中 ，“.”当前行 ，“1,.”表示从第一行到当前行 ，“d”删除，3dd代表删除三行。<br>J<br>将光标所在的行与下一行的数据结合成一行<br><code>.</code><br>重复上一次的操作<br>9b 光标向前移动9个单词<br><code>8&lt;C-d&gt;</code> 翻页操作8次<br>:w     保存文件 字面意思 write<br>:w!    强制保存文件<br>:wa    保存所有文件，针对你打开buffer过多的情况<br>:q     退出<br>:q!    强行退出<br>:wq    保存并退出<br>:qa    退出所有buffer </p><h3 id="多文本编辑"><a href="#多文本编辑" class="headerlink" title="多文本编辑"></a>多文本编辑</h3><p><code>:n</code><br>编辑下一个文件<br><code>:N</code><br>编辑上一个文件<br><code>:files</code><br>列出当前这个vim打开的所有文件</p><h3 id="多窗口"><a href="#多窗口" class="headerlink" title="多窗口"></a>多窗口</h3><p>:sp [filname]打开一个新的窗口，如果没有filename，会默认打开一个当前文本的窗口，同步显示。有则会同时显示fileame和origin两个文本。<br>:new+窗口名(保存后就是文件名)<br>:vsplit+窗口名，也可以简写为：vsp+窗口名，<br>Ctrl + w + h：向左移动窗口<br>Ctrl + w + j： 向下移动窗口<br>Ctrl + w + j： 向上移动窗口<br>Ctrl + w + l： 向右移动窗口<br>:tabc 关闭当前窗口<br>:tabo 关闭所有窗口</p><h3 id="字符移动"><a href="#字符移动" class="headerlink" title="字符移动"></a>字符移动</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">k            上移                k</span><br><span class="line">h            左移            h        l</span><br><span class="line">l            右移                j</span><br><span class="line">j            下移</span><br></pre></td></tr></table></figure><p>你也可以使用键盘上的方向键来移动，但这么做h j k l的存在就失去了意义</p><p>之所以使用h j k l来控制方向，其主要目的是让你的手不离开键盘中心，从而提高效率</p><p><strong>tips</strong>：在命令前加上数字代表命令执行次数，如：5k，表示上移5行</p><h4 id="单词移动"><a href="#单词移动" class="headerlink" title="单词移动"></a>单词移动</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">W w            移动到下一个单词开头</span><br><span class="line">E e            移动到下一个单词结尾</span><br><span class="line">B b            倒退到上一个单词开头</span><br></pre></td></tr></table></figure><p>需要注意的是，E会忽略标点符号，如：I‘m，e会当成两个单词，E则不会<br>同样，在命令前加上数字代表执行次数，如：2w，表示往下移动2个单词</p><h4 id="整行移动"><a href="#整行移动" class="headerlink" title="整行移动"></a>整行移动</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">0            移动到行首</span><br><span class="line">$            移动到行末</span><br><span class="line">+            移动到下一行开头</span><br><span class="line">-            移动到上一行开头</span><br></pre></td></tr></table></figure><p>这里需要注意的是+ -和上面的j k有什么不同之处<br>j k也是移动到上一行和下一行，但它们移动的是光标所在的位置<br>+ -不管你的光标在何处，总是移动到下一行或上一行的行首</p><p><strong>滚屏</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Ctrl+f            往前滚动一整屏</span><br><span class="line">Ctrl+b            往后滚动一整屏</span><br><span class="line">Ctrl+d            往前滚动半屏</span><br><span class="line">Ctrl+u            往后滚动半屏</span><br><span class="line"></span><br><span class="line">Ctrl+e            往后滚动一行        </span><br><span class="line">Ctrl+y            往前滚动一行</span><br></pre></td></tr></table></figure><p>看似比较多，但是可以根据键盘的位置来进行记忆，并且下面两个也不常用</p><p>上面的滚屏都有一个共同点，就是会改变光标的位置，且屏幕也在改变</p><p>如果想让光标维持在原来的位置实现滚屏请看下面</p><p><strong>用z调整光标</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">z&lt;Enter&gt;        将光标所在行移动到屏幕顶端</span><br><span class="line">z.              将光标所在行移动到屏幕中间</span><br><span class="line">z-              将光标所在行移动到屏幕低端</span><br></pre></td></tr></table></figure><p><code>tips：980z&lt;Enter&gt;可以将第980行移动到屏幕顶端</code></p><p>好吧，有时候你其实不想滚屏，你只想在当前屏幕中移动</p><p>请往下看</p><p><strong>在屏幕中移动</strong><br>H            移动到屏幕顶端的行<br>M            移动到屏幕中央的行<br>L            移动到屏幕底端的行<br>nH           移动到屏幕顶端往下的第n行<br>nL           移动到屏幕顶端往上的第n行</p><p>据我猜测这三个字母应该是HIgh、Middle和Low的缩写，其实挺好记的<br>多练习几遍就行了，需要注意的是：这里只是光标的位置变化，和上面两种不同<br>tips：你可以用+ -和j k实现同样的位置变化，只不过要操作多次而已</p><p><strong>在当前行移动</strong><br>^            移动到当前行的第一个非空格处<br>n|           移动到当前行的第n列</p><p>这里的^与上面的0通常情况下表示的位置是一样的<br>而n|，个人感觉还没有h l方便，慢慢的数出行数还不如直接按着h l 左右移</p><p><strong>根据文本块移动</strong></p><p>所谓的文本块也就是句子、段落、小节等</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">（            移动到当前句子开头</span><br><span class="line">）            移动到下一个句子开头</span><br><span class="line">&#123;            移动到当前这一段开头   </span><br><span class="line">&#125;            移动到下一段开头</span><br><span class="line">[[           移动到当前这一节的开头</span><br><span class="line">]]           移动到下一节的开头</span><br></pre></td></tr></table></figure><p>其中，VIM以? . !等符号来标记一个句子<br>空白行来标记一个段落<br>用节宏来标记一个节（节宏是什么我还没搞清楚）</p><p>根据行号来移动<br>Ctrl+g            显示当前行信息<br>nG                转至第n行<br>G                 转至文本末尾<br>gg　　　移至文本开头</p><p>如果你不知道当前是多少行的话就可以用Ctrl+g来查看<br>如果想转到第800行，可以用800G<br>其实z命令也可以做到，并且把光标移动到第一行</p><h2 id="剪切板和寄存器"><a href="#剪切板和寄存器" class="headerlink" title="剪切板和寄存器"></a>剪切板和寄存器</h2><h3 id="无名寄存器-“”"><a href="#无名寄存器-“”" class="headerlink" title="无名寄存器(“”)"></a>无名寄存器(“”)</h3><p>两个双引号，Vim中叫做无名寄存器。x,s,d,c,y等操作，如果不指定寄存器，都是将临时内容放到这个寄存器中，也就是相当于一个默认寄存器。<br>可以通过 <font color="#ff0000">:reg </font>来查看当前寄存器的值，操作一下，然后查寄存器内容，就明白了。<br>例如：<br>复制当前行(yy)，并粘贴p。<br>这里y命令会将当前行内容放入寄存器””，按p时，会到寄存器””中取内容。</p><h3 id="复制专用寄存器-“0"><a href="#复制专用寄存器-“0" class="headerlink" title="复制专用寄存器(“0)"></a>复制专用寄存器(“0)</h3><p>通过y命令复制的内容，会保存到寄存器0中。<br>寄存器的使用是通过”后面跟寄存器名字。<br>例如：<br>复制当前行(yy)，<br>又做了几次删除单词操作(dw)<br>但是只想粘贴刚才复制的行，那么就不能用无名寄存器””去粘贴了，不能直接p进行粘贴，需要用”0p，指定使用寄存器0，因为”0里只存放y命令存入的内容。</p><h3 id="删除专用寄存器-“1-“9"><a href="#删除专用寄存器-“1-“9" class="headerlink" title="删除专用寄存器(“1-“9)"></a>删除专用寄存器(“1-“9)</h3><p>通过d或c命令，删掉的内容，会保存打”1-“9这9个寄存器中。<br>最新删除的内容，会在”1中，其他顺延。<br>例如：<br>删除当前行(yy)<br>删除当前行(yy)<br>想复制第一次删除的行，”2p</p><h3 id="命名寄存器-“a-“z"><a href="#命名寄存器-“a-“z" class="headerlink" title="命名寄存器(“a-“z)"></a>命名寄存器(“a-“z)</h3><p>可以将重要内容放到命名寄存器”a-“z中，一共26个。<br>例如：<br>把当前行放入寄存器”j里，”jyy<br>复制寄存器”j的内容， “jp</p><h3 id="黑洞寄存器-“d"><a href="#黑洞寄存器-“d" class="headerlink" title="黑洞寄存器(“d)"></a>黑洞寄存器(“d)</h3><p>放到这个寄存器的内容，将不会放到任何其他寄存器中，相当于彻底删除内容。<br>例如：<br>彻底删除当前行，不放入任何寄存器，”dd</p><h3 id="系统剪贴板-“"><a href="#系统剪贴板-“" class="headerlink" title="系统剪贴板(“+)"></a>系统剪贴板(“+)</h3><p>通过”+寄存器可以把内容复制到系统剪贴板，也可以从系统剪贴板粘贴内容但Vim中。<br>例如：<br>复制当前行到系统剪贴板中，”+yy<br>复制系统剪贴板到vim中，”+p</p><h2 id="高阶"><a href="#高阶" class="headerlink" title="高阶"></a>高阶</h2><h3 id="各种操作的含义"><a href="#各种操作的含义" class="headerlink" title="各种操作的含义"></a>各种操作的含义</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">c       change 修改</span><br><span class="line">d       delete 删除</span><br><span class="line">y       yank   复制到寄存器</span><br><span class="line">p        put  粘贴</span><br><span class="line">&lt;       块移动，左移动</span><br><span class="line">&gt;       块移动，右移动</span><br></pre></td></tr></table></figure><h3 id="命令行结果输出到buffer"><a href="#命令行结果输出到buffer" class="headerlink" title="命令行结果输出到buffer"></a>命令行结果输出到buffer</h3><p><code>enew|pu=execute(&#39;命令&#39;)</code></p><ul><li>pu  is put the text from register after line(default curent line)</li></ul><h3 id="vim-text-object"><a href="#vim-text-object" class="headerlink" title="vim text object"></a>vim text object</h3><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[number]&lt;command&gt;[text object or motion]</span><br></pre></td></tr></table></figure><p>其中：<strong>number</strong>是指命令作用在几个文本对象之上。比如3个单词；<strong>command</strong>是指执行的具体命令。比如删除或复制；<strong>text object or motion</strong>是指具体的文本对象。比如单词、句子或段落。</p><h3 id="文本对象的类型"><a href="#文本对象的类型" class="headerlink" title="文本对象的类型"></a>文本对象的类型</h3><ul><li>iw …inner word(<strong>不</strong>包括周围的空格)</li><li>aw …a word(含在周围的空格)</li><li>iW …inner WORD(字串（以空格分隔）)</li><li>aW …a WORD</li><li>is …inner sentence</li><li>as …a sentence</li><li>ip …inner paragraph</li><li>ap …a paragraph</li><li>it …inner tag</li><li>at …a tag</li><li>i( or i) …inner block</li><li>a( or a) …a block</li><li>i&lt; or i&gt; …inner block</li><li>a&lt; or a&gt; …a block</li><li>i{ or i} …inner block</li><li>a{ or a} …a block</li><li>i[ or i] …inner block</li><li>a[ or a] …a block</li><li>i” …inner block</li><li>a” …a block</li><li>i&#96; …inner block</li><li>a&#96; …a blocko<br>复制</li><li><code>yy</code> 或 <code>Y</code> 复制当前行。</li><li><code>yw</code> 用来复制往后一个词，<code>y3w</code> 复制往后三个词。</li><li><code>yiw</code> 复制当前词。</li><li><code>y$</code> 复制到行尾，<code>y^</code> 复制到行首。</li><li><code>yf.</code> 复制直到下一个 <code>.</code> 字符。</li><li><code>ggyG</code> 或 <code>:%y</code> 复制整个文件。</li></ul><p>修改</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">diw     delete <span class="keyword">in</span> word     删除一个单词</span><br><span class="line">di<span class="string">&quot;     delete in &quot;</span>        删除<span class="string">&quot;word&quot;</span>中的word</span><br><span class="line">daw     delete around word 删除一个单词和包裹</span><br><span class="line">cb      change back        向前删除到单词头部，并进入插入模式，即修改</span><br><span class="line">cis     change <span class="keyword">in</span> sentence 修改句子</span><br><span class="line">ci&lt;     change <span class="keyword">in</span> &lt;        修改&lt;word&gt;中的word</span><br><span class="line">ca&lt;     change around &lt;    修改&lt;word&gt;</span><br></pre></td></tr></table></figure><h3 id="surround-vim"><a href="#surround-vim" class="headerlink" title="surround.vim"></a>surround.vim</h3><p>ys(add)<br>ds(delete)<br>cs(change)<br>It’s easiest to explain with examples. Press <code>cs&quot;&#39;</code> inside</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;Hello world!&quot;</span><br></pre></td></tr></table></figure><p>to change it to</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x27;Hello world!&#x27;</span><br></pre></td></tr></table></figure><p>Now press <code>cs&#39;&lt;q&gt;</code> to change it to</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;q&gt;Hello world!&lt;/q&gt;</span><br></pre></td></tr></table></figure><p>To go full circle, press <code>cst&quot;</code> to get</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;Hello world!&quot;</span><br></pre></td></tr></table></figure><p>To remove the delimiters entirely, press <code>ds&quot;</code>.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hello world!</span><br></pre></td></tr></table></figure><p>Now with the cursor on “Hello”, press <code>ysiw]</code> (<code>iw</code> is a text object).</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[Hello] world!</span><br></pre></td></tr></table></figure><p>Let’s make that braces and add some space (use <code>&#125;</code> instead of <code>&#123;</code> for no space): <code>cs]&#123;</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123; Hello &#125; world!</span><br></pre></td></tr></table></figure><p>Now wrap the entire line in parentheses with <code>yssb</code> or <code>yss)</code>.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(&#123; Hello &#125; world!)</span><br></pre></td></tr></table></figure><p>Revert to the original text: <code>ds&#123;ds)</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hello world!</span><br></pre></td></tr></table></figure><p>Emphasize hello: <code>ysiw&lt;em&gt;</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;em&gt;Hello&lt;/em&gt; world!</span><br></pre></td></tr></table></figure><h3 id="标签和跳转"><a href="#标签和跳转" class="headerlink" title="标签和跳转"></a>标签和跳转</h3><p>mark:<br>m + [0-9 a-z A-Z]<br>&#96;跳转标记的字符，’跳转标记的行<br>jump:<br>ctrl  + O<br>ctrl  + I<br>hop:</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vim.api.nvim_set_keymap(<span class="string">&#x27;n&#x27;</span>, <span class="string">&#x27;&lt;leader&gt;&lt;leader&gt;w&#x27;</span>, <span class="string">&#x27;&lt;cmd&gt;HopWord&lt;cr&gt;&#x27;</span>, &#123;&#125;)</span><br><span class="line">vim.api.nvim_set_keymap(<span class="string">&#x27;n&#x27;</span>, <span class="string">&#x27;&lt;leader&gt;&lt;leader&gt;j&#x27;</span>, <span class="string">&#x27;&lt;cmd&gt;HopLine&lt;cr&gt;&#x27;</span>, &#123;&#125;)</span><br><span class="line">vim.api.nvim_set_keymap(<span class="string">&#x27;n&#x27;</span>, <span class="string">&#x27;&lt;leader&gt;&lt;leader&gt;k&#x27;</span>, <span class="string">&#x27;&lt;cmd&gt;HopLine&lt;cr&gt;&#x27;</span>, &#123;&#125;)</span><br><span class="line">vim.api.nvim_set_keymap(<span class="string">&#x27;n&#x27;</span>, <span class="string">&#x27;&lt;leader&gt;&lt;leader&gt;s&#x27;</span>, <span class="string">&#x27;&lt;cmd&gt;HopChar1&lt;cr&gt;&#x27;</span>, &#123;&#125;)</span><br></pre></td></tr></table></figure><h2 id="替换"><a href="#替换" class="headerlink" title="替换"></a>替换</h2><p>替换<br>语法</p><p>:[range] s&#x2F;{old-pattern}&#x2F;{new-pattern}&#x2F;[flags]<br>1<br>range确定范围，不写默认为当前行。<br>%         # 表示整个文件内容<br>.         # 表示当前行<br>$         # 表示最后一行<br>m,n       # 表示从第m行到第n行<br>,n        # 表示从当前行到第n行<br>n,        # 表示从第n行到当前行<br>n         # 指定行<br>+n        # 表示当前行之后的n行</p><p>old-pattern为要被替换的字符串，new-pattern为替换后的新字符串。替换操作与搜索操作使用同样的模式串系统。</p><p>flags为替换标志位，默认为指定范围内的行的第一次匹配的位置，帮助文档:h s_flags，常用标志如下：</p><p>g：global，表示在指定范围内执行全局操作,替换所有匹配项<br>c：confirm，可以确认或拒绝修改<br>n：number，报告匹配到的次数，不替换，可用来查询匹配次数<br>i:执行不区分大小写的替换<br>I:执行区分大小写的替换<br>e:防止替换失败时显示错误消息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:%s/^/#/g # 行前插入 `#` 替换或者gg&lt;Ctrl-v&gt;I#&lt;Esc&gt;</span><br></pre></td></tr></table></figure><h2 id="宏录制"><a href="#宏录制" class="headerlink" title="宏录制"></a>宏录制</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">录制语法 q&#123;register&#125;&#123;commands&#125;q</span><br><span class="line">q - 开始录制</span><br><span class="line">&#123;register&#125; - 表示寄存器名称 (a-z)</span><br><span class="line">&#123;commands&#125; - 一组操作命令(一系列的键盘按键)</span><br><span class="line">q - 是停止录制, 最后把 &#123;commands&#125; 以文本形式存到前面的寄存器里中</span><br><span class="line"></span><br><span class="line">宏执行</span><br><span class="line">语法 `@&#123;register&#125;`</span><br><span class="line">`@@` 可以重复最近一次的 `@&#123;0-9a-z<span class="string">&quot;:*&#125;` 命令</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> vim </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>windows命令</title>
      <link href="/post/62ff1591.html"/>
      <url>/post/62ff1591.html</url>
      
        <content type="html"><![CDATA[<h1 id="windows"><a href="#windows" class="headerlink" title="windows"></a>windows</h1><h2 id="Windows-PowerShell命令"><a href="#Windows-PowerShell命令" class="headerlink" title="Windows PowerShell命令"></a>Windows PowerShell命令</h2><p>它是一个<strong>基于任务</strong>的命令行终端，同时也是一个构建在 <strong>.NET</strong> 上的脚本语言。</p><p>在windows系统开发的可以看看<a href="https://book.douban.com/subject/5307334/">windows-powershell-cookbook</a>这本书</p><p> Get-Alias # 查看ps中的别名<br> Get-Help # 帮助手册<br> Get-Process # 查看进程<br> Set-Location（或 cd）<br> Get-ChildItem（或 dir ）<br> Where-Object 命令可以对某个列表内容或命令的输出应用各种类型的筛选条件。它的默认别名为 where 和 ?。<br> 4 种格式化输出的命令：  </p><ol><li>Format-Table  </li><li>Format-Wide  </li><li>Format-Custom  </li><li>Format-List<br>访问环境变量：<br> Get-ChildItem env:<br> 输出指定的环境变量$env:USERNAME<br> 访问环境变量路径：$env:path<br> 使用类似于 bash 中的 &gt;&gt; 符号<br> 直接进行简单的运算： 100 + 2<br> 可以使用管道符（|）将一个命令的输出重定向至另一个命令作为输入，和 Bash 中管道符的使用一样</li></ol><p> notepad.exe $Profile # 配置文件里面可以自己自定义别名</p><h2 id="查找app文件"><a href="#查找app文件" class="headerlink" title="查找app文件"></a>查找app文件</h2><p>Windows+R输入 shell:AppsFolder，之后找到需要的应用，右键点击创建桌面快捷</p><h2 id="scoop"><a href="#scoop" class="headerlink" title="scoop"></a>scoop</h2><p>scoop是windows下的一个强大的包管理器可以方便快速的安装软件</p><h3 id="scoop安装"><a href="#scoop安装" class="headerlink" title="scoop安装"></a>scoop安装</h3><p>安装scoop很简单只需要在powershell中输入一条指令</p><p><code>iwr -useb get.scoop.sh | iex</code>即可自动安装</p><p>但是默认是在C盘安装所以在运行之前先要更改地址</p><p>并且要让powershell可以执行脚本需要输入</p><p><code>Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope CurrentUser</code></p><p>回车即可</p><p>之后依次输入下面的<strong>两条指令</strong>‘D:\ScoopApp\Scoop’单引号内部的地址可以更改其他的不要动</p><p>$env:SCOOP&#x3D;’D:\ScoopApp\Scoop’<br>[Environment]::SetEnvironmentVariable(‘SCOOP’, $env:SCOOP, ‘User’)</p><p>第一条指令没有问题第二条指令也一样单引号内的地址可以更改可能需要管理员身份右键wt以管理身份运行即可</p><p>$env:SCOOP_GLOBAL&#x3D;’D:\ScoopApp\GlobalScoopApps’ [Environment]::SetEnvironmentVariable(‘SCOOP_GLOBAL’, $env:SCOOP_GLOBAL,’Machine’)</p><p>输入上两条指令之后再输入<code>iwr -useb get.scoop.sh | iex</code>即可开始安装scoop了</p><p>安装完成之后在’D:\ScoopApp\Scoop’的地方会有一个scoop的文件夹里面会有</p><ul><li>apps——所有通过scoop安装的软件都在里面。</li><li>buckets——管理软件的仓库，用于记录哪些软件可以安装、更新等信息，默认添加<code>main</code>仓库，主要包含无需GUI的软件，可手动添加其他仓库或自建仓库，具体在<a href="https://zhuanlan.zhihu.com/write#%E6%8E%A8%E8%8D%90%E8%BD%AF%E4%BB%B6%E4%BB%93%E5%BA%93">推荐软件仓库</a>中介绍。</li><li>cache——软件下载后安装包暂存目录。</li><li>persit——用于储存一些用户数据，不会随软件更新而替换。</li><li>shims——用于软链接应用，使应用之间不会互相干扰，实际使用过程中无用户操作不必细究。</li></ul><p>scoop有很多功能可以自行上网查看，这里只用几个最基本的需要用到的</p><ul><li>install——安装软件。</li><li>uninstall——卸载软件。</li><li>update——更新软件。可通过<code>scoop update *</code>更新所有已安装软件，或通过<code>scoop update</code>更新所有软件仓库资料及Scoop自身而不更新软件。</li></ul><p>比如需要安装git只需要在powershell中输入命令<code>scoop install git</code>即可</p><p>scoop + 命令 + 软件名称</p><p>卸载的话就用<code>scoop uninstall git</code></p><h3 id="安装之后"><a href="#安装之后" class="headerlink" title="安装之后"></a>安装之后</h3><p>安装之后用<code>scoop update</code>进行更新</p><p>之后用<code>scoop bucket add 仓库名</code> 添加仓库</p><p>常用的有以下几个</p><p>main<br>extras<br>versions<br>nightlies<br>nirsoft<br>php<br>nerd-fonts<br>nonportable<br>java<br>games<br>jetbrains</p><p>咱们需要用的默认的main和extras可以根据自己需要添加，如：</p><p>scoop bucket add main</p><p>scoop bucket add extras</p><p>scoop bucket add java</p><p>main是默认的extras里面有大量的常用的软件java的就是提供java的一些工具</p><p>添加仓库之后用<code>scoop update</code>更新</p><p>之后开始安装软件</p><p>这里推荐用一个<code>scoop install aria2</code>用来加速下载的</p><p>如果报错的话用下面的命令关闭aria2</p><p>scoop config aria2-enabled false</p><p>同理改成true即可开启</p><p>scoop config aria2-enabled true</p><p>用<code>scoop list</code>可以查看已经安装的程序</p><p>之后记住scoop install 和scoop uninstall就可以了其他的命令功能可以上官网自行查看这里用不到</p><h2 id="3-程序安装"><a href="#3-程序安装" class="headerlink" title="3. 程序安装"></a>3. 程序安装</h2><ol><li><p>zip</p><p>首先安转一些小工具<br>scoop install git<br>scoop install 7zip<br>scoop install aria2<br>scoop install sudo<br>scoop install wget<br>scoop install unzip<br>scoop install gzip<br>scoop install ripgrep<br>scoop install stylua</p></li><li><p>nodejs</p><p>需要nodejs的环境</p><p>scoop install nodejs<br>之后用node –version和npm –version检查安装版本<br>输出版本号说明安装成功</p><p>windows的话可能需要重启一下环境变量才会生效</p><p>重启之后用npm –version查看输出版本号说明安装成功</p><p>之后用npm安装一下wsl-open<code>npm install -g wsl-open</code></p><p>以后wsl的话用的到</p></li><li><p>fd-find</p><p>fd-find（<code>npm install -g fd-find</code>）</p><ul><li>需要node.js环境</li><li>可以用<code>scoop install fd</code>之后在neovim里面<code>:checkhealth</code>一下看看</li></ul><p>windows的话用<code>scoop install fd</code>即可</p></li><li><p>lazygit</p><p>git管理器<code>scoop install lazygit</code></p></li><li><p>安装python</p><p>windows的话直接去官网下载安装程序运行安装程序即可</p><p>可以参考这个</p><p><a href="https://zhuanlan.zhihu.com/p/344887837">全网最详细的Python安装教程（Windows） - 知乎 (zhihu.com)</a></p><p>主要就是安装python添加环境变量打开powershell之后输入python –version输出版本号书名成功了</p></li><li><p>python的环境</p><p>需要在安装完Python之后</p><p><code>sudo pip3 install --upgrade pynvim</code></p></li></ol><h3 id="常见错误："><a href="#常见错误：" class="headerlink" title="常见错误："></a>常见错误：</h3><ol><li><code>raw.githubusercontent.com</code> 未能解析<ul><li>解决办法: 在<code>C:\Windows\System32\drivers\etc\hosts</code>中添加host解析：</li><li><code>199.232.68.133 raw.githubusercontent.com</code></li></ul></li><li><code>fatal: not a git repository (or any of the parent directories): .git</code><ul><li>添加bucket时，由于网络问题，未成功添加，bucket文件夹为空。</li></ul></li><li><code>Authentication failed because the remote party has closed the transport stream.  URL xxx is not valid</code><ul><li>更换 Scoop-Core 源，比如：<a href="https://github.com/Ash258/Scoop-Core">https://github.com/Ash258/Scoop-Core</a><br>scoop config proxy 127.0.0.1:7890</li></ul></li></ol><h2 id="win11"><a href="#win11" class="headerlink" title="win11"></a>win11</h2><p><a href="https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/cacls">cacls | Microsoft Docs</a></p><p>cacls e:&#x2F;&#x2F;xx &#x2F;G administrator:f</p><p><a href="https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/attrib">attrib | Microsoft Docs</a></p><p>attr</p><p><code>attrib +a +s +h I:\document\test  </code></p><p><code>attrib -a -s -h I:\document\test</code></p><p><code>control.exe system</code></p><h3 id="安装wsl的准备工作"><a href="#安装wsl的准备工作" class="headerlink" title="安装wsl的准备工作"></a>安装wsl的准备工作</h3><p>1.打开控制面板，选择程序</p><p>2.启用或关闭windows功能</p><p>3.打开<code>适用于Linux的Windows的子系统</code>，打开Hyper-V</p><p>4.bios开启虚拟化</p><h3 id="安装wsl"><a href="#安装wsl" class="headerlink" title="安装wsl"></a>安装wsl</h3><p><a href="https://learn.microsoft.com/zh-cn/windows/wsl/install">https://learn.microsoft.com/zh-cn/windows/wsl/install</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 列出可用发行版</span></span><br><span class="line">wsl -l -o</span><br><span class="line"><span class="comment"># 默认 Linux 发行版</span></span><br><span class="line">wsl --setdefault &lt;DistributionName&gt;</span><br></pre></td></tr></table></figure><h3 id="wsl1与wsl2切换"><a href="#wsl1与wsl2切换" class="headerlink" title="wsl1与wsl2切换"></a>wsl1与wsl2切换</h3><p>如果已经在windows上装过linux，执行：</p><p>C:\WINDOWS\system32&gt;wsl -l -v NAME STATE VERSION</p><ul><li>Ubuntu Running 1如果是这样的，说明是wsl1，只需要：</li></ul><p><code>wsl --set-version Ubuntu 2</code>就可以切换为wsl2，需要几分钟。</p><p>用下面命令可以切换回wsl1：</p><p><code>wsl --set-version Ubuntu 1</code></p><h3 id="WSL修改默认安装目录到其他盘"><a href="#WSL修改默认安装目录到其他盘" class="headerlink" title="WSL修改默认安装目录到其他盘"></a>WSL修改默认安装目录到其他盘</h3><p>在Windows PowerShell中输入如下命令:</p><p>1.<code>wsl -l --all -v</code><br>2.导出分发版为tar文件到d盘<code>wsl --export Ubuntu-22.04 d:\wsl-Ubuntu-18.04.tar</code></p><p>3.注销当前分发版<code>wsl --unregister Ubuntu-22.04</code></p><p>4.重新导入并安装WSL在<code>d:\wsl-ubuntu22.04</code></p><p>&#96;wsl –import Ubuntu-22.04 d:\wsl-ubuntu22.04 d:\wsl-Ubuntu-22.04.tar –version 2&#96;&#96;</p><h4 id="网络互通"><a href="#网络互通" class="headerlink" title="网络互通"></a>网络互通</h4><p>WSL2 不和 Windows 共享一个 localhost，Windows 访问 WSL2 启动的网络服务，可以直接使用 localhost，但是 WSL2访问 Windows 启动的网络服务这种方式就不行了，可以使用在Ubuntu中输入以下命令查看Windows连接的IP：</p><p>ip route | grep default | awk ‘{print $3}’</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">New-NetFirewallRule -DisplayName &quot;WSL&quot; -Direction Inbound  -InterfaceAlias &quot;vEthernet (WSL)&quot;  -Action Allow</span><br><span class="line"></span><br><span class="line">Name : &#123;9f1ad978-3373-46d8-80c4-bca0bdca5096&#125;  </span><br><span class="line">DisplayName : WSL  </span><br><span class="line">Description :  </span><br><span class="line">DisplayGroup :  </span><br><span class="line">Group :  </span><br><span class="line">Enabled : True  </span><br><span class="line">Profile : Any  </span><br><span class="line">Platform : &#123;&#125;  </span><br><span class="line">Direction : Inbound  </span><br><span class="line">Action : Allow  </span><br><span class="line">EdgeTraversalPolicy : Block  </span><br><span class="line">LooseSourceMapping : False  </span><br><span class="line">LocalOnlyMapping : False  </span><br><span class="line">Owner :  </span><br><span class="line">PrimaryStatus : OK  </span><br><span class="line">Status : The rule was parsed successfully from the store. (65536)  </span><br><span class="line">EnforcementStatus : NotApplicable  </span><br><span class="line">PolicyStoreSource : PersistentStore  </span><br><span class="line">PolicyStoreSourceType : Local  </span><br><span class="line">RemoteDynamicKeywordAddresses : &#123;&#125;</span><br></pre></td></tr></table></figure><h4 id="文件系统互通"><a href="#文件系统互通" class="headerlink" title="文件系统互通"></a>文件系统互通</h4><p>WSL2 访问 Windows 文件系统依然通过挂载分区的方式，Windows 下的磁盘会被挂载在 <code>/mnt</code> 下，例如 <code>/mnt/c</code>。在 Ubuntu中，可以使用 <code>explorer.exe .</code> 可以直接打开Windows资源管理器访问当前路径的ubuntu目录，可以非常方便的跨系统处理文件。</p><h4 id="wslu"><a href="#wslu" class="headerlink" title="wslu"></a>wslu</h4><p>wslu 是一个 WSL2 下和 Windows 系统交互的命令行工具集合</p><p><code>sudo apt install wslu</code></p><p>wslview：可以通过此命令调用 Windows 的默认浏览器打开 WSL2 内的超链接。使用时你可以直接把 WSL2 下的默认浏览器（即环境变量 BROWSER 设置为 wslview12），这样你就可以不用再在 WSL2 里安装浏览器，通过 wslg13 来使用浏览器了。而是可以直接打开终端上的超链接，很方便。</p>]]></content>
      
      
      <categories>
          
          <category> windows </category>
          
      </categories>
      
      
        <tags>
            
            <tag> windows命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ajax</title>
      <link href="/post/c5a6a264.html"/>
      <url>/post/c5a6a264.html</url>
      
        <content type="html"><![CDATA[<h2 id="请求数据"><a href="#请求数据" class="headerlink" title="请求数据"></a>请求数据</h2><p>如果要在网页中请求服务器上的数据资源，则需要用到 XMLHttpRequest 对象。<br>XMLHttpRequest（简称 xhr）是浏览器提供的 js 成员，通过它，可以请求服务器上的数据资源。<br>最简单的用法 var xhrObj &#x3D; new XMLHttpRequest()</p><p>XMLHttpRequest（简称 xhr）是浏览器提供的 Javascript 对象，通过它，可以请求服务器上的数据资源。jQuery中的Ajax函数，就是基于xhr对象封装出来的。</p><h3 id="使用xhr发起GET请求"><a href="#使用xhr发起GET请求" class="headerlink" title="使用xhr发起GET请求"></a>使用xhr发起GET请求</h3><ol><li>创建 xhr 对象</li><li>调用 xhr.open() 函数</li><li>调用 xhr.send() 函数</li><li>监听 xhr.onreadystatechange 事件</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 创建 XHR 对象</span></span><br><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>()</span><br><span class="line"><span class="comment">// 2. 调用 open 函数，指定 请求方式 与 URL地址</span></span><br><span class="line">xhr.<span class="title function_">open</span>(<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;http://www.liulongbin.top:3006/api/getbooks&#x27;</span>)</span><br><span class="line"><span class="comment">// 3. 调用 send 函数，发起 Ajax 请求</span></span><br><span class="line">xhr.<span class="title function_">send</span>()</span><br><span class="line"><span class="comment">// 4. 监听 onreadystatechange 事件</span></span><br><span class="line">xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 4监听 xhr 对象的请求状态 readyState ；与服务器响应的状态 status</span></span><br><span class="line">    <span class="comment">// XMLHttpRequest 对象的 readyState 属性，用来表示当前 Ajax 请求所处的状态，4表示请求完成，还有0，1，2，3</span></span><br><span class="line">    <span class="keyword">if</span> (xhr.<span class="property">readyState</span> === <span class="number">4</span> &amp;&amp; xhr.<span class="property">status</span> === <span class="number">200</span>) &#123;</span><br><span class="line">        <span class="comment">// 打印服务器响应回来的数据</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(xhr.<span class="property">responseText</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$.<span class="title function_">get</span>(<span class="string">&#x27;url&#x27;</span>, &#123;<span class="attr">name</span>: <span class="string">&#x27;zs&#x27;</span>, <span class="attr">age</span>: <span class="number">20</span>&#125;, <span class="keyword">function</span>(<span class="params"></span>) &#123;&#125;)</span><br><span class="line"><span class="comment">// 等价于</span></span><br><span class="line">$.<span class="title function_">get</span>(<span class="string">&#x27;url?name=zs&amp;age=20&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;&#125;)</span><br><span class="line"></span><br><span class="line">$.<span class="title function_">ajax</span>(&#123; <span class="attr">method</span>: <span class="string">&#x27;GET&#x27;</span>, <span class="attr">url</span>: <span class="string">&#x27;url&#x27;</span>, <span class="attr">data</span>: &#123;<span class="attr">name</span>: <span class="string">&#x27;zs&#x27;</span>, <span class="attr">age</span>: <span class="number">20</span>&#125;, <span class="attr">success</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;&#125; &#125;)</span><br><span class="line"><span class="comment">// 等价于</span></span><br><span class="line">$.<span class="title function_">ajax</span>(&#123; <span class="attr">method</span>: <span class="string">&#x27;GET&#x27;</span>, <span class="attr">url</span>: <span class="string">&#x27;url?name=zs&amp;age=20&#x27;</span>, <span class="attr">success</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;&#125; &#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="使用xhr发起POST请求"><a href="#使用xhr发起POST请求" class="headerlink" title="使用xhr发起POST请求"></a>使用xhr发起POST请求</h3><ol><li>创建 xhr 对象</li><li>调用 xhr.open() 函数</li><li>设置 Content-Type 属性（固定写法）</li><li>调用 xhr.send() 函数，同时指定要发送的数据</li><li>监听 xhr.onreadystatechange 事件</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 创建 xhr 对象</span></span><br><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>()</span><br><span class="line"><span class="comment">// 2. 调用 open()</span></span><br><span class="line">xhr.<span class="title function_">open</span>(<span class="string">&#x27;POST&#x27;</span>, <span class="string">&#x27;http://www.liulongbin.top:3006/api/addbook&#x27;</span>)</span><br><span class="line"><span class="comment">// 3. 设置 Content-Type 属性（固定写法）</span></span><br><span class="line">xhr.<span class="title function_">setRequestHeader</span>(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span>)</span><br><span class="line"><span class="comment">// 4. 调用 send()，同时将数据以查询字符串的形式，提交给服务器</span></span><br><span class="line">xhr.<span class="title function_">send</span>(<span class="string">&#x27;bookname=水浒传&amp;author=施耐庵&amp;publisher=天津图书出版社&#x27;</span>)</span><br><span class="line"><span class="comment">// 5. 监听 onreadystatechange 事件</span></span><br><span class="line">xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (xhr.<span class="property">readyState</span> === <span class="number">4</span> &amp;&amp; xhr.<span class="property">status</span> === <span class="number">200</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(xhr.<span class="property">responseText</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>XML 和 HTML 虽然都是标记语言，但是，它们两者之间没有任何的关系。<br>HTML 被设计用来描述网页上的内容，是网页内容的载体<br>XML 被设计用来传输和存储数据，是数据的载体<br>JSON 的英文全称是 JavaScript Object Notation，即“JavaScript 对象表示法”。简单来讲，JSON 就是 Javascript 对象和数组的字符串表示法，它使用文本表示一个 JS 对象或数组的信息，因此，JSON 的本质是字符串。<br>作用：JSON 是一种轻量级的文本数据交换格式，在作用上类似于 XML，专门用于存储和传输数据，但是 JSON 比 XML 更小、更快、更易解析。</p><p><strong>JSON和JS对象的关系</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这是一个对象</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;<span class="attr">a</span>: <span class="string">&#x27;Hello&#x27;</span>, <span class="attr">b</span>: <span class="string">&#x27;World&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//这是一个 JSON 字符串，本质是一个字符串</span></span><br><span class="line"><span class="keyword">var</span> json = <span class="string">&#x27;&#123;&quot;a&quot;: &quot;Hello&quot;, &quot;b&quot;: &quot;World&quot;&#125;&#x27;</span> </span><br></pre></td></tr></table></figure><p>把数据对象转换为字符串的过程，叫做序列化，例如：调用 JSON.stringify() 函数的操作，叫做 JSON 序列化。<br>把字符串转换为数据对象的过程，叫做反序列化，例如：调用 JSON.parse() 函数的操作，叫做 JSON 反序列化</p><h2 id="XMLHttpRequest-Level2的新特性"><a href="#XMLHttpRequest-Level2的新特性" class="headerlink" title="XMLHttpRequest Level2的新特性"></a>XMLHttpRequest Level2的新特性</h2><p>1.1. 旧版XMLHttpRequest的缺点<br>① 只支持文本数据的传输，无法用来读取和上传文件<br>② 传送和接收数据时，没有进度信息，只能提示有没有完成<br>1.2. XMLHttpRequest Level2的新功能<br>① 可以设置 HTTP 请求的时限<br>② 可以使用 FormData 对象管理表单数据<br>③ 可以上传文件<br>④ 可以获得数据传输的进度信息</p><h2 id="什么是Ajax"><a href="#什么是Ajax" class="headerlink" title="什么是Ajax"></a>什么是Ajax</h2><p>Ajax 的全称是 Asynchronous Javascript And XML（异步 JavaScript 和 XML）。<br>通俗的理解：在网页中利用 XMLHttpRequest 对象和服务器进行数据交互的方式，就是Ajax。</p><h2 id="Jquery中的Ajax"><a href="#Jquery中的Ajax" class="headerlink" title="Jquery中的Ajax"></a>Jquery中的Ajax</h2><p>浏览器中提供的 XMLHttpRequest 用法比较复杂，所以 jQuery 对 XMLHttpRequest 进行了封装，提供了一系列 Ajax 相关的函数，极大地降低了 Ajax 的使用难度。<br>jQuery 中发起 Ajax 请求最常用的三个方法如下：</p><ul><li>$.get()<ul><li>$.get(url, [data], [callback]) data：请求的参数，callback: 请求成功时回调的函数</li></ul></li><li>$.post()<ul><li>$.post(url, [data], [callback])</li></ul></li><li>$.ajax()</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">   <span class="attr">type</span>: <span class="string">&#x27;&#x27;</span>, <span class="comment">// 请求的方式，例如 GET 或 POST</span></span><br><span class="line">   <span class="attr">url</span>: <span class="string">&#x27;&#x27;</span>,  <span class="comment">// 请求的 URL 地址</span></span><br><span class="line">   <span class="attr">data</span>: &#123; &#125;,<span class="comment">// 这次请求要携带的数据</span></span><br><span class="line">   <span class="attr">success</span>: <span class="keyword">function</span>(<span class="params">res</span>) &#123; &#125; <span class="comment">// 请求成功之后的回调函数</span></span><br><span class="line">&#125;)</span><br><span class="line">$.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">   <span class="attr">type</span>: <span class="string">&#x27;GET&#x27;</span>, <span class="comment">// 请求的方式</span></span><br><span class="line">   <span class="attr">url</span>: <span class="string">&#x27;http://www.liulongbin.top:3006/api/getbooks&#x27;</span>,  <span class="comment">// 请求的 URL 地址</span></span><br><span class="line">   <span class="attr">data</span>: &#123; <span class="attr">id</span>: <span class="number">1</span> &#125;,<span class="comment">// 这次请求要携带的数据</span></span><br><span class="line">   <span class="attr">success</span>: <span class="keyword">function</span>(<span class="params">res</span>) &#123; <span class="comment">// 请求成功之后的回调函数</span></span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">   &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$.<span class="title function_">get</span>(<span class="string">&#x27;http://www.liulongbin.top:3006/api/getbooks&#x27;</span>, <span class="keyword">function</span>(<span class="params">res</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res) <span class="comment">// 这里的 res 是服务器返回的数据</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">$.<span class="title function_">post</span>(</span><br><span class="line">   <span class="string">&#x27;http://www.liulongbin.top:3006/api/addbook&#x27;</span>, <span class="comment">// 请求的URL地址</span></span><br><span class="line">   &#123; <span class="attr">bookname</span>: <span class="string">&#x27;水浒传&#x27;</span>, <span class="attr">author</span>: <span class="string">&#x27;施耐庵&#x27;</span>, <span class="attr">publisher</span>: <span class="string">&#x27;上海图书出版社&#x27;</span> &#125;, <span class="comment">// 提交的数据</span></span><br><span class="line">   <span class="keyword">function</span>(<span class="params">res</span>) &#123; <span class="comment">// 回调函数</span></span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">   &#125;</span><br><span class="line">)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="配合表单form使用"><a href="#配合表单form使用" class="headerlink" title="配合表单form使用"></a>配合表单form使用</h2><h2 id="art-template模板引擎"><a href="#art-template模板引擎" class="headerlink" title="art-template模板引擎"></a>art-template模板引擎</h2><p><a href="http://aui.github.io/art-template/zh-cn/index.html">http://aui.github.io/art-template/zh-cn/index.html</a></p><h2 id="axios"><a href="#axios" class="headerlink" title="axios"></a>axios</h2><h3 id="axios发起GET请求"><a href="#axios发起GET请求" class="headerlink" title="axios发起GET请求"></a>axios发起GET请求</h3><p>axios.get(‘url’, { params: { &#x2F;<em>参数</em>&#x2F; } }).then(callback)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 请求的 URL 地址</span></span><br><span class="line"> <span class="keyword">var</span> url = <span class="string">&#x27;http://www.liulongbin.top:3006/api/get&#x27;</span></span><br><span class="line"> <span class="comment">// 请求的参数对象</span></span><br><span class="line"> <span class="keyword">var</span> paramsObj = &#123; <span class="attr">name</span>: <span class="string">&#x27;zs&#x27;</span>, <span class="attr">age</span>: <span class="number">20</span> &#125;</span><br><span class="line"> <span class="comment">// 调用 axios.get() 发起 GET 请求</span></span><br><span class="line"> axios.<span class="title function_">get</span>(url, &#123; <span class="attr">params</span>: paramsObj &#125;).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">res</span>) &#123;</span><br><span class="line">     <span class="comment">// res.data 是服务器返回的数据</span></span><br><span class="line">     <span class="keyword">var</span> result = res.<span class="property">data</span></span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line"> &#125;)</span><br></pre></td></tr></table></figure><h3 id="POST"><a href="#POST" class="headerlink" title="POST"></a>POST</h3><p>axios.post(‘url’, { &#x2F;<em>参数</em>&#x2F; }).then(callback)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 请求的 URL 地址</span></span><br><span class="line"> <span class="keyword">var</span> url = <span class="string">&#x27;http://www.liulongbin.top:3006/api/post&#x27;</span></span><br><span class="line"> <span class="comment">// 要提交到服务器的数据</span></span><br><span class="line"> <span class="keyword">var</span> dataObj = &#123; <span class="attr">location</span>: <span class="string">&#x27;北京&#x27;</span>, <span class="attr">address</span>: <span class="string">&#x27;顺义&#x27;</span> &#125;</span><br><span class="line"> <span class="comment">// 调用 axios.post() 发起 POST 请求</span></span><br><span class="line"> axios.<span class="title function_">post</span>(url, dataObj).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">res</span>) &#123;</span><br><span class="line">     <span class="comment">// res.data 是服务器返回的数据</span></span><br><span class="line">     <span class="keyword">var</span> result = res.<span class="property">data</span></span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(result)</span><br><span class="line"> &#125;)</span><br></pre></td></tr></table></figure><h3 id="直接写"><a href="#直接写" class="headerlink" title="直接写"></a>直接写</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">axios</span>(&#123;</span><br><span class="line">     <span class="attr">method</span>: <span class="string">&#x27;请求类型&#x27;</span>,</span><br><span class="line">     <span class="attr">url</span>: <span class="string">&#x27;请求的URL地址&#x27;</span>,</span><br><span class="line">     <span class="attr">data</span>: &#123; <span class="comment">/* POST数据 */</span> &#125;,</span><br><span class="line">     <span class="attr">params</span>: &#123; <span class="comment">/* GET参数 */</span> &#125;</span><br><span class="line"> &#125;) .<span class="title function_">then</span>(callback)</span><br><span class="line"></span><br><span class="line"> <span class="title function_">axios</span>(&#123;</span><br><span class="line">     <span class="attr">method</span>: <span class="string">&#x27;GET&#x27;</span>,</span><br><span class="line">     <span class="attr">url</span>: <span class="string">&#x27;http://www.liulongbin.top:3006/api/get&#x27;</span>,</span><br><span class="line">     <span class="attr">params</span>: &#123; <span class="comment">// GET 参数要通过 params 属性提供</span></span><br><span class="line">         <span class="attr">name</span>: <span class="string">&#x27;zs&#x27;</span>,</span><br><span class="line">         <span class="attr">age</span>: <span class="number">20</span></span><br><span class="line">     &#125;</span><br><span class="line"> &#125;).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">res</span>) &#123;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(res.<span class="property">data</span>)</span><br><span class="line"> &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="title function_">axios</span>(&#123;</span><br><span class="line">     <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">     <span class="attr">url</span>: <span class="string">&#x27;http://www.liulongbin.top:3006/api/post&#x27;</span>,</span><br><span class="line">     <span class="attr">data</span>: &#123; <span class="comment">// POST 数据要通过 data 属性提供</span></span><br><span class="line">         <span class="attr">bookname</span>: <span class="string">&#x27;程序员的自我修养&#x27;</span>,</span><br><span class="line">         <span class="attr">price</span>: <span class="number">666</span></span><br><span class="line">     &#125;</span><br><span class="line"> &#125;).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">res</span>) &#123;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(res.<span class="property">data</span>)</span><br><span class="line"> &#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="同源策略和跨域"><a href="#同源策略和跨域" class="headerlink" title="同源策略和跨域"></a>同源策略和跨域</h2><h3 id="什么是同源"><a href="#什么是同源" class="headerlink" title="什么是同源"></a>什么是同源</h3><p>如果两个页面的协议，域名和端口都相同，则两个页面具有相同的源。</p><h3 id="什么是同源策略"><a href="#什么是同源策略" class="headerlink" title="什么是同源策略"></a>什么是同源策略</h3><p>同源策略（英文全称 Same origin policy）是浏览器提供的一个安全功能。<br>MDN 官方给定的概念：同源策略限制了从同一个源加载的文档或脚本如何与来自另一个源的资源进行交互。这是一个用于隔离潜在恶意文件的重要安全机制。<br>通俗的理解：浏览器规定，A 网站的 JavaScript，不允许和非同源的网站 C 之间，进行资源的交互，例如：<br>无法读取非同源网页的 Cookie、LocalStorage 和 IndexedDB<br>无法接触非同源网页的 DOM<br>无法向非同源地址发送 Ajax 请求</p><h3 id="什么是跨域"><a href="#什么是跨域" class="headerlink" title="什么是跨域"></a>什么是跨域</h3><p>同源指的是两个 URL 的协议、域名、端口一致，反之，则是跨域。<br>出现跨域的根本原因：浏览器的同源策略不允许非同源的 URL 之间进行资源的交互。</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/CORS">https://developer.mozilla.org/zh-CN/docs/Web/HTTP/CORS</a><br>简单的总结：<br>一个请求分为简单的请求和复杂的请求</p><ol><li>简单的请求不会触发CORS预检请求(<a href="https://developer.mozilla.org/zh-CN/docs/Glossary/Preflight_request">https://developer.mozilla.org/zh-CN/docs/Glossary/Preflight_request</a>)</li><li>复杂的请求会触发CORS预检请求，需预检的请求要求必须首先使用OPTIONS方法发起一个预检请求到服务器，以获知服务器是否允许该实际请求。预检请求的使用，可以避免跨域请求对服务器的用户数据产生未预期的影响。预检请求完成之后，发送实际请求。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># http OPTIONS http://example.org</span></span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Allow: OPTIONS, GET, HEAD, POST</span><br><span class="line">Cache-Control: max-age=604800</span><br><span class="line">Connection: keep-alive</span><br><span class="line">Content-Length: 0</span><br><span class="line">Content-Type: text/html; charset=UTF-8</span><br><span class="line">Date: Wed, 21 Dec 2022 08:14:10 GMT</span><br><span class="line">Expires: Wed, 28 Dec 2022 08:14:10 GMT</span><br><span class="line">Keep-Alive: <span class="built_in">timeout</span>=4</span><br><span class="line">Proxy-Connection: keep-alive</span><br><span class="line">Server: EOS (vny/0452)</span><br></pre></td></tr></table></figure></li></ol><h3 id="后端处理跨域"><a href="#后端处理跨域" class="headerlink" title="后端处理跨域"></a>后端处理跨域</h3><p>几个重要的头部信息：</p><ol><li>Access-Control-Request-Method(出现于 preflight request（预检请求）请求头，告知服务器，实际请求将使用xx方法)</li><li>Access-Control-Allow-Origin(响应标头,指定了该响应的资源是否被允许与给定的来源（origin）共享。)</li><li>Access-Control-Allow-Headers(响应首部,用于 preflight request（预检请求）中，列出了将会在正式请求的 Access-Control-Request-Headers 字段中出现的首部信息。)</li><li>Access-Control-Allow-Methods(响应首部字段，指定了访问资源时允许使用的请求方法，用于预检请求的响应。其指明了实际请求所允许使用的 HTTP 方法)</li><li>Access-Control-Allow-Credentials(响应头，用于在请求要求包含 credentials（Request.credentials 的值为 include）时，告知浏览器是否可以将对请求的响应暴露给前端 JavaScript 代码。)</li><li>Access-Control-Expose-Headers(响应首部,列出了哪些首部可以作为响应的一部分暴露给外部。)</li></ol><p>注意：<br>一般来说，登录成功后，server会通过set-cookie，将cookie设置到浏览器中，这样，下次访问同源下的api时，cookie就会被带上。但是<strong>浏览器发起跨域请求的时候，是不会主动带上cookie</strong>，因为这个<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Set-Cookie/SameSite%EF%BC%8CSameSite%E6%98%AF%E4%B8%BA%E4%BA%86%E9%98%B2%E6%AD%A2csrf%E6%94%BB%E5%87%BB(%E8%AF%A6%E7%BB%86%E6%9F%A5%E7%9C%8B%EF%BC%9Ahttps://juejin.cn/post/7116055668485783589)%E8%80%8C%E4%BA%A7%E7%94%9F%E7%9A%84%E5%B1%9E%E6%80%A7%EF%BC%8C%60Set-Cookie">https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Set-Cookie/SameSite，SameSite是为了防止csrf攻击(详细查看：https://juejin.cn/post/7116055668485783589)而产生的属性，`Set-Cookie</a>: flavor&#x3D;choco; SameSite&#x3D;None; Secure&#96;（<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Set-Cookie%EF%BC%89">https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Set-Cookie）</a></p><h3 id="前端如何实现跨域数据请求"><a href="#前端如何实现跨域数据请求" class="headerlink" title="前端如何实现跨域数据请求"></a>前端如何实现跨域数据请求</h3><p>现如今，实现跨域数据请求，最主要的两种解决方案，分别是 JSONP 和 CORS。<br>JSONP：出现的早，兼容性好（兼容低版本IE）。是前端程序员为了解决跨域问题，被迫想出来的一种临时解决方案。缺点是只支持 GET 请求，不支持 POST 请求。<br>CORS：出现的较晚，它是 W3C 标准，属于跨域 Ajax 请求的根本解决方案。支持 GET 和 POST 请求。缺点是不兼容某些低版本的浏览器。</p><h4 id="JSONP"><a href="#JSONP" class="headerlink" title="JSONP"></a>JSONP</h4><p>由于浏览器同源策略的限制，网页中无法通过 Ajax 请求非同源的接口数据。但是 <code>&lt;script&gt;</code> 标签不受浏览器同源策略的影响，可以通过 src 属性，请求非同源的 js 脚本。<br>因此，JSONP 的实现原理，就是通过 <code>&lt;script&gt;</code> 标签的src属性，请求跨域的数据接口，并通过函数调用的形式，接收跨域接口响应回来的数据。</p><p>缺点：<br>由于 JSONP 是通过<code>&lt;script&gt;</code>标签的src属性，来实现跨域数据获取的，所以，JSONP只支持GET数据请求，不支持POST请求。</p><p>注意：JSONP 和 Ajax 之间没有任何关系，不能把 JSONP 请求数据的方式叫做 Ajax，因为 JSONP 没有用到 XMLHttpRequest 这个对象。</p><h4 id="jQuery中的JSONP"><a href="#jQuery中的JSONP" class="headerlink" title="jQuery中的JSONP"></a>jQuery中的JSONP</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"> $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;http://ajax.frontend.itheima.net:3006/api/jsonp?name=zs&amp;age=20&#x27;</span>,</span><br><span class="line">    <span class="comment">// 如果要使用 $.ajax() 发起 JSONP 请求，必须指定 datatype 为 jsonp</span></span><br><span class="line">    <span class="attr">dataType</span>: <span class="string">&#x27;jsonp&#x27;</span>,</span><br><span class="line">    <span class="attr">success</span>: <span class="keyword">function</span>(<span class="params">res</span>) &#123;</span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;)</span><br><span class="line"> <span class="comment">// 默认情况下，使用 jQuery 发起 JSONP 请求，会自动携带一个 callback=jQueryxxx 的参数，jQueryxxx 是随机生成的一个回调函数名称。</span></span><br><span class="line">$.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;http://ajax.frontend.itheima.net:3006/api/jsonp?name=zs&amp;age=20&#x27;</span>,</span><br><span class="line">    <span class="attr">dataType</span>: <span class="string">&#x27;jsonp&#x27;</span>,</span><br><span class="line">    <span class="comment">// 发送到服务端的参数名称，默认值为 callback</span></span><br><span class="line">    <span class="attr">jsonp</span>: <span class="string">&#x27;callback&#x27;</span>,</span><br><span class="line">    <span class="comment">// 自定义的回调函数名称，默认值为 jQueryxxx 格式</span></span><br><span class="line">    <span class="attr">jsonpCallback</span>: <span class="string">&#x27;abc&#x27;</span>,</span><br><span class="line">    <span class="attr">success</span>: <span class="keyword">function</span>(<span class="params">res</span>) &#123;</span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;)</span><br></pre></td></tr></table></figure><p>jQuery 中的 JSONP，也是通过 <script> 标签的 src 属性实现跨域数据访问的，只不过，jQuery 采用的是动态创建和移除 <script> 标签的方式，来发起 JSONP 数据请求。</p><ul><li>在发起 JSONP 请求的时候，动态向 <header> 中 append 一个 <script> 标签；</li><li>在 JSONP 请求成功以后，动态从 <header> 中移除刚才 append 进去的 <script> 标签；</li></ul></script></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>前端工具</title>
      <link href="/post/8e24602b.html"/>
      <url>/post/8e24602b.html</url>
      
        <content type="html"><![CDATA[<h2 id="nvm、node、npm-、yarn区别"><a href="#nvm、node、npm-、yarn区别" class="headerlink" title="nvm、node、npm 、yarn区别"></a>nvm、node、npm 、yarn区别</h2><ol><li>nvm：nodejs 版本管理工具，也就是说：一个 nvm 可以管理很多 node 版本和 npm 版本。</li><li>nodejs：在项目开发时的所需要的代码库。</li><li>npm：nodejs 包管理工具，在安装的 nodejs 的时候，npm 也会跟着一起安装，它是包管理工具，npm 管理 nodejs 中的第三方插件。</li><li>yarn与npm一样，都是js包管理器，都适用于nodejs。不一样的是，yarn与npm的架构和包管理方式方式不同</li></ol><h2 id="npm，cnpm区别"><a href="#npm，cnpm区别" class="headerlink" title="npm，cnpm区别"></a>npm，cnpm区别</h2><ul><li>cnpm: npm client for China mirror of npm</li></ul><h2 id="nvm、node、npm-关系"><a href="#nvm、node、npm-关系" class="headerlink" title="nvm、node、npm 关系"></a>nvm、node、npm 关系</h2><p>nvm 管理 nodejs 和 npm 的版本，npm 可以管理 nodejs 的第三方插件。</p><h2 id="webpack"><a href="#webpack" class="headerlink" title="webpack"></a>webpack</h2><p>现代 javascript 应用程序的 <strong>静态模块打包器 (module bundler)</strong></p><p><strong>作用：</strong><br>把很多文件打包整合到一起, 缩小项目体积, 提高加载速度</p><p><strong>其中功能:</strong></p><ul><li>less&#x2F;sass -&gt; css</li><li>ES6&#x2F;7&#x2F;8 -&gt; ES5</li><li>html&#x2F;css&#x2F;js -&gt; 压缩合并</li></ul><h2 id="vite"><a href="#vite" class="headerlink" title="vite"></a>vite</h2><p>它是一个更加轻量（热更新速度快，打包构建速度快）的vue项目脚手架工具。<br>相对于vue-cli（基于webpack）它默认安装的插件非常少，随着开发过程依赖增多，需要自己额外配置<br><a href="https://github.com/vitejs/vite">https://github.com/vitejs/vite</a></p><h1 id="npm-amp-yarn-amp-pnpm-包管理机制"><a href="#npm-amp-yarn-amp-pnpm-包管理机制" class="headerlink" title="npm &amp; yarn &amp; pnpm 包管理机制"></a>npm &amp; yarn &amp; pnpm 包管理机制</h1><p><a href="https://zhuanlan.zhihu.com/p/526257537">https://zhuanlan.zhihu.com/p/526257537</a></p><h2 id="npm"><a href="#npm" class="headerlink" title="npm"></a>npm</h2><p>缺点：</p><ol><li>依赖包重复的安装</li><li>（幽灵依赖 Phantom dependencies）package.json 中未定义的依赖，但项目中依然可以正确地被引用到。</li><li>（不确定性 Non-Determinism）同样的 package.json 文件，install 依赖后可能不会得到同样的 node_modules 目录结构。</li><li>如果有 package.json 变更，本地需要删除 node_modules 重新 install，否则可能会导致生产环境与开发环境 node_modules 结构不同，代码无法正常运行。</li><li>依赖分身 Doppelgangers。比如模块 C 和 E 都依赖 <a href="mailto:&#x42;&#x40;&#x32;&#46;&#48;">&#x42;&#x40;&#x32;&#46;&#48;</a>，但其实引用的不是同一个 B，假设 B 在导出之前做了一些缓存或者副作用，那么使用者的项目就会因此而出错。</li></ol><h2 id="yarn"><a href="#yarn" class="headerlink" title="yarn"></a>yarn</h2><p>解决npm的缺点：</p><ol><li>lockfile 解决不确定性。lockfile 里记录了依赖，以及依赖的子依赖，依赖的版本，获取地址与验证模块完整性的 hash。</li></ol><p>缺点：</p><ol><li>扁平化的 node_modules 结构（子依赖会尽量平铺安装在主依赖项所在的目录中）<br>node_modules<br>├── <a href="mailto:&#65;&#64;&#49;&#46;&#48;&#x2e;&#x30;">&#65;&#64;&#49;&#46;&#48;&#x2e;&#x30;</a><br>├── <a href="mailto:&#x42;&#x40;&#x31;&#46;&#48;&#x2e;&#x30;">&#x42;&#x40;&#x31;&#46;&#48;&#x2e;&#x30;</a><br>└── <a href="mailto:&#x43;&#64;&#49;&#46;&#x30;&#46;&#48;">&#x43;&#64;&#49;&#46;&#x30;&#46;&#48;</a><br> └── node_modules<br> └── <a href="mailto:&#66;&#64;&#50;&#x2e;&#x30;&#x2e;&#x30;">&#66;&#64;&#50;&#x2e;&#x30;&#x2e;&#x30;</a></li><li>没有解决幽灵依赖和依赖分身问题。</li></ol><h2 id="pnpm（performant-npm）"><a href="#pnpm（performant-npm）" class="headerlink" title="pnpm（performant npm）"></a>pnpm（performant npm）</h2><p>优点：<br>幽灵依赖问题：只有直接依赖会平铺在 node_modules 下，子依赖不会被提升，不会产生幽灵依赖。<br>依赖分身问题：相同的依赖只会在全局 store 中安装一次。项目中的都是源文件的副本，几乎不占用任何空间，没有了依赖分身。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web-api</title>
      <link href="/post/f74fde1.html"/>
      <url>/post/f74fde1.html</url>
      
        <content type="html"><![CDATA[<h1 id="什么是Web-Api"><a href="#什么是Web-Api" class="headerlink" title="什么是Web Api"></a>什么是Web Api</h1><p>API（Application Programming Interface，应用程序编程接口）是一些预先定义的函数，目的是提供应用程序与开发人员基于某软件或硬件得以访问一组例程的能力，而又无需访问源码，无需理解其内部工作机制细节，只需直接调用使用即可。<br><strong>Web API 是浏览器提供的一套操作浏览器功能和页面元素的 API ( BOM 和 DOM )。</strong><br>参考：<a href="https://developer.mozilla.org/zh-CN/docs/Web/API">https://developer.mozilla.org/zh-CN/docs/Web/API</a></p><h1 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h1><p>文档对象模型（Document Object Model，简称DOM）<br>DOM树 又称为文档树模型，把文档映射成树形结构，通过节点对象对其处理，处理的结果可以加入到当前的页面。<br>DOM把文档当作对象，它的顶级对象是document</p><ul><li>文档：一个页面就是一个文档，DOM中使用document表示</li><li>节点：网页中的所有内容，在文档树中都是节点（标签、属性、文本、注释等），使用node表示</li><li>标签节点：网页中的所有标签，通常称为元素节点，又简称为“元素”，使用element表示</li></ul><h2 id="节点操作"><a href="#节点操作" class="headerlink" title="节点操作"></a>节点操作</h2><ul><li>创建<ul><li>document.createElement(‘要创建的标签名’)</li><li>document.createTextNode(‘文本内容’);</li></ul></li><li>添加<ul><li>父元素.appendChild(要追加的元素)</li><li>父元素.insertBefore(要追加的元素,已经存在的子元素)</li></ul></li><li>删除<ul><li>元素.remove()</li><li>元素.removeChild(要删除的子元素)</li></ul></li><li>替换<ul><li>元素.removeChild(要删除的子元素)</li></ul></li><li>复制<ul><li>元素.cloneNode(true&#x2F;false);<ul><li>传入true:表示将元素内容都克隆下来</li><li>传入false或不传:表示克隆该元素，不克隆内容</li></ul></li></ul></li></ul><h2 id="获取元素"><a href="#获取元素" class="headerlink" title="获取元素"></a>获取元素</h2><ul><li>document.getElementById（根据ID获取元素对象）</li><li>document.getElementsByTagName(‘标签名’) 或者 element.getElementsByTagName(‘标签名’) </li><li>document.getElementsByClassName(‘类名’)</li><li>document.querySelector(‘选择器’)</li><li>document.querySelectorAll(‘选择器’)</li><li>document.body(返回body)</li><li>document.documentElement(返回html元素)</li></ul><h2 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h2><ul><li>事件源（谁）：触发事件的元素</li><li>事件类型（什么事件）： 例如 click 点击事件</li><li>事件处理程序（做啥）：事件触发后要执行的代码(函数形式)，事件处理函数</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>123<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 执行事件步骤</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 点击div 控制台输出 我被选中了</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 1. 获取事件源</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> div = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 2.绑定事件 注册事件</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// div.onclick </span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 3.添加事件处理程序 </span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        div.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我被选中了&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><h3 id="注册事件"><a href="#注册事件" class="headerlink" title="注册事件"></a>注册事件</h3><ol><li>给元素添加事件，称为绑定事件</li><li>监听注册时间</li></ol><p><strong>addEventListener()事件监听</strong><br>eventTarget.addEventListener()方法将指定的监听器注册到 eventTarget（目标对象）上，当该对象触发指定的事件时，就会执行事件处理函数。</p><ul><li>type(事件的类似，click，mouseover，这里没有on)</li><li>listener(事件处理函数，事件发生时，或调用该监听函数)</li><li>useCapture(传入布尔值，默认时false，如果时true表示在事件捕获阶段调用事件处理程序，false就是冒泡阶段调用)</li></ul><p><strong>DOM的事件流</strong><br>DOM 事件流会经历3个阶段： </p><ol><li>捕获阶段(从上到下)</li><li>当前目标阶段</li><li>冒泡阶段(从下到上)</li></ol><p><strong>attacheEvent()</strong><br>eventTarget.attachEvent()方法将指定的监听器注册到 eventTarget（目标对象） 上，当该对象触发指定的事件时，指定的回调函数就会被执行。</p><ul><li>evenNameWithOn(事件类型字符串，onclick，onmouseover，这里要带on)</li><li>callback(事件处理函数，当目标触发事件时回调函数被调用)</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;button&gt;传统注册事件&lt;/button&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">button</span>&gt;</span>方法监听注册事件<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">button</span>&gt;</span>ie9 attachEvent<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> btns = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;button&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 1. 传统方式注册事件</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    btns[<span class="number">0</span>].<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="title function_">alert</span>(<span class="string">&#x27;hi&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    btns[<span class="number">0</span>].<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="title function_">alert</span>(<span class="string">&#x27;hao a u&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   <span class="comment">// 2. 事件侦听注册事件 addEventListener </span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   <span class="comment">// (1) 里面的事件类型是字符串 必定加引号 而且不带on</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   <span class="comment">// (2) 同一个元素 同一个事件可以添加多个侦听器（事件处理程序）</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    btns[<span class="number">1</span>].<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="title function_">alert</span>(<span class="number">22</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    btns[<span class="number">1</span>].<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="title function_">alert</span>(<span class="number">33</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 3. attachEvent ie9以前的版本支持</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    btns[<span class="number">2</span>].<span class="title function_">attachEvent</span>(<span class="string">&#x27;onclick&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="title function_">alert</span>(<span class="number">11</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p><strong>removeEventListener(移除事件)</strong><br>element.removeEventListener(event, function, useCapture)</p><h3 id="事件对象"><a href="#事件对象" class="headerlink" title="事件对象"></a>事件对象</h3><p><strong>什么是事件对象</strong></p><p>事件发生后，跟事件相关的一系列信息数据的集合都放到这个对象里面，这个对象就是事件对象。</p><p>比如：  </p><ol><li>谁绑定了这个事件。</li><li>鼠标触发事件的话，会得到鼠标的相关信息，如鼠标位置。</li><li>键盘触发事件的话，会得到键盘的相关信息，如按了哪个键。</li></ol><p><strong>事件对象的属性和方法</strong></p><ul><li>e.targe</li><li>e.type</li><li>e.preventDefault() 阻止默认事件标准，比如不让链接跳转</li><li>e.stopPropagation() 阻止事件冒泡</li></ul><p><strong>e.target 和 this 的区别</strong></p><ul><li>this 是事件绑定的元素（绑定这个事件处理函数的元素） 。</li><li>e.target 是事件触发的元素。<br>常情况下terget 和 this是一致的，<br>但有一种情况不同，那就是在事件冒泡时（父子元素有相同事件，单击子元素，父元素的事件处理函数也会被触发执行），<br>这时候this指向的是父元素，因为它是绑定事件的元素对象，<br>而target指向的是子元素，因为他是触发事件的那个具体元素对象。</li></ul><h3 id="事件委托"><a href="#事件委托" class="headerlink" title="事件委托"></a>事件委托</h3><p>把事情委托给别人，代为处理。说白了就是，不给子元素注册事件，给父元素注册事件，把处理代码在父元素的事件中执行。</p><blockquote><p>给父元素注册事件，利用事件冒泡，当子元素的事件触发，会冒泡到父元素，然后去控制相应的子元素。</p></blockquote><h2 id="操作元素的内容"><a href="#操作元素的内容" class="headerlink" title="操作元素的内容"></a>操作元素的内容</h2><ul><li><p>改变元素内容（获取或设置）</p><ul><li>element.innerText</li><li>element.innerHTML<br><strong>innerText和innerHTML的区别</strong></li></ul></li><li><p>获取内容时的区别：</p><p>innerText会去除空格和换行，而innerHTML会保留空格和换行</p></li><li><p>设置内容时的区别：</p><p>innerText不会识别html，而innerHTML会识别</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        我是文字</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>123<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// innerText 和 innerHTML的区别 </span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 1. innerText 不识别html标签 非标准  去除空格和换行</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> div = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// div.innerText = &#x27;&lt;strong&gt;今天是：&lt;/strong&gt; 2019&#x27;;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 2. innerHTML 识别html标签 W3C标准 保留空格和换行的</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        div.<span class="property">innerHTML</span> = <span class="string">&#x27;&lt;strong&gt;今天是：&lt;/strong&gt; 2019&#x27;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 这两个属性是可读写的  可以获取元素里面的内容</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> p = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;p&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>(p.<span class="property">innerText</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>(p.<span class="property">innerHTML</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><p><strong>innerHTML字符串拼接方式（效率低）</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> d1 = +<span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">        <span class="keyword">var</span> str = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">            <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">innerHTML</span> += <span class="string">&#x27;&lt;div style=&quot;width:100px; height:2px; border:1px solid blue;&quot;&gt;&lt;/div&gt;&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> d2 = +<span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(d2 - d1);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">fn</span>();</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><strong>createElement方式（效率一般）</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> d1 = +<span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">var</span> div = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line">            div.<span class="property">style</span>.<span class="property">width</span> = <span class="string">&#x27;100px&#x27;</span>;</span><br><span class="line">            div.<span class="property">style</span>.<span class="property">height</span> = <span class="string">&#x27;2px&#x27;</span>;</span><br><span class="line">            div.<span class="property">style</span>.<span class="property">border</span> = <span class="string">&#x27;1px solid red&#x27;</span>;</span><br><span class="line">            <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(div);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> d2 = +<span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(d2 - d1);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">fn</span>();</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><strong>innerHTML数组方式（效率高）</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> d1 = +<span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">        <span class="keyword">var</span> array = [];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">            array.<span class="title function_">push</span>(<span class="string">&#x27;&lt;div style=&quot;width:100px; height:2px; border:1px solid blue;&quot;&gt;&lt;/div&gt;&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">innerHTML</span> = array.<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">        <span class="keyword">var</span> d2 = +<span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(d2 - d1);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">fn</span>();</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="元素的属性操作"><a href="#元素的属性操作" class="headerlink" title="元素的属性操作"></a>元素的属性操作</h2><p><strong>获取属性的值</strong></p><ul><li>元素对象.属性名(获取内置的属性值，就是元素本身自带的属性)</li><li>element.getAttribute(‘属性’),(主要获得自定义的属性 )</li></ul><p><strong>设置属性的值</strong></p><ul><li>元素对象.属性名 &#x3D; 值(获取内置的属性值)</li><li>element.setAttribute(‘属性’,’值’)(自定义)</li></ul><p><strong>移除属性</strong></p><ul><li>element.removeAttribute(‘index’)</li></ul><p>比如修改：</p><ul><li>img.src,img.title</li><li>a.href</li><li>input标签中的type,value,checked,selected,disable </li><li>element.style 行内样式操作（权重比较高，参考css的优先级；比如：div.style里面的属性采取驼峰命名法）</li><li>element.className 类名样式操作</li></ul><h2 id="节点概述"><a href="#节点概述" class="headerlink" title="节点概述"></a>节点概述</h2><p>​网页中的所有内容都是节点（标签、属性、文本、注释等），在DOM 中，节点使用 node 来表示。</p><p>​HTML DOM 树中的所有节点均可通过 JavaScript 进行访问，所有 HTML 元素（节点）均可被修改，也可以创建或删除。</p><h1 id="BOM"><a href="#BOM" class="headerlink" title="BOM"></a>BOM</h1><p>BOM（Browser Object Model）即浏览器对象模型，它提供了独立于内容而与浏览器窗口进行交互的对象，其核心对象是 window。<br>BOM比DOM更大，它包含DOM。它的顶级对象是window。BOM是浏览器厂商在各种浏览器上定义的，兼容性差。<br><strong>window对象双重角色：</strong></p><ol><li>它是js访问浏览器窗口的一个接口</li><li>它是一个全局对象，定义在全局作用域中的变量、函数都会变成window对象的属性和方法，在调用的时候可以省略，比如alert，prompt。</li></ol><p><strong>属性：</strong></p><ul><li>window.onload 是窗口 (页面）加载事件，<strong>当文档内容完全加载完成</strong>会触发该事件(包括图像、脚本文件、CSS 文件等), 就调用的处理函数。<ul><li>如果页面的图片很多的话, 从用户访问到onload触发可能需要较长的时间, 交互效果就不能实现，必然影响用户的体验，此时用 DOMContentLoaded 事件比较合适。参考：<a href="https://blog.csdn.net/qq_32682137/article/details/86649209">https://blog.csdn.net/qq_32682137/article/details/86649209</a></li><li><img src="https://img-blog.csdnimg.cn/20190128102028682.gif" alt="比较"></li></ul></li><li>window.onresize 是调整窗口大小加载事件,  当触发时就调用的处理函数。<ul><li>window.innerWidth 当前屏幕的宽度</li></ul></li><li>window 对象给我们提供了 2 个非常好用的方法-定时器。<ul><li>setTimeout(调用函数, [延迟的毫秒数, 默认是0]) <ul><li>简单理解： 回调，就是回头调用的意思。上一件事干完，再回头再调用这个函数。 </li><li>clearTimeout(timeoutId)取消定时器</li></ul></li><li>setInterval(调用函数, [间隔的毫秒数, 默认是0]) <ul><li>clearInterval</li></ul></li></ul></li><li>location对象，获取或者设置URL<ul><li>location.assign() 重定向页面</li><li>location.replace() 替换当前页面，不记录历史</li><li>location.reload() 重新加载页面，相当于刷新</li></ul></li><li>navigator对象，navigator 对象包含有关浏览器的信息，它有很多属性，我们最常用的是 userAgent，该属性可以返回由客户机发送服务器的user-agent头部的值。</li><li>history对象，window对象给我们提供了一个 history对象，与浏览器历史记录进行交互。该对象包含用户（在浏览器窗口中）访问过的URL。</li></ul><h2 id="元素偏移量"><a href="#元素偏移量" class="headerlink" title="元素偏移量"></a>元素偏移量</h2><h3 id="offset-概述"><a href="#offset-概述" class="headerlink" title="offset 概述"></a>offset 概述</h3><p>offset 翻译过来就是偏移量， 我们使用 offset系列相关属性可以动态的得到该元素的位置（偏移）、大小等。</p><ol><li>获得元素距离带有定位父元素的位置</li><li>获得元素自身的大小（宽度高度）</li><li>注意：返回的数值都不带单位</li></ol><h3 id="offset-与-style-区别"><a href="#offset-与-style-区别" class="headerlink" title="offset 与 style 区别"></a>offset 与 style 区别</h3><h4 id="offset"><a href="#offset" class="headerlink" title="offset"></a>offset</h4><ul><li><p>offset 可以得到任意样式表中的样式值</p></li><li><p>offset 系列获得的数值是没有单位的</p></li><li><p>offsetWidth 包含padding+border+width</p></li><li><p>offsetWidth 等属性是只读属性，只能获取不能赋值</p></li><li><blockquote><p>所以，我们想要获取元素大小位置，用offset更合适</p></blockquote></li></ul><h4 id="style"><a href="#style" class="headerlink" title="style"></a>style</h4><ul><li><p>style 只能得到行内样式表中的样式值</p></li><li><p>style.width 获得的是带有单位的字符串</p></li><li><p>style.width 获得不包含padding和border 的值</p></li><li><p>style.width 是可读写属性，可以获取也可以赋值</p></li><li><blockquote><p>所以，我们想要给元素更改值，则需要用style改变</p></blockquote></li></ul><blockquote><p><strong>因为平时我们都是给元素注册触摸事件，所以重点记住 targetTocuhes</strong></p></blockquote><h2 id="client概述"><a href="#client概述" class="headerlink" title="client概述"></a>client概述</h2><p>client 翻译过来就是客户端，我们使用 client 系列的相关属性来获取元素可视区的相关信息。通过 client<br>系列的相关属性可以动态的得到该元素的边框大小、元素大小等。<br>比如：</p><ul><li>clientTop</li><li>clientLeft</li><li>…</li></ul><h2 id="scroll-概述"><a href="#scroll-概述" class="headerlink" title="scroll 概述"></a>scroll 概述</h2><p>scroll 翻译过来就是滚动的，我们使用 scroll 系列的相关属性可以动态的得到该元素的大小、滚动距离等。</p><ul><li>scrollTop</li><li>scrollLeft</li><li>…</li></ul><h2 id="offset-client-scroll"><a href="#offset-client-scroll" class="headerlink" title="offset,client,scroll"></a>offset,client,scroll</h2><p>1.offset系列 经常用于获得元素位置    offsetLeft  offsetTop</p><p>2.client经常用于获取元素大小  clientWidth clientHeight</p><p>3.scroll 经常用于获取滚动距离 scrollTop  scrollLeft  </p><p>4.注意页面滚动的距离通过 window.pageXOffset  获得</p><h2 id="mouseenter-和mouseover的区别"><a href="#mouseenter-和mouseover的区别" class="headerlink" title="mouseenter 和mouseover的区别"></a>mouseenter 和mouseover的区别</h2><ul><li>当鼠标移动到元素上时就会触发mouseenter 事件</li><li>类似 mouseover，它们两者之间的差别是</li><li>mouseover 鼠标经过自身盒子会触发，经过子盒子还会触发。mouseenter  只会经过自身盒子触发</li><li>之所以这样，就是因为<strong>mouseenter不会冒泡</strong></li><li>跟mouseenter搭配鼠标离开 mouseleave  同样不会冒泡</li></ul><h2 id="本地存储"><a href="#本地存储" class="headerlink" title="本地存储"></a>本地存储</h2><p>随着互联网的快速发展，基于网页的应用越来越普遍，同时也变的越来越复杂，为了满足各种各样的需求，会经常性在本地存储大量的数据，HTML5规范提出了相关解决方案。</p><h3 id="本地存储特性"><a href="#本地存储特性" class="headerlink" title="本地存储特性"></a>本地存储特性</h3><p>1、数据存储在用户浏览器中</p><p>2、设置、读取方便、甚至页面刷新不丢失数据</p><p>3、容量较大，sessionStorage约5M、localStorage约20M</p><p>4、只能存储字符串，可以将对象JSON.stringify() 编码后存储</p><h3 id="window-sessionStorage"><a href="#window-sessionStorage" class="headerlink" title="window.sessionStorage"></a>window.sessionStorage</h3><p>1、生命周期为关闭浏览器窗口</p><p>2、在同一个窗口(页面)下数据可以共享</p><p>3、以键值对的形式存储使用<br>存储数据：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sessionStorage.<span class="title function_">setItem</span>(key, value)</span><br></pre></td></tr></table></figure><p>获取数据：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sessionStorage.<span class="title function_">getItem</span>(key)</span><br></pre></td></tr></table></figure><p>删除数据：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sessionStorage.<span class="title function_">removeItem</span>(key)</span><br></pre></td></tr></table></figure><p>清空数据：(所有都清除掉)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sessionStorage.<span class="title function_">clear</span>()</span><br></pre></td></tr></table></figure><h3 id="window-localStorage"><a href="#window-localStorage" class="headerlink" title="window.localStorage"></a>window.localStorage</h3><ol><li>声明周期永久生效，除非手动删除 否则关闭页面也会存在</li><li>可以多窗口（页面）共享（同一浏览器可以共享）</li><li>以键值对的形式存储使用</li></ol><p>存储数据：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(key, value)</span><br></pre></td></tr></table></figure><p>获取数据：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(key)</span><br></pre></td></tr></table></figure><p>删除数据：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">localStorage</span>.<span class="title function_">removeItem</span>(key)</span><br></pre></td></tr></table></figure><p>清空数据：(所有都清除掉)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">localStorage</span>.<span class="title function_">clear</span>()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>chrome-console调试</title>
      <link href="/post/9fa69692.html"/>
      <url>/post/9fa69692.html</url>
      
        <content type="html"><![CDATA[<h2 id="console"><a href="#console" class="headerlink" title="console"></a>console</h2><ul><li><p>console.log()打印内容的通用方法console.error()打印一条错误信息console.warn()打印一个警告信息 - console.info()打印资讯类说明信息console.time()启动一个以入参作为特定名称的计时器长</p></li><li><p>console.timeEnd()结束特定的 计时器 并以豪秒打印其从开始到结束所用的时间</p></li><li><p>复制</p><ul><li><p>先在代码里console.log</p><p>然后在控制台上右键点击输出的对象 选择 store as global variable</p><p>控制台会输出temp1 或者temp2 temp3</p><p>然后在控制台输入copy(temp1) 或者copy(temp2) 回车 会输出undefined 这时已经被复制到粘贴板上了,直接去别的地方粘贴就好了</p></li></ul></li></ul><h3 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h3><ul><li><code>$</code> -简单理解就是 document.querySelector 而已</li><li><code>$$</code> 简单理解就是 document.querySelectorAll 而已。<ul><li><code>$$(&#39;span&#39;)[1].getAttribute(&#39;name&#39;)</code></li><li><code>$$(&#39;span&#39;)[1].setAttribute(&#39;oncontextmenu&#39;, &quot;return true&quot;)</code></li></ul></li><li><code>keys</code> 取对象的键名, 返回键名组成的数组</li><li><code>values</code> 去对象的值, 返回值组成的数组</li></ul><h3 id="监听事件"><a href="#监听事件" class="headerlink" title="监听事件"></a>监听事件</h3><ul><li>getEventListeners(document)</li><li>getEventListeners(document).contextmenu</li><li>element.removeEventListener(‘click’, handleClick);</li><li>monitorEvents(object [, events])<ul><li>monitorEvents(document.body, ‘mouse’)</li><li>monitorEvents(document, ‘contextmenu’)</li></ul></li><li>document.removeEventListener(“contextmenu”,getEventListeners(document).contextmenu[0].listener)</li><li>(function () {<br>  var createElement &#x3D; document.createElement;<br>  document.createElement &#x3D; function (tag) {<br>  switch (tag) {<br>      case ‘script’:<br>          console.log(‘禁用动态添加脚本，防止广告加载’);<br>          break;<br>      default:<br>          return createElement.apply(this, arguments);<br>  }<br>  }<br>  })();</li></ul><p>这里我们可以查询MDN文档<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/EventTarget/addEventListener">https://developer.mozilla.org/zh-CN/docs/Web/API/EventTarget/addEventListener</a><br>发现addEventListener来自eventtarget这个对象下的原型中，通常来说我们的dom元素等也都是继承自这个对象的原型链<br>关于这点我们可以测试一下<br>EventTarget.prototype.addEventListener&#x3D;function (){console.log(‘我被劫持了’)}<br>document.querySelector(‘body’).addEventListener(‘123’)<br>目前很多网页以及组件都会使用addEventListener</p><p>其原因在于onxxxx系列的函数相对性能较差，并且addEventListener支持添加多个函数</p><p>这时候我们就可以构造一个简单的劫持函数做一个小过滤，来完成addeventlistener的hook操作</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> oldadd=<span class="title class_">EventTarget</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">addEventListener</span></span><br><span class="line"><span class="title class_">EventTarget</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">addEventListener</span>=<span class="keyword">function</span> (<span class="params">...args</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;addEventListener&#x27;</span>,...args)</span><br><span class="line">    oldadd.<span class="title function_">call</span>(<span class="variable language_">this</span>,...args)</span><br><span class="line">    <span class="comment">//不传this相当于window.addeventlistener,window也是个EventTarget</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>addEventListener有四个参数，分别为type，listener，options，useCapture</p><p>options以及useCapture为可选选项</p><p>type为事件监听类型</p><p>关于事件我们可以在<a href="https://www.runoob.com/jsref/dom-obj-event.html%E6%9F%A5%E8%AF%A2%E5%88%B0">https://www.runoob.com/jsref/dom-obj-event.html查询到</a></p><p>注意是不带on的</p><p>listener是触发函数，当我们传入的事件监听类型被捕获到，我们就会调用这个函数</p><p>options以及useCapture为一些选项的参数</p><p>options和useCapture都是第三个参数</p><p>useCapture为真是捕捉监听器</p><h2 id="Sources"><a href="#Sources" class="headerlink" title="Sources"></a>Sources</h2><p>Sources面板几乎是Chrome最重要的功能面板之一，debugger断点调试是解决问题的最佳法宝。<br>首先在代码中加入debugger，打开F12开发工具切换到Sources面板中点击button按钮如图所示:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> btn = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;btn&quot;</span>);</span><br><span class="line">btn.<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">debugger</span></span><br><span class="line">  <span class="title function_">alert</span>(<span class="string">&#x27;button被点击了&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Application"><a href="#Application" class="headerlink" title="Application"></a>Application</h2><p>记录网站加载的所有资源信息，包括存储数据（Local Storage、Session Storage、IndexedDB、Web SQL、Cookies）、缓存数据、字体、图片、脚本、样式表等。</p><h3 id="Local-Storage"><a href="#Local-Storage" class="headerlink" title="Local Storage"></a>Local Storage</h3><p>只读的 localStorage 属性允许你访问一个 Document 源（origin）的对象 Storage；存储的数据将保存在浏览器会话中。 localStorage 类似 sessionStorage ，但其区别在于：存储在 localStorage 的数据可以长期保留；而当页面会话结束——也就是说，当页面被关闭时，存储在 sessionStorage 的数据会被清除 。<br>新增<br>localStorage.setItem(‘id’, ‘999’);<br>复制代码<br>读取<br>let id &#x3D; localStorage.getItem(‘id’);<br>console.log(id);&#x2F;&#x2F; 999<br>复制代码<br>移除<br>&#x2F;&#x2F; 移除指定项<br>localStorage.removeItem(‘id’);<br>&#x2F;&#x2F; 移除所有<br>localStorage.clear();</p><p><a href="https://juejin.cn/post/7063020485071601672#heading-18">https://juejin.cn/post/7063020485071601672#heading-18</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> chrome </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>py面向对象特性：继承、封装、多态、鸭子模型、魔法方法</title>
      <link href="/post/10770794.html"/>
      <url>/post/10770794.html</url>
      
        <content type="html"><![CDATA[<h2 id="继承的重点"><a href="#继承的重点" class="headerlink" title="继承的重点"></a>继承的重点</h2><p>1、子类拥有<strong>父类</strong>非私有化的属性和方法。</p><p>2、子类可以拥有自己属性和方法，即子类可以对父类进行扩展。</p><p>3、子类可以用自己的方式实现父类的方法。（重写）。</p><h2 id="单继承"><a href="#单继承" class="headerlink" title="单继承"></a>单继承</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">eat</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;eating...&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sleep</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;sleep...&quot;</span>)</span><br><span class="line"></span><br><span class="line">// 继承父类的方法</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span>(<span class="title class_ inherited__">Animal</span>):</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">swimming</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;goupaoshi...&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span>(<span class="title class_ inherited__">Animal</span>):</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">climb_tree</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;climb_tree...&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">alex = Dog()</span><br><span class="line">alex.eat()</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">eat</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;eating ...&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sleep</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;sleeping ...&#x27;</span>)</span><br><span class="line"></span><br><span class="line">// 重写父类方法</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span>(<span class="title class_ inherited__">Animal</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">swimming</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;狗刨式...&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sleep</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;趴着睡&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">alex = Dog()</span><br><span class="line">alex.sleep()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">eat</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;eating ...&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sleep</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;sleeping ...&#x27;</span>)</span><br><span class="line"></span><br><span class="line">// 调用父类的方法</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span>(<span class="title class_ inherited__">Animal</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">swimming</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;狗刨式...&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sleep</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 方式1：硬编码，不推荐.</span></span><br><span class="line">        <span class="comment"># 父类对象调用 父类对象.方法（self,其他参数）</span></span><br><span class="line">        <span class="comment"># Animal.sleep(self)    # 类对象调用方法相当于 函数化调用，注意 位置传参</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 方式2：super关键字</span></span><br><span class="line">        <span class="comment"># super(子类对象，self).方法（参数）or super().方法（参数）</span></span><br><span class="line">        <span class="comment"># super(Dog, self).sleep()    # 不推荐，还是存在硬编码</span></span><br><span class="line">        <span class="built_in">super</span>().sleep()      <span class="comment"># 推荐！！  super() 实例化对象.方法  解决硬编码</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;趴着睡&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">alex = Dog()</span><br><span class="line">alex.sleep()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, age</span>):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sleep</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;基类sleep...&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TL</span>(<span class="title class_ inherited__">Person</span>):</span><br><span class="line"></span><br><span class="line">    <span class="comment"># def __init__(self, name, age, dep):</span></span><br><span class="line">    <span class="comment">#     self.name = name</span></span><br><span class="line">    <span class="comment">#     self.age = age</span></span><br><span class="line">    <span class="comment">#     self.dep = dep</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 注意：继承的初始化的参数务必对齐</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, age, dep</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__(name, age)</span><br><span class="line">        self.dep = dep</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">yuan = TL(<span class="string">&quot;yuan&quot;</span>, <span class="number">18</span>, <span class="string">&quot;游戏部&quot;</span>)</span><br><span class="line"></span><br><span class="line">yuan.sleep()</span><br><span class="line"><span class="built_in">print</span>(yuan.dep)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>:</span><br><span class="line">    x = <span class="number">100</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__int__</span>(<span class="params">self, x</span>):</span><br><span class="line"></span><br><span class="line">        self.x = x</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">foo</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(self.x)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span>(<span class="title class_ inherited__">A</span>):</span><br><span class="line">    x = <span class="number">12</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">b = B()</span><br><span class="line">b.foo()</span><br><span class="line"></span><br><span class="line">// <span class="number">12</span></span><br></pre></td></tr></table></figure><p>demo：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">     1、海尔冰箱 单价3000元；</span></span><br><span class="line"><span class="string">     2、西门子洗衣机 单价5000元；</span></span><br><span class="line"><span class="string">     3、芝华士沙发 单价6000元</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">goods = &#123;<span class="number">1</span>: (<span class="string">&quot;海尔冰箱&quot;</span>, <span class="number">3000</span>), <span class="number">2</span>: (<span class="string">&quot;西门子洗衣机&quot;</span>, <span class="number">5000</span>), <span class="number">3</span>: (<span class="string">&quot;芝华士沙发&quot;</span>, <span class="number">6000</span>)&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 结账类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Bill</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,name</span>):</span><br><span class="line">        self.name=name</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_unit</span>(<span class="params">self</span>):</span><br><span class="line"></span><br><span class="line">        unit = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入商品序号&gt;&gt;&gt;&quot;</span>))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> unit</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_number</span>(<span class="params">self</span>):</span><br><span class="line"></span><br><span class="line">        number = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入商品数量&gt;&gt;&gt;&quot;</span>))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> number</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_total_price</span>(<span class="params">self</span>):</span><br><span class="line"></span><br><span class="line">        unit = self.get_unit()</span><br><span class="line">        number = self.get_number()</span><br><span class="line">        total_price = goods[unit][<span class="number">1</span>] * number</span><br><span class="line">        ret = self.discount(total_price)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;%s于%s总共花费%s元&quot;</span>%(self.name,datetime.datetime.today(),ret))</span><br><span class="line">        <span class="keyword">return</span> ret</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">discount</span>(<span class="params">self,price</span>):</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> price</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># bill=Bill(&quot;Yuan老师&quot;)</span></span><br><span class="line"><span class="comment"># bill.get_total_price()</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NationalDayBill</span>(<span class="title class_ inherited__">Bill</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">discount</span>(<span class="params">self, price</span>):</span><br><span class="line">        <span class="keyword">if</span> price &gt; <span class="number">399</span>:</span><br><span class="line">            <span class="keyword">return</span> price-<span class="number">200</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>().discount(price)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ndb=NationalDayBill(&quot;Yuan&quot;)</span></span><br><span class="line"><span class="comment"># ndb.get_total_price()</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Double11Bill</span>(<span class="title class_ inherited__">Bill</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">discount</span>(<span class="params">self,price</span>):</span><br><span class="line">        <span class="keyword">if</span> price &gt; <span class="number">200</span>:</span><br><span class="line">            free = random.randint(<span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">if</span> free == <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>().discount(price)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># mab=Double11Bill(&quot;Yuan&quot;)</span></span><br><span class="line"><span class="comment"># mab.get_total_price()</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 问题：如果再加一个中秋节满五百折扣0.8</span></span><br><span class="line"><span class="comment"># 但是假如中秋节和国庆节是一天，所以两个优惠同时享受的话该怎样设计？</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MiddleAutumeBill</span>(<span class="title class_ inherited__">NationalDayBill</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">discount</span>(<span class="params">self, price</span>):</span><br><span class="line">        <span class="keyword">if</span> price &gt; <span class="number">500</span>:</span><br><span class="line">            temp_price = <span class="built_in">super</span>().discount(price)     <span class="comment"># 国庆优惠后的价格</span></span><br><span class="line">            <span class="keyword">return</span> temp_price*<span class="number">0.8</span>                    <span class="comment"># 中秋再次优惠</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>().discount(price)               <span class="comment"># 国庆优惠后的价格</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">mab=MiddleAutumeBill(<span class="string">&quot;Yuan&quot;</span>)</span><br><span class="line">mab.get_total_price()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="多继承"><a href="#多继承" class="headerlink" title="多继承"></a>多继承</h2><p>继承中查找方法的方法顺序是：先查子类，然后从左往右，从最左边父类找，没有的话再往右边的类找，可以使用<code>__mro__</code>查看</p><h3 id="查看实例的所有属性：dir-方法和-dict-属性"><a href="#查看实例的所有属性：dir-方法和-dict-属性" class="headerlink" title="查看实例的所有属性：dir()方法和__dict__属性"></a>查看实例的所有属性：dir()方法和__dict__属性</h3><p>dir(obj)可以获得对象的所有属性列表, 而<code>obj.__dict__</code>对象的自定义属性字典</p><h3 id="判断类的继承关系：type-和isinstance方法"><a href="#判断类的继承关系：type-和isinstance方法" class="headerlink" title="判断类的继承关系：type 和isinstance方法"></a>判断类的继承关系：type 和isinstance方法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">eat</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;eating...&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sleep</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;sleep...&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span>(<span class="title class_ inherited__">Animal</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">swim</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;swimming...&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">alex = Dog()</span><br><span class="line">mjj = Dog()</span><br><span class="line"></span><br><span class="line">a = Animal()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">isinstance</span>(alex, Dog))         <span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">isinstance</span>(alex, Animal))      <span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(alex))              <span class="comment"># &lt;class &#x27;__main__.Dog&#x27;&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">isinstance</span>(a, Dog))      <span class="comment"># False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 判断 A 是否 为 B 的子类</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">issubclass</span>(Animal, (Dog,)))     <span class="comment"># False</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">issubclass</span>(Dog, (Animal,)))     <span class="comment"># True</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="封装好处"><a href="#封装好处" class="headerlink" title="封装好处"></a>封装好处</h2><ol><li>隐藏实现细节，提供公共的访问方式</li><li>提高了代码的复用性</li><li>提高安全性</li></ol><h2 id="私有属性"><a href="#私有属性" class="headerlink" title="私有属性"></a>私有属性</h2><ol><li>私有属性 只能在 <strong>本类</strong> 使用</li><li>确保了外部代码不能随意修改对象内部的状态，这样通过访问限制的保护，代码更加健壮。</li><li>这种机制也并没有真正意义上限制我们从外部直接访问属性，知道了<strong>类名</strong>和<strong>属性名</strong>就可以拼出名字：</li></ol><p><code>_类名__属性</code>， 然后就可以访问了，如 <code>alex._Student__score</code></p><p>单下划线、双下划线、头尾双下划线说明<br><strong>foo</strong>: 定义的是特殊方法，一般是系统定义名字 ，类似 <strong>init</strong>() 之类的。</p><p>_foo: 以单下划线开头的表示的是 protected 类型的变量，即保护类型只能允许其本身与子类进行访问。（约定成俗，不限语法）</p><p>__foo: 双下划线的表示的是私有类型(private)的变量, 只能是允许这个类本身进行访问了。</p><h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><p>多态是指一类事物有多种形态。比如动物有多种形态，人，狗，猫，等等。文件有多种形态：文本文件，可执行文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> abc <span class="keyword">import</span> ABCMeta, abstractmethod              <span class="comment"># (抽象方法)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Payment</span>(metaclass=ABCMeta):         <span class="comment"># metaclass 元类  metaclass = ABCMeta表示Payment类是一个规范类</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, money</span>):</span><br><span class="line">        self.money = money</span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line"><span class="meta">    @abstractmethod                       </span><span class="comment"># @abstractmethod表示下面一行中的pay方法是一个必须在子类中实现的方法</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">pay</span>(<span class="params">self, *args, **kwargs</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AliPay</span>(<span class="title class_ inherited__">Payment</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">pay</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 支付宝提供了一个网络上的联系渠道</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%s通过支付宝消费了%s元&#x27;</span> % (self.name, self.money))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">WeChatPay</span>(<span class="title class_ inherited__">Payment</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">pay</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 微信提供了一个网络上的联系渠道</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%s通过微信消费了%s元&#x27;</span> % (self.name, self.money))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Order</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">account</span>(<span class="params">self, pay_obj</span>):</span><br><span class="line">        pay_obj.pay()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第一个订单</span></span><br><span class="line">pay_obj = WeChatPay(<span class="string">&quot;yuan&quot;</span>, <span class="number">100</span>)</span><br><span class="line"><span class="comment"># 第二个订单</span></span><br><span class="line">pay_obj2 = AliPay(<span class="string">&quot;alex&quot;</span>, <span class="number">200</span>)</span><br><span class="line"></span><br><span class="line">order = Order()</span><br><span class="line">order.account(pay_obj)</span><br><span class="line">order.account(pay_obj2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># yuan通过微信消费了100元</span></span><br><span class="line"><span class="comment"># alex通过支付宝消费了200元</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在上面的例子中<code>order.account(pay_obj)</code>中<code>pay_obj</code>不需要类型声明，而<code>java</code>在使用时要定义好类型</p><p>（<code>order.account(Payment pay_obj)</code>），所以你传入别的类型对象一定报错</p><p>但是<code>python</code>因为是动态语言所以传入的对象只要拥有调用的方法即可视为<code>Payment</code>类型对象，这就是所谓的鸭子类型</p><h2 id="鸭子模型"><a href="#鸭子模型" class="headerlink" title="鸭子模型"></a>鸭子模型</h2><p>鸭子类型（英語：duck typing）在程序设计中是动态类型的一种风格。在这种风格中，一个对象有效的语义，不是由继承自特定的类或实现特定的接口，而是由「当前方法和属性的集合」决定</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Duck</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">quack</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;这鸭子正在嘎嘎叫&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">feathers</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;这鸭子拥有白色和灰色的羽毛&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">quack</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;这人正在模仿鸭子&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">feathers</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;这人在地上拿起1根羽毛然后给其他人看&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">in_the_forest</span>(<span class="params">duck</span>):</span><br><span class="line">    duck.quack()</span><br><span class="line">    duck.feathers()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">game</span>():</span><br><span class="line">    donald = Duck()</span><br><span class="line">    john = Person()</span><br><span class="line">    in_the_forest(donald)</span><br><span class="line">    in_the_forest(john)</span><br><span class="line"></span><br><span class="line">game()</span><br><span class="line"></span><br><span class="line"><span class="comment"># python中很多底层逻辑都是鸭子模型，很明显没有继承</span></span><br><span class="line"><span class="keyword">from</span> collections.abc <span class="keyword">import</span> Iterable</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Company</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, employee_list</span>):</span><br><span class="line">        self.employee = employee_list</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__iter__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">iter</span>(self.employee)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__getitem__</span>(<span class="params">self, item</span>):</span><br><span class="line">        <span class="keyword">return</span> self.employee[item]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    company = Company([<span class="string">&quot;tom&quot;</span>, <span class="string">&quot;bob&quot;</span>, <span class="string">&quot;jane&quot;</span>])</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">isinstance</span>(company, Iterable):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;company是iterable类型&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> company:</span><br><span class="line">        <span class="built_in">print</span> (item)</span><br><span class="line"></span><br><span class="line">a = []</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">isinstance</span>(a, Iterable):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;yes&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h2><p>指程序可以访问、检测和修改它本身状态或行为的一种能力，在python中一切皆对象（类，实例，模块等等都是对象），那么我们就可以通过反射的形式操作对象相关的属性。</p><h2 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h2><p>当一个变量既不是该函数内部的局部变量，也不是该函数的参数,相对于作用域来说，就是一个自由变量(引用了外部变量)，这样就会形成一个闭包。</p><h2 id="上下文管理器"><a href="#上下文管理器" class="headerlink" title="上下文管理器"></a>上下文管理器</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Resource</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__enter__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;===connect to resource===&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> self</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__exit__</span>(<span class="params">self, exc_type, exc_val, exc_tb</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;===close resource connection===&#x27;</span>)</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">operate</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;===in operation===&#x27;</span>)</span><br><span class="line">        </span><br><span class="line"><span class="keyword">with</span> Resource() <span class="keyword">as</span> res:</span><br><span class="line">    res.operate()</span><br></pre></td></tr></table></figure><p>异常可以在<code>__exit__</code> 进行捕获并由你自己决定如何处理，是抛出呢还是在这里就解决了。在<code>__exit__</code> 里返回 <code>True</code>（没有return 就默认为 return False），就相当于告诉 Python解释器，这个异常我们已经捕获了，不需要再往外抛了。</p><p>在 写<code>__exit__</code> 函数时，需要注意的事，它必须要有这三个参数：</p><ul><li>exc_type：异常类型</li><li>exc_val：异常值</li><li>exc_tb：异常的错误栈信息</li></ul><p>当主逻辑代码没有报异常时，这三个参数将都为None。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> contextlib</span><br><span class="line"></span><br><span class="line"><span class="meta">@contextlib.contextmanager</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">open_func</span>(<span class="params">file_name</span>):</span><br><span class="line">    <span class="comment"># __enter__方法</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;open file:&#x27;</span>, file_name, <span class="string">&#x27;in __enter__&#x27;</span>)</span><br><span class="line">    file_handler = <span class="built_in">open</span>(file_name, <span class="string">&#x27;r&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">yield</span> file_handler</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> exc:</span><br><span class="line">        <span class="comment"># deal with exception</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;the exception was thrown&#x27;</span>)</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;close file:&#x27;</span>, file_name, <span class="string">&#x27;in __exit__&#x27;</span>)</span><br><span class="line">        file_handler.close()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open_func(<span class="string">&#x27;/Users/MING/mytest.txt&#x27;</span>) <span class="keyword">as</span> file_in:</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> file_in:</span><br><span class="line">        <span class="number">1</span>/<span class="number">0</span></span><br><span class="line">        <span class="built_in">print</span>(line)</span><br></pre></td></tr></table></figure><p>在被装饰函数里，必须是一个生成器（带有yield），而yield之前的代码，就相当于<code>__enter__</code>里的内容。yield 之后的代码，就相当于<code>__exit__</code> 里的内容。</p><h2 id="作用域链"><a href="#作用域链" class="headerlink" title="作用域链"></a>作用域链</h2><ol><li><code>L （Local）</code> 局部作用域（一般指函数，在函数内部定义的则是局部变量）</li><li><code>E （Enclosing）</code> 闭包函数外的函数中</li><li><code>G （Global）</code> 全局作用域</li><li><code>B （Built-in）</code> 内建作用域</li></ol><h3 id="搜索作用域"><a href="#搜索作用域" class="headerlink" title="搜索作用域"></a>搜索作用域</h3><p>1.python 先从局部作用域开始搜索，没找到则在全局域继续搜索，否则就会抛出 NameError 异常；</p><p>2.全局变量能被同名的局部变量所覆盖；</p><p>3.变量的作用域受到命名空间的影响。</p><h3 id="访问规则"><a href="#访问规则" class="headerlink" title="访问规则"></a>访问规则</h3><ol><li><p>访问规则链：L &#x3D;&gt; E &#x3D;&gt; G &#x3D;&gt; B</p><p>从 <code>局部作用域</code> 开始查找，如果 <code>局部作用域</code> 不存在，则往上一层（也就是指嵌套函数）开始查找，如果上一层也不存在，则继续向上，一直到（这个过程都是与 </p></li><li><p>闭包函数外的函数<code>全局作用域</code>，如果全局作用于也不存在，则在 <code>内建作用域</code> 查找，如果依然不存在，则报错 <code>is not defined</code></p></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 全局作用域</span></span><br><span class="line">x=<span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第一层局部作用域</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">outer</span>(): </span><br><span class="line">  y=<span class="number">20</span>;</span><br><span class="line">  <span class="built_in">print</span>(x)</span><br><span class="line"></span><br><span class="line">  <span class="comment"># 第二层局部作用域</span></span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">inner</span>():</span><br><span class="line">    z=<span class="number">30</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;x=<span class="subst">&#123;x&#125;</span>,y=<span class="subst">&#123;y&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">  inner()</span><br><span class="line"></span><br><span class="line">outer()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出内容</span></span><br><span class="line"><span class="comment"># 10</span></span><br><span class="line"><span class="comment"># x=10,y=20</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">c = <span class="number">1</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func1</span>():</span><br><span class="line">    c = <span class="number">2</span>     <span class="comment"># 如果没有此处变量c的声明 那么就会向上一级请寻找 即 c = 1</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">func2</span>():</span><br><span class="line">        c = <span class="number">3</span>   <span class="comment"># 如果没有此处变量c的声明 那么就会向上一级请寻找 即 c = 2</span></span><br><span class="line">        <span class="built_in">print</span>(c)</span><br><span class="line">        func2()</span><br><span class="line">        func1()</span><br></pre></td></tr></table></figure><h3 id="内部修改外部变量"><a href="#内部修改外部变量" class="headerlink" title="内部修改外部变量"></a>内部修改外部变量</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 全局作用域</span></span><br><span class="line">x=<span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 局部作用域</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">changeNum</span>(): </span><br><span class="line">  x=<span class="number">20</span></span><br><span class="line">  <span class="built_in">print</span>(x) <span class="comment"># 20</span></span><br><span class="line"></span><br><span class="line">changeNum()</span><br><span class="line"><span class="built_in">print</span>(x) <span class="comment"># 10</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 全局作用域</span></span><br><span class="line">x=<span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 局部作用域</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">changeNum</span>(): </span><br><span class="line">  <span class="comment"># global x # 想在函数内部对函数外的变量进行操作，就需要在函数内部声明其为global。</span></span><br><span class="line">  <span class="built_in">print</span>(x) <span class="comment"># UnboundLocalError: local variable &#x27;x&#x27; referenced before assignment</span></span><br><span class="line">  x=<span class="number">20</span></span><br><span class="line">  <span class="built_in">print</span>(x)</span><br><span class="line"></span><br><span class="line">changeNum()</span><br><span class="line"><span class="comment"># print(x) # UnboundLocalError: local variable &#x27;x&#x27; referenced before assignment</span></span><br></pre></td></tr></table></figure><p>如果，修改一下代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">x=<span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 局部作用域</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">changeNum</span>():</span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">changeMore</span>():</span><br><span class="line">        <span class="built_in">print</span>(x)</span><br><span class="line">  x=<span class="number">20</span></span><br><span class="line">  <span class="built_in">print</span>(x)</span><br><span class="line">  changeMore()</span><br><span class="line">changeNum()</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">20</span></span><br><span class="line"><span class="string">20</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 上下俩段代码细微的差距，但是结果不同</span></span><br><span class="line">x=<span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 局部作用域</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">changeNum</span>():</span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">changeMore</span>():</span><br><span class="line">        <span class="built_in">print</span>(x)</span><br><span class="line">  changeMore()</span><br><span class="line">  x=<span class="number">20</span> <span class="comment"># 说明如果出现重新赋值的变量，此变量和全局的x变量没有什么关系，是一个新的变量</span></span><br><span class="line">  <span class="built_in">print</span>(x)</span><br><span class="line">changeNum()</span><br><span class="line"></span><br><span class="line"><span class="comment"># NameError: free variable &#x27;x&#x27; referenced before assignment in enclosing scope</span></span><br><span class="line"><span class="comment"># 在封闭范围内赋值之前引用的自由变量“x”</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如果同样的代码换成js了</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">xx</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">x</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(a)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">x</span>()</span><br><span class="line">    a = <span class="number">20</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">xx</span>()</span><br><span class="line"><span class="comment">// 10</span></span><br><span class="line"><span class="comment">// 20</span></span><br></pre></td></tr></table></figure><p>摘录：<a href="https://blog.csdn.net/Sunny_Future/article/details/114757132">https://blog.csdn.net/Sunny_Future/article/details/114757132</a></p>]]></content>
      
      
      <categories>
          
          <category> python3 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git工作流模式</title>
      <link href="/post/16146bf6.html"/>
      <url>/post/16146bf6.html</url>
      
        <content type="html"><![CDATA[<h2 id="集中式工作流"><a href="#集中式工作流" class="headerlink" title="集中式工作流"></a>集中式工作流</h2><p>开发者直接在本地 master 分支开发代码，开发完成后 push 到远端仓库 master 分支。</p><h2 id="功能分支工作流"><a href="#功能分支工作流" class="headerlink" title="功能分支工作流"></a>功能分支工作流</h2><p>开发者基于 master 分支创建一个新分支，在新分支进行开发，开发完成后合并到远端仓库 master 分支。</p><h2 id="Git-Flow-工作流"><a href="#Git-Flow-工作流" class="headerlink" title="Git Flow 工作流"></a>Git Flow 工作流</h2><p>Git Flow 工作流为不同的分支分配一个明确的角色，并定义分支之间什么时候、如何进行交互，比较适合大型项目的开发。</p><h2 id="Forking-工作流"><a href="#Forking-工作流" class="headerlink" title="Forking 工作流"></a>Forking 工作流</h2><p>开发者先 fork 项目到个人仓库，在个人仓库完成开发后，提交 pull request 到目标远程仓库，远程仓库 review 后，合并 pull request 到 master 分支</p><p>详细查看：<a href="https://www.v2ex.com/t/770008">https://www.v2ex.com/t/770008</a></p><h2 id="例子（仅仅只是参考）"><a href="#例子（仅仅只是参考）" class="headerlink" title="例子（仅仅只是参考）"></a>例子（仅仅只是参考）</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">==分支开发==</span><br><span class="line">1.git <span class="built_in">clone</span> // 到本地</span><br><span class="line"></span><br><span class="line">2.git checkout -b xxx 切换至新分支xxx</span><br><span class="line">（相当于复制了remote的仓库到本地的xxx分支上)</span><br><span class="line"></span><br><span class="line">3.修改或者添加本地代码（部署在硬盘的源文件上）</span><br><span class="line"></span><br><span class="line">4.git diff 查看自己对代码做出的改变</span><br><span class="line"></span><br><span class="line">5.git add 上传更新后的代码至暂存区</span><br><span class="line"></span><br><span class="line">6.git commit 可以将暂存区里更新后的代码更新到本地git</span><br><span class="line"></span><br><span class="line">7.git push origin xxx 将本地的xxxgit分支上传至github上的git</span><br><span class="line">（如果在写自己的代码过程中发现远端GitHub上代码出现改变）</span><br><span class="line"></span><br><span class="line">==分支的合并==</span><br><span class="line"></span><br><span class="line">1.git checkout main 切换回main分支</span><br><span class="line"></span><br><span class="line">2.git pull origin master(main) (或者git pull --rebase)将远端修改过的代码再更新到本地</span><br><span class="line"></span><br><span class="line">3.git checkout xxx 回到xxx分支</span><br><span class="line"></span><br><span class="line">4.git rebase main 我在xxx分支上，先把main移过来，然后根据我的commit来修改成新的内容，最终合并成一条线</span><br><span class="line">（中途可能会出现，rebase conflict -----》 本地如果产生冲突，手动解决冲突之后，用<span class="string">&quot;git add&quot;</span>命令去更新这些内容的索引(index)，然后只要执行:git rebase --<span class="built_in">continue</span> 就可以线性的连接本地分支与远程分支，无误之后就回退出，回到分支上。）</span><br><span class="line"></span><br><span class="line">5.git push -f origin xxx 把rebase后并且更新过的代码再push到远端github上</span><br><span class="line">（-f ---》强行）</span><br><span class="line"></span><br><span class="line">6.原项目主人采用pull request 中的 squash and merge 合并所有不同的commit</span><br><span class="line"></span><br><span class="line">==远端完成更新后==</span><br><span class="line"></span><br><span class="line">1.git branch -d xxx 删除本地的git分支</span><br><span class="line"></span><br><span class="line">2.git pull origin master (或者git pull --rebase)再把远端的最新代码拉至本地</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>标注：</p><ul><li>git rebase 通常用于重写提交历史</li><li>git pull的默认行为是git fetch + git merge</li><li>git pull –rebase则是git fetch + git rebase</li><li>git rebase –abort 会放弃合并，回到rebase操作之前的状态，之前的提交的不会丢弃；</li><li>git rebase –skip 则会将引起冲突的commits丢弃掉（慎用！！）；</li><li>git rebase –continue 合并冲突，结合”git add 文件”命令一起用与修复冲突，提示开发者，一步一步地有没有解决冲突。（fix conflicts and then run “git rebase –continue”）</li><li>squash （Git squash 是一个 Git 命令，用于将多个提交合并为一个提交）<ul><li>git rebase -i HEAD~n（其中 n 是需要合并的提交数）</li><li>会打开一个默认的编辑器，然后pick这个词替换成squash，然后wq保存既可，不懂里面有提示。</li><li>保存之后，会打开一个新的文本编辑器窗口来确认提交，我们将在第一条提交消息的顶部添加新的提交消息。</li></ul></li></ul><p><strong>注意rebase可能产生的问题：</strong><br>假设有一个远程分支是：A-&gt;B-&gt;C-&gt;D，甲先拉取了该分支到本地，然后乙拉取了分支并执行了 rebase -i，修改了 A 之后的提交历史（这里假设只是修改了 B 的提交信息），并通过 force-push 强制推送到了远程分支，此时远程分支会变A-&gt;B’-&gt;C’-&gt;D’，如果甲再执行 git pull，实际上甲本地 A 之后的提交都会被当成新的提交，因此需要执行一次 merge，merge之后会变成：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">A-&gt;B&#x27;-&gt;C&#x27;-&gt;D&#x27;-&gt;M</span><br><span class="line">  \           /</span><br><span class="line">  B -&gt; C -&gt; D </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git的子模块</title>
      <link href="/post/6060373f.html"/>
      <url>/post/6060373f.html</url>
      
        <content type="html"><![CDATA[<h1 id="git-submodule"><a href="#git-submodule" class="headerlink" title="git submodule"></a>git submodule</h1><p><a href="https://git-scm.com/book/en/v2/Git-Tools-Submodules">https://git-scm.com/book/en/v2/Git-Tools-Submodules</a></p><p><strong>为什么要用submodules？</strong><br>经常发生的情况是，在处理一个项目时，您需要使用其中的另一个项目。也许它是第三方开发的库，或者您正在单独开发并在多个父项目中使用。这些场景中出现了一个常见问题：您希望能够将这两个项目视为独立的项目，但仍然能够在另一个项目中使用一个项目。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">mkdir</span> <span class="built_in">test</span></span><br><span class="line">$ <span class="built_in">cd</span> <span class="built_in">test</span></span><br><span class="line">$ git init</span><br><span class="line">$ git submodule add https://github.com/my-user/my-submodule.git &lt;指定目录&gt;</span><br></pre></td></tr></table></figure><p>加上 –recursive 拉取嵌套的子模块（子模块本身又有子模块）</p><p><code>git submodule update --init --recursive</code></p><p>在clone时加上 –recurse-submodules选项自动拉取子模块</p><p><code>git clone --recurse-submodules &lt;main-project-repo-url&gt;</code></p><p><code>git submodule update --remote [submodule-path] </code>(不用切目录进行手动更新)</p><p><code>git submodule foreach git pull</code> 遍历更新所有子库</p><p>删除子版本库</p><ul><li><code>git rm --cache mymodule</code></li><li>将submodule从工作区中删除</li><li>最后将.gitmodules目录删除</li></ul><p><strong>注意：</strong></p><ul><li><p>当产生内容变化，在主模块目录输入git status会显示子模块目录有更改，不会显示具体的内容，而且主目录无法对submodule操作</p></li><li><p>主模块在git add文件时是不会添加子模块目录下的内容，而是直接add子模块目录</p></li><li><p>当我们在主目录拉取代码的时候，子模块默认不会被拉取</p></li><li><p>主目录和子模块并不是完全没有关联，他们之间的变动都会在各自的status中显示</p></li></ul><h1 id="git-subtree"><a href="#git-subtree" class="headerlink" title="git subtree"></a>git subtree</h1><p><code> git remote add subtree-origin git@github.com:xxxx/git_subtree_child.git</code><br><code> git remote show </code></p><p><code> git subtree add --prefix=subtree subtree-origin master --squash</code> #其中的–prefix&#x3D;subtree可以写成：–p subtree 或 –prefix subtree<br> 该命令表示将远程地址为subtree-origin的，子版本库上master分支的，文件克隆到subtree目录下</p><p>–squash是可选参数，它的含义是合并，压缩的意思。</p><p>如果不增加这个参数，则会把远程的子库中指定的分支（这里是master）中的提交一个一个地拉取到本地再去创建一个合并提交；<br>如果增加了这个参数，会将远程子库指定分支上的多次提交合并压缩成一次提交再拉取到本地，这样拉取到本地的，远程子库中的，指定分支上的，历史提交记录就没有了。</p><p>父库中通过如下指令更新依赖的子库内容：</p><p><code>git subtree pull --prefix=subtree subtree-origin master --squash</code></p><h1 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h1><ol><li>git subtree把子仓库当作整个仓库的一个子目录来处理，而git submodule则把子仓库作为一个独立的仓库来处理。</li><li>当使用git subtree时，子仓库的所有文件都会被添加到父仓库中，并且可以像普通文件一样被管理和维护。相反，使用git submodule时，子仓库只会在父仓库中以一个特殊的条目出现，并且必须单独管理和维护。</li><li>git subtree允许把子仓库的内容合并到父仓库中，并且可以在父仓库中直接对子仓库的内容进行修改和提交，而git submodule则不允许这样做。相反，git submodule只能在父仓库中记录子仓库的提交历史，并且必须在子仓库中进行更改并提交。这意味着，使用git subtree可以更方便地管理父仓库和子仓库之间的关系，并且可以更灵活地组织和维护代码。</li></ol><h1 id="查缺补漏"><a href="#查缺补漏" class="headerlink" title="查缺补漏"></a>查缺补漏</h1><p>因为submodule的特性，在push主模块的时候，子模块默认不会推送所以：</p><ul><li>如果想要在 push 主仓库时同时推送子仓库，你可以使用 <code>git push --recurse-submodules=on-demand</code> 选项，如果有任意一个子模块有更新，就会 push 到远程仓库。</li><li>如果你想要强制 push 所有的子仓库，不管它们是否有更新，那么可以使用<code> git push --recurse-submodules=on-demand --force</code> 选项<br>上面的可能不好使，这和git版本有关，详细可以参考：<a href="https://stackoverflow.com/questions/5814319/git-submodule-push">https://stackoverflow.com/questions/5814319/git-submodule-push</a></li></ul><p><strong>注意：</strong><br>主模块和子模块在同一个git目录下面管理，如果不在一个目录会出现俩个不同git，而且新的.git目录再管理另外一个submodule</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">--recurse-submodules[=&lt;pathspec&gt;]</span><br><span class="line">                        initialize submodules <span class="keyword">in</span> the <span class="built_in">clone</span></span><br><span class="line">--recursive[=&lt;pathspec&gt;]</span><br><span class="line">                        <span class="built_in">alias</span> of --recurse-submodules</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NDK和JNI</title>
      <link href="/post/4db545c4.html"/>
      <url>/post/4db545c4.html</url>
      
        <content type="html"><![CDATA[<h1 id="NDK与JNI基础"><a href="#NDK与JNI基础" class="headerlink" title="NDK与JNI基础"></a>NDK与JNI基础</h1><p>1.由来：</p><p>​ Android 平台从一开就已经支持了C&#x2F;C++了。我们知道Android的SDK（ Software Development Kit ）主要是基于Java的，所以导致了在用Android SDK进行开发的工程师们都必须使用Java语言。不过，Google从一开始就说明Android也支持JNI编程方式，也就是第三方应用完成可以通过JNI调用自己的C动态度。于是NDK就应运而生了。</p><p>2.NDK是什么：</p><p>​NDK全拼是：Native Develop Kit。官方定义： Android NDK 是一套允许您使用原生代码语言(例如C和C++) 实现部分应用的工具集。在开发某些类型应用时，这有助于您重复使用以这些语言编写的代码库 。</p><ol start="3"><li></li></ol><p>​so文件，其本质就是一堆C、C++的头文件和实现文件打包成一个库。目前Android系统支持以下七种不用的CPU架构，每一种对应着各自的应用程序二进制接口ABI：(Application Binary Interface)定义了二进制文件(尤其是.so文件)如何运行在相应的系统平台上，从使用的指令集，内存对齐到可用的系统函数库。对应关系如下：</p><blockquote><ul><li>ARMv5——armeabi</li><li>ARMv7 ——armeabi-v7a</li><li>ARMv8——arm64- v8a</li><li>x86——x86</li><li>MIPS ——mips</li><li>MIPS64——mips64</li><li>x86_64——x86_64</li></ul></blockquote><p>4.什么是JNI:</p><p>​JNI，全称为Java Native Interface，即Java本地接口，JNI是Java调用Native 语言的一种特性。通过JNI可以使得Java与C&#x2F;C++机型交互。即可以在Java代码中调用C&#x2F;C++等语言的代码或者在C&#x2F;C++代码中调用Java代码。由于JNI是JVM规范的一部分，因此可以将我们写的JNI的程序在任何实现了JNI规范的Java虚拟机中运行。同时，这个特性使我们可以复用以前用C&#x2F;C++写的大量代码JNI是一种在Java虚拟机机制下的执行代码的标准机制。代码被编写成汇编程序或者C&#x2F;C++程序，并组装为动态库。也就允许非静态绑定用法。这提供了一个在Java平台上调用C&#x2F;C++的一种途径，反之亦然</p>]]></content>
      
      
      <categories>
          
          <category> andorid逆向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> andorid逆向 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>APP加固理论</title>
      <link href="/post/4e889f61.html"/>
      <url>/post/4e889f61.html</url>
      
        <content type="html"><![CDATA[<h2 id="app加固技术发展"><a href="#app加固技术发展" class="headerlink" title="app加固技术发展"></a>app加固技术发展</h2><p>摘录：<a href="https://mp.weixin.qq.com/s/j35pPdZyeg_InS9LcPmnkQ">https://mp.weixin.qq.com/s/j35pPdZyeg_InS9LcPmnkQ</a></p><h3 id="dex保护"><a href="#dex保护" class="headerlink" title="dex保护"></a>dex保护</h3><h4 id="代码混淆"><a href="#代码混淆" class="headerlink" title="代码混淆"></a>代码混淆</h4><ul><li>混淆就是对发布出去的程序进行重新组织和处理，使得处理后的代码与处理前代码完成相同的功能，而混淆后的代码很难被反编译，即使反编译成功也很难得出程序的真正语义。ProGuard就是一个混淆代码的开源项目，能够对字节码进行混淆、缩减体积、优化等处理。</li></ul><h4 id="动态加载"><a href="#动态加载" class="headerlink" title="动态加载"></a>动态加载</h4><ul><li><p>将需要保护的代码单独编译出来，将其进行加密后在程序运行的过程中对其进行解密，并使用 <code>DexClassLoader</code> 来动态的进行加载</p></li><li><p>DexClassLoader是什么？</p><p>  在java环境中，有个概念叫类加载器（ClassLoader），其作用是动态加载class文件，标准的java sdk中，有ClassLoader这个类，可以用来加载想要加载的class文件，每个ClassLoader在初始化的时候必须指定class的路径。</p><p>  每个ClassLoader都有一个父ClassLoader，当加载类的时候，子ClassLoader会先请求父ClassLoader去加载class文件，如果父ClassLoader找不到class文件的时候，子ClassLoader才会继续去加载class文件，只是一种安全机制。</p><p>  在android中加载的是dex文件，dex事经过优化的class文件。Android中事通过DexClassLoader来加载class的</p></li></ul><h4 id="Native-开发"><a href="#Native-开发" class="headerlink" title="Native 开发"></a>Native 开发</h4><ul><li><p>使用 NDK 编写应用，直接生成 native 代码。</p><p>  Java2C，使用 C 语言编写的代码，最后编译成 <code>native</code> 代码更安全。</p><p>  为什么更安全，因为 <code>native</code> 代码的二进制分析跟 <code>Java</code> 的二进制分析难度系数不在一个等级上。<code>Java Bytecode</code> 更加利于代码还原，而通过汇编向高级语言的转换需要更多更强大的算法支持，才能得到一个勉强能看的伪代码。</p><p>  并且，<code>native</code> 层的保护方式更加的丰富、强大，也更加的受欢迎，所以 <code>Java2C</code> 也是除了 <code>VMP</code> 另一个比较受追捧的硬核保护方式。</p><p>  但是 <code>Java2C</code> 的研发难度很高，不仅要涉及很多编译器的相关知识，比如 <code>AST</code> 的转换，还因为是解释性&#x2F;虚拟机语言与编译型语言的转换，需要关注很多 <code>Java</code> 的特性能否等价转换</p></li></ul><h4 id="Native保护"><a href="#Native保护" class="headerlink" title="Native保护"></a>Native保护</h4><h4 id="Obfuscator-LLVM"><a href="#Obfuscator-LLVM" class="headerlink" title="Obfuscator-LLVM"></a>Obfuscator-LLVM</h4><p>首先, <code>LLVM</code> 是一套开源的编译器，而 <code>Obfuscator-LLVM</code> 是一个专门为混淆而生的 <code>LLVM</code>。<code>OLLVM</code> 通过编写 <code>PASS</code> 来控制中间代码以达到混淆的目的。</p><p>安全人员的生活就是如此朴(扑)实(街)无华，拿别人用来做优化的东西，做负优化。</p><p>官方版本的 <code>OLLVM</code> 拥有以下三个混淆功能</p><h5 id="Bogus-Control-Flow"><a href="#Bogus-Control-Flow" class="headerlink" title="Bogus Control Flow"></a>Bogus Control Flow</h5><p>翻译为虚假控制流，这个东西可以参见<a href="http://mp.weixin.qq.com/s?__biz=MzIzNDE3NjI0MQ==&mid=2247483698&idx=1&sn=c49bd0d5ac959244faa165b43118739f&chksm=e8fb2aacdf8ca3ba0d3f94b50922a33fab52dfa25180a63b0835e8a3c05ad239070be56c899a&scene=21#wechat_redirect">上上上上上上*N 篇文章</a>，借助 <code>IDA Pro</code>，可以完美的消除虚假控制流混淆，这里不再赘述。</p><p>值得吐槽的是，编译器辛辛苦苦做的死代码消除，又被一下子就给加回来了一大堆。安全人员果然就是如此的朴(扑)实(街)无华。</p><h5 id="Control-Flow-Flattening"><a href="#Control-Flow-Flattening" class="headerlink" title="Control Flow Flattening"></a>Control Flow Flattening</h5><p>控制流平坦化，这个应该是 <code>OLLVM</code> 中最有挑战性的一项混淆。这个混淆会将原有的控制流进行分割，为每个基本块赋值一个常量 ID，然后通过分发器来决定基本块的真实后继。在 <code>IDA Pro</code> 的伪代码中通常表现为一堆嵌套的 <code>while</code>，看着确实很唬人。</p><p>目前公开分析得比较多的反混淆思路是利用符号执行或者仿真执行计算后继，然后再计算汇编进行 <code>Patch</code>。我觉得这个思路基本上是错的，而且效率慢，Patch 难。通过纯静态分析的算法来进行计算才是正道…</p><p>控制流平坦化会导致程序运行效率大幅下降，一般只会对关键的重要函数进行混淆。</p><p>还是那句话，安全人员果然就是如此的朴实(扑)无华(街)….</p><h5 id="Instructions-Substitution"><a href="#Instructions-Substitution" class="headerlink" title="Instructions Substitution"></a>Instructions Substitution</h5><p>指令替换，这个感觉用处不大，就是类似于把 <code>a = b + c</code> 替换成 <code>a = b - (-c)</code>。我觉得这个并没有对逆向分析有多大影响。</p><h5 id="HikariObfuscator"><a href="#HikariObfuscator" class="headerlink" title="HikariObfuscator"></a>HikariObfuscator</h5><p>除了官方的 <code>OLLVM</code>, 还有第三方修改的版本会有添加一些其他的混淆 <code>PASS</code>，而 <code>Hikari</code> 就是其中比较富有代表性的一个。</p><p><code>Hikari</code> 中不仅包含常规二进制的混淆，还包括针对 <code>iOS</code> 的一些保护，不过这一部分本篇就跳过了。</p><h5 id="FunctionCallObfuscate"><a href="#FunctionCallObfuscate" class="headerlink" title="FunctionCallObfuscate"></a>FunctionCallObfuscate</h5><p>这个混淆 <code>Pass</code> 是将函数调用指令转换成类似于 <code>Java</code> 中的反射的形态，通过调用 <code>dlopen</code>、<code>dlsym</code> 函数来进行完成查找函数指针、调用的过程。</p><p>好处就是可以消除掉导入表。</p><h5 id="FunctionWrapper"><a href="#FunctionWrapper" class="headerlink" title="FunctionWrapper"></a>FunctionWrapper</h5><p>函数封装，根据 Wiki 描述，是将函数调用 <code>foo(1)</code> 封装成 <code>DummyA(1)-&gt;DummyB(1)-&gt;DummyC(1)-&gt;foo(1)</code> 的样子。</p><p>作用不是很大，有一个好处是让调用的函数不能直观的看到名称。</p><h5 id="IndirectBranching"><a href="#IndirectBranching" class="headerlink" title="IndirectBranching"></a>IndirectBranching</h5><p>间接跳转，这个也是从古自今用的比较多的一个混淆方法。原理是将原本的立即数跳转转换为寄存器跳转，先将偏移值赋值给寄存器，最后通过寄存器的方式来进行跳转。这会导致很多反汇编器的分析算法无法正确构建 <code>CFG</code> 以及计算函数结尾，导致逆向工具无法正常工作。</p><h5 id="StringEncryption"><a href="#StringEncryption" class="headerlink" title="StringEncryption"></a>StringEncryption</h5><p>字符串加密，一般是在 <code>.init</code> 段或者 <code>.init_array</code> 段里的函数对字符串进行解密。保证在程序运行之前将字符串解密。</p><p>对抗方法也不难，比如可以通过 <code>FRIDA-RPC</code> 远程调用的方法来获取解密后的字符串，然后再对二进制进行 <code>Patch</code>；也可以直接还原算法，解密为明文之后进行 <code>Patch</code>。</p><h3 id="初代加固"><a href="#初代加固" class="headerlink" title="初代加固"></a>初代加固</h3><p><strong>(Dex保护 + 资源保护 + Native保护) &#x3D; APP加固服务</strong></p><h4 id="文件落地加载"><a href="#文件落地加载" class="headerlink" title="文件落地加载"></a>文件落地加载</h4><p>何为文件落地加载，就是需要先解密文件，然后写入到另外一个文件当中，然后再调用 <code>DexClassLoader</code> 或者其他加载函数来加载解密后的文件，这里不讨论具体的实现方案，网上就有很多开源的项目。</p><p>那么这个缺点就很明显了，既然涉及到文件操作，那完全可以通过动态调试的方式，将解密后的文件截取下来</p><h4 id="不落地加载"><a href="#不落地加载" class="headerlink" title="不落地加载"></a>不落地加载</h4><p>文件操作太明显，于是整出了一套可以在内存中解密并且直接从内存里加载的方案。方法是调用 <code>libdvm.so</code> 或者 <code>libart.so</code> 等库中的一些私有函数，封装一个自定义的加载器。与初初代主要的不同基本上仅是调用的函数不一样。</p><p>但是这同样防不住动态分析，只要内存漫游搜索文件头 <code>dex035</code>，或者在加载时的函数打 <code>hook</code> 、断点照样可以找到解密数据在内存中的指针，然后 Dump 之。</p><h4 id="抹掉dex035"><a href="#抹掉dex035" class="headerlink" title="抹掉dex035"></a>抹掉dex035</h4><p>加载之后在将内存中的 <code>dex035</code> 抹掉。</p><p>这个仅仅是为了防止内存漫游搜索文件头，依然防不住打 <code>Hook</code> 或断点。</p><p>初代的保护真正的问题在于，代码数据总是结构完整的存储在一段内存里面，这是一个致命的弱点，一旦反注入、反调试等措施被破解，这个保护就相当于是已经失败了。</p><p>于是就有了第二代保护。</p><h3 id="二代加固"><a href="#二代加固" class="headerlink" title="二代加固"></a>二代加固</h3><p>二代保护谓之<code>代码抽取</code>，核心竞争力在于：真正的代码数据并不与 <code>Dex</code> 的结构数据存储在一起，就算 <code>Dex</code> 被完整的扒下来，也无法看到真正的代码</p><h4 id="主动加载-DexHunter"><a href="#主动加载-DexHunter" class="headerlink" title="主动加载 - DexHunter"></a>主动加载 - DexHunter</h4><p><code>Dexhunter</code> 是所有二代壳脱壳机的鼻祖，原理是通过主动加载 <code>Dex</code> 中的所有类，然后 <code>Dump</code> 所有方法对应代码区的数据，并将其重建到被抽取之后的 <code>Dex</code> 之中。</p><p>此类主动加载脱壳机大概的流程是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">遍历Dex中的所有类 -&gt; 模拟加载类的流程(例如调用 dvmFindClass 等系列函数) -&gt; 解析内存中的数据 -&gt; 在 Dex 文件中填</span><br></pre></td></tr></table></figure><h4 id="主动调用-FUPK3-FART"><a href="#主动调用-FUPK3-FART" class="headerlink" title="主动调用 - FUPK3\FART"></a>主动调用 - FUPK3\FART</h4><p>为了对抗 <code>DexHunter</code>， 有的代码抽取方案已经不再类加载时还原代码了，而是在比 <code>DexHunter</code> 更后面的某个时机。因为可以做代码还原的点比较多，所以采用主动调用的方案，可以完全规避掉时机的问题。</p><p>原理是对执行方法的入口函数进行插桩，在这个地方判断是否带有主动调用的标志，若属于主动调用则 <code>Dump CodeItem</code> 的数据，然后在进行 Dex 重建。而主动调用放在比较顶层的地方，这样就可以覆盖所有代码还原的时机。</p><p>这个方案虽然理论上也可以通过注入和 Hook 来做，但是需要插桩的函数以及一些需要调用的函数有可能没有导出，所以会比较麻烦。</p><h3 id="三代加固"><a href="#三代加固" class="headerlink" title="三代加固"></a>三代加固</h3><h4 id="DEX-虚拟机保护"><a href="#DEX-虚拟机保护" class="headerlink" title="DEX 虚拟机保护"></a>DEX 虚拟机保护</h4><p><strong>DEX 虚拟机保护 &#x3D;&#x3D; DEX Virtual Machine Protect &#x3D;&#x3D; DEX VMP</strong></p><p><code>VMP</code> 这个东西源自 PC 平台，<code>DEX VMP</code> 的原理是运行一个定制的解释器来跑经过保护的代码指令。</p><p>类似于自己编译一个 <code>dalvik</code> 解释器在 <code>native</code> 中运行，代码执行脱离系统依赖，就算完整 <code>dump</code> 下来也看不懂，唯一的破解方法就是逆向解释器。</p><p>当然，理想是好的。一开始的 <code>DEX VMP</code> 可能因为兼容问题或者成本问题，很多都不是真正意义上的虚拟机保护，而是指令替换，约等于把 <code>dalvik</code> 解释器扒下来，改一改 <code>opcode</code>，做个映射就可以了。不过即使只到这种程度，也已经有一定的难度了，想要做到一键破解并不容易。</p>]]></content>
      
      
      <categories>
          
          <category> andorid逆向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> andorid逆向 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>android逆向分析思路</title>
      <link href="/post/4c73b60a.html"/>
      <url>/post/4c73b60a.html</url>
      
        <content type="html"><![CDATA[<h1 id="静态分析android程序"><a href="#静态分析android程序" class="headerlink" title="静态分析android程序"></a>静态分析android程序</h1><h2 id="从AndroidManifest-xml找到程序的入口分析"><a href="#从AndroidManifest-xml找到程序的入口分析" class="headerlink" title="从AndroidManifest.xml找到程序的入口分析"></a>从AndroidManifest.xml找到程序的入口分析</h2><p>每个android程序都有一个主的activity，它是程序启动的第一个activity，然后每个activity都需要在</p><p>AndroidManifest.xml文件中声明，看下面得例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;activity android:theme=&quot;@style/DrugTheme.Launcher&quot; android:name=&quot;cn.dxy.medicinehelper.activity.DrugLaunchActivity&quot; android:exported=&quot;true&quot; android:screenOrientation=&quot;portrait&quot;&gt;</span><br><span class="line">&lt;intent-filter&gt;</span><br><span class="line">&lt;action android:name=&quot;android.intent.action.MAIN&quot;/&gt;</span><br><span class="line">&lt;category android:name=&quot;android.intent.category.LAUNCHER&quot;/&gt;</span><br><span class="line">&lt;/intent-filter&gt;</span><br><span class="line">&lt;/activity&gt;</span><br></pre></td></tr></table></figure><action android:name="android.intent.action.MAIN"> <category android:name="android.intent.category.LAUNCHER"> <p>android:name&#x3D;”cn.dxy.medicinehelper.activity表示这个activity的包名.DrugLaunchActivity 表示这个类</p><p>找到主activity后，找到onCreat()，对于大多数而言这个就是程序的入口。</p><h2 id="android中的application类有什么用，和activity什么关系"><a href="#android中的application类有什么用，和activity什么关系" class="headerlink" title="android中的application类有什么用，和activity什么关系?"></a>android中的application类有什么用，和activity什么关系?</h2><p>Application和Activity,Service一样是Android框架的一个系统组件，当Android程序启动时系统会创建一个Application对象，用来存储系统的一些信息。</p><p>Android系统自动会为每个程序运行时创建一个Application类的对象且只创建一个，所以Application可以说是单例（singleton）模式的一个类。</p><p>通常我们是不需要指定一个Application的，系统会自动帮我们创建，如果需要创建自己的Application，那也很简单！创建一个类继承Application并在AndroidManifest.xml文件中的application标签中进行注册（只需要给application标签增加name属性，并添加自己的 Application的名字即可）。</p><p>启动Application时，系统会创建一个PID，即进程ID，所有的Activity都会在此进程上运行。那么我们在Application创建的时候初始化全局变量，同一个应用的所有Activity都可以取到这些全局变量的值，换句话说，我们在某一个Activity中改变了这些全局变量的值，那么在同一个应用的其他Activity中值就会改变。</p><h2 id="通过程序反馈给你的直接的信息去分析"><a href="#通过程序反馈给你的直接的信息去分析" class="headerlink" title="通过程序反馈给你的直接的信息去分析"></a>通过程序反馈给你的直接的信息去分析</h2><p>就是程序运行时候回有一些很直接的提示，或者一些特征，可以根据这些特征去快速找到关键代码</p><h2 id="找到特征函数"><a href="#找到特征函数" class="headerlink" title="找到特征函数"></a>找到特征函数</h2><p>通过特征函数定位关键代码。熟悉android的sdk中api函数，然后根据程序一些行为判断，某些是由函数触发的行为</p><h2 id="插桩日志打印"><a href="#插桩日志打印" class="headerlink" title="插桩日志打印"></a>插桩日志打印</h2><p>通过静态分析代码的关键位置，插入log代码分析参数的调用参数，返回值的信息</p><h1 id="动态分析"><a href="#动态分析" class="headerlink" title="动态分析"></a>动态分析</h1><h2 id="DDMS"><a href="#DDMS" class="headerlink" title="DDMS"></a>DDMS</h2><h2 id="使用Xposed-x2F-Frida-Hook-App中某个函数"><a href="#使用Xposed-x2F-Frida-Hook-App中某个函数" class="headerlink" title="使用Xposed&#x2F;Frida Hook App中某个函数"></a>使用Xposed&#x2F;Frida Hook App中某个函数</h2><h2 id="利用分析工具ida，jeb等分析"><a href="#利用分析工具ida，jeb等分析" class="headerlink" title="利用分析工具ida，jeb等分析"></a>利用分析工具ida，jeb等分析</h2><h1 id="逆向so技巧"><a href="#逆向so技巧" class="headerlink" title="逆向so技巧"></a>逆向so技巧</h1><h2 id="没有搜Java-xxx这样的函数"><a href="#没有搜Java-xxx这样的函数" class="headerlink" title="没有搜Java_xxx这样的函数"></a>没有搜Java_xxx这样的函数</h2><p>说明他可能用了动态注册，所以就去搜JNI_OnLoad函数，所以这里注意大家以后如果打开so之后发现没有Java_xxx这样的函数开头一般都是在JNI_OnLoad中采用了动态注册方式，所以只需要找到JNI_OnLoad函数，然后找到RegisterNatives函数就可以了</p><h2 id="反汇编"><a href="#反汇编" class="headerlink" title="反汇编"></a>反汇编</h2><p>看到类似于vXX+YY这样的，选中vXX变量，然后按Y按键，然后替换成JNIEnv*即可，Force call type</p><h2 id="防止调试"><a href="#防止调试" class="headerlink" title="防止调试"></a>防止调试</h2><p>ptrace</p><p>怎么修改成NOP指令呢？有一个牛逼的网站在线转换arm为hex值：<a href="http://armconverter.com/">http://armconverter.com</a></p><h2 id="签名校验"><a href="#签名校验" class="headerlink" title="签名校验"></a>签名校验</h2><p>想知道so中有没有签名校验的话，可以直接Shift+F12查找字符串内容”signatures</p><h1 id="反调试"><a href="#反调试" class="headerlink" title="反调试"></a>反调试</h1><h2 id="1-一种进程最多只能被一个进程ptrace"><a href="#1-一种进程最多只能被一个进程ptrace" class="headerlink" title="1.一种进程最多只能被一个进程ptrace"></a>1.一种进程最多只能被一个进程ptrace</h2><p>我们知道在调试状态下，Linux会向&#x2F;proc&#x2F;pid&#x2F;status写入一些进程状态信息，比如最大的变化是TracePid字段会写入调试进程的pid.<br>当我们看到android_server附加时，可以根据Linux下一个进程最多只能被另一个进程跟踪，因此可以自己ptrace自己，然后让android_server不能够调试。</p><h2 id="2-检测TracePid的值"><a href="#2-检测TracePid的值" class="headerlink" title="2.检测TracePid的值"></a>2.检测TracePid的值</h2><p>当我们可以检测Tracepid的值，如果不为0，只能说明一点：当前进程正在被调试，那我们就可kill掉退出。同时，我们还可以加一个线程机制进行循环检测，来增大攻击者破解的难度，这也是很多加固厂商采用的办法。<br>解决办法：一是可以用debug模式启动，在JNI_Onload处下断点，找到那个调用方法NOP掉，二是直接静态分析JNI_Onload，直接去掉方法调用。</p><h2 id="3-检测android-server端口号"><a href="#3-检测android-server端口号" class="headerlink" title="3.检测android_server端口号"></a>3.检测android_server端口号</h2><p>我们知道android_server的默认监听端口是23946，所以可以通过检测这个端口号来起到一定的反调试作用。在linux系统中在&#x2F;proc&#x2F;net&#x2F;tcp会记录这些连接信息。<br>我们可以看到在底层多了个5D8A的端口，这个正对应16进制的23946，因此我们可以检查这个文件下面的这个端口号来进行达到反调试的作用。同时我们也可以通过执行<br>netstat -apn命令进行查看。<br>解决办法：换另外一个端口</p><h2 id="4-通过检测android-server这些关键字以及文件目录"><a href="#4-通过检测android-server这些关键字以及文件目录" class="headerlink" title="4.通过检测android_server这些关键字以及文件目录"></a>4.通过检测android_server这些关键字以及文件目录</h2><p>我们知道在调试进程的过程中，这个进程会被IDA中的android_server ptrace,并且这个进程名字存在于 “&#x2F;proc&#x2F;pid&#x2F;cmdline”中，当然这里的pid指的是android_server的进程号，这个可以通过TracePid来获得，通过下面的图可以看出来：</p><h2 id="5-检测在调试状态下的软件断点"><a href="#5-检测在调试状态下的软件断点" class="headerlink" title="5.检测在调试状态下的软件断点"></a>5.检测在调试状态下的软件断点</h2><p>要对在调试时下断点有一定的了解，发现下断点还是利用ptrace系统函数，在调试器设置断点的时候，首先完成件事：<br>1》保存目标地址上的数据<br>2》将目标地址上的头几个字节替换为break point指令，命中断点触发breakpoint,这时程序向操作系统发送SIGTRAP信号，调试器收到SIGTRAP信号后，调试器会回退被跟踪进程的当前pc值，当控制权回到原进程时，pc就恰好指向了点所在位置，这就是调试器设置断点的基本原理。<br>也就是说软件断点通过改写目标地址的头几个字节为breakpoint指令，所以我们可以直接进行检测文件，遍历so中的在可执行segment查找是否出现breakpoint指令即可，即根据其对应的偏移地址进行检测有没有ARM、Thumb、Thumb2的断点指令，如果有的话，就kill掉。<br>解决办法：这般函数可以在JNI_Onload、com_java_XX这类函数进行调用，找出问题的原因，然后对关键函数进行NOP掉。</p><h2 id="6-使用inotify对文件进行监控"><a href="#6-使用inotify对文件进行监控" class="headerlink" title="6.使用inotify对文件进行监控"></a>6.使用inotify对文件进行监控</h2><p>我们知道在动态调试的过程中，一般会查看调试进程的虚拟空间或者是dump内存，这时候就会汲步到对于文件的读写以及打开的权限，<br>然而偏巧的是在Linux下inotify就可以实现对文件系统事件的打开，读写的监管。如果通过inotify监管这些，收到事件变化，那我们就可以kill掉进程。<br>下面主要会用到的几个常用的api:<br>1.inotify_init:用于创建一个inotify实例的系统调用，并返回一个指向该实例的文件描述符。<br>2.inotify_add_watch:增加对文件或者目录的监控，并指定需要监控哪些事件。<br>3.read:读取包含一个或者多个事件信息的缓存。<br>4.select</p><h2 id="7-调试时代码执行时间差异检测"><a href="#7-调试时代码执行时间差异检测" class="headerlink" title="7.调试时代码执行时间差异检测"></a>7.调试时代码执行时间差异检测</h2><p>计算前后的差异，如果超出一般正常情况下的设定值，我们就认为此时的代码下在在被调试，这时就可以选择退出。</p><h2 id="8-Dalvik虚拟内检测调试器函数"><a href="#8-Dalvik虚拟内检测调试器函数" class="headerlink" title="8.Dalvik虚拟内检测调试器函数"></a>8.Dalvik虚拟内检测调试器函数</h2><p>由于Dalvik自带这些内部检测调试器的代码，大致上是在被调试以后，改变那个调试器的状态字段。</p><h2 id="9-apk进程fd文件检测"><a href="#9-apk进程fd文件检测" class="headerlink" title="9.apk进程fd文件检测"></a>9.apk进程fd文件检测</h2><p>原理：根据&#x2F;proc&#x2F;pid&#x2F;fd&#x2F;路径下文件的个数差异，判断进程的判态</p><h2 id="10-函数hash值检测"><a href="#10-函数hash值检测" class="headerlink" title="10.函数hash值检测"></a>10.函数hash值检测</h2><p>原理：so文件中函数的指令是固定的，但是如果被下了软件断点，指令就会发生改变，可以计算内存中一段指令的hash值进行校验，检测是否被修改或被下断点</p><h2 id="11-断点指令检测"><a href="#11-断点指令检测" class="headerlink" title="11.断点指令检测"></a>11.断点指令检测</h2><p>原理，如果函数被下软件断点，则断点地址会被改写为bkpt指令，可以在函数体中牛搜索bkpt指令来检测软件断电。</p><h2 id="12-利用IDA先截获信号特性的检测"><a href="#12-利用IDA先截获信号特性的检测" class="headerlink" title="12.利用IDA先截获信号特性的检测"></a>12.利用IDA先截获信号特性的检测</h2><p>原理：IDA会首先截获信号，导致进程无法接收到信号，因而不会执行信号处理函数。将关键函数流程放在信号处理函数中，如果没有执行，就是被调试状态。</p><h2 id="13-利用IDA解析缺陷反调试"><a href="#13-利用IDA解析缺陷反调试" class="headerlink" title="13.利用IDA解析缺陷反调试"></a>13.利用IDA解析缺陷反调试</h2><p>原理：IDA采用递归下降算法来反汇编指令，而该算法最大的缺点在于它无法处理间接代码路径，无法识别动态算出来的跳转。<br>而arm架构下由于存在arm和thumb指令集，就涉及到指令集切换，IDA在革某些情况下无法智能识别arm和thumb指令，<br>进一步导致无法进行伪代码还原。</p><h2 id="14-三种进程信息结构检测"><a href="#14-三种进程信息结构检测" class="headerlink" title="14.三种进程信息结构检测"></a>14.三种进程信息结构检测</h2><p>原理：一些进程文件中存储了进程信息，可以读取这些信息得知是否为调试方法<br>1》&#x2F;proc&#x2F;pid&#x2F;status、&#x2F;proc&#x2F;pid&#x2F;task&#x2F;pid&#x2F;status&#x2F;  TracePid非0<br>2》&#x2F;proc&#x2F;pid&#x2F;stat、&#x2F;proc&#x2F;pid&#x2F;task&#x2F;pid&#x2F;stat 第二个字段是t<br>3》&#x2F;proc&#x2F;pid&#x2F;wchan、&#x2F;proc&#x2F;pid&#x2F;task&#x2F;pid&#x2F;wchan  ptrace_stop</p></category></action>]]></content>
      
      
      <categories>
          
          <category> andorid逆向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> andorid逆向 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>android常用的命令</title>
      <link href="/post/5974b575.html"/>
      <url>/post/5974b575.html</url>
      
        <content type="html"><![CDATA[<h2 id="命令分类"><a href="#命令分类" class="headerlink" title="命令分类"></a>命令分类</h2><p>把在adb shell中的执行的命令成为shell命令，在外面执行的叫非shell命令</p><h2 id="非shell命令"><a href="#非shell命令" class="headerlink" title="非shell命令"></a>非shell命令</h2><h3 id="查看当前正在运行app的activity信息"><a href="#查看当前正在运行app的activity信息" class="headerlink" title="查看当前正在运行app的activity信息"></a>查看当前正在运行app的activity信息</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">adb shell dumpsys activity top</span><br><span class="line">adb shell dumpsys &gt; infos.txt</span><br></pre></td></tr></table></figure><h3 id="查看包名应用详细的信息"><a href="#查看包名应用详细的信息" class="headerlink" title="查看包名应用详细的信息"></a>查看包名应用详细的信息</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell dumpsys package(包名)</span><br></pre></td></tr></table></figure><h3 id="查看指定包app的数据组存储信息"><a href="#查看指定包app的数据组存储信息" class="headerlink" title="查看指定包app的数据组存储信息"></a>查看指定包app的数据组存储信息</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell dumpsys dbinfo 包名</span><br></pre></td></tr></table></figure><h3 id="转发设备端口"><a href="#转发设备端口" class="headerlink" title="转发设备端口"></a>转发设备端口</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb forward 协议:端口 ...</span><br></pre></td></tr></table></figure><h3 id="查看设备中可以被调试的应用进程号"><a href="#查看设备中可以被调试的应用进程号" class="headerlink" title="查看设备中可以被调试的应用进程号"></a>查看设备中可以被调试的应用进程号</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb jdwp</span><br></pre></td></tr></table></figure><h3 id="查看当前日志信息"><a href="#查看当前日志信息" class="headerlink" title="查看当前日志信息"></a>查看当前日志信息</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">adb logcat -v time  &gt; E://log.txt</span><br><span class="line">-v 显示日志格式  -v time 时间格式</span><br></pre></td></tr></table></figure><p>adb logcat 命令格式：adb logcat [选项] [过滤项]，其中 选项 和 过滤项 在 中括号 [] 中, 说明这是可选的；</p><p>(1) 选项解析</p><p>– “-s”选项 : 设置输出日志的标签, 只显示该标签的日志;</p><p>–”-f”选项 : 将日志输出到文件, 默认输出到标准输出流中, -f 参数执行不成功;</p><p>–”-r”选项 : 按照每千字节输出日志, 需要 -f 参数, 不过这个命令没有执行成功;</p><p>–”-n”选项 : 设置日志输出的最大数目, 需要 -r 参数, 这个执行 感觉 跟 adb logcat 效果一样;</p><p>–”-v”选项 : 设置日志的输出格式, 注意只能设置一项;</p><p>–”-c”选项 : 清空所有的日志缓存信息;</p><p>–”-d”选项 : 将缓存的日志输出到屏幕上, 并且不会阻塞;</p><p>–”-t”选项 : 输出最近的几行日志, 输出完退出, 不阻塞;</p><p>–”-g”选项 : 查看日志缓冲区信息;</p><p>–”-b”选项 : 加载一个日志缓冲区, 默认是 main, 下面详解;</p><p>–”-B”选项 : 以二进制形式输出日志;</p><p>(2) 过滤项解析</p><p>过滤项格式 : <tag>[:priority] , 标签:日志等级, 默认的日志过滤项是 “ *:I “ ;</tag></p><p>– V : Verbose (明细);</p><p>– D : Debug (调试);</p><p>– I : Info (信息);</p><p>– W : Warn (警告);</p><p>– E : Error (错误);</p><p>– F: Fatal (严重错误);</p><p>– S : Silent(Super all output) (最高的优先级, 可能不会记载东西);</p><h2 id="shell命令"><a href="#shell命令" class="headerlink" title="shell命令"></a>shell命令</h2><h3 id="run-as"><a href="#run-as" class="headerlink" title="run-as"></a>run-as</h3><p>以root身份运行命令，可以在未root的情况下查看某个(debug模式的)应用的内部信息（沙盒文件夹）。</p><p>执行run-as + 包名，就可以直接以root权限进入该应用的沙盒中查看包括数据库、xml、各种信息文件</p><h3 id="ps"><a href="#ps" class="headerlink" title="ps"></a>ps</h3><p>查看设备进程信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ps | grep 过滤内容</span><br><span class="line">ps -t[pid] 查看pid对应的线程信息</span><br></pre></td></tr></table></figure><h3 id="pm"><a href="#pm" class="headerlink" title="pm"></a>pm</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pm install apk包</span><br><span class="line">pm uninstall 包名</span><br><span class="line">pm clear 指定包名应用信息 # 清除应用数据</span><br></pre></td></tr></table></figure><h3 id="am"><a href="#am" class="headerlink" title="am"></a>am</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">am start -n </span><br><span class="line">am start -D -n  # dubug方式启动</span><br></pre></td></tr></table></figure><table><thead><tr><th>命令</th><th>功能</th><th>实现方法</th></tr></thead><tbody><tr><td>am start <code>[options</code>] &#96;&gt;</td><td>启动Activity</td><td>startActivityAsUser</td></tr><tr><td>am startservice &#96;&gt;</td><td>启动Service</td><td>startService</td></tr><tr><td>am stopservice &#96;&gt;</td><td>停止Service</td><td>stopService</td></tr><tr><td>am broadcast &#96;&gt;</td><td>发送广播</td><td>broadcastIntent</td></tr><tr><td>am kill &#96;&gt;</td><td>杀指定后台进程</td><td>killBackgroundProcesses</td></tr><tr><td>am kill-all</td><td>杀所有后台进程</td><td>killAllBackgroundProcesses</td></tr><tr><td>am force-stop &#96;&gt;</td><td>强杀进程</td><td>forceStopPackage</td></tr><tr><td>am hang</td><td>系统卡住</td><td>hang</td></tr><tr><td>am restart</td><td>重启</td><td>restart</td></tr><tr><td>am bug-report</td><td>创建bugreport</td><td>requestBugReport</td></tr><tr><td>am dumpheap <code>&gt; </code>&gt;</td><td>进程pid的堆信息输出到file</td><td>dumpheap</td></tr><tr><td>am send-trim-memory <code>&gt; </code>&gt;</td><td>收紧进程的内存</td><td>setProcessMemoryTrimLevel</td></tr><tr><td>am monitor</td><td>监控</td><td>MyActivityController.run</td></tr></tbody></table><h3 id="netcfg"><a href="#netcfg" class="headerlink" title="netcfg"></a>netcfg</h3><p>查看设备的ip</p><h3 id="netstat"><a href="#netstat" class="headerlink" title="netstat"></a>netstat</h3><p>查看设备的端口号信息</p><h3 id="top"><a href="#top" class="headerlink" title="top"></a>top</h3><p>查看cpu消耗信息</p><h3 id="getprop"><a href="#getprop" class="headerlink" title="getprop"></a>getprop</h3><p>查看系统的属性值</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">getprop ro.debuggable</span><br></pre></td></tr></table></figure><h2 id="android属性配置文件"><a href="#android属性配置文件" class="headerlink" title="android属性配置文件"></a>android属性配置文件</h2><p><strong>Android 属性系统初始化</strong></p><p>init 进程(源码位于&#x2F;system&#x2F;core&#x2F;init&#x2F;init.c)主要完成：解析 init.rc 文件并执行相应动作和服<br>务；生成设备驱动节点；处理子进程终止；提供属性服务。因为分析 Android 属性系统，因<br>此只关注属性服务</p><p>如果属性名称以“ro.”开头，那么这个属性被视为只读属性</p><h3 id="系统配置文件"><a href="#系统配置文件" class="headerlink" title="系统配置文件"></a>系统配置文件</h3><p>设备系统，版本号，cpu型号等</p><p>&#x2F;system&#x2F;build.prop</p><h3 id="default-prop"><a href="#default-prop" class="headerlink" title="default.prop"></a>default.prop</h3><p>调式信息</p><h2 id="命令的补全"><a href="#命令的补全" class="headerlink" title="命令的补全"></a>命令的补全</h2><p>busybox<br><a href="https://github.com/meefik/busybox">https://github.com/meefik/busybox</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>JNI静态注册和动态注册</title>
      <link href="/post/a26b886b.html"/>
      <url>/post/a26b886b.html</url>
      
        <content type="html"><![CDATA[<h2 id="JNI是什么？"><a href="#JNI是什么？" class="headerlink" title="JNI是什么？"></a>JNI是什么？</h2><p> JNI是Java Native Interface的缩写，中文名为JAVA本地调用。它允许Java代码和其他语言写的代码进行交互。JNI一开始是为了本地已编译语言，尤其是C和C++而设计的，但是它并不妨碍你使用其他语言，只要调用约定受支持就可以了。Java是支持调用C&#x2F;C++代码的，不过不能直接调用，因此需要一个中间层来进行转换、翻译，这就是JNI(Java Native Interface)的意思，JNI的作用就是粘合Java代码和C++代码。</p><h2 id="JNIEnv类型"><a href="#JNIEnv类型" class="headerlink" title="JNIEnv类型"></a>JNIEnv类型</h2><p>JNIEnv类型实际上代表了java的环境，通过JNIEnv *指针就可以对java端的代码进行操作。</p><h2 id="jclass类型"><a href="#jclass类型" class="headerlink" title="jclass类型"></a>jclass类型</h2><p>为了能够在c&#x2F;c++中使用java类，jni.h头文件中专门定义了jclass类型来表示java中的class类：</p><ul><li>jclass FindClass(const char* name)<ul><li>通过类的名称获取jcalss，例如jclass str &#x3D;  env-&gt;FindClass (“java&#x2F;lang&#x2F;String”);获取java中String对象的class对象</li></ul></li><li>jclass GetObjectClass(jobject obj)<ul><li>通过对象的实例获取jclass</li></ul></li><li>jclass GetSuperClass(jclass obj) 通过jclass获取父类的jclass对象</li><li>jclass GetMethodID(jclass clazz, const char* name, const char* sig)<ul><li> 参数一：<code>jclass</code> 查找到的java类</li><li> 参数二：<code>const char* name</code> 方法名</li><li> 参数三：<code>const char* sig</code> 方法的返回值</li></ul></li></ul><h2 id="JNI注册方法"><a href="#JNI注册方法" class="headerlink" title="JNI注册方法"></a>JNI注册方法</h2><p>​        静态注册和动态注册。区别是效率。静态注册，每次使用native方法时，都要去寻找；而动态注册，由于有张表的存在，因此查找效率高。静态注册多用于NDK开发，而动态注册多用于Framework开发。不管是静态注册方法，还是动态注册方法，都需要将c文件编译成平台所需要的库。</p><h2 id="静态注册"><a href="#静态注册" class="headerlink" title="静态注册"></a>静态注册</h2><ol><li><p>定义<br> 通过 JNIEXPORT 和 JNICALL 两个宏定义声明，在虚拟机加载 so 时发现上面两个宏定义的函数时就会链接到对应的 native 方法。</p></li><li><p>对应规则<br> <strong>Java + 包名 + 类名 + 方法名</strong></p><p> 其中使用下划线将每部分隔开，包名也使用下划线隔开，如果名称中本来就包含下划线，将使用下划线加数字替换。</p><p> 示例（包名：com.jane.jnidemo，类名MainActivity）：</p><p> 通过javah命令生成JNI的头文件</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javah -jni 包名+类名</span><br></pre></td></tr></table></figure><p> 会生成一个.h的头文件，然后新建一个文件夹家jni，把它放入里面</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Java native method，该方法具体实现由c/c++代码完成</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> String <span class="title function_">stringFromJNI</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// JNI method </span></span><br><span class="line">JNIEXPORT jstring JNICALL</span><br><span class="line"><span class="title function_">Java_com_jane_jnidemo_MainActivity_stringFromJNI</span><span class="params">( JNIEnv *env, jobject instance)</span>;</span><br><span class="line"> </span><br></pre></td></tr></table></figure></li></ol><h2 id="动态注册"><a href="#动态注册" class="headerlink" title="动态注册"></a>动态注册</h2><ol><li><p>动态注册是在JNi层实现的，JAVA层不需要关心，因为在system.load时就会去调用JNI_OnLoad，有就注册，没有就不注册。动态注册的原理：JNI 允许我们提供一个函数映射表，注册给 JVM，这样 JVM 就可以用函数映射表来调用相应的函数， 而不必通过函数名来查找相关函数(这个查找效率很低，函数名超级长)流程更加清晰可控，效率更高.。</p></li><li><p>实现流程:<br> 1、利用结构体 JNINativeMethod 数组记录 java 方法与 JNI 函数的对应关系.<br> 2、实现 JNI_OnLoad 方法，在加载动态库后，执行动态注册.<br> 3、调用 FindClass 方法，获取 java 对象.<br> 4、调用 RegisterNatives 方法，传入 java 对象，以及 JNINativeMethod 数组，以及注册数目完成注册.</p></li><li><p>动态注册的关键字是两个：<br> 1、JNI_OnLoad()方法，这个是载入Jni库后调用的第一个方法，在这里可以将方法对应表注册给JNI环境<br> 2、JNINativeMethod结构，这个结构是将jni层的方法映射到Java端方法的关键，name：JNI层的方法名</p></li></ol><p>signature：Java层的方法签名 fnPtr：JNI层的函数指针，其定义如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">typedefstruct&#123;</span><br><span class="line">constchar* name;</span><br><span class="line">constchar* signature;</span><br><span class="line">void*       fnPtr;</span><br><span class="line">&#125;JNINativeMethod;</span><br></pre></td></tr></table></figure><p><strong>java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 加载so</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.loadLibrary(<span class="string">&quot;native-lib&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        <span class="type">TextView</span> <span class="variable">tv</span> <span class="operator">=</span> findViewById(R.id.sample_text);</span><br><span class="line">        tv.setText(getString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定义native方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">native</span> String <span class="title function_">getString</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;jni.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * extern &quot;C&quot; ：主要作用就是为了能够正确实现C++代码调用其他C语言代码</span></span><br><span class="line"><span class="comment"> * JNIEXPORT，JNICALL ：告诉虚拟机，这是jni函数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span></span><br><span class="line">JNIEXPORT jstring JNICALL</span><br><span class="line"><span class="title function_">native_getString</span><span class="params">(JNIEnv *env, jobject <span class="comment">/* this */</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">string</span> hello = <span class="string">&quot;Hello from C++&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> env-&gt;NewStringUTF(hello.c_str());</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 对应java类的全路径名，.用/代替</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">const</span> <span class="type">char</span> *classPathName = <span class="string">&quot;com/chenpeng/registernativemethoddemo/MainActivity&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * JNINativeMethod 结构体的数组</span></span><br><span class="line"><span class="comment"> * 结构体参数1：对应java类总的native方法</span></span><br><span class="line"><span class="comment"> * 结构体参数2：对应java类总的native方法的描述信息，用javap -s xxxx.class 查看</span></span><br><span class="line"><span class="comment"> * 结构体参数3：c/c++ 种对应的方法名</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">JNINativeMethod method[] = &#123;&#123;<span class="string">&quot;getString&quot;</span>, <span class="string">&quot;()Ljava/lang/String;&quot;</span>, (<span class="type">void</span> *) native_getString&#125;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 该函数定义在jni.h头文件中，System.loadLibrary()时会调用JNI_OnLoad()函数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">JNIEXPORT jint <span class="title function_">JNI_OnLoad</span><span class="params">(JavaVM *vm, <span class="type">void</span> *reserved)</span> &#123;</span><br><span class="line">    <span class="comment">//定义 JNIEnv 指针</span></span><br><span class="line">    JNIEnv *env = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="comment">//获取 JNIEnv</span></span><br><span class="line">    vm-&gt;GetEnv((<span class="type">void</span> **) &amp;env, JNI_VERSION_1_6);</span><br><span class="line">    <span class="comment">//获取对应的java类</span></span><br><span class="line">    jclass clazz = env-&gt;FindClass(classPathName);</span><br><span class="line">    <span class="comment">//注册native方法</span></span><br><span class="line">    env-&gt;RegisterNatives(clazz, method, <span class="number">1</span>);</span><br><span class="line">    <span class="comment">//返回Jni 的版本</span></span><br><span class="line">    <span class="keyword">return</span> JNI_VERSION_1_6;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="参考实例："><a href="#参考实例：" class="headerlink" title="参考实例："></a>参考实例：</h2><p><strong>java代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.wjdiankong.encryptdemo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.app.Activity;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainActivity</span> <span class="keyword">extends</span> <span class="title class_">Activity</span> &#123;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">static</span> &#123;</span><br><span class="line">        System.loadLibrary(<span class="string">&quot;encrypt&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">        findViewById(R.id.btn).setOnClickListener(<span class="keyword">new</span> <span class="title class_">View</span>.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View v)</span> &#123;</span><br><span class="line">                <span class="type">boolean</span> <span class="variable">res</span> <span class="operator">=</span> isEquals(<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">                Log.i(<span class="string">&quot;jw&quot;</span>, <span class="string">&quot;res:&quot;</span> + res);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">native</span> <span class="type">boolean</span> <span class="title function_">isEquals</span><span class="params">(String str)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>头文件</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* DO NOT EDIT THIS FILE - it is machine generated */</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;jni.h&gt;</span></span></span><br><span class="line"><span class="comment">/* Header for class cn_wjdiankong_encryptdemo_MainActivity */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> _Included_cn_wjdiankong_encryptdemo_MainActivity</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _Included_cn_wjdiankong_encryptdemo_MainActivity</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> __cplusplus</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> &#123;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Class:     cn_wjdiankong_encryptdemo_MainActivity</span></span><br><span class="line"><span class="comment"> * Method:    isEquals</span></span><br><span class="line"><span class="comment"> * Signature: (Ljava/lang/String;)Z</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">JNIEXPORT jboolean JNICALL <span class="title function_">Java_cn_wjdiankong_encryptdemo_MainActivity_isEquals</span></span><br><span class="line">  <span class="params">(JNIEnv *, jobject, jstring)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> __cplusplus</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>c文件</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Created by jiangwei1-g on 2016/5/23.</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;encrypt.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;cn_wjdiankong_encryptdemo_MainActivity.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span> key_src[] = &#123;<span class="string">&#x27;z&#x27;</span>,<span class="string">&#x27;y&#x27;</span>,<span class="string">&#x27;t&#x27;</span>,<span class="string">&#x27;y&#x27;</span>,<span class="string">&#x27;r&#x27;</span>,<span class="string">&#x27;T&#x27;</span>,<span class="string">&#x27;R&#x27;</span>,<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;*&#x27;</span>,<span class="string">&#x27;B&#x27;</span>,<span class="string">&#x27;n&#x27;</span>,<span class="string">&#x27;i&#x27;</span>,<span class="string">&#x27;q&#x27;</span>,<span class="string">&#x27;C&#x27;</span>,<span class="string">&#x27;P&#x27;</span>,<span class="string">&#x27;p&#x27;</span>,<span class="string">&#x27;V&#x27;</span>,<span class="string">&#x27;s&#x27;</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">is_number</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* src)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(src == <span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(*src != <span class="string">&#x27;\0&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(*src &lt; <span class="number">48</span> || *src &gt; <span class="number">57</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        src++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> * <span class="title function_">get_encrypt_str</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* src)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(src == <span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> len = <span class="built_in">strlen</span>(src);</span><br><span class="line">    len++;</span><br><span class="line">    <span class="type">char</span> *dest = (<span class="type">char</span>*) <span class="built_in">malloc</span>(len * <span class="keyword">sizeof</span>(<span class="type">char</span>));</span><br><span class="line">    <span class="type">char</span> *head = dest;</span><br><span class="line">    <span class="type">char</span> *tmp = src;</span><br><span class="line">    <span class="type">int</span> i=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> key_len = <span class="number">18</span>;</span><br><span class="line">    <span class="keyword">for</span>(;i&lt;len;i++)&#123;</span><br><span class="line">        <span class="type">int</span> index = (*tmp) - <span class="number">48</span>;</span><br><span class="line">        <span class="keyword">if</span>(index == <span class="number">0</span>)&#123;</span><br><span class="line">            index = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        *dest = key_src[key_len-index];</span><br><span class="line">        tmp++;</span><br><span class="line">        dest++;</span><br><span class="line">    &#125;</span><br><span class="line">    dest++;</span><br><span class="line">    *dest = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">JNIEXPORT jboolean JNICALL <span class="title function_">jiangwei</span></span><br><span class="line">        <span class="params">(JNIEnv * env, jobject obj, jstring str)</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    LOGD(<span class="string">&quot;JNIEnv1:%p&quot;</span>, env);</span><br><span class="line"></span><br><span class="line">    <span class="type">const</span> <span class="type">char</span> *strAry = (*env)-&gt;GetStringUTFChars(env, str, <span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> len = <span class="built_in">strlen</span>(strAry);</span><br><span class="line">    <span class="type">char</span>* dest = (<span class="type">char</span>*)<span class="built_in">malloc</span>(len);</span><br><span class="line">    <span class="built_in">strcpy</span>(dest, strAry);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> number = is_number(strAry);</span><br><span class="line">    <span class="keyword">if</span>(number == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">char</span>* encry_str = get_encrypt_str(strAry);</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>* pas = <span class="string">&quot;ssBCqpBssP&quot;</span>;</span><br><span class="line">    <span class="type">int</span> result = <span class="built_in">strcmp</span>(pas, encry_str);</span><br><span class="line"></span><br><span class="line">    (*env)-&gt;ReleaseStringUTFChars(env, str, strAry);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(result == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">pthread_t</span> t_id;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">getnumberfor_str</span><span class="params">(<span class="type">char</span>* str)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(str == <span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">char</span> result[<span class="number">20</span>];</span><br><span class="line">    <span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(*str != <span class="string">&#x27;\0&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(*str &gt;= <span class="number">48</span> &amp;&amp; *str &lt;= <span class="number">57</span>)&#123;</span><br><span class="line">            result[count] = *str;</span><br><span class="line">            count++;</span><br><span class="line">        &#125;</span><br><span class="line">        str++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> val = atoi(result);</span><br><span class="line">    <span class="keyword">return</span> val;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">thread_fuction</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> pid = getpid();</span><br><span class="line">    <span class="type">char</span> file_name[<span class="number">20</span>] = &#123;<span class="string">&#x27;\0&#x27;</span>&#125;;</span><br><span class="line">    <span class="built_in">sprintf</span>(file_name, <span class="string">&quot;/proc/%d/status&quot;</span>,pid);</span><br><span class="line">    <span class="type">char</span> linestr[<span class="number">256</span>];</span><br><span class="line">    <span class="type">int</span> i=<span class="number">0</span>, traceid;</span><br><span class="line">    FILE *fp;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">        i = <span class="number">0</span>;</span><br><span class="line">        fp = fopen(file_name,<span class="string">&quot;r&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(fp == <span class="literal">NULL</span>)&#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(!feof(fp))&#123;</span><br><span class="line">            fgets(linestr, <span class="number">256</span>, fp);</span><br><span class="line">            <span class="keyword">if</span>(i == <span class="number">5</span>)&#123;</span><br><span class="line">                traceid = getnumberfor_str(linestr);</span><br><span class="line">                <span class="keyword">if</span>(traceid &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                    LOGD(<span class="string">&quot;I was be traced...trace pid:%d&quot;</span>,traceid);</span><br><span class="line">                    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        fclose(fp);</span><br><span class="line">        sleep(<span class="number">5</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">create_thread_check_traceid</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span> err = pthread_create(&amp;t_id,<span class="literal">NULL</span>, thread_fuction, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">if</span>(err != <span class="number">0</span> ) &#123;</span><br><span class="line">        LOGD(<span class="string">&quot;create thread fail: %s\n&quot;</span>,strerror(err));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">char</span> *app_signature= <span class="string">&quot;3082030d308201f5a00302010202044054662e300d06092a864886f70d01010b05003037310b30090603550406130255533110300e060355040a1307416e64726f6964311630140603550403130d416e64726f6964204465627567301e170d3136303432303038323733395a170d3436303431333038323733395a3037310b30090603550406130255533110300e060355040a1307416e64726f6964311630140603550403130d416e64726f696420446562756730820122300d06092a864886f70d01010105000382010f003082010a028201010097682c11f190cf5a36feb8adf72a6d3a44e4cf5eb82527ebf396ffad13055ca59b6ba835d4b1a3e3ecc23d39bd1b5b19471e0d3024495b6d97c7a6aa57fe4156593f47af5444e973d19e6213489982e5943534db51315dddb7485f8ffc53e6e8b418394bace31cdcee2da397626cdbe30fe682db1a6b4a56718011f8aa391d0ff7917fc15007bb83ab40b98123cd89a28aeb4c6d2616e3cb91ec1e405cf05880172a3b7db7a3c7030238d2df21d9cfdefc24b6bc526c40b6f5755ce79fb5af778a0fec08e2399d98bcd7ae75c297ecf5e8759aa1839396a8031ac2a93631e4d02cbaabda78594a2d34384404690a1855189ea7dea10233805c2b829d71e5e30f0203010001a321301f301d0603551d0e041604147e68d92245a6b11d2aa611cb6e2f3331154523e8300d06092a864886f70d01010b05000382010100366e1b975c4235f195f7ccffe6c2618e2b9926792bc30fddd8b9c20bb4546684c48c88be8b2af3c8bb24815c6e83e94afdee35d173e7cfab204d0ea14a22df36e91a3fb5ffb7ababe978832039b0fadfcd0d7960b8fccc724ba7309b2c4c967bfb40fbd3f3265be23813d632cdca365782fcc61917229ce12c9e9c05ab61589aceff0de412e2cd985239859a1f1904841b730b5fe7a46905ba6c3dc0d927507baafde4398aecf0827ce0beb6f85a6e4c3f64fdc788220ff543d619ebeb2e15e1f9a6944ea04aee933271a02510679b1d2578edf3894832ed70b1039b0ddbaf0b1c7077c5fffd39daf0fb38a46fec384ee0b237855fe66a35cf46ebbf5cf919a0&quot;</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">equal_sign</span><span class="params">(JNIEnv* env)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//调用Java层的Utils中的获取签名的方法</span></span><br><span class="line">    <span class="type">char</span>* className = <span class="string">&quot;cn/wjdiankong/encryptdemo/Utils&quot;</span>;</span><br><span class="line">    jclass clazz = (*env)-&gt;FindClass(env, className);</span><br><span class="line">    <span class="keyword">if</span> (clazz == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        LOGD(<span class="string">&quot;not find class &#x27;%s&#x27;&quot;</span>, className);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    LOGD(<span class="string">&quot;class name:%p&quot;</span>, clazz);</span><br><span class="line"></span><br><span class="line">    jmethodID method = (*env)-&gt;GetStaticMethodID(env, clazz, <span class="string">&quot;getSignature&quot;</span>, <span class="string">&quot;()Ljava/lang/String;&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(method == <span class="literal">NULL</span>)&#123;</span><br><span class="line">        LOGD(<span class="string">&quot;not find method &#x27;%s&#x27;&quot;</span>, method);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    jstring obj = (jstring)(*env)-&gt;CallStaticObjectMethod(env, clazz,method);</span><br><span class="line">    <span class="keyword">if</span>(obj == <span class="literal">NULL</span>)&#123;</span><br><span class="line">        LOGD(<span class="string">&quot;method invoke error:%p&quot;</span>, obj);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">const</span> <span class="type">char</span> *strAry = (*env)-&gt;GetStringUTFChars(env, obj, <span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> cmpval = <span class="built_in">strcmp</span>(strAry, app_signature);</span><br><span class="line">    <span class="keyword">if</span>(cmpval == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    (*env)-&gt;ReleaseStringUTFChars(env, obj, strAry);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义目标类名称</span></span><br><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="type">char</span> *className = <span class="string">&quot;cn/wjdiankong/encryptdemo/MainActivity&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义方法隐射关系</span></span><br><span class="line"><span class="type">static</span> JNINativeMethod methods[] = &#123;</span><br><span class="line">        &#123;<span class="string">&quot;isEquals&quot;</span>, <span class="string">&quot;(Ljava/lang/String;)Z&quot;</span>, (<span class="type">void</span>*)*jiangwei&#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">jint <span class="title function_">JNI_OnLoad</span><span class="params">(JavaVM* vm, <span class="type">void</span>* reserved)</span>&#123;</span><br><span class="line">    LOGD(<span class="string">&quot;JNI on load...&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//检测自己有没有被trace</span></span><br><span class="line">    create_thread_check_traceid();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//声明变量</span></span><br><span class="line">    jint result = JNI_ERR;</span><br><span class="line">    JNIEnv* env = <span class="literal">NULL</span>;</span><br><span class="line">    jclass clazz;</span><br><span class="line">    <span class="type">int</span> methodsLenght;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取JNI环境对象</span></span><br><span class="line">    <span class="keyword">if</span> ((*vm)-&gt;GetEnv(vm, (<span class="type">void</span>**) &amp;env, JNI_VERSION_1_4) != JNI_OK) &#123;</span><br><span class="line">        LOGD(<span class="string">&quot;ERROR: GetEnv failed\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> JNI_ERR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    LOGD(<span class="string">&quot;JNIEnv:%p&quot;</span>, env);</span><br><span class="line">    LOGD(<span class="string">&quot;start equal signature...&quot;</span>);</span><br><span class="line">    <span class="type">int</span> check_sign = equal_sign(env);</span><br><span class="line">    LOGD(<span class="string">&quot;check_sign:%d&quot;</span>, check_sign);</span><br><span class="line">    <span class="keyword">if</span>(check_sign == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//注册本地方法.Load 目标类</span></span><br><span class="line">    clazz = (*env)-&gt;FindClass(env,className);</span><br><span class="line">    <span class="keyword">if</span> (clazz == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        LOGD(<span class="string">&quot;Native registration unable to find class &#x27;%s&#x27;&quot;</span>, className);</span><br><span class="line">        <span class="keyword">return</span> JNI_ERR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//建立方法隐射关系</span></span><br><span class="line">    <span class="comment">//取得方法长度</span></span><br><span class="line">    methodsLenght = <span class="keyword">sizeof</span>(methods) / <span class="keyword">sizeof</span>(methods[<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">if</span> ((*env)-&gt;RegisterNatives(env,clazz, methods, methodsLenght) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        LOGD(<span class="string">&quot;RegisterNatives failed for &#x27;%s&#x27;&quot;</span>, className);</span><br><span class="line">        <span class="keyword">return</span> JNI_ERR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    result = JNI_VERSION_1_4;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//onUnLoad方法，在JNI组件被释放时调用</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">JNI_OnUnload</span><span class="params">(JavaVM* vm, <span class="type">void</span>* reserved)</span>&#123;</span><br><span class="line">    LOGD(<span class="string">&quot;JNI unload...&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="附链接："><a href="#附链接：" class="headerlink" title="附链接："></a>附链接：</h2><p><a href="https://sec.mrfan.xyz/2019/08/19/JNI%E8%B0%83%E7%94%A8%E5%92%8C%E5%8A%A8%E6%80%81%E6%B3%A8%E5%86%8C%E6%8E%A2%E7%B4%A2/#0x03-%E6%90%9C%E6%9F%A5%E9%9D%99%E6%80%81%E6%B3%A8%E5%86%8C%E5%87%BD%E6%95%B0">https://sec.mrfan.xyz/2019/08/19/JNI%E8%B0%83%E7%94%A8%E5%92%8C%E5%8A%A8%E6%80%81%E6%B3%A8%E5%86%8C%E6%8E%A2%E7%B4%A2/#0x03-%E6%90%9C%E6%9F%A5%E9%9D%99%E6%80%81%E6%B3%A8%E5%86%8C%E5%87%BD%E6%95%B0</a></p>]]></content>
      
      
      <categories>
          
          <category> andorid逆向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> andorid逆向 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>android虚拟机</title>
      <link href="/post/70eb22c5.html"/>
      <url>/post/70eb22c5.html</url>
      
        <content type="html"><![CDATA[<h1 id="Dalvik和ART"><a href="#Dalvik和ART" class="headerlink" title="Dalvik和ART"></a>Dalvik和ART</h1><h2 id="Dalvik"><a href="#Dalvik" class="headerlink" title="Dalvik"></a>Dalvik</h2><ul><li><p>虽然android平台使用java语言开发，但是android程序却不是运行在java的虚拟机上。它是由google公司专门为android平台设计一个虚拟机，用于运行android程序</p></li><li><p>Android 运行环境主要指的Dalvik虚拟机技术，也就是安卓虚拟机DVM。Android中的所有Java程序都是运行在DVM上的，每个Android应用进程对应着一个独立的Dalvik虚拟机实例并在其解释下执行。DVM没有遵循Java虚拟机规范，不能直接执行Java的.class文件，而是执行.dex文件。它使用的是寄存器架构而不是JVM中常见的栈架构。其中.dex（Dalvik Executable）文件是通过.class文件转化而来，安卓使用Java语法编写应用程序，可以直接使用大部分的Java API等。</p><p>  虽然DVM也是用Java编程语言，Dalvik虚拟机和一般JAVA虚拟机(Java VM)并不兼容，他们两个的区别是JVM标准执行的是.class的字节码(bytecode ),而是DVM执行的是其专有的(.dex)执行文件。在编译过程中，Java把类编译成一个或多个.class字节码文件，然后打包到jar中。JVM会从jar文件中获得相应的.class文件和jre字节码。DVM虽然也是是用Java语言进行编程， Java程序通过编译后，还需要通过SDK中的dex工具.class文件转化打包成.dex格式文件，DVM再从其中读取指令和数据。</p><p>  JVM与DVM 二者最大的区别在于JVM是以基于栈的虚拟机(Stack-based)，而DVM是基于寄存器的虚拟机(Register-based)。基于寄存器的虚拟机虽然比基于堆栈的虚拟机在硬件通用性上要差一些，但是它的代码执行效率却更好。 显然，后者最大的好处在于可以根据硬件实现更大的优化，这更适合移动设备的特点。DVM非常适合在移动终端上使用，与PC相比，它不需要很快的CPU和大量的内存空间. Google的测算显示，64MB的内存已经能让系统正常运转了。 其中24MB被用于底层系统的初始化和启动。另外20MB被用于启动高层服务。</p><p>  Java类文件在编译过后，会产生至少一个.class文件包含大量冗余信息，dex文件格式会把所有 的.class文件内容整合到一个.dex文件中。通常一个应用apk只有一个classes.dex，但是开启了multiDexEnabled true分包可以生成多个.dex文件。即减少了整体文件的尺寸和IO操作，也提高了类的查找速度。增加了对新的操作码的支持，使文件结构尽量简洁，使用等长的指令，借以提高解析速度。</p></li><li><p>dalvik虚拟机的特点：</p><ul><li>体积下，占用内存空间小</li><li>体积小执行速度快</li><li>所有的android程序都运行在android系统的进程中，每个进程都与一个dalvik虚拟机实例对应</li></ul></li></ul><h1 id="ART"><a href="#ART" class="headerlink" title="ART"></a>ART</h1><p>ART(Android Runtime)是Android 4.4发布的，用来替换Dalvik虚拟，Android 4.4之前默认采用的还是DVM，系统会提供一个选项来开启ART模式。在Android 5.0时，默认采用ART，DVM从此退出历史舞台。</p><p><strong>Dalvik虚拟机执行的是dex字节码，ART虚拟机执行的是本地机器码。</strong></p><blockquote><p> Dalvik执行的是dex字节码，依靠JIT编译器去解释执行，运行时动态地将执行频率很高的dex字节码翻译成本地机器码，然后在执行，但是将dex字节码翻译成本地机器码是发生在应用程序的运行过程中，并且应用程序每一次重新运行的时候，都要重新做这个翻译工作，因此，即使采用了JIT，Dalvik虚拟机的总体性能还是不能与直接执行本地机器码的ART虚拟机相比。 安卓运行时从Dalvik虚拟机替换成ART虚拟机，并不要求开发者重新将自己的应用直接编译成目标机器码，也就是说，应用程序仍然是一个包含dex字节码的apk文件。所以在安装应用的时候，dex中的字节码将被编译成本地机器码，之后每次打开应用，执行的都是本地机器码。移除了运行时的解释执行，效率更高，启动更快。（安卓在4.4中发布了ART运行时） </p></blockquote><h2 id="Dalvik与ART的区别"><a href="#Dalvik与ART的区别" class="headerlink" title="Dalvik与ART的区别"></a>Dalvik与ART的区别</h2><p>1、ART与Dalvik最大的不同在于，在启用ART模式后，系统在安装应用的时候会进行一次预编译，在安装应用程序时会先将代码转换为机器语言存储在本地，这样在运行程序时就不会每次都进行一次编译了，执行效率也大大提升。</p><p>2、ART占用空间比Dalvik大（字节码变为机器码之后，可能会增加10%-20%），这就是“时间换空间大法”。</p><p>3、预编译也可以明显改善电池续航，因为应用程序每次运行时不用重复编译了，从而减少了 CPU 的使用频率，降低了能耗。</p><h1 id="JIT和AOT"><a href="#JIT和AOT" class="headerlink" title="JIT和AOT"></a>JIT和AOT</h1><h2 id="JIT"><a href="#JIT" class="headerlink" title="JIT"></a>JIT</h2><p>JIT意思是<strong>Just In Time Compiler</strong>，就是<strong>即时编译技术</strong></p><p>Dalvik虚拟机可以看做是一个Java虚拟机。在 Android系统初期，每次运行程序的时候，Dalvik负责将dex翻译为机器码交由系统调用。这样有一个<strong>缺陷</strong>：<strong>每次执行代码，都需要Dalvik将操作码代码翻译为机器对应的微处理器指令，然后交给底层系统处理，运行效率很低</strong>。</p><p>为了提升效率Android在2.2版本中添加了<strong>JIT编译器</strong>，当App运行时，每当遇到一个新类，JIT编译器就会对这个类进行即时编译，经过编译后的代码，会被优化成相当精简的原生型指令码（即native code），这样在下次执行到相同逻辑的时候，速度就会更快。JIT 编译器可以对执行次数频繁的 dex&#x2F;odex 代码进行编译与优化，将 dex&#x2F;odex 中的 Dalvik Code（Smali 指令集）翻译成相当精简的 Native Code 去执行，JIT 的引入使得 Dalvik 的性能提升了 3~6 倍</p><p><strong>JIT缺陷</strong></p><ul><li>每次启动应用都需要重新编译（没有缓存）</li><li>运行时比较耗电，耗电量大</li></ul><h2 id="AOT"><a href="#AOT" class="headerlink" title="AOT"></a>AOT</h2><p>AOT是指<strong>Ahead Of Time</strong>，从字面来看是说<strong>提前编译</strong></p><p>JIT是运行时编译，是<strong>动态编译</strong>，可以对执行次数频繁的dex代码进行编译和优化，减少以后使用时的翻译时间，虽然可以加快Dalvik运行速度，但是有一个很大的问题：将dex翻译为本地机器码也要占用时间。 所以Google在4.4推出了全新的虚拟机运行环境ART（Android RunTime），用来替换Dalvik（4.4上ART和Dalvik共存，用户可以手动选择，5.0 后Dalvik被替换）。</p><p>AOT 是<strong>静态编译</strong>，应用在安装的时候会启动 dex2oat 过程把 dex预编译成 ELF 文件，每次运行程序的时候不用重新编译。 ART 对 Garbage Collection（GC）过程的也进行了改进：</p><ol><li>只有一次 GC 暂停（Dalvik 需要两次）</li><li>在 GC 保持暂停状态期间并行处理</li><li>在清理最近分配的短时对象这种特殊情况中，回收器的总 GC 时间更短</li><li>优化了垃圾回收的工效，能够更加及时地进行并行垃圾回收，这使得 GC_FOR_ALLOC 事件在典型用例中极为罕见</li><li>压缩 GC 以减少后台内存使用和碎片</li></ol><p><strong>AOT的缺陷</strong></p><ul><li>应用安装和系统升级之后的应用优化比较耗时（重新编译，把程序代码转换成机器语言）</li><li>优化后的文件会占用额外的存储空间（缓存转换结果）</li></ul><h2 id="JIT和AOT共存"><a href="#JIT和AOT共存" class="headerlink" title="JIT和AOT共存"></a>JIT和AOT共存</h2><p>Android 7.0上，JIT 编译器被再次使用，采用AOT&#x2F;JIT 混合编译的策略，特点是：</p><ol><li>应用在安装的时候dex不会再被编译</li><li>App运行时,dex文件先通过解析器被直接执行，热点函数会被识别并被JIT编译后存储在 <code>jit code cache</code> 中并生成profile文件以记录热点函数的信息。</li><li>手机进入 IDLE（空闲） 或者 Charging（充电） 状态的时候，系统会扫描 App 目录下的 profile 文件并执行 AOT 过程进行编译。</li></ol><h1 id="dexopt和dex2oat"><a href="#dexopt和dex2oat" class="headerlink" title="dexopt和dex2oat"></a>dexopt和dex2oat</h1><p><img src="/../images/andorid/%E8%99%9A%E6%8B%9F%E6%9C%BA.png" alt="虚拟机"></p>]]></content>
      
      
      <categories>
          
          <category> andorid逆向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> andorid逆向 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>andorid逆向基础之apk文件</title>
      <link href="/post/ee5c2350.html"/>
      <url>/post/ee5c2350.html</url>
      
        <content type="html"><![CDATA[<h1 id="apk文件认识"><a href="#apk文件认识" class="headerlink" title="apk文件认识"></a>apk文件认识</h1><p>APK文件其实是zip格式，但后缀名被修改为apk。我们修改ZIP后缀名方式可以看到内部的文件结构，或者用压缩工具直接解压</p><h2 id="apk文件目录结构"><a href="#apk文件目录结构" class="headerlink" title="apk文件目录结构"></a>apk文件目录结构</h2><ul><li><p>AndroidManifest.xml</p><ul><li>这里的AndroidManifest.xml就是源代码中的AndroidManifest.xml编译后所得到的文件。AndroidManifest.xml是安卓应用程序的全局配置文件，该文件保存了apk的包名，版本信息，sdk版本，Activity ,Service, Boardcast Receiver, Content Provider等应用组件的配置信息。还有程序所需要的权限也是在AndroidManifest.xml这个文件中声明的。</li></ul></li><li><p>classes.dex</p><ul><li><p>虽然Android开发的源语言是java，但是Android应用程序却不在标准的java虚拟机上运行。Google为Android平台专门设计了一套用于运行Android程序的虚拟机，这就是Dalvik虚拟机（Dalvik Virtual Machine）。而classes.dex就是运行在Dalvik虚拟机上的可执行文件。</p></li><li><p>传统的Java程序，首先先把Java文件编译成class文件，字节码都保存在了class文件中，Java虚拟机可以通过解释执行这些class文件。</p><p>  而Dalvik虚拟机是在Java虚拟机进行了优化，执行的是Dalvik字节码，而这些Dalvik字节码是由Java字节码转换而来，一般情况下，Android应用在打包时通过AndroidSDK中的dx工具将Java字节码转换为Dalvik字节码。</p><p>  dx工具可以对多个class文件进行合并，重组，优化，可以达到减小体积，缩短运行时间的目的</p></li></ul></li><li><p>resources.arsc</p><ul><li>资源索引表, 记录资源文件和资源ID之间的映射关系</li></ul></li><li><p>res文件夹</p><ul><li><p>是resource的缩写，存放资源文件，存在这个文件夹下的所有文件都会映射到Android工程的.R文件中，生成对应的ID，访问的时候直接使用资源ID，即R.id.filename。<br>  res 文件夹下可以包含多个文件夹，其中</p><p>  anim存放动画文件；<br>  drawable目录存放图像资源；<br>  layout目录存放布局文件；<br>  values目录存放一些特征值，colors.xml存放color颜色值，dimens.xml定义尺寸值，string.xml定义字符串的值，styles.xml定义样式对象；<br>  xml文件夹存放任意xml文件，在运行时可以通过Resources.getXML()读取；<br>  raw是可以直接复制到设备中的任意文件，他们无需编译。</p></li></ul></li><li><p>META-INF文件夹</p><ul><li><p>保存应用的签名信息，签名信息可以验证APK文件的完整性。AndroidSDK在打包APK时会计算APK包中所有文件的完整性，并且把这些完整性保存到META-INF文件夹下，应用程序在安装的时候首先会根据META-INF文件夹校验APK的完整性，这样就可以保证APK中的每一个文件都不能被篡改。以此来确保APK应用程序不被恶意修改或者病毒感染，有利于确保Android应用的完整性和系统的安全性。</p><p>  META-INF目录下包含的文件有CERT.RSA，CERT.DSA，CERT.SF和MANIFEST.MF，其中CERT.RSA是开发者利用私钥对APK进行签名的签名文件，CERT.SF、MANIFEST.MF记录了文件中文件的SHA-1哈希值。</p></li></ul></li><li><p>lib</p><ul><li><p>存放应用程序依赖的native库文件，一般是用C&#x2F;C++编写，这里的lib库可能包含4中不同类型，根据CPU型号的不同，大体可以分为ARM，ARM-v7a，MIPS，X86，分别对应着ARM架构，ARM-V7架构，MIPS架构和X86架构。</p><p>  不同的CPU架构对应着不同的目录，每个目录中可以放很多对应版本的so库，且这个目录的结构固定，用户只能按照这个目录存放自己的so库。目前市场上使用的移动终端大多是基于ARM或者ARM-V7a架构的，X86和MIPS架构的移动智能终端比较少，所以有些应用程序lib目录下只包含armeabi目录或者armeabi-v7a目录。</p></li></ul></li></ul><h2 id="apk文件生成的过程-https-blog-csdn-net-aha-jasper-article-details-104944929"><a href="#apk文件生成的过程-https-blog-csdn-net-aha-jasper-article-details-104944929" class="headerlink" title="apk文件生成的过程(https://blog.csdn.net/aha_jasper/article/details/104944929)"></a>apk文件生成的过程(<a href="https://blog.csdn.net/aha_jasper/article/details/104944929">https://blog.csdn.net/aha_jasper/article/details/104944929</a>)</h2><p>Android完整打包流程</p><ol><li><p>aapt阶段：aapt工具编译res资源文件，把大部分xml文件编译成二进制文件（图片文件除外），同时生成</p><p> R.Java文件和resources.arsc文件，里面保存了资源的ID和在APK中的路径。</p></li><li><p>aidl阶段：如果项目中有使用AIDL，那么就会把.aidl文件编译成.java文件。</p></li><li><p>javaCompiler阶段：将所有.java文件(包括R文件和AIDL生成的.java文件)，通过javac工具生成class文件。</p></li><li><p>dex阶段：将生成的.class文件和第三方库的.class文件通过dx工具生成classes.dex文件(如果有分包，那么可能有多个)。</p></li><li><p>apkBuilder阶段：aapt阶段中的资源文件、dex文件和第三方的非java资源包(.so)，通过apkbuilder工具生成未签名的apk包。</p></li><li><p>jarSigner阶段：签名，jarsigner工具，如果是debug模式用默认签名，release模式用开发者的签名。</p></li><li><p>zipAligin阶段：对齐，通过zipalign工具对apk中的未压缩资源（图片、视频）进行“对齐操作”，让资源按4字节的边界进行对齐，使得资源访问速度更快。</p></li><li><p>流程图如下：</p></li></ol><p><img src="/../images/andorid/apk%E7%94%9F%E6%88%90%E7%9A%84%E8%BF%87%E7%A8%8B.jpg" alt="apk生成的过程"></p><h1 id="AndroidManifest-xml-最全详解"><a href="#AndroidManifest-xml-最全详解" class="headerlink" title="AndroidManifest.xml 最全详解"></a>AndroidManifest.xml 最全详解</h1><p>原文：<a href="https://blog.csdn.net/u012486840/article/details/52468931">https://blog.csdn.net/u012486840/article/details/52468931</a></p><h2 id="关于AndroidManifest-xml文件格式"><a href="#关于AndroidManifest-xml文件格式" class="headerlink" title="关于AndroidManifest.xml文件格式"></a>关于AndroidManifest.xml文件格式</h2><p>在android的apk文件中的AndroidManifest.xml文件并不是普通的纯文本格式，无法用普通的文件编辑器打开。apk使用的AXML格式，之所以用这种格式是为了解决apk加载时的性能问题，二进制的AXML比纯文本相比，在分析处理的速度和内存占用都有明显的优势</p><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>　AndroidManifest.xml清单文件是每个Android程序中必须的文件，它是整个Android程序的全局描述文件，除了能声明程序中的Activities，Content Providers，Services，和Intent Receivers，还能指定应用的名称、使用的图标、包含的组件以及permissions和instrumentation（安全控制和测试）。</p><h2 id="文件基础结构"><a href="#文件基础结构" class="headerlink" title="文件基础结构"></a>文件基础结构</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xmlversion=&quot;1.0&quot;encoding=&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;manifest&gt;</span><br><span class="line"> </span><br><span class="line">    &lt;uses-sdk/&gt; </span><br><span class="line">    &lt;uses-configuration/&gt; </span><br><span class="line">    &lt;uses-feature/&gt;  </span><br><span class="line"> </span><br><span class="line">    &lt;uses-permission/&gt;</span><br><span class="line">    &lt;permission/&gt;</span><br><span class="line">    &lt;permission-tree/&gt;</span><br><span class="line">    &lt;permission-group/&gt;</span><br><span class="line">    &lt;instrumentation/&gt; </span><br><span class="line"> </span><br><span class="line">    &lt;supports-screens/&gt;</span><br><span class="line"> </span><br><span class="line">    &lt;application&gt; </span><br><span class="line">       &lt;activity&gt; </span><br><span class="line">           &lt;intent-filter&gt;</span><br><span class="line">               &lt;action/&gt; </span><br><span class="line">               &lt;category/&gt; </span><br><span class="line">           &lt;/intent-filter&gt; </span><br><span class="line">      &lt;/activity&gt;</span><br><span class="line">       &lt;activity-alias&gt; </span><br><span class="line">           &lt;intent-filter&gt;&lt;/intent-filter&gt; </span><br><span class="line">           &lt;meta-data/&gt; </span><br><span class="line">      &lt;/activity-alias&gt; </span><br><span class="line">       &lt;service&gt; </span><br><span class="line">           &lt;intent-filter&gt;&lt;/intent-filter&gt; </span><br><span class="line">           &lt;meta-data/&gt; </span><br><span class="line">       &lt;/service&gt;</span><br><span class="line">       &lt;receiver&gt;</span><br><span class="line">           &lt;intent-filter&gt;&lt;/intent-filter&gt; </span><br><span class="line">           &lt;meta-data/&gt; </span><br><span class="line">       &lt;/receiver&gt; </span><br><span class="line">       &lt;provider&gt; </span><br><span class="line">           &lt;grant-uri-permission/&gt;</span><br><span class="line">           &lt;meta-data/&gt; </span><br><span class="line">       &lt;/provider&gt; </span><br><span class="line">       &lt;uses-library/&gt; </span><br><span class="line">    &lt;/application&gt;  </span><br><span class="line"> </span><br><span class="line">&lt;/manifest&gt;</span><br></pre></td></tr></table></figure><h3 id="lt-manifest-gt-元素"><a href="#lt-manifest-gt-元素" class="headerlink" title="&lt;manifest&gt;元素"></a><code>&lt;manifest&gt;</code>元素</h3><p><code>&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; android:versionCode=&quot;55&quot; android:versionName=&quot;8.3&quot; platformBuildVersionName=&quot;8.0.0&quot; platformBuildVersionCode=&quot;26&quot; package=&quot;com.iCitySuzhou.suzhou001&quot;&gt;</code></p><p>首先，所有的xml都必须包含<manifest>元素。这是文件的根节点。它必须要包含<application>元素，并且指明xmlns:android和package属性。                                                                                                                      </application></manifest></p><h4 id="xmlns-android"><a href="#xmlns-android" class="headerlink" title="xmlns:android"></a>xmlns:android</h4><p>这个属性定义了Android命名空间。必须设置成”<a href="https://link.jianshu.com/?t=http://schemas.android.com/apk/res/android">http://schemas.android.com/apk/res/android</a>“。不要手动修改。</p><h4 id="package"><a href="#package" class="headerlink" title="package"></a>package</h4><p>这是一个完整的Java语言风格包名。包名由英文字母（大小写均可）、数字和下划线组成。每个独立的名字必须以字母开头。</p><p>构建APK的时候，构建系统使用这个属性来做两件事：</p><ul><li>1、生成R.java类时用这个名字作为命名空间（用于访问APP的资源）<br>  比如：package被设置成com.sample.teapot，那么生成的R类就是：com.sample.teapot.R</li><li>2、用来生成在manifest文件中定义的类的完整类名。比如package被设置成com.sample.teapot，并且activity元素被声明成<activity android:name=".MainActivity">，完整的类名就是com.sample.teapot.MainActivity。</activity></li></ul><p>包名也代表着唯一的application ID，用来发布应用。但是，要注意的一点是：在APK构建过程的最后一步，package名会被build.gradle文件中的applicationId属性取代。如果这两个属性值一样，那么万事大吉，如果不一样，那就要小心了。</p><h4 id="android-versionCode"><a href="#android-versionCode" class="headerlink" title="android:versionCode"></a>android:versionCode</h4><p>内部的版本号。用来表明哪个版本更新。这个数字不会显示给用户。显示给用户的是versionName。这个数字必须是整数。不能用16进制，也就是说不接受”0x1”这种参数</p><h4 id="android-versionName"><a href="#android-versionName" class="headerlink" title="android:versionName"></a>android:versionName</h4><p>显示给用户看的版本号。</p><h3 id="lt-application-gt-元素"><a href="#lt-application-gt-元素" class="headerlink" title="&lt;application&gt;元素"></a><code>&lt;application&gt;</code>元素</h3><p>此元素描述了应用的配置。这是一个必备的元素，它包含了很多子元素来描述应用的组件，它的属性影响到所有的子组件。许多属性（例如icon、label、permission、process、taskAffinity和allowTaskReparenting）都可以设置成默认值。</p><h4 id="android-allowBackup"><a href="#android-allowBackup" class="headerlink" title="android:allowBackup"></a>android:allowBackup</h4><p>表示是否允许APP加入到备份还原的结构中。如果设置成false，那么应用就不会备份还原。默认值为true。</p><h4 id="android-fullBackupContent"><a href="#android-fullBackupContent" class="headerlink" title="android:fullBackupContent"></a>android:fullBackupContent</h4><p>这个属性指向了一个xml文件，该文件中包含了在进行自动备份时的完全备份规则。这些规则定义了哪些文件需要备份。此属性是一个可选属性。默认情况下，自动备份包含了大部分app文件。</p><h4 id="android-supportsRtl"><a href="#android-supportsRtl" class="headerlink" title="android:supportsRtl"></a>android:supportsRtl</h4><p>声明你的APP是否支持RTL（Right To Left）布局。如果设置成true，并且targetSdkVersion被设置成17或更高。很多RTL API会被集火，这样你的应用就可以显示RTL布局了。如果设置成false或者targetSdkVersion被设置成16或更低。哪些RTL API就不起作用了。</p><p>该属性的默认的值是false。</p><h4 id="android-icon"><a href="#android-icon" class="headerlink" title="android:icon"></a>android:icon</h4><p>APP的图标，以及每个组件的默认图标。可以在组价中自定义图标。这个属性必须设置成一个引用，指向一个可绘制的资源，这个资源必须包含图片。系统不设置默认图标。</p><h4 id="android-label"><a href="#android-label" class="headerlink" title="android:label"></a>android:label</h4><p>一个用户可读的标签，以及所有组件的默认标签。子组件可以用他们的label属性定义自己的标签，如果没有定义，那么就用这个标签。</p><p>标签必须设置成一个字符串资源的引用。这样它们就能和其他东西一样被定位，比如@string&#x2F;app_name。当然，为了开发方便，你也可以定义一个原始字符串。</p><h4 id="android-theme"><a href="#android-theme" class="headerlink" title="android:theme"></a>android:theme</h4><p>该属性定义了应用使用的主题的，它是一个指向style资源的引用。各个activity也可以用自己的theme属性设置自己的主题。</p><h4 id="android-name"><a href="#android-name" class="headerlink" title="android:name"></a>android:name</h4><p>Application子类的全名。包括前面的路径。例如com.sample.teapot.TeapotApplication。当应用启动时，这个类的实例被第一个创建。这个属性是可选的，大多数APP都不需要这个属性。在没有这个属性的时候，Android会启动一个Application类的实例。</p><h1 id="apk启动流程"><a href="#apk启动流程" class="headerlink" title="apk启动流程"></a>apk启动流程</h1><p><a href="https://juejin.cn/post/6844904116561379341">https://juejin.cn/post/6844904116561379341</a></p>]]></content>
      
      
      <categories>
          
          <category> andorid逆向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> andorid逆向 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql数据库</title>
      <link href="/post/82bdb349.html"/>
      <url>/post/82bdb349.html</url>
      
        <content type="html"><![CDATA[<h1 id="安装mysql"><a href="#安装mysql" class="headerlink" title="安装mysql"></a>安装mysql</h1><p><a href="https://www.runoob.com/images/mysql/mysql-install.html">https://www.runoob.com/../images/mysql/mysql-install.html</a></p><h1 id="mysql的存储引擎"><a href="#mysql的存储引擎" class="headerlink" title="mysql的存储引擎"></a>mysql的存储引擎</h1><p>查看引擎语句</p><p><code>show engines;</code> 查看所有的引擎</p><p><code>SHOW VARIABLES LIKE &#39;default_storage_engine&#39;;</code> 查看当前默认引擎</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">存储引擎 -- 存储数据的方式</span><br><span class="line">一张表</span><br><span class="line">    数据</span><br><span class="line">    表的结构</span><br><span class="line">    索引(查询的时候使用的一个目录结构)</span><br><span class="line"></span><br><span class="line">Innodb存储引擎    mysql5.6之后的默认的存储引擎</span><br><span class="line">数据和索引存储在一起 2个文件</span><br><span class="line">    数据索引\表结构</span><br><span class="line">数据持久化</span><br><span class="line">支持事务   : 为了保证数据的完整性,将多个操作变成原子性操作   : 保持数据安全</span><br><span class="line">支持行级锁 : 修改的行少的时候使用                          : 修改数据频繁的操作</span><br><span class="line">支持表级锁 : 批量修改多行的时候使用                        : 对于大量数据的同时修改</span><br><span class="line">支持外键   : 约束两张表中的关联字段不能随意的添加\删除      : 能够降低数据增删改的出错率</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Myisam存储引擎    mysql5.5之前的默认的存储引擎</span><br><span class="line">数据和索引不存储在一起  3个文件</span><br><span class="line">    数据\索引\表结构</span><br><span class="line">数据持久化</span><br><span class="line">只支持表锁</span><br><span class="line"></span><br><span class="line">Memory存储引擎</span><br><span class="line">数据存储在内存中, 1个文件</span><br><span class="line">    表结构</span><br><span class="line">数据断电消失</span><br><span class="line"></span><br><span class="line">行级锁，表级锁和页级锁对比：</span><br><span class="line"></span><br><span class="line">行级锁 行级锁是Mysql中锁定粒度最细的一种锁，表示只针对当前操作的行进行加锁。行级锁能大大减少数据库操作的冲突。其加锁粒度最小，但加锁的开销也最大。行级锁分为共享锁 和 排他锁。</span><br><span class="line"></span><br><span class="line">特点：开销大，加锁慢；会出现死锁；锁定粒度最小，发生锁冲突的概率最低，并发度也最高。</span><br><span class="line"></span><br><span class="line">表级锁 表级锁是MySQL中锁定粒度最大的一种锁，表示对当前操作的整张表加锁，它实现简单，资源消耗较少，被大部分MySQL引擎支持。最常使用的MYISAM与INNODB都支持表级锁定。表级锁定分为表共享读锁（共享锁）与表独占写锁（排他锁）。</span><br><span class="line"></span><br><span class="line">特点：开销小，加锁快；不会出现死锁；锁定粒度大，发出锁冲突的概率最高，并发度最低。</span><br><span class="line"></span><br><span class="line">页级锁 页级锁是MySQL中锁定粒度介于行级锁和表级锁中间的一种锁。表级锁速度快，但冲突多，行级冲突少，但速度慢。所以取了折衷的页级，一次锁定相邻的一组记录。</span><br><span class="line"></span><br><span class="line">特点：开销和加锁时间界于表锁和行锁之间；会出现死锁；锁定粒度界于表锁和行锁之间，并发度一般</span><br></pre></td></tr></table></figure><h1 id="数据库的基本操作"><a href="#数据库的基本操作" class="headerlink" title="数据库的基本操作"></a>数据库的基本操作</h1><h2 id="用户相关操作"><a href="#用户相关操作" class="headerlink" title="用户相关操作"></a>用户相关操作</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">查看当前用户是谁? select user();</span><br><span class="line">给当前用户设置密码 set password = password(&#x27;123&#x27;);</span><br><span class="line">创建用户 create user &#x27;用户名&#x27;@&#x27;主机的ip/主机域名&#x27; identified by &#x27;密码&#x27;</span><br><span class="line">授权 grant select on 数据库名.* to &#x27;用户名&#x27;@&#x27;主机的ip/主机域名&#x27; identified by &#x27;密码&#x27;</span><br><span class="line">授权并创建用户 grant select on 数据库名.* to &#x27;用户名&#x27;@&#x27;主机的ip/主机域名&#x27;</span><br></pre></td></tr></table></figure><h2 id="数据库相关的操作"><a href="#数据库相关的操作" class="headerlink" title="数据库相关的操作"></a>数据库相关的操作</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">创建库  create database 数据库名;</span><br><span class="line">切换到这个库下  use 库名</span><br><span class="line">查看所有库 show databases;</span><br></pre></td></tr></table></figure><h2 id="表相关的操作"><a href="#表相关的操作" class="headerlink" title="表相关的操作"></a>表相关的操作</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">查看这个库下的所有表  show tables;</span><br><span class="line">查看表的创建语句 show create table 表名;</span><br><span class="line">创建表  create table 表名(字段名 数据类型(长度),字段名 数据类型(长度),..);</span><br><span class="line">删除表  drop table 表名;</span><br><span class="line">查看表结构  desc 表名;</span><br><span class="line">增 : insert into 表 values (一行数据),(一行数据),(一行数据);</span><br><span class="line">删 : delete from 表 where 条件;</span><br><span class="line">改 : update 表 set 字段名=值,字段2=值2 where 条件;</span><br><span class="line">查 : select 字段 from 表;</span><br></pre></td></tr></table></figure><h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><h2 id="数字类型"><a href="#数字类型" class="headerlink" title="数字类型"></a>数字类型</h2><p><strong>这5种整型的占用空间是固定的，均与其后设置的 n 无关（它的含义是“</strong>显示位宽<strong>”，这个 n 无论填任何数，</strong>不影响存储环节，仅影响在检索时的输出格式<strong>，而且在非常严格的情况下才成立。），例如设置字段类型为 int ，则无论 n 设置什么，它占用的空间就是4个字节</strong>。</p><p>这5种整型的占用空间分别是：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">tinyint ：1个字节，</span><br><span class="line">smallint ：2个字节，</span><br><span class="line">mediumint ：3个字节，</span><br><span class="line">int ：4个字节，</span><br><span class="line">bigint ：8个字节。</span><br></pre></td></tr></table></figure><p><strong>注意：</strong>当插入的值，超出取值范围的时候，MySQL并不会报错，而是自动变成成在取值范围内最接近该值的边界值。例如字段为 tinyint ，有符号型时取值范围 -128至127 ，当你输入-222时，不会报错，会自动存入最接近-222的-128，当你输入222时，会自动存入127。</p><p>创建表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">create table t1 (</span><br><span class="line">id int,</span><br><span class="line">age int unsigned 默认有符号，无符号需要添加unsigned</span><br><span class="line">);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="浮点类型"><a href="#浮点类型" class="headerlink" title="浮点类型"></a>浮点类型</h2><p><strong>FLOAT</strong> 类型固定占用4个字节， <strong>DOUBLE</strong> 类型固定占用8个字节。</p><p>它的定义方式是 DECIMAL(M,D) ，其中 M 表示最大位数，D 表示小数点右侧的位数。这里的“位”不是二进制的比特位，而是指十进制的数字的位数。</p><p>例如：</p><p>我们定义 DECIMAL(5,2) ，则表示最大位数为5位，小数点后2位，因此小数点前还剩下3位，于是取值范围为 -999.99至999.99。位数多了四舍五入。</p><p><strong>DECIMAL</strong>：</p><p>对DECIMAL(M,D) ，如果M&gt;D，为M+2否则为D+2</p><h2 id="字符串类型"><a href="#字符串类型" class="headerlink" title="字符串类型"></a>字符串类型</h2><table><thead><tr><th align="left">类型</th><th align="left">大小</th><th align="left">用途</th></tr></thead><tbody><tr><td align="left">CHAR</td><td align="left">0-255 bytes</td><td align="left">定长字符串</td></tr><tr><td align="left">VARCHAR</td><td align="left">0-65535 bytes</td><td align="left">变长字符串</td></tr><tr><td align="left">TINYBLOB</td><td align="left">0-255 bytes</td><td align="left">不超过 255 个字符的二进制字符串</td></tr><tr><td align="left">TINYTEXT</td><td align="left">0-255 bytes</td><td align="left">短文本字符串</td></tr><tr><td align="left">BLOB</td><td align="left">0-65 535 bytes</td><td align="left">二进制形式的长文本数据</td></tr><tr><td align="left">TEXT</td><td align="left">0-65 535 bytes</td><td align="left">长文本数据</td></tr><tr><td align="left">MEDIUMBLOB</td><td align="left">0-16 777 215 bytes</td><td align="left">二进制形式的中等长度文本数据</td></tr><tr><td align="left">MEDIUMTEXT</td><td align="left">0-16 777 215 bytes</td><td align="left">中等长度文本数据</td></tr><tr><td align="left">LONGBLOB</td><td align="left">0-4 294 967 295 bytes</td><td align="left">二进制形式的极大文本数据</td></tr><tr><td align="left">LONGTEXT</td><td align="left">0-4 294 967 295 bytes</td><td align="left">极大文本数据</td></tr></tbody></table><p>CHAR(n) 和 VARCHAR(n) 两者中的 n 含义均为该字段最大可容纳的<strong>字符</strong>数</p><p>CHAR(4) 表示固定容纳4个字符，当少于4个字符时，会使用空格填充空缺的部分，使其达到4个字符。而VARCHAR(4) 类型对于未达到 n 字符的情况不会补空</p><p><strong>注意：varchar(n) 字段类型的 n 代表的是最多存储的字符数量，并不是字节大小。</strong><br>varchar 是变长的，变长字段实际存储的数据的长度（大小）不固定的。</p><p>所以，在存储数据的时候，也要把数据占用的大小存起来，存到「变长字段长度列表」里面，读取数据的时候才能根据这个「变长字段长度列表」去读取对应长度的数据。<br>要算 varchar(n) 最大能允许存储的字节数，还要看数据库表的字符集，因为字符集代表着，1个字符要占用多少字节，比如 ascii 字符集， 1 个字符占用 1 字节，那么 varchar(100) 意味着最大能允许存储 100 字节的数据。</p><h2 id="日期和时间类型"><a href="#日期和时间类型" class="headerlink" title="日期和时间类型"></a>日期和时间类型</h2><p>表示时间值的日期和时间类型为DATETIME、DATE、TIMESTAMP、TIME和YEAR。</p><p>每个时间类型有一个有效值范围和一个”零”值，当指定不合法的MySQL不能表示的值时使用”零”值。</p><p>TIMESTAMP类型有专有的自动更新特性，将在后面描述。</p><table><thead><tr><th align="left">类型</th><th align="left">大小 ( bytes)</th><th align="left">范围</th><th align="left">格式</th><th align="left">用途</th></tr></thead><tbody><tr><td align="left">DATE</td><td align="left">3</td><td align="left">1000-01-01&#x2F;9999-12-31</td><td align="left">YYYY-MM-DD</td><td align="left">日期值</td></tr><tr><td align="left">TIME</td><td align="left">3</td><td align="left">‘-838:59:59’&#x2F;‘838:59:59’</td><td align="left">HH:MM:SS</td><td align="left">时间值或持续时间</td></tr><tr><td align="left">YEAR</td><td align="left">1</td><td align="left">1901&#x2F;2155</td><td align="left">YYYY</td><td align="left">年份值</td></tr><tr><td align="left">DATETIME</td><td align="left">8</td><td align="left">1000-01-01 00:00:00&#x2F;9999-12-31 23:59:59</td><td align="left">YYYY-MM-DD HH:MM:SS</td><td align="left">混合日期和时间值</td></tr><tr><td align="left">TIMESTAMP</td><td align="left">4</td><td align="left">1970-01-01 00:00:00&#x2F;2038结束时间是第 <strong>2147483647</strong> 秒，北京时间 <strong>2038-1-19 11:14:07</strong>，格林尼治时间 2038年1月19日 凌晨 03:14:07</td><td align="left">YYYYMMDD HHMMSS</td><td align="left">混合日期和时间值，时间戳</td></tr></tbody></table><h2 id="ENUM和SET类型"><a href="#ENUM和SET类型" class="headerlink" title="ENUM和SET类型"></a>ENUM和SET类型</h2><p>ENUM：单选，在规定的范围内选择一个</p><p>SET：多选，在规定的范围内选择多个</p><h1 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h1><p>MYSQL中，常用的几种约束：</p><table><thead><tr><th>约束类型：</th><th>主键</th><th>外键</th><th>唯一</th><th>非空</th><th>自增</th><th>默认值</th></tr></thead><tbody><tr><td>关键字：</td><td>primary key</td><td>foreign key</td><td>unique</td><td>not null</td><td>auto_increment</td><td>default</td></tr></tbody></table><h2 id="主键"><a href="#主键" class="headerlink" title="主键"></a>主键</h2><p><strong>第一个被定义为非空+唯一的列会自动成为主键。</strong></p><ul><li>每个表只能定义一个主键。</li><li>主键值必须唯一标识表中的每一行，且不能为 NULL，即表中不可能存在两行数据有相同的主键值。这是唯一性原则。</li><li>一个列名只能在复合主键列表中出现一次。</li><li>复合主键不能包含不必要的多余列。当把复合主键的某一列删除后，如果剩下的列构成的主键仍然满足唯一性原则，那么这个复合主键是不正确的。这是最小化原则。</li></ul><h2 id="唯一"><a href="#唯一" class="headerlink" title="唯一"></a>唯一</h2><ul><li><p>字段唯一不重复</p></li><li><p>联合唯一</p></li></ul><h2 id="自增"><a href="#自增" class="headerlink" title="自增"></a>自增</h2><ul><li><p>只对数字有效，自带非空约束</p></li><li><p>至少是unique的约束之后才能使用auto_increment</p></li></ul><h2 id="外键"><a href="#外键" class="headerlink" title="外键"></a>外键</h2><p>外键删除：</p><p>CASCADE：父表delete、update的时候，子表会delete、update掉关联记录；<br>SET NULL：父表delete、update的时候，子表会将关联记录的外键字段所在列设为null，所以注意在设计子表时外键不能设为not null；<br>RESTRICT：如果想要删除父表的记录时，而在子表中有关联该父表的记录，则不允许删除父表中的记录；<br>NO ACTION：同 RESTRICT，也是首先先检查外键；</p><h1 id="单表查询"><a href="#单表查询" class="headerlink" title="单表查询"></a>单表查询</h1><h2 id="Having与Where的区别"><a href="#Having与Where的区别" class="headerlink" title="Having与Where的区别"></a>Having与Where的区别</h2><ul><li>where 子句的作用是在对查询结果进行分组前，将不符合where条件的行去掉，即在分组之前过滤数据，where条件中不能包含聚组函数，使用where条件过滤出特定的行。</li><li>having 子句的作用是筛选满足条件的组，即在分组之后过滤数据，条件中经常包含聚组函数，使用having 条件过滤出特定的组，也可以使用多个分组标准进行分组。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">1.select语句</span><br><span class="line">最简单的select</span><br><span class="line">    select * from 表;</span><br><span class="line">    select 字段,... from 表;</span><br><span class="line">重命名字段</span><br><span class="line">    select 字段 as 新名字,... from 表;</span><br><span class="line">    select 字段 新名字,... from 表;</span><br><span class="line">去重</span><br><span class="line">    select distinct 字段 from 表;</span><br><span class="line">    select distinct age,sex from employee;</span><br><span class="line">使用函数</span><br><span class="line">    concat</span><br><span class="line">    concat_ws</span><br><span class="line">四则运算的</span><br><span class="line">     select emp_name,salary*12 from employee; 乘法</span><br><span class="line">     select emp_name,salary*12 as annual_salary from employee;</span><br><span class="line">使用判断逻辑</span><br><span class="line">    case when语句 相当于 if条件判断句</span><br><span class="line"></span><br><span class="line">where 筛选所有符合条件的行</span><br><span class="line">    比较运算符</span><br><span class="line">        &gt; &lt; &gt;= &lt;= &lt;&gt; !=</span><br><span class="line">    范围</span><br><span class="line">        between 10000 and 20000 要1w-2w之间的</span><br><span class="line">        in (10000,20000)   只要10000或者20000的</span><br><span class="line">    模糊匹配</span><br><span class="line">        like</span><br><span class="line">            % 通配符 表示任意长度的任意内容</span><br><span class="line">            _ 通配符 一个字符长度的任意内容</span><br><span class="line">        regexp</span><br><span class="line">            &#x27;^a&#x27;</span><br><span class="line">            &#x27;g$&#x27;</span><br><span class="line">    逻辑运算</span><br><span class="line">        not\and\or</span><br><span class="line"></span><br><span class="line">查看岗位描述不为NULL的员工信息</span><br><span class="line">    is</span><br><span class="line">    select * from employee where post_comment is not null;</span><br><span class="line">查看岗位是teacher且薪资不是10000或9000或30000的员工姓名、年龄、薪资</span><br><span class="line">    select emp_name, age, salary</span><br><span class="line">    from employee wherepost = &#x27;teacher&#x27; and salary not in(10000,9000,30000)</span><br><span class="line">查看岗位是teacher且名字是jin开头的员工姓名、年薪</span><br><span class="line">     select emp_name,salary*12 from employee where post = &#x27;teacher&#x27; and emp_name like &#x27;jin%&#x27;;</span><br><span class="line"></span><br><span class="line">分组 group by 根据谁分组,可以求这个组的总人数,最大值,最小值,平均值,求和 但是这个求出来的值只是和分组字段对应</span><br><span class="line">    并不和其他任何字段对应,这个时候查出来的所有其他字段都不生效.</span><br><span class="line">聚合函数</span><br><span class="line">    count 求个数</span><br><span class="line">    max  求最大值</span><br><span class="line">    min  求最小值</span><br><span class="line">    sum  求和</span><br><span class="line">    avg  求平均</span><br><span class="line"></span><br><span class="line">    SELECT post,emp_name FROM employee GROUP BY post;</span><br><span class="line">    SELECT post,GROUP_CONCAT(emp_name) FROM employee GROUP BY post;</span><br><span class="line"></span><br><span class="line">having 过滤语句</span><br><span class="line">    在having条件中可以使用聚合函数,在where中不行</span><br><span class="line">    适合去筛选符合条件的某一组数据,而不是某一行数据</span><br><span class="line">    先分组再过滤 : 求平均薪资大于xx的部门,求人数大于xx的性别,求大于xx人的年龄段</span><br><span class="line">查询各岗位内包含的员工个数小于2的岗位名、岗位内包含员工名字、个数</span><br><span class="line">group by post having count(id) &lt; 2;</span><br><span class="line"></span><br><span class="line">排序 order by</span><br><span class="line">    默认是升序  asc</span><br><span class="line">    降序  desc</span><br><span class="line">    order by age ,salary desc</span><br><span class="line">        优先根据age从小到大排,在age相同的情况下,再根据薪资从大到小排</span><br><span class="line"></span><br><span class="line">limit m,n</span><br><span class="line">    从m+1项开始,取n项</span><br><span class="line">    如果不写m,m默认为0</span><br><span class="line"></span><br><span class="line">    limit n offset m</span><br></pre></td></tr></table></figure><h1 id="连表查询"><a href="#连表查询" class="headerlink" title="连表查询"></a>连表查询</h1><p><img src="/../images/mysql/mysql%E7%9A%84%E5%A4%9A%E8%A1%A8%E8%BF%9E%E6%8E%A5.jpg" alt="mysql的多表连接"></p><h1 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h1><h1 id="一、索引定义"><a href="#一、索引定义" class="headerlink" title="一、索引定义"></a>一、索引定义</h1><blockquote><p>索引（Index）是帮助Mysql高效获取数据等数据结构。</p></blockquote><p>索引是排好序的快速查找数据结构，故影响sql执行中的查找和排序。</p><h1 id="二、索引的优势和劣势"><a href="#二、索引的优势和劣势" class="headerlink" title="二、索引的优势和劣势"></a>二、索引的优势和劣势</h1><h2 id="2-1-索引优势"><a href="#2-1-索引优势" class="headerlink" title="2.1 索引优势"></a>2.1 索引优势</h2><blockquote><p>索引大幅度提高了查询效率，降低了数据库的IO成本。降低了数据排序成本，降低了CPU的消耗。</p></blockquote><h2 id="2-2-索引劣势"><a href="#2-2-索引劣势" class="headerlink" title="2.2 索引劣势"></a>2.2 索引劣势</h2><blockquote><p>因为索引是一个独立的表，里面存了主键与索引字段，并且指向实体表的记录，所以也是占空间的。并且虽然有了所以之后查询速度快，但是对相应数据更新（insert、update、delete）的速度变慢了，所以对于那些经常需要更新的数据表尽量不要加索引。</p></blockquote><h1 id="三、索引分类"><a href="#三、索引分类" class="headerlink" title="三、索引分类"></a>三、索引分类</h1><p>我们可以按照四个角度来分类索引。</p><ul><li>按「数据结构」分类：B+tree索引、Hash索引、Full-text索引。</li><li>按「物理存储」分类：聚簇索引（主键索引）、二级索引（辅助索引）。</li><li>按「字段特性」分类：主键索引、唯一索引、普通索引、前缀索引。</li><li>按「字段个数」分类：单列索引、联合索引。</li></ul><h2 id="3-1-主键索引"><a href="#3-1-主键索引" class="headerlink" title="3.1 主键索引"></a>3.1 主键索引</h2><p>主键索引就是建立在主键字段上的索引，通常在创建表的时候一起创建，一张表最多只有一个主键索引，索引列的值不允许有空值。<br>在创建表时，创建主键索引的方式如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE table_name  (</span><br><span class="line">  ....</span><br><span class="line">  PRIMARY KEY (index_column_1) USING BTREE</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="3-2-唯一索引"><a href="#3-2-唯一索引" class="headerlink" title="3.2 唯一索引"></a>3.2 唯一索引</h2><p>唯一索引建立在 UNIQUE 字段上的索引，一张表可以有多个唯一索引，索引列的值必须唯一，但是允许有空值。<br>在创建表时，创建唯一索引的方式如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE table_name  (</span><br><span class="line">  ....</span><br><span class="line">  UNIQUE KEY(index_column_1,index_column_2,...) </span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>建表后，如果要创建唯一索引，可以使用这面这条命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CREATE UNIQUE INDEX index_name</span><br><span class="line">ON table_name(index_column_1,index_column_2,...); </span><br></pre></td></tr></table></figure><h2 id="3-3-普通索引"><a href="#3-3-普通索引" class="headerlink" title="3.3 普通索引"></a>3.3 普通索引</h2><p>普通索引就是建立在普通字段上的索引，既不要求字段为主键，也不要求字段为 UNIQUE。</p><p>在创建表时，创建普通索引的方式如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE table_name  (</span><br><span class="line">  ....</span><br><span class="line">  INDEX(index_column_1,index_column_2,...) </span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>建表后，如果要创建普通索引，可以使用这面这条命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CREATE INDEX index_name</span><br><span class="line">ON table_name(index_column_1,index_column_2,...); </span><br></pre></td></tr></table></figure><h2 id="3-4-前缀索引"><a href="#3-4-前缀索引" class="headerlink" title="3.4 前缀索引"></a>3.4 前缀索引</h2><p>前缀索引是指对字符类型字段的前几个字符建立的索引，而不是在整个字段上建立的索引，前缀索引可以建立在字段类型为 char、 varchar、binary、varbinary 的列上。</p><p>使用前缀索引的目的是为了减少索引占用的存储空间，提升查询效率。</p><p>在创建表时，创建前缀索引的方式如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE table_name(</span><br><span class="line">    column_list,</span><br><span class="line">    INDEX(column_name(length))</span><br><span class="line">); </span><br></pre></td></tr></table></figure><p>建表后，如果要创建前缀索引，可以使用这面这条命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CREATE INDEX index_name</span><br><span class="line">ON table_name(column_name(length)); </span><br></pre></td></tr></table></figure><h2 id="3-5-联合索引"><a href="#3-5-联合索引" class="headerlink" title="3.5 联合索引"></a>3.5 联合索引</h2><p>通过将多个字段组合成一个索引，该索引就被称为联合索引。</p><p><code>CREATE INDEX index_name ON TABLE(A, B);</code></p><h2 id="3-6-聚簇索引"><a href="#3-6-聚簇索引" class="headerlink" title="3.6 聚簇索引"></a>3.6 聚簇索引</h2><p>聚簇索引：将数据存储与索引放到了一块，找到索引也就找到了数据</p><blockquote><p>聚集索引（Innodb）：<br>1、建表的时候，如果指定了主键，则主键就是聚簇索引。<br>2、建表的时候，如果没有指定主键，且含有唯一索引，则会选择一个唯一的非空索引作为聚簇索引。<br>3、如果即不含有主键，也不含有唯一索引，则隐式使用6个字节的rowId作为聚簇索引。</p></blockquote><p>InnoDB聚集索引和普通索引有什么差异？</p><p>InnoDB<strong>聚集索引</strong>的叶子节点存储行记录，因此， InnoDB必须要有，且只有一个聚集索引：</p><p>（1）如果表定义了PK，则PK就是聚集索引；</p><p>（2）如果表没有定义PK，则第一个not NULL unique列是聚集索引；</p><p>（3）否则，InnoDB会创建一个隐藏的row-id作为聚集索引；</p><p> InnoDB<strong>普通索引</strong>的叶子节点存储主键值。</p><p>聚簇索引查找过程</p><blockquote><p>如果查询条件为普通索引（非聚簇索引），需要扫描两次B+树，第一次扫描通过普通索引定位到聚簇索引的值，然后第二次扫描通过聚簇索引的值定位到要查找的行记录数据。 如：select * from user where age &#x3D; 30;</p></blockquote><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1. 先通过普通索引 age=30 定位到主键值 id=1</span><br><span class="line">2. 再通过聚集索引 id=1 定位到行记录数据</span><br></pre></td></tr></table></figure><h2 id="回表查询"><a href="#回表查询" class="headerlink" title="回表查询"></a>回表查询</h2><blockquote><p>先通过普通索引的值定位聚簇索引值，再通过聚簇索引的值定位行记录数据，需要扫描两次索引B+树，它的性能较扫一遍索引树更低。</p></blockquote><h2 id="索引覆盖"><a href="#索引覆盖" class="headerlink" title="索引覆盖"></a>索引覆盖</h2><blockquote><p>只需要在一棵索引树上就能获取SQL所需的所有列数据，无需回表，速度更快。<br>例如：select id,age from user where age &#x3D; 10;</p></blockquote><h2 id="如何实现覆盖索引"><a href="#如何实现覆盖索引" class="headerlink" title="如何实现覆盖索引"></a>如何实现覆盖索引</h2><blockquote><blockquote><p>常见的方法是：将被查询的字段，建立到联合索引里去。<br>1、如实现：select id,age from user where age &#x3D; 10;<br>explain分析：因为age是普通索引，使用到了age索引，通过一次扫描B+树即可查询到相应的结果，这样就实现了覆盖索引</p></blockquote></blockquote><h1 id="四、索引的基本操作"><a href="#四、索引的基本操作" class="headerlink" title="四、索引的基本操作"></a>四、索引的基本操作</h1><ul><li>查看索引</li></ul><blockquote><p>show index from tblname;</p></blockquote><ul><li>直接创建索引</li></ul><blockquote><p>CREATE INDEX index_name ON table(column(length))</p></blockquote><ul><li>修改表结构的方式添加索引</li></ul><blockquote><p>ALTER TABLE table_name ADD INDEX index_name ON (column(length))</p></blockquote><ul><li>创建表的时候同时创建索引</li></ul><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE `table` (</span><br><span class="line"></span><br><span class="line">`<span class="type">id</span>` <span class="type">int</span>(<span class="number">11</span>) NOT <span class="literal">NULL</span> AUTO_INCREMENT ,</span><br><span class="line"></span><br><span class="line">`title` <span class="type">char</span>(<span class="number">255</span>) CHARACTER SET utf8 COLLATE utf8_general_ci NOT <span class="literal">NULL</span> ,</span><br><span class="line"></span><br><span class="line">`content` text CHARACTER SET utf8 COLLATE utf8_general_ci <span class="literal">NULL</span> ,</span><br><span class="line"></span><br><span class="line">`time` <span class="type">int</span>(<span class="number">10</span>) <span class="literal">NULL</span> DEFAULT <span class="literal">NULL</span> ,</span><br><span class="line"></span><br><span class="line">PRIMARY KEY (`<span class="type">id</span>`),</span><br><span class="line"></span><br><span class="line">INDEX index_name (title(length))</span><br><span class="line"></span><br><span class="line">)</span><br></pre></td></tr></table></figure><ul><li>删除索引</li></ul><blockquote><p>DROP INDEX index_name ON table</p></blockquote><h2 id="验证索引–explain"><a href="#验证索引–explain" class="headerlink" title="验证索引–explain"></a>验证索引–explain</h2><p>对于执行计划，参数有：</p><ul><li>possible_keys 字段表示可能用到的索引；</li><li>key 字段表示实际用的索引，如果这一项为 NULL，说明没有使用索引；</li><li>key_len 表示索引的长度；</li><li>rows 表示扫描的数据行数。</li><li>type 表示数据扫描类型，我们需要重点看这个。</li><li>extra 几个重要的参考指标：<ul><li>Using filesort ：当查询语句中包   含 group by 操作，而且无法利用索引 完成排序操作的时候， 这时不得不选择  相应的排序算法进行，甚至可能会通过文  件排序，效率是很低的，所以要避免这种  问题的出现。</li><li>Using temporary：使了用临时表保   存中间结果，MySQL 在对查询结果排序 时使用临时表，常见于排序 order by    和分组查询 group by。效率低，要避免    这种问题的出现。</li><li>Using index：所需数据只需在索引   即可全部获得，不须要再到表中取数据，   也就是使用了覆盖索引，避免了回表操 作，效率不错。</li></ul></li></ul><p>type 字段就是描述了找到所需数据时使用的扫描方式是什么，常见扫描类型的执行效率从低到高的顺序为：</p><ul><li>All（全表扫描）</li><li>index（全索引扫描）</li><li>range（索引范围扫描）<ul><li>range 表示采用了索引范围扫描，一般在 where 子句中使用 &lt; 、&gt;、in、between 等关键词，只检索给定范围的行，属于范围查找。从这一级别开始，索引的作用会越来越明显，因此我们需要尽量让 SQL 查询可以使用到 range 这一级别及以上的 type 访问方式。</li></ul></li><li>ref（非唯一索引扫描）<ul><li>ref 类型表示采用了非唯一索引，或者是唯一索引的非唯一性前缀，返回数据返回可能是多条。因为虽然使用了索引，但该索引列的值并不唯一，有重复。这样即使使用索引快速查找到了第一条数据，仍然不能停止，要进行目标值附近的小范围扫描。但它的好处是它并不需要扫全表，因为索引是有序的，即便有重复值，也是在一个非常小的范围内扫描。</li></ul></li><li>eq_ref（唯一索引扫描）<ul><li>eq_ref 类型是使用主键或唯一索引时产生的访问方式，通常使用在多表联查中。比如，对两张表进行联查，关联条件是两张表的 user_id 相等，且 user_id 是唯一索引，那么使用 EXPLAIN 进行执行计划查看的时候，type 就会显示 eq_ref。</li></ul></li><li>const（结果只有一条的主键或唯一索引扫描）。<ul><li>const 类型表示使用了主键或者唯一索引与常量值进行比较，比如 select name from product where id&#x3D;1。</li></ul></li><li>需要说明的是 const 类型和 eq_ref 都使用了主键或唯一索引，不过这两个类型有所区别，const 是与常量进行比较，查询效率会更快，而 eq_ref 通常用于多表联查中。</li></ul><h1 id="五、创建索引建议"><a href="#五、创建索引建议" class="headerlink" title="五、创建索引建议"></a>五、创建索引建议</h1><h2 id="5-1-适合建索引"><a href="#5-1-适合建索引" class="headerlink" title="5.1 适合建索引"></a>5.1 适合建索引</h2><p>a、主键自动建立唯一索引<br> b、频繁作为查询条件的字段时候建立索引<br> c、查询中与其它表关联的字段，外键关系建立索引<br> d、where 里用不到的不建立索引<br> e、查询中排序的字段，建立索引将大大提高排序速度<br> f、查询中统计或分组的字段</p><h2 id="5-2-不适合建索引"><a href="#5-2-不适合建索引" class="headerlink" title="5.2 不适合建索引"></a>5.2 不适合建索引</h2><ul><li>WHERE 条件，GROUP BY，ORDER BY 里用不到的字段，索引的价值是快速定位，如果起不到定位的字段通常是不需要创建索引的，因为索引是会占用物理空间的。</li><li>字段中存在大量重复数据，不需要创建索引，比如性别字段，只有男女，如果数据库表中，男女的记录分布均匀，那么无论搜索哪个值都可能得到一半的数据。在这些情况下，还不如不要索引，因为 MySQL 还有一个查询优化器，查询优化器发现某个值出现在表的数据行中的百分比很高的时候，它一般会忽略索引，进行全表扫描。</li><li>表数据太少的时候，不需要创建索引；</li><li>经常更新的字段不用创建索引，比如不要对电商项目的用户余额建立索引，因为索引字段频繁修改，由于要维护 B+Tree的有序性，那么就需要频繁的重建索引，这个过程是会影响数据库性能的。</li></ul><h2 id="5-3-索引失效"><a href="#5-3-索引失效" class="headerlink" title="5.3 索引失效"></a>5.3 索引失效</h2><ul><li>当我们使用左或者左右模糊匹配的时候，也就是 like %xx 或者 like %xx%这两种方式都会造成索引失效；</li><li>当我们在查询条件中对索引列做了计算、函数、类型转换操作，这些情况下都会造成索引失效；</li><li>联合索引要能正确使用需要遵循最左匹配原则，也就是按照最左优先的方式进行索引的匹配，否则就会导致索引失效。</li><li>在 WHERE 子句中，如果在 OR 前的条件列是索引列，而在 OR 后的条件列不是索引列，那么索引会失效。</li></ul><h1 id="六、Mysql索引结构"><a href="#六、Mysql索引结构" class="headerlink" title="六、Mysql索引结构"></a>六、Mysql索引结构</h1><p>MySql索引使用的数据结构是B+树</p><ul><li>不使用Hash存储的原因是</li></ul><blockquote><p>a、使用hash存储必须使用好的hash算法。<br>b、hash存储由于数据分布的不均衡，比较占用内存。<br>c、hash存储不能进行范围查询，范围查询多于等值查询。（关键点）</p></blockquote><ul><li>不使用二叉树、BST、AVL、红黑树的原因：</li></ul><blockquote><p>当插入的节点越来越多，会导致树的深度越来越深，导致查询变慢。</p></blockquote><h1 id="七、关于索引的常见问题"><a href="#七、关于索引的常见问题" class="headerlink" title="七、关于索引的常见问题"></a>七、关于索引的常见问题</h1><ul><li>B+树有多少层</li></ul><blockquote><p>3～4层足够</p></blockquote><ul><li>索引用int 还是varchar</li></ul><blockquote><p>索引字段存储空间越小越好</p></blockquote><ul><li>索引为什么要自增</li></ul><blockquote><p>会引起底层的数据分裂或合并，影响性能</p></blockquote><h1 id="数据库使用的时候有什么注意事项"><a href="#数据库使用的时候有什么注意事项" class="headerlink" title="数据库使用的时候有什么注意事项"></a>数据库使用的时候有什么注意事项</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">从搭建数据库的角度上来描述问题</span><br><span class="line"></span><br><span class="line">建表的角度上</span><br><span class="line"></span><br><span class="line">1.合理安排表关系</span><br><span class="line">2.尽量把固定长度的字段放在前面</span><br><span class="line">3.尽量使用char代替varchar</span><br><span class="line">4.分表: 水平分,垂直分</span><br><span class="line"></span><br><span class="line">使用sql语句的时候</span><br><span class="line"></span><br><span class="line">1.尽量用where来约束数据范围到一个比较小的程度,说分页的时候</span><br><span class="line">2.尽量使用连表查询而不是子查询</span><br><span class="line">3.删除数据或者修改数据的时候尽量要用主键作为条件</span><br><span class="line">4.合理的创建和使用索引</span><br><span class="line">    # 1.查询的条件字段不是索引字段</span><br><span class="line">        # 对哪一个字段创建了索引,就用这个字段做条件查询</span><br><span class="line">    # 2.在创建索引的时候应该对区分度比较大的列进行创建</span><br><span class="line">        # 1/10以下的重复率比较适合创建索引</span><br><span class="line">    # 3.范围</span><br><span class="line">        # 范围越大越慢</span><br><span class="line">        # 范围越小越快</span><br><span class="line">        # like &#x27;a%&#x27;  快</span><br><span class="line">        # like &#x27;%a&#x27;  慢</span><br><span class="line">    # 4.条件列参与计算/使用函数</span><br><span class="line">    # 5.and和or</span><br><span class="line">        # id name</span><br><span class="line">        # select * from s1 where id = 1800000 and name = &#x27;eva&#x27;;</span><br><span class="line">        # select count(*) from s1 where id = 1800000 or name = &#x27;eva&#x27;;</span><br><span class="line">        # 多个条件的组合,如果使用and连接</span><br><span class="line">            # 其中一列含有索引,都可以加快查找速度</span><br><span class="line">        # 如果使用or连接</span><br><span class="line">            # 必须所有的列都含有索引,才能加快查找速度</span><br><span class="line">    # 6.联合索引 : 最左前缀原则(必须带着最左边的列做条件,从出现范围开始整条索引失效)</span><br><span class="line">        # (id,name,email)</span><br><span class="line">        # select * from s1 where id = 1800000 and name = &#x27;eva&#x27; and email = &#x27;eva1800000@oldboy&#x27;;</span><br><span class="line">        # select * from s1 where id = 1800000 and name = &#x27;eva&#x27;;</span><br><span class="line">        # select * from s1 where id = 1800000 and email = &#x27;eva1800000@oldboy&#x27;;</span><br><span class="line">        # select * from s1 where id = 1800000;</span><br><span class="line">        # select * from s1 where name = &#x27;eva&#x27; and email = &#x27;eva1800000@oldboy&#x27;;</span><br><span class="line">        # (email,id,name)</span><br><span class="line">        # select * from s1 where id &gt;10000 and email = &#x27;eva1800000@oldboy&#x27;;</span><br><span class="line">    # 7.条件中写出来的数据类型必须和定义的数据类型一致</span><br><span class="line">        # select * from biao where name = 666   # 不一致</span><br><span class="line">    # 8.select的字段应该包含order by的字段</span><br><span class="line">        # select name,age from 表 order by age;  # 比较好</span><br><span class="line">        # select name from 表 order by age;  # 比较差</span><br></pre></td></tr></table></figure><h2 id="最左前缀原则"><a href="#最左前缀原则" class="headerlink" title="最左前缀原则"></a>最左前缀原则</h2><p>什么是最左前缀原则？什么是最左匹配原则<br>顾名思义，就是最左优先，在创建多列索引时，要根据业务需求，where子句中使用最频繁的一列放在最左边。<br>最左前缀匹配原则，非常重要的原则，mysql会一直向右匹配直到遇到范围查询(&gt;、&lt;、between、like)就停止匹配，比如a &#x3D; 1 and b &#x3D; 2 and c &gt; 3 and d &#x3D; 4 如果建立(a,b,c,d)顺序的索引，d是用不到索引的，如果建立(a,b,d,c)的索引则都可以用到，a,b,d的顺序可以任意调整。<br>&#x3D;和in可以乱序，比如a &#x3D; 1 and b &#x3D; 2 and c &#x3D; 3 建立(a,b,c)索引可以任意顺序，mysql的查询优化器会帮你优化成索引可以识别的形式</p><h1 id="事物"><a href="#事物" class="headerlink" title="事物"></a>事物</h1><ol><li><strong>原子性：</strong> 事务是最小的执行单位，不允许分割。事务的原子性确保动作要么全部完成，要么完全不起作用；</li><li><strong>一致性：</strong> 执行事务前后，数据保持一致，多个事务对同一个数据读取的结果是相同的；</li><li><strong>隔离性：</strong> 并发访问数据库时，一个用户的事务不被其他事务所干扰，各并发事务之间数据库是独立的；</li><li><strong>持久性：</strong> 一个事务被提交之后。它对数据库中数据的改变是持久的，即使数据库发生故障也不应该对其有任何影响。</li></ol>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql日常命令笔记</title>
      <link href="/post/c718fbdb.html"/>
      <url>/post/c718fbdb.html</url>
      
        <content type="html"><![CDATA[<h1 id="mysql的sql语句"><a href="#mysql的sql语句" class="headerlink" title="mysql的sql语句"></a>mysql的sql语句</h1><h2 id="查看日志和配置文件位置"><a href="#查看日志和配置文件位置" class="headerlink" title="查看日志和配置文件位置"></a>查看日志和配置文件位置</h2><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><p>root@8cebc228cfea:&#x2F;# mysql –verbose –help|grep -A 1 ‘Default options’<br>Default options are read from the following files in the given order:<br>&#x2F;etc&#x2F;my.cnf &#x2F;etc&#x2F;mysql&#x2F;my.cnf ~&#x2F;.my.cnf</p><h3 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h3><p><a href="https://dev.mysql.com/doc/refman/8.0/en/slow-query-log.html">https://dev.mysql.com/doc/refman/8.0/en/slow-query-log.html</a></p><p>MySQL常见的日志类型包括：</p><ul><li><p>错误日志（error log，<a href="https://dev.mysql.com/doc/refman/8.0/en/error-log.html%EF%BC%89">https://dev.mysql.com/doc/refman/8.0/en/error-log.html）</a></p><ul><li>show variables like ‘%log_error%’;</li></ul></li><li><p>二进制日志（binary log）</p></li><li><p>慢查询日志（slow query log，<a href="https://dev.mysql.com/doc/refman/8.0/en/slow-query-log.html%EF%BC%89">https://dev.mysql.com/doc/refman/8.0/en/slow-query-log.html）</a></p><ul><li><p>show variables like ‘%slow_query_log%’;</p></li><li><p>慢查询日志默认是关闭的，通过如下命令将其开启：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SET GLOBAL slow_query_log=ON</span><br></pre></td></tr></table></figure><p>一个查询消耗多长时间被定义为慢查询呢？MySQL是通过<strong>long_query_time</strong>这个参数来控制的：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SHOW VARIABLES LIKE &#x27;%long_query_time%&#x27;</span><br></pre></td></tr></table></figure><p>除此之外，如果查询没有使用索引，那么被记录到慢查询的日志概率性较大，MySQL 提供了 <code>log_queries_not_using_indexes</code>参数来控制是否将没有使用索引的查询记录到慢查询日志里面：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SHOW VARIABLES LIKE &#x27;%log_queries_not_using_indexes%&#x27;</span><br></pre></td></tr></table></figure><table><thead><tr><th align="left">Variable_name</th><th align="left">Value</th></tr></thead><tbody><tr><td align="left">log_queries_not_using_indexes</td><td align="left">OFF</td></tr></tbody></table><p><code>log_queries_not_using_indexes</code>参数默认是关闭的，我们可以将其打开，</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SET GLOBAL log_queries_not_using_indexes=ON</span><br></pre></td></tr></table></figure><p>如果<code>log_queries_not_using_indexes</code>打开了，MySQL提供了<code>log_throttle_queries_not_using_indexes</code>参数来控制每分钟最好写入多少条这样的记录到慢查询日志：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SHOW VARIABLES LIKE &#x27;%log_throttle_queries_not_using_indexes%&#x27;</span><br></pre></td></tr></table></figure><table><thead><tr><th align="left">Variable_name</th><th align="left">Value</th></tr></thead><tbody><tr><td align="left">log_throttle_queries_not_using_indexes</td><td align="left">0</td></tr></tbody></table><p>默认是0，代表没有限制。</p></li></ul></li></ul><h2 id="explain"><a href="#explain" class="headerlink" title="explain"></a>explain</h2><h2 id="查看存储引擎"><a href="#查看存储引擎" class="headerlink" title="查看存储引擎"></a>查看存储引擎</h2><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">-- 查看支持的存储引擎</span><br><span class="line">SHOW ENGINES</span><br><span class="line"></span><br><span class="line">-- 查看默认存储引擎</span><br><span class="line">SHOW VARIABLES LIKE &#x27;storage_engine&#x27;</span><br><span class="line"></span><br><span class="line">--查看具体某一个表所使用的存储引擎，这个默认存储引擎被修改了！</span><br><span class="line">show create table tablename</span><br><span class="line"></span><br><span class="line">--准确查看某个数据库中的某一表所使用的存储引擎</span><br><span class="line">show table status like &#x27;tablename&#x27;</span><br><span class="line">show table status from database where name=&quot;tablename&quot;</span><br></pre></td></tr></table></figure><h2 id="设置存储引擎"><a href="#设置存储引擎" class="headerlink" title="设置存储引擎"></a>设置存储引擎</h2><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">-- 建表时指定存储引擎。默认的就是INNODB，不需要设置</span><br><span class="line">CREATE TABLE t1 (i INT) ENGINE = INNODB;</span><br><span class="line">CREATE TABLE t2 (i INT) ENGINE = CSV;</span><br><span class="line">CREATE TABLE t3 (i INT) ENGINE = MEMORY;</span><br><span class="line"></span><br><span class="line">-- 修改存储引擎</span><br><span class="line">ALTER TABLE t ENGINE = InnoDB;</span><br><span class="line"></span><br><span class="line">-- 修改默认存储引擎，也可以在配置文件my.cnf中修改默认引擎</span><br><span class="line">SET default_storage_engine=NDBCLUSTER;</span><br></pre></td></tr></table></figure><h2 id="查看当前数据库的事务隔离级别"><a href="#查看当前数据库的事务隔离级别" class="headerlink" title="查看当前数据库的事务隔离级别"></a>查看当前数据库的事务隔离级别</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> variables <span class="keyword">like</span> <span class="string">&#x27;tx_isolation&#x27;</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="variable">@transation</span>_isolation; <span class="operator">/</span><span class="operator">/</span>mysql8<span class="number">.0</span></span><br></pre></td></tr></table></figure><h2 id="数据库的基础命令"><a href="#数据库的基础命令" class="headerlink" title="数据库的基础命令"></a>数据库的基础命令</h2><ul><li><p>连接</p></li><li><p>mysql -h主机地址 -u用户名 －p用户密码 （注:u与root可以不用加空格，其它也一样）</p></li><li><p>断开</p><ul><li>exit （回车）</li></ul></li><li><p>查看当前数据库</p><ul><li>select database();</li></ul></li><li><p>显示数据库</p><ul><li>show databases;</li><li>show dbs;</li></ul></li><li><p>显示数据表</p><ul><li>show tables;</li></ul></li><li><p>显示表结构</p><ul><li><p>describe 表名;</p></li><li><p>desc 表名;</p><ul><li><p>Field　　字段名　　   就是你字段的名字</p><p>Type　　字段类型　　说明了你定义的字符类型　　注意：unsigned[无符号] 说明这个字段不能为负</p><p>Null　　  是否为空　　定义了字段名是否可以为空</p><p>Key　　  索引　　　　在mysql中key 和index 是一样的意思，这个Key列可能会看到有如下的值：PRI(主键)、MUL(普通的b-tree索引)、UNI(唯一索引)</p><p>Default   默认值　　   定义了该字段的默认值</p><p>Extra 　 其他信息</p></li></ul></li></ul></li><li><p>使用库(选中库)</p><ul><li>use 库名;</li></ul></li></ul><h2 id="表的操作"><a href="#表的操作" class="headerlink" title="表的操作"></a>表的操作</h2><h3 id="查看表的信息"><a href="#查看表的信息" class="headerlink" title="查看表的信息"></a>查看表的信息</h3><p>查看索引</p><p><code>SHOW INDEX FROM &lt;表名&gt; [ FROM &lt;数据库名&gt;]</code></p><p><strong>Table</strong>表示创建索引的数据表名，这里是 tb_stu_info2 数据表。<br><strong>Non_unique</strong>表示该索引是否是唯一索引。若不是唯一索引，则该列的值为 1；若是唯一索引，则该列的值为 0。<br><strong>Key_name</strong>表示索引的名称。<br><strong>Seq_in_index</strong>表示该列在索引中的位置，如果索引是单列的，则该列的值为 1；如果索引是组合索引，则该列的值为每列在索引定义中的顺序。<br><strong>Column_name</strong>表示定义索引的列字段。<br><strong>Collation</strong>表示列以何种顺序存储在索引中。在 MySQL 中，升序显示值“A”（升序），若显示为 NULL，则表示无分类。<br><strong>Cardinality</strong>索引中唯一值数目的估计值。基数根据被存储为整数的统计数据计数，所以即使对于小型表，该值也没有必要是精确的。基数越大，当进行联合时，MySQL 使用该索引的机会就越大。<br><strong>Sub_part</strong>表示列中被编入索引的字符的数量。若列只是部分被编入索引，则该列的值为被编入索引的字符的数目；若整列被编入索引，则该列的值为 NULL。<br><strong>Packed</strong>指示关键字如何被压缩。若没有被压缩，值为 NULL。<br><strong>Null</strong>用于显示索引列中是否包含 NULL。若列含有 NULL，该列的值为 YES。若没有，则该列的值为 NO。<br><strong>Index_type</strong>显示索引使用的类型和方法（BTREE、FULLTEXT、HASH、RTREE）。<br><strong>Comment</strong>显示评注。</p><h3 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h3><p><strong>创建新表</strong></p><p>create table tabname(col1 type1 [not null] [primary key],col2 type2 [not null],..)</p><p><strong>根据已有的表创建新表：</strong> </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">方法<span class="number">1</span>:</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">Into</span> new_table_name <span class="keyword">from</span> old_table_name;</span><br><span class="line">方法<span class="number">2</span>:</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> new_table_name (<span class="keyword">Select</span> <span class="operator">*</span> <span class="keyword">from</span> old_table_name);</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> anzhi_result</span><br><span class="line">(<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> test <span class="keyword">where</span> storename<span class="operator">=</span><span class="string">&#x27;anzhi&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> dianping.shops_2020_09 <span class="keyword">like</span> dianping.shops_2020_08;</span><br></pre></td></tr></table></figure><h2 id="插入指令"><a href="#插入指令" class="headerlink" title="插入指令"></a>插入指令</h2><table><thead><tr><th>指令</th><th>已存在</th><th>不存在</th><th>举例</th></tr></thead><tbody><tr><td>insert</td><td>报错</td><td>插入</td><td>insert into names(name, age) values(“小明”, 23);</td></tr><tr><td>insert ignore</td><td>忽略</td><td>插入</td><td>insert ignore into names(name, age) values(“小明”, 24);</td></tr><tr><td>replace</td><td>替换</td><td>插入</td><td>replace into names(name, age) values(“小明”, 25);</td></tr></tbody></table><h3 id="SQL语句中删除表数据drop、truncate和delete的用法"><a href="#SQL语句中删除表数据drop、truncate和delete的用法" class="headerlink" title="SQL语句中删除表数据drop、truncate和delete的用法"></a>SQL语句中删除表数据drop、truncate和delete的用法</h3><ul><li><strong>drop table</strong> 表名称             eg: drop table dbo.Sys_Test</li><li><strong>truncate table</strong> 表名称           eg: truncate table dbo.Sys_Test         </li><li><strong>delete from</strong> 表名称 <strong>where</strong> 列名称 &#x3D; 值   eg: delete from dbo.Sys_Test where test&#x3D;’test’</li></ul><p><strong>drop，truncate，delete区别</strong></p><p>  1、drop (删除表)：删除内容和定义，释放空间。简单来说就是<strong>把整个表去掉</strong>.以后要新增数据是不可能的,除非新增一个表。</p><p>​    drop语句将删除表的结构被依赖的约束（constrain),触发器（trigger)索引（index);依赖于该表的存储过程&#x2F;函数将被保留，但其状态会变为：invalid。</p><p>  2、truncate (清空表中的数据)：删除内容、释放空间但不删除定义(<strong>保留表的数据结构</strong>)。与drop不同的是,只是清空表数据而已。</p><p>​    注意:truncate 不能删除行数据,要删就要把表清空。</p><p>  3、delete (删除表中的数据)：delete 语句用于<strong>删除表中的行</strong>。delete语句执行删除的过程是每次从表中删除一行，并且同时将该行的删除操作作为事务记录在日志中保存</p><p>​    以便进行进行回滚操作。</p><p>​    truncate与不带where的delete ：只删除数据，而不删除表的结构（定义）</p><p>  4、truncate table 删除表中的所有行，但表结构及其列、约束、索引等保持不变。新行标识所用的计数值重置为该列的种子。如果想保留标识计数值，请改用delete。</p><p>​    如果要删除表定义及其数据，请使用 drop table 语句。<br>  5、对于由foreign key约束引用的表，不能使用truncate table ，而应使用不带where子句的delete语句。由于truncate table 记录在日志中，所以它不能激活触发器。</p><p>  6、执行速度，一般来说: drop&gt; truncate &gt; delete。</p><p>  7、delete语句是数据库操作语言(dml)，这个操作会放到 rollback segement 中，事务提交之后才生效；如果有相应的 trigger，执行的时候将被触发。</p><p>​       truncate、drop 是数据库定义语言(ddl)，操作立即生效，原数据不放到 rollback segment 中，不能回滚，操作不触发 trigger。</p><h2 id="连表查询"><a href="#连表查询" class="headerlink" title="连表查询"></a>连表查询</h2><p><img src="/../images/mysql/mysql%E7%9A%84%E5%A4%9A%E8%A1%A8%E8%BF%9E%E6%8E%A5.jpg" alt="mysql的多表连接"></p><h3 id="Mysql的join算法"><a href="#Mysql的join算法" class="headerlink" title="Mysql的join算法"></a>Mysql的join算法</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE `t2` (</span><br><span class="line">  `<span class="built_in">id</span>` int(11) NOT NULL,</span><br><span class="line">  `a` int(11) DEFAULT NULL,</span><br><span class="line">  `b` int(11) DEFAULT NULL,</span><br><span class="line">  PRIMARY KEY (`<span class="built_in">id</span>`),</span><br><span class="line">  KEY `a` (`a`)</span><br><span class="line">) ENGINE=InnoDB;</span><br><span class="line"></span><br><span class="line">drop procedure idata;</span><br><span class="line">delimiter ;;</span><br><span class="line">create procedure idata()</span><br><span class="line">begin</span><br><span class="line">  <span class="built_in">declare</span> i int;</span><br><span class="line">  <span class="built_in">set</span> i=1;</span><br><span class="line">  <span class="keyword">while</span>(i&lt;=1000)<span class="keyword">do</span></span><br><span class="line">    insert into t2 values(i, i, i);</span><br><span class="line">    <span class="built_in">set</span> i=i+1;</span><br><span class="line">  end <span class="keyword">while</span>;</span><br><span class="line">end;;</span><br><span class="line">delimiter ;</span><br><span class="line">call idata();</span><br><span class="line"></span><br><span class="line">create table t1 like t2;</span><br><span class="line">insert into t1 (select * from t2 <span class="built_in">where</span> <span class="built_in">id</span>&lt;=100)</span><br><span class="line">往表t2里插入1000行数据，在表t1里插入100行数据。</span><br></pre></td></tr></table></figure><p><strong>Simple Nested-Loop</strong><br>简单嵌套循环连接<br><img src="/../images/mysql/join%E7%9A%84%E9%97%AE%E9%A2%982.png"></p><p><strong>Index Nested-Loop Join</strong><br>索引嵌套循环连接，只有内层表join的列有索引时，才能用到Index Nested-LoopJoin进行连接</p><blockquote><p>原来的匹配次数 &#x3D; 外层表行数 * 内层表行数<br>优化后的匹配次数&#x3D; 外层表的行数 * 内层表索引的高度<br><img src="/../images/mysql/join%E7%9A%84%E9%97%AE%E9%A2%98.png"></p></blockquote><p><strong>Block Nested-Loop Join</strong><br>缓存块嵌套循环连接</p><p>什么是Join Buffer？<br>块嵌套循环（BNL）联接算法将外循环中读取行放在缓冲区来减少内循环中表必须被读取的次数。例如，如果将10条记录读入缓冲区，并将缓冲区传递给下一个内循环，那么内循环中读取的每条记录都可以与缓冲区中的所有10条记录进行比较。这就使内层循环的表必须被读取的次数减少了一个数量级。</p><p>在MySQL 8.0.18之前，这种算法适用于不能使用索引的等价联接（equi-joins）；在MySQL 8.0.18及以后的版本中，这种情况会采用哈希联接优化。从MySQL 8.0.20开始，MySQL不再使用块嵌套循环，在以前使用块嵌套循环的所有情况下都采用哈希联接（Hash Join）。</p><p>MySQL join buffer具有以下特征：</p><ul><li>当联接的类型为ALL或index或range时可以使用join buffer。</li><li>永远不会给第一个非Constant Table分配join buffer，即使它的类型是ALL或index。</li><li>只有参与join的列存储在join buffer中，而不是整个行。</li><li>系统变量join_buffer_size决定了用于处理查询的每个缓冲区的大小。–调优</li><li>为每个可以缓冲的联接分配一个缓冲区，因此一个查询可以使用多个缓冲区来处理。</li><li>在执行联接（join）之前分配（allocate）缓冲区，并在查询完成后释放（free）缓冲区。</li></ul><p><img src="/../images/mysql/join%E7%9A%84%E9%97%AE%E9%A2%983.png"></p><p><strong>哈希联接（Hash Join）</strong><br>通常将Hash Join分为两个阶段。构建阶段（build phase）和探测阶段（probe phase）。</p><p>在构建阶段，从其中一个表输入（通常是两个中较小的一个）构建内存中的哈希表，服务器使用联接属性作为哈希表键。一旦所有行都存储在哈希表中，就完成了构建阶段。</p><p>在探测阶段，将第二个表的每一行计算联接键哈希，并检查它是否存在于在构建阶段创建的哈希表中。如果找到该哈希的匹配项，则它还需验证哈希表中的行与第二个表中的行之间的联接键是否真的匹配（由于存在哈希冲突）</p><h2 id="常用的sql语句"><a href="#常用的sql语句" class="headerlink" title="常用的sql语句"></a>常用的sql语句</h2><h3 id="sql比较两张表数据是否一致"><a href="#sql比较两张表数据是否一致" class="headerlink" title="sql比较两张表数据是否一致"></a>sql比较两张表数据是否一致</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> (<span class="keyword">select</span> id,name,<span class="built_in">count</span>(<span class="number">1</span>) <span class="keyword">as</span> num <span class="keyword">from</span> t1 <span class="keyword">group</span> <span class="keyword">by</span> id，name) table1</span><br><span class="line"></span><br><span class="line"><span class="keyword">inner</span> <span class="keyword">join</span> (<span class="keyword">select</span> id,name,<span class="built_in">count</span>(<span class="number">1</span>) <span class="keyword">as</span> num <span class="keyword">from</span> t2 <span class="keyword">group</span> <span class="keyword">by</span> id，name) table2 <span class="keyword">on</span> table1.ID<span class="operator">=</span>table2.ID</span><br><span class="line"></span><br><span class="line"><span class="keyword">and</span> table1.name<span class="operator">=</span>table2.name</span><br><span class="line"></span><br><span class="line"><span class="keyword">and</span> table1.num<span class="operator">=</span>table2.num;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis日常命令笔记</title>
      <link href="/post/f3bc1db9.html"/>
      <url>/post/f3bc1db9.html</url>
      
        <content type="html"><![CDATA[<h2 id="redis命令"><a href="#redis命令" class="headerlink" title="redis命令"></a>redis命令</h2><h2 id="命令使用推荐"><a href="#命令使用推荐" class="headerlink" title="命令使用推荐"></a>命令使用推荐</h2><p>参阅：<a href="https://developer.aliyun.com/article/531067#cc1">https://developer.aliyun.com/article/531067#cc1</a></p><h3 id="1-【推荐】-O-N-命令关注N的数量"><a href="#1-【推荐】-O-N-命令关注N的数量" class="headerlink" title="1.【推荐】 O(N)命令关注N的数量"></a>1.【推荐】 O(N)命令关注N的数量</h3><p>例如hgetall、lrange、smembers、zrange、sinter等并非不能使用，但是需要明确N的值。有遍历的需求可以使用hscan、sscan、zscan代替。</p><h3 id="2-【推荐】：禁用命令"><a href="#2-【推荐】：禁用命令" class="headerlink" title="2.【推荐】：禁用命令"></a>2.【推荐】：禁用命令</h3><p>禁止线上使用keys、flushall、flushdb等，通过redis的rename机制禁掉命令，或者使用scan的方式渐进式处理。</p><h3 id="3-【推荐】合理使用select"><a href="#3-【推荐】合理使用select" class="headerlink" title="3.【推荐】合理使用select"></a>3.【推荐】合理使用select</h3><p>redis的多数据库较弱，使用数字进行区分，很多客户端支持较差，同时多业务用多数据库实际还是单线程处理，会有干扰。</p><h4 id="4-【推荐】使用批量操作提高效率"><a href="#4-【推荐】使用批量操作提高效率" class="headerlink" title="4.【推荐】使用批量操作提高效率"></a>4.【推荐】使用批量操作提高效率</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">原生命令：例如mget、mset。</span><br><span class="line">非原生命令：可以使用pipeline提高效率。</span><br></pre></td></tr></table></figure><h3 id="5-【建议】Redis事务功能较弱，不建议过多使用"><a href="#5-【建议】Redis事务功能较弱，不建议过多使用" class="headerlink" title="5.【建议】Redis事务功能较弱，不建议过多使用"></a>5.【建议】Redis事务功能较弱，不建议过多使用</h3><p>Redis的事务功能较弱(不支持回滚)，而且集群版本(自研和官方)要求一次事务操作的key必须在一个slot上(可以使用hashtag功能解决)</p><h3 id="6-【建议】控制key的生命周期，redis不是垃圾桶。"><a href="#6-【建议】控制key的生命周期，redis不是垃圾桶。" class="headerlink" title="6.【建议】控制key的生命周期，redis不是垃圾桶。"></a>6.【建议】控制key的生命周期，redis不是垃圾桶。</h3><p>建议使用expire设置过期时间(条件允许可以打散过期时间，防止集中过期)，不过期的数据重点关注idletime</p><h3 id="7-【建议】高并发下建议客户端添加熔断功能-例如netflix-hystrix"><a href="#7-【建议】高并发下建议客户端添加熔断功能-例如netflix-hystrix" class="headerlink" title="7.【建议】高并发下建议客户端添加熔断功能(例如netflix hystrix)"></a>7.【建议】高并发下建议客户端添加熔断功能(例如netflix hystrix)</h3><p>熔断：<br>在分布式系统中，我们往往需要依赖下游服务，不管是内部系统还是第三方服务，如果下游出现问题，我们不在盲目地去请求，在一个周期内失败达到一定次数，不在请求，及时失败。过一段时间，在逐步放开请求，这样既能防止不断的调用，使下游服务更坏，保护了下游方，还能降低自己的执行成本，快速的响应，减少延迟，增加吞吐量。比如：Hystrix</p><h3 id="8-【建议】根据自身业务类型，选好maxmemory-policy-最大内存淘汰策略-，设置好过期时间。"><a href="#8-【建议】根据自身业务类型，选好maxmemory-policy-最大内存淘汰策略-，设置好过期时间。" class="headerlink" title="8.【建议】根据自身业务类型，选好maxmemory-policy(最大内存淘汰策略)，设置好过期时间。"></a>8.【建议】根据自身业务类型，选好maxmemory-policy(最大内存淘汰策略)，设置好过期时间。</h3><h3 id="9-【强制】删除bigkey-不要直接删除，要循序渐进删除"><a href="#9-【强制】删除bigkey-不要直接删除，要循序渐进删除" class="headerlink" title="9.【强制】删除bigkey,不要直接删除，要循序渐进删除"></a>9.【强制】删除bigkey,不要直接删除，要循序渐进删除</h3><p><strong>什么是bigkey</strong></p><p>在Redis中，一个字符串最大512MB，一个二级数据结构（例如hash、list、set、zset）可以存储大约40亿个(2^32-1)个元素，但实际上中如果下面两种情况，我就会认为它是bigkey。</p><ol><li>字符串类型：它的big体现在单个value值很大，一般认为超过10KB就是bigkey。</li><li>非字符串类型：哈希、列表、集合、有序集合，它们的big体现在元素个数太多。</li></ol><h3 id="10-【强制】：拒绝bigkey-防止网卡流量、慢查询"><a href="#10-【强制】：拒绝bigkey-防止网卡流量、慢查询" class="headerlink" title="10.【强制】：拒绝bigkey(防止网卡流量、慢查询)"></a>10.【强制】：拒绝bigkey(防止网卡流量、慢查询)</h3><p>string类型控制在10KB以内，hash、list、set、zset元素个数不要超过5000。</p><p>默认策略是volatile-lru，即超过最大内存后，在过期键中使用lru算法进行key的剔除，保证不过期数据不被删除，但是可能会出现OOM问题。</p><h3 id="rename-command"><a href="#rename-command" class="headerlink" title="*rename-command"></a>*rename-command</h3><p>为了防止把问题带到生产环境，我们可以通过配置文件重命名一些危险命令，</p><p>例如keys等一些高危命令。操作非常简单，</p><p>只需要在conf配置文件增加如下所示配置即可：</p><blockquote><p>rename-command flushdb flushddbb</p></blockquote><blockquote><p>rename-command flushall flushallall</p></blockquote><blockquote><p>rename-command keys keysys</p></blockquote><h3 id="基本命令（基于本地redis无密码认证环境）"><a href="#基本命令（基于本地redis无密码认证环境）" class="headerlink" title="基本命令（基于本地redis无密码认证环境）"></a>基本命令（基于本地redis无密码认证环境）</h3><ul><li><p>INFO 查看redis的信息</p><ul><li>redis-cli info CPU，redis-cli info Server，info Memory</li><li>redis-cli 终端中使用info <section>用户获取指定的信息</section></li></ul></li><li><p>查看当前所有的KEYS</p><ul><li><p>keys 匹配有3个通配符 *, ? ,[]</p><ul><li><p>*: 通配任意多个字符</p></li><li><p>?: 通配单个字符</p></li><li><p>[]: 通配括号内的某1个字符</p></li></ul></li><li><p><strong>注意</strong></p><ul><li><p>keys 算法是遍历算法，复杂度是 O(n)，如果实例中有千万级以上的 key，这个指令就会导致 Redis 服务卡顿</p></li><li><p><code>KEYS</code>命令的性能随着数据库数据的增多而越来越慢</p></li><li><p><code>KEYS</code>命令会引起阻塞，连续的 <code>KEYS</code>命令足以让 Redis 阻塞</p></li></ul></li></ul></li><li><p>SCAN</p><ul><li>Redis从2.8版本开始支持scan命令，SCAN命令的基本用法如下：<ul><li>复杂度虽然也是 O(n)，通过游标分步进行不会阻塞线程;</li><li>有限制参数 COUNT ；</li><li>同 keys命令 一样提供模式匹配功能;</li><li>服务器不需要为游标保存状态，游标的唯一状态就是 scan 返回给客户端的游标整数;</li></ul></li><li>scan用法<ul><li>SCAN cursor [MATCH pattern] [COUNT count]<ul><li>scan 命令提供三个参数，第一个是cursor，第二个是要匹配的正则，第三个是单次遍历的槽位</li><li>第一个遍历是 cursor 值为0，然后将返回结果的第一个整数作为下一个遍历的游标，如果最后返回的到cursor的值为0就代表结束。</li></ul></li></ul></li></ul></li><li><p>RENAME</p></li><li><p>*<a href="https://redis.io/commands/object">OBJECT</a></p></li><li><p>SET 设置key</p></li><li><p>DEL 删除key</p></li><li><p>TYPE 查看key的类型</p></li><li><p>UNLINK，异步删除，避免阻塞主线程（redis单线程）</p></li></ul><h3 id="string"><a href="#string" class="headerlink" title="string"></a>string</h3><ul><li>STRLEN key</li><li>APPEND key value</li><li>MSET key value [key value …]</li><li>MGET key1 [key2..]]</li></ul><h3 id="list"><a href="#list" class="headerlink" title="list"></a>list</h3><ul><li>lrange（索引从<code>0~N-1</code>（从左往右），从<code>-1~-N</code>（从右往左），因此，<code>0~-1</code>表示整个列表）</li><li>lpop,rpop</li><li>Bloop,brpop</li></ul><h3 id="set"><a href="#set" class="headerlink" title="set"></a>set</h3><ul><li>无序集合<ul><li>SADD向集合添加一个或多个成员</li><li>SCARD获取集合的成员数</li><li>SMEMBERS返回集合中的所有成员</li><li>SREM移除集合中一个或多个成员</li><li>SSCAN用于迭代集合中键的元素</li></ul></li><li>有序集合<ul><li>ZADD<ul><li>向有序集合添加一个或多个成员，或者更新已存在成员的分数</li></ul></li><li>ZCARD<ul><li>获取有序集合的成员数</li></ul></li><li>ZRANGE<ul><li>通过索引区间返回有序集合指定区间内的成员</li></ul></li><li>ZRANK<ul><li>返回有序集中指定成员的排名。其中有序集成员按分数值递增(从小到大)顺序排列</li></ul></li><li>ZREVRANK<ul><li>返回有序集中成员的排名。其中有序集成员按分数值递减(从大到小)排序</li></ul></li><li>ZSCORE<ul><li>返回有序集中，成员的分数值。 如果成员元素不是有序集 key 的成员，或 key 不存在，返回 nil</li></ul></li></ul></li></ul><h3 id="hash"><a href="#hash" class="headerlink" title="hash"></a>hash</h3><ul><li>Redis 中每个 hash 可以存储 232 - 1 键值对（40多亿），不要随意的使用HGETALL命令因为这样可能会阻塞redis，最好使用HSCAN</li></ul><h3 id="redis慢查询"><a href="#redis慢查询" class="headerlink" title="redis慢查询"></a>redis慢查询</h3><p>Redis 慢查询有两个参数需要配置：</p><ul><li><code>slowlog-log-slower-than</code>：设置慢查询预设的超时阈值，单位是微秒</li><li><code>slowlog-max-len</code>：表示慢查询日志存储的条数</li></ul><p><strong>slowlog-log-slower-than</strong></p><p><code>slowlog-log-slower-than</code> 表示的是慢查询预设的超时阈值。它所阐述的意思是如果某条命令（如 <code>key*</code>） 执行”很慢“，执行时间超过了设置的阈值，那么这条命令将会被记录到慢查询日志中。</p><ul><li>若设置 <code>slowlog-log-slower-than=0</code>，则会记录所有命令</li><li>若设置 <code>slowlog-log-slower-than&lt;0</code>，则不会记录任何命令</li></ul><p><strong>slowlog-max-len</strong></p><p>Redis 会记录慢查询日志，但是会存储在哪里呢？实际上 Redis 会使用一个列表来存储慢查询日志， <code>slowlog-max-len</code> 就是该列表的最大长度。一个命令如果满足慢查询阈值条件则会加入到该列表来，但是如果该列表已经处于最大长度时，那么会删除最开始的一条记录，然后将最新的命令插入到末尾，所以慢查询日志列表是一个有限的先进先出列表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; slowlog get #慢日志查询</span><br><span class="line"> 1) (integer) 2 #慢日志下标</span><br><span class="line">   2) (integer) 1581994139 #执行时间</span><br><span class="line">   3) (integer) 5 #花费时间 (单位微秒)</span><br><span class="line">   4) 1) &quot;set&quot; #执行的具体命令</span><br><span class="line">      2) &quot;lang&quot;</span><br><span class="line">      3) &quot;java&quot;</span><br></pre></td></tr></table></figure><p>1）日志的标识 id 2）发生的时间戳 3）命令耗时 4）执行的命令和参数</p><h2 id="redis数据过期"><a href="#redis数据过期" class="headerlink" title="redis数据过期"></a>redis数据过期</h2><p>Redis对存储值的过期处理实际上是针对该值的键（key）处理的，即时间的设置也是设置key的有效时间。Expires字典保存了所有键的过期时间，Expires也被称为过期字段。</p><ul><li>expire key time(以秒为单位)–这是最常用的方式</li><li>setex(String key, int seconds, String value)–字符串独有的方式</li></ul><p>注：</p><p>  　　1. 除了字符串自己独有设置过期时间的方法外(对字符串特殊处理的方式为SETEX命令，  SETEX命令为指定的 key 设置值及其过期时间。如果 key 已经存在， SETEX 命令将会替换旧的值。)，其他方法都需要依靠expire方法来设置时间<br>  　　2. 如果没有设置时间，那缓存就是永不过期<br>  　　3. 如果设置了过期时间，之后又想让缓存永不过期，使用persist key</p><h3 id="常用方式"><a href="#常用方式" class="headerlink" title="常用方式"></a>常用方式</h3><p>一般主要包括4种处理过期方，其中expire都是以秒为单位，pexpire都是以毫秒为单位的。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">1 EXPIRE key seconds　　//将key的生存时间设置为ttl秒</span><br><span class="line">2 PEXPIRE key milliseconds　　//将key的生成时间设置为ttl毫秒</span><br><span class="line">3 EXPIREAT key timestamp　　//将key的过期时间设置为timestamp所代表的的秒数的时间戳</span><br><span class="line">4 PEXPIREAT key milliseconds-timestamp　　//将key的过期时间设置为timestamp所代表的的毫秒数的时间戳</span><br><span class="line">1、2两种方式是设置一个过期的时间段，就是咱们处理验证码最常用的策略，设置三分钟或五分钟后失效，把分钟数转换成秒或毫秒存储到Redis中。</span><br><span class="line">3、4两种方式是指定一个过期的时间 ，比如优惠券的过期时间是某年某月某日，只是单位不一样。</span><br><span class="line"></span><br><span class="line">PERSIST(移除过期时间)</span><br><span class="line">TTL(Time To Live)返回剩余生存时间，以秒为单位</span><br><span class="line">PTTL以毫秒为单位返回键的剩余生存时间</span><br></pre></td></tr></table></figure><p>Example:</p><p>localhost:6379&gt; EXPIRE str3 60<br>(integer) 1<br>localhost:6379&gt; ttl str3</p><p>过期了如何删除，先看看删除策略可分为三种：</p><ul><li><p>定时删除(对内存友好，对CPU不友好)</p></li><li><ul><li>到时间点上就把所有过期的键删除了。</li></ul></li><li><p>惰性删除(对CPU极度友好，对内存极度不友好)</p></li><li><ul><li>每次从键空间取键的时候，判断一下该键是否过期了，如果过期了就删除。</li></ul></li><li><p>定期删除(折中)</p></li><li><ul><li><strong>每隔</strong>一段时间去删除过期键，<strong>限制</strong>删除的执行时长和频率</li></ul></li></ul><p>Redis采用的是<strong>惰性删除+定期删除</strong>两种策略，所以说，在Redis里边如果过期键到了过期的时间了，未必被立马删除的！</p><p><strong>为什么要采用定期删除+惰性删除2种策略呢？</strong></p><p>如果过期就删除。假设redis里放了10万个key，都设置了过期时间，你每隔几百毫秒，就检查10万个key，那redis基本上就死了，cpu负载会很高的，消耗在你的检查过期key上了.</p><p>但是问题是，定期删除可能会导致很多过期key到了时间并没有被删除掉，那咋整呢？所以就是惰性删除了。这就是说，在你获取某个key的时候，redis会检查一下 ，这个key如果设置了过期时间那么是否过期了？如果过期了此时就会删除，不会给你返回任何东西。</p><p>并不是key到时间就被删除掉，而是你查询这个key的时候，redis再懒惰的检查一下</p><p>通过上述两种手段结合起来，保证过期的key一定会被干掉。</p><p>所以说用了上述2种策略后，下面这种现象就不难解释了：数据明明都过期了，但是还占有着内存</p><h2 id="redis管道"><a href="#redis管道" class="headerlink" title="redis管道"></a>redis管道</h2><p>redis的管道可以执行批量的操作，但是着并不意味着他是原子的，原声批量操作是原子的，而管道并不是。批量操作的好处是能有效的节约RTT的时间</p><h2 id="redis事务"><a href="#redis事务" class="headerlink" title="redis事务"></a>redis事务</h2><p>redis提供了简单的事务，它不支持事务回滚，同时也无法实现命令之间的逻辑关系计算。但是同样效果lua脚本也可以实现，但是他的功能要强大的多</p><h2 id="Redis支持LUA脚本的主要优势"><a href="#Redis支持LUA脚本的主要优势" class="headerlink" title="Redis支持LUA脚本的主要优势"></a>Redis支持LUA脚本的主要优势</h2><p>LUA脚本的融合将使Redis数据库产生的优势：</p><ul><li>高效性：减少网络开销及时延，多次redis服务器网络请求的操作，使用LUA脚本可以用一个请求完成</li><li>数据可靠性：Redis会将整个脚本作为一个整体执行，中间不会被其他命令插入。</li><li>复用性：LUA脚本执行后会永久存储在Redis服务器端，其他客户端可以直接复用</li><li>便捷性：实现程序热更新</li><li>可嵌入性：可嵌入JAVA，C#等多种编程语言，支持不同操作系统跨平台交互</li><li>简单强大：小巧轻便，资源占用率低，支持过程化和对象化的编程语言</li></ul><h2 id="redis内存管理"><a href="#redis内存管理" class="headerlink" title="redis内存管理"></a>redis内存管理</h2><h3 id="redis内存信息"><a href="#redis内存信息" class="headerlink" title="redis内存信息"></a>redis内存信息</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; info memory</span><br></pre></td></tr></table></figure><table><thead><tr><th align="left">指标</th><th align="left">含义</th></tr></thead><tbody><tr><td align="left">used_memory（重点关注）</td><td align="left">由 Redis 分配器分配的内存总量，包含了redis进程内部的开销和数据占用的内存，以字节（byte）为单位，即当前redis使用内存大小。</td></tr><tr><td align="left">used_memory_human</td><td align="left">已更直观的单位展示分配的内存总量。</td></tr><tr><td align="left">used_memory_rss（重点关注）</td><td align="left">向操作系统申请的内存大小，与 top 、 ps等命令的输出一致，即redis使用的物理内存大小。</td></tr><tr><td align="left">used_memory_rss_human</td><td align="left">已更直观的单位展示向操作系统申请的内存大小。</td></tr><tr><td align="left">used_memory_peak</td><td align="left">redis的内存消耗峰值(以字节为单位)，即历史使用记录中redis使用内存峰值。</td></tr><tr><td align="left">used_memory_peak_human</td><td align="left">以更直观的格式返回redis的内存消耗峰值</td></tr><tr><td align="left">used_memory_peak_perc</td><td align="left">使用内存达到峰值内存的百分比，used_memory&#x2F; used_memory_peak) <em>100%，即当前redis使用内存&#x2F;历史使用记录中redis使用内存峰值</em>100%</td></tr><tr><td align="left">used_memory_overhead</td><td align="left">Redis为了维护数据集的内部机制所需的内存开销，包括所有客户端输出缓冲区、查询缓冲区、AOF重写缓冲区和主从复制的backlog。</td></tr><tr><td align="left">used_memory_startup</td><td align="left">Redis服务器启动时消耗的内存</td></tr><tr><td align="left">used_memory_dataset</td><td align="left">数据实际占用的内存大小，即used_memory-used_memory_overhead</td></tr><tr><td align="left">used_memory_dataset_perc</td><td align="left">数据占用的内存大小的百分比，100%*(used_memory_dataset&#x2F;(used_memory-used_memory_startup))</td></tr><tr><td align="left">total_system_memory</td><td align="left">整个系统内存</td></tr><tr><td align="left">total_system_memory_human</td><td align="left">以更直观的格式显示整个系统内存</td></tr><tr><td align="left">used_memory_lua</td><td align="left">Lua脚本存储占用的内存</td></tr><tr><td align="left">used_memory_lua_human</td><td align="left">以更直观的格式显示Lua脚本存储占用的内存</td></tr><tr><td align="left">maxmemory</td><td align="left">Redis实例的最大内存配置，默认为0，表示没有限制</td></tr><tr><td align="left">maxmemory_human</td><td align="left">以更直观的格式显示Redis实例的最大内存配置</td></tr><tr><td align="left">maxmemory_policy</td><td align="left">当达到maxmemory时的淘汰策略</td></tr><tr><td align="left">mem_fragmentation_ratio（重点关注）</td><td align="left">碎片率，used_memory_rss&#x2F; used_memory。ratio指数&gt;1表明有内存碎片，越大表明越多，&lt;1表明正在使用虚拟内存，虚拟内存其实就是硬盘，性能比内存低得多，这是应该增强机器的内存以提高性能。一般来说，mem_fragmentation_ratio的数值在1 ~ 1.5之间是比较健康的。详解</td></tr><tr><td align="left">mem_allocator</td><td align="left">内存分配器</td></tr><tr><td align="left">active_defrag_running</td><td align="left">表示没有活动的defrag任务正在运行，1表示有活动的defrag任务正在运行（defrag:表示内存碎片整理）详解</td></tr><tr><td align="left">lazyfree_pending_objects</td><td align="left">0表示不存在延迟释放的挂起对象</td></tr></tbody></table><p> maxmemory_policy参数</p><p>​    1.volatile-lru(least recently used):最近最少使用算法，从设置了过期时间的键key中选择空转时间最长的键值对清除掉；</p><p>​    2.volatile-lfu(least frequently used):最近最不经常使用算法，从设置了过期时间的键中选择某段时间之内使用频次最小的键值对清除掉；</p><p>​    3.volatile-ttl:从设置了过期时间的键中选择过期时间最早的键值对清除；</p><p>​    4.volatile-random:从设置了过期时间的键中，随机选择键进行清除；</p><p>​    5.allkeys-lru:最近最少使用算法，从所有的键中选择空转时间最长的键值对清除；</p><p>​    6.allkeys-lfu:最近最不经常使用算法，从所有的键中选择某段时间之内使用频次最少的键值对清除；</p><p>​    7.allkeys-random:所有的键中，随机选择键进行删除；</p><p>​    8.noeviction:不做任何的清理工作，在redis的内存超过限制之后，所有的写入操作都会返回错误；但是读操作都能正常的进行;s</p><h3 id="内存消耗划分"><a href="#内存消耗划分" class="headerlink" title="内存消耗划分"></a>内存消耗划分</h3><p>used_memory：</p><p><strong>1.自身内存</strong></p><p>Redis主进程本身运行肯定需要占用内存，如代码、常量池等等；这部分内存大约几兆，在大多数生产环境中与Redis数据占用的内存相比可以忽略。这部分内存不是由jemalloc分配，因此不会统计在used_memory中。</p><p>补充说明：除了主进程外，Redis创建的子进程运行也会占用内存，如Redis执行AOF、RDB重写时创建的子进程。当然，这部分内存不属于Redis进程，也不会统计在used_memory和used_memory_rss中。</p><p><strong>2.对象内存</strong></p><p>我们知道redis所有的数据基于kv数据类型，每次创建键值对，至少创建俩个对象：key对象和value对象。其中key对象都是字符串，而vaule对象主要包含5种基本类型</p><p><strong>3.缓冲内存</strong></p><p>缓冲内存包括客户端缓冲区、复制积压缓冲区、AOF缓冲区等；其中，客户端缓冲存储客户端连接的输入输出缓冲；复制积压缓冲用于部分复制功能；AOF缓冲区用于在进行AOF重写时，保存最近的写入命令。在了解相应功能之前，不需要知道这些缓冲的细节；这部分内存由jemalloc分配，因此会统计在used_memory中。</p><p><strong>4.内存碎片</strong></p><p>redis默认内存分配器采用的mem_allocator:jemalloc-5.1.0，可选的分配器还有，glibc，tcmalloc。</p><p>内存碎片是Redis在分配、回收物理内存过程中产生的。例如，如果对数据的更改频繁，而且数据之间的大小相差很大，可能导致redis释放的空间在物理内存中并没有释放，但redis又无法有效利用，这就形成了内存碎片。内存碎片不会统计在used_memory中。</p><p>内存碎片的产生与对数据进行的操作、数据的特点等都有关；此外，与使用的内存分配器也有关系：如果内存分配器设计合理，可以尽可能的减少内存碎片的产生。后面将要说到的jemalloc便在控制内存碎片方面做的很好。</p><p>如果Redis服务器中的内存碎片已经很大，可以通过安全重启的方式减小内存碎片：因为重启之后，Redis重新从备份文件中读取数据，在内存中进行重排，为每个数据重新选择合适的内存单元，减小内存碎片。</p><p>jemalloc作为Redis的默认内存分配器，在减小内存碎片方面做的相对比较好。jemalloc在64位系统中，将内存空间划分为小、大、巨大三个范围；每个范围内又划分了许多小的内存块单位；当Redis存储数据时，会选择大小最合适的内存块进行存储。所以当我们保存5kb对象是可能申请8kb的块存储剩下的不能分配给其他对象存储了。</p><h3 id="优化内存占用"><a href="#优化内存占用" class="headerlink" title="优化内存占用"></a>优化内存占用</h3><p>了解redis的内存模型，对优化redis内存占用有很大帮助。下面介绍几种优化场景。</p><p>（1）利用jemalloc特性进行优化</p><p>上一小节所讲述的90000个键值便是一个例子。由于jemalloc分配内存时数值是不连续的，因此key&#x2F;value字符串变化一个字节，可能会引起占用内存很大的变动；在设计时可以利用这一点。</p><p>例如，如果key的长度如果是8个字节，则SDS为17字节，jemalloc分配32字节；此时将key长度缩减为7个字节，则SDS为16字节，jemalloc分配16字节；则每个key所占用的空间都可以缩小一半。</p><p>（2）使用整型&#x2F;长整型</p><p>如果是整型&#x2F;长整型，Redis会使用int类型（8字节）存储来代替字符串，可以节省更多空间。因此在可以使用长整型&#x2F;整型代替字符串的场景下，尽量使用长整型&#x2F;整型。</p><p>（3）共享对象</p><p>利用共享对象，可以减少对象的创建（同时减少了redisObject的创建），节省内存空间。目前redis中的共享对象只包括10000个整数（0-9999）；可以通过调整REDIS_SHARED_INTEGERS参数提高共享对象的个数；例如将REDIS_SHARED_INTEGERS调整到20000，则0-19999之间的对象都可以共享。</p><p>考虑这样一种场景：论坛网站在redis中存储了每个帖子的浏览数，而这些浏览数绝大多数分布在0-20000之间，这时候通过适当增大REDIS_SHARED_INTEGERS参数，便可以利用共享对象节省内存空间。</p><p>（4）避免过度设计</p><p>然而需要注意的是，不论是哪种优化场景，都要考虑内存空间与设计复杂度的权衡；而设计复杂度会影响到代码的复杂度、可维护性。</p><p>如果数据量较小，那么为了节省内存而使得代码的开发、维护变得更加困难并不划算；还是以前面讲到的90000个键值对为例，实际上节省的内存空间只有几MB。但是如果数据量有几千万甚至上亿，考虑内存的优化就比较必要了。</p>]]></content>
      
      
      <categories>
          
          <category> redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mongo日常命令笔记</title>
      <link href="/post/3898c7fc.html"/>
      <url>/post/3898c7fc.html</url>
      
        <content type="html"><![CDATA[<h1 id="mongo命令"><a href="#mongo命令" class="headerlink" title="mongo命令"></a>mongo命令</h1><h2 id="group-and-distinct"><a href="#group-and-distinct" class="headerlink" title="group and distinct"></a>group and distinct</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">demo data:</span><br><span class="line">db.getCollection(&#x27;test111&#x27;).insert([</span><br><span class="line">&#123;&quot;orderID&quot; : &quot;30688&quot;, &quot;region&quot; : &quot;CO&quot;, &quot;customerID&quot; : &quot;11396783&quot;, &quot;productID&quot; : &quot;13001&quot;&#125;,</span><br><span class="line">&#123;&quot;orderID&quot; : &quot;30688&quot;, &quot;region&quot; : &quot;CO&quot;, &quot;customerID&quot; : &quot;11396783&quot;, &quot;productID&quot; : &quot;8002&quot;&#125;,</span><br><span class="line">&#123;&quot;orderID&quot; : &quot;30688&quot;, &quot;region&quot; : &quot;CO&quot;, &quot;customerID&quot; : &quot;11396783&quot;, &quot;productID&quot; : &quot;5001&quot;&#125;,</span><br><span class="line">&#123;&quot;orderID&quot; : &quot;89765&quot;, &quot;region&quot; : &quot;CA&quot;, &quot;customerID&quot; : &quot;54157526&quot;, &quot;productID&quot; : &quot;7412&quot;&#125;,</span><br><span class="line">&#123;&quot;orderID&quot; : &quot;89765&quot;, &quot;region&quot; : &quot;CA&quot;, &quot;customerID&quot; : &quot;54157526&quot;, &quot;productID&quot; : &quot;5198&quot;&#125;,</span><br><span class="line">&#123;&quot;orderID&quot; : &quot;21546&quot;, &quot;region&quot; : &quot;KA&quot;, &quot;customerID&quot; : &quot;20103585&quot;, &quot;productID&quot; : &quot;6851&quot;&#125;,</span><br><span class="line">&#123;&quot;orderID&quot; : &quot;21546&quot;, &quot;region&quot; : &quot;KA&quot;, &quot;customerID&quot; : &quot;20103585&quot;, &quot;productID&quot; : &quot;7412&quot;&#125;,</span><br><span class="line">&#123;&quot;orderID&quot; : &quot;21546&quot;, &quot;region&quot; : &quot;KA&quot;, &quot;customerID&quot; : &quot;20103585&quot;, &quot;productID&quot; : &quot;6987&quot;&#125;,</span><br><span class="line">&#123;&quot;orderID&quot; : &quot;21794&quot;, &quot;region&quot; : &quot;NY&quot;, &quot;customerID&quot; : &quot;78125522&quot;, &quot;productID&quot; : &quot;13001&quot;&#125;,</span><br><span class="line">])</span><br><span class="line">example:</span><br><span class="line">SQL Query: (group by &amp; count of distinct)</span><br><span class="line"></span><br><span class="line">select city,count(distinct(emailId)) from TransactionDetails group by city;</span><br><span class="line">Equivalent mongo query would look like this:</span><br><span class="line"></span><br><span class="line">db.TransactionDetails.aggregate([ </span><br><span class="line">&#123;$group:&#123;_id:&#123;&quot;CITY&quot; : &quot;$cityName&quot;&#125;,uniqueCount: &#123;$addToSet: &quot;$emailId&quot;&#125;&#125;&#125;,</span><br><span class="line">&#123;$project:&#123;&quot;CITY&quot;:1,uniqueCustomerCount:&#123;$size:&quot;$uniqueCount&quot;&#125;&#125; &#125; </span><br><span class="line">]);</span><br><span class="line">exercise:</span><br><span class="line">db.getCollection(&#x27;tal_7-7_step4&#x27;).aggregate([</span><br><span class="line">   &#123;&quot;$group&quot;: &#123;_id: &#123;&quot;region&quot;:&quot;$region&quot;&#125;, &quot;uniqueCount&quot;: &#123;&quot;$addToSet&quot;: &quot;$orderID&quot;&#125;&#125;&#125;,</span><br><span class="line">   &#123;&quot;$project&quot;:&#123;&quot;region&quot;:1,&quot;unique_count&quot;:&#123;$size:&quot;$uniqueCount&quot;&#125;&#125;&#125;</span><br><span class="line">]);</span><br><span class="line"></span><br><span class="line">db.getCollection(&#x27;xx&#x27;).aggregate([</span><br><span class="line">  &#123;</span><br><span class="line">    &quot;$match&quot;: &#123;</span><br><span class="line">      &quot;ts_short&quot;: &#123;</span><br><span class="line">        &quot;$gte&quot;: &quot;2021-02-22&quot;,</span><br><span class="line">        &quot;$lte&quot;: &quot;2021-02-24&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    &quot;$match&quot;: &#123;</span><br><span class="line">      &quot;data&quot;: &#123;</span><br><span class="line">        &quot;$exists&quot;: true</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    &quot;$group&quot;: &#123;</span><br><span class="line">      &quot;_id&quot;: &#123;</span><br><span class="line">        &quot;city_name&quot;: &quot;$city_name&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;uniqueCount&quot;: &#123;</span><br><span class="line">        &quot;$addToSet&quot;: &quot;$cla_id&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    &quot;$project&quot;: &#123;</span><br><span class="line">      &quot;city_name&quot;: 1,</span><br><span class="line">      &quot;unique_count&quot;: &#123;</span><br><span class="line">        &quot;$size&quot;: &quot;$uniqueCount&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">])</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="连接远程mongo"><a href="#连接远程mongo" class="headerlink" title="连接远程mongo"></a>连接远程mongo</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mongo xxxx/admin -u xx -p</span><br><span class="line"></span><br><span class="line">use DATABASE_NAME # 如果数据库不存在，则创建数据库，否则切换到指定数据库。</span><br><span class="line">db   ---显示当前使用的数据库名称</span><br><span class="line">show dbs</span><br></pre></td></tr></table></figure><h2 id="explain"><a href="#explain" class="headerlink" title="explain"></a>explain</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.pk_rank_all.explain().<span class="keyword">distinct</span>(&quot;_sub_room_id&quot;, &#123;<span class="string">&#x27;status&#x27;</span>: <span class="number">0</span>, <span class="string">&#x27;_ts_string&#x27;</span>:  &#123;<span class="string">&#x27;$gte&#x27;</span>: <span class="string">&#x27;2021-02-22&#x27;</span>&#125;, <span class="string">&#x27;_live_id&#x27;</span>: <span class="string">&#x27;5882382814106629&#x27;</span>&#125;)</span><br></pre></td></tr></table></figure><h2 id="查询数据不为空"><a href="#查询数据不为空" class="headerlink" title="查询数据不为空"></a>查询数据不为空</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.getCollection(&#x27;xx&#x27;).find(&#123;&quot;data.0&quot;:&#123;$exists: true&#125;&#125;)</span><br></pre></td></tr></table></figure><h2 id="查询不为空"><a href="#查询不为空" class="headerlink" title="查询不为空"></a>查询不为空</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">db.getCollection(<span class="string">&#x27;xx&#x27;</span>).find(&#123;<span class="string">&quot;result.cateList&quot;</span>:&#123;<span class="string">&quot;<span class="variable">$ne</span>&quot;</span>:null&#125;&#125;, &#123;<span class="string">&quot;result.cateList&quot;</span>: 1, <span class="string">&quot;title&quot;</span>: 1 &#125;)</span><br><span class="line"></span><br><span class="line">db.getCollection(<span class="string">&#x27;xx&#x27;</span>).find(&#123;<span class="string">&quot;result.cateList&quot;</span>:null&#125;)</span><br><span class="line"></span><br><span class="line">db.getCollection(<span class="string">&#x27;xxx&#x27;</span>).find(&#123;<span class="string">&quot;data&quot;</span>:&#123;<span class="variable">$exists</span>: <span class="literal">true</span>&#125;&#125;).<span class="built_in">sort</span>(&#123;_id:-1&#125;)</span><br></pre></td></tr></table></figure><h2 id="查询列表存在"><a href="#查询列表存在" class="headerlink" title="查询列表存在"></a>查询列表存在</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.getCollection(&#x27;xxx&#x27;).find(&#123;&quot;data.list.0&quot;:&#123;&#x27;$exists&#x27;: true&#125;&#125;)</span><br></pre></td></tr></table></figure><h2 id="查询字段为空"><a href="#查询字段为空" class="headerlink" title="查询字段为空"></a>查询字段为空</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">db.getCollection(&#x27;xx&#x27;).find(&#123;&quot;cityName&quot;:&#123;$exists: true&#125;, &quot;ts_string&quot;: &quot;2020-12-10&quot;&#125;)</span><br><span class="line">db.getCollection(&#x27;xx&#x27;).find(&#123;&quot;cityName&quot;:&#123;&quot;$eq&quot;:null&#125;, &quot;ts_string&quot;: &quot;2020-12-10&quot;&#125;)</span><br><span class="line">db.getCollection(&#x27;xx&#x27;).find(&#123;&quot;ts_string&quot;: &quot;2021-04-09&quot;,&quot;cityName&quot;:&#123;&quot;$ne&quot;:null, &quot;$exists&quot;: true&#125;&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">db.getCollection(&#x27;xx&#x27;).update(&#123;&quot;read_status&quot;:1&#125;,&#123;$set:&#123;&quot;read_status&quot;:0&#125;&#125;,&#123;multi:true&#125;)</span><br><span class="line"></span><br><span class="line">db.getCollection(&#x27;xx&#x27;).update(&#123;$and:[&#123;&quot;read_status&quot;:1&#125;,&#123;&quot;record_time&quot;:/2018-12/&#125;]&#125;,&#123;$set:&#123;&quot;read_status&quot;:0&#125;&#125;,&#123;multi:true&#125;)</span><br><span class="line"> </span><br></pre></td></tr></table></figure><h2 id="查询制定字段"><a href="#查询制定字段" class="headerlink" title="查询制定字段"></a>查询制定字段</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">db.getCollection(&#x27;xx&#x27;).find(&#123;&quot;data.cla_id&quot;: &quot;43568ad24efa41d48d2a2a62abe39598&quot;&#125;,&#123;&quot;ts_short&quot;:1, &quot;_id&quot;:0, &quot;data.cla_quota_num&quot;:1, &quot;data.max_persons&quot;:1, &quot;data.can_apply_persons&quot;:1&#125;)</span><br><span class="line"></span><br><span class="line">db.getCollection(&#x27;xx&#x27;).find(&#123;&quot;data.cla_id&quot;: &quot;43568ad24efa41d48d2a2a62abe39598&quot;&#125;, &#123;&quot;data&quot;: &#123;$elemMatch:&#123;&quot;cla_id&quot;:&quot;43568ad24efa41d48d2a2a62abe39598&quot;&#125;&#125;&#125;, &#123;&quot;data.cla_id&quot;:1, &quot;ts_short&quot;:1, &quot;_id&quot;:0, &quot;data.cla_quota_num&quot;:1, &quot;data.max_persons&quot;:1, &quot;data.can_apply_persons&quot;:1&#125;).sort(&#123;_id:-1&#125;)</span><br><span class="line"></span><br><span class="line">db.getCollection(&#x27;xx&#x27;).aggregate([ </span><br><span class="line">&#123;&#x27;$unwind&#x27;: &quot;$data&quot;&#125;,</span><br><span class="line">&#123;&quot;$match&quot;: &#123;&quot;data.cla_id&quot;:&quot;43568ad24efa41d48d2a2a62abe39598&quot;&#125;&#125;, </span><br><span class="line">&#123;&quot;$project&quot;:&#123;&quot;data.cla_id&quot;:1, &quot;ts_short&quot;:1, &quot;_id&quot;:0, &quot;data.cla_quota_num&quot;:1, &quot;data.max_persons&quot;:1, &quot;data.can_apply_persons&quot;:1&#125;&#125;,</span><br><span class="line">&#123;&#x27;$sort&#x27;: &#123;&#x27;_id&#x27;: -1&#125;&#125;,</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line">db.getCollection(&#x27;xx&#x27;).aggregate([ </span><br><span class="line">&#123;&#x27;$unwind&#x27;: &quot;$data&quot;&#125;,</span><br><span class="line">&#123;&quot;$match&quot;: &#123;&quot;data.cla_id&quot;:&quot;43568ad24efa41d48d2a2a62abe39598&quot;&#125;&#125;, </span><br><span class="line">&#123;&quot;$project&quot;:&#123;&quot;data.cla_id&quot;:1, &quot;ts_short&quot;:1, &quot;_id&quot;:0, &quot;data.cla_quota_num&quot;:1, &quot;data.max_persons&quot;:1, &quot;data.can_apply_persons&quot;:1&#125;&#125;,</span><br><span class="line">&#123;&#x27;$sort&#x27;: &#123;&#x27;_id&#x27;: -1&#125;&#125;,</span><br><span class="line">]).cursor(10)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="按照时间范围查询"><a href="#按照时间范围查询" class="headerlink" title="按照时间范围查询"></a>按照时间范围查询</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">db.getCollection(&quot;xx&quot;).find(&#123;&quot;ts_short&quot;:&#123;&quot;$gte&quot;:&quot;2020-10-09&quot;,&quot;$lte&quot;:&quot;2020-10-09&quot;&#125;&#125;).count();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">db.getCollection(&#x27;xx&#x27;).find(&#123;&quot;series_id&quot;:431, &quot;_ts_string&quot;:&quot;2020-11-28&quot;, &quot;_batch&quot;:&#123;&quot;$gte&quot;:&quot;2020-10-09&quot;,&quot;$lte&quot;:&quot;2020-10-09&quot;&#125;&#125;).count()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="查询具体某一天的数据"><a href="#查询具体某一天的数据" class="headerlink" title="查询具体某一天的数据"></a>查询具体某一天的数据</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.getCollection(&quot;xx&quot;).find(&#123;&quot;ts_short&quot;:&quot;2020-11-09&quot;&#125;).count();</span><br></pre></td></tr></table></figure><h2 id="去重查询"><a href="#去重查询" class="headerlink" title="去重查询"></a>去重查询</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">db.getCollection(<span class="string">&#x27;xxx&#x27;</span>).distinct(<span class="string">&quot;data.classList.code&quot;</span>)</span><br><span class="line"></span><br><span class="line">db.getCollection(<span class="string">&#x27;xxx&#x27;</span>).distinct(<span class="string">&quot;data.classList.code&quot;</span>, &#123;<span class="string">&quot;ts_short&quot;</span>:<span class="string">&quot;2020-11-21&quot;</span>&#125;)</span><br><span class="line"></span><br><span class="line">db.getCollection(<span class="string">&#x27;xxx&#x27;</span>).distinct(<span class="string">&quot;data.classList.code&quot;</span>, &#123;<span class="string">&quot;ts_short&quot;</span>:<span class="string">&quot;2020-11-25&quot;</span>, <span class="string">&quot;city_name&quot;</span>:<span class="string">&quot;北京&quot;</span>&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">db.getCollection(<span class="string">&#x27;xx&#x27;</span>).distinct(<span class="string">&#x27;data.classList.code&#x27;</span>,&#123;<span class="string">&#x27;data.classList.classCapacityName&#x27;</span>:&#123;<span class="string">&#x27;$in&#x27;</span>:[<span class="string">&#x27;1人&#x27;</span>,<span class="string">&#x27;1对1&#x27;</span>]&#125;,<span class="string">&#x27;ts_short&#x27;</span>:&#123;<span class="string">&#x27;$gte&#x27;</span>:<span class="string">&#x27;2020-11-24&#x27;</span>,<span class="string">&#x27;$lte&#x27;</span>:<span class="string">&#x27;2020-11-25&#x27;</span>&#125;&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">db.getCollection(<span class="string">&#x27;xx&#x27;</span>).distinct(<span class="string">&quot;box_no&quot;</span>, &#123;<span class="string">&quot;series_id&quot;</span>:431, <span class="string">&quot;_ts_string&quot;</span>:<span class="string">&quot;2020-11-28&quot;</span>, <span class="string">&quot;_batch&quot;</span>:&#123;<span class="string">&quot;<span class="variable">$gte</span>&quot;</span>:<span class="string">&quot;2020-11-28 08:00:00&quot;</span>,<span class="string">&quot;<span class="variable">$lte</span>&quot;</span>:<span class="string">&quot;2020-11-28 10:00:00&quot;</span>&#125;&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">db.getCollection(<span class="string">&#x27;xxx&#x27;</span>).distinct(<span class="string">&quot;set_no&quot;</span>, &#123;<span class="string">&quot;_ts_string&quot;</span>:<span class="string">&quot;2020-12-08&quot;</span>, <span class="string">&quot;goods_id&quot;</span>:576&#125;)</span><br><span class="line">396</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="聚合-aggregate"><a href="#聚合-aggregate" class="headerlink" title="聚合(aggregate)"></a>聚合(aggregate)</h2><p>参考：<a href="https://docs.mongodb.com/manual/reference/operator/aggregation">https://docs.mongodb.com/manual/reference/operator/aggregation</a></p><table><thead><tr><th>SQL 操作&#x2F;函数</th><th>mongodb聚合操作</th></tr></thead><tbody><tr><td>where</td><td>$match</td></tr><tr><td>group by</td><td>$group</td></tr><tr><td>having</td><td>$match</td></tr><tr><td>select</td><td>$project</td></tr><tr><td>order by</td><td>$sort</td></tr><tr><td>limit</td><td>$limit</td></tr><tr><td>sum()</td><td>$sum</td></tr><tr><td>count()</td><td>$sum</td></tr></tbody></table><h2 id="过滤筛选"><a href="#过滤筛选" class="headerlink" title="过滤筛选"></a>过滤筛选</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">db.xx.aggregate([&#123;&quot;$match&quot;:&#123;&quot;count&quot;:&#123;&quot;$gt&quot;:800&#125;&#125;&#125;])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">db.getCollection(&#x27;xx&#x27;).aggregate([&#123;&#x27;$project&#x27;:&#123;&quot;nane&quot;:&quot;data.classInfo.name&quot;, &quot;code&quot;:&quot;data.classInfo.code&quot;&#125;&#125;])</span><br></pre></td></tr></table></figure><h2 id="分组统计"><a href="#分组统计" class="headerlink" title="分组统计"></a>分组统计</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">db.getCollection(<span class="string">&#x27;xx&#x27;</span>).aggregate([&#123;<span class="string">&quot;<span class="variable">$group</span>&quot;</span>: &#123;<span class="string">&quot;_id&quot;</span>:<span class="string">&quot;<span class="variable">$city_name</span>&quot;</span>, count: &#123; <span class="variable">$sum</span>: 1 &#125;&#125;&#125;])</span><br><span class="line"></span><br><span class="line">db.getCollection(<span class="string">&#x27;xx&#x27;</span>).aggregate([&#123;<span class="string">&quot;<span class="variable">$match</span>&quot;</span>:&#123;<span class="string">&quot;ts_short&quot;</span>:<span class="string">&quot;2020-11-25&quot;</span>&#125;&#125;, &#123;<span class="string">&quot;<span class="variable">$group</span>&quot;</span>:&#123;<span class="string">&quot;_id&quot;</span>:<span class="string">&quot;<span class="variable">$city_name</span>&quot;</span>, <span class="string">&quot;code&quot;</span>:<span class="string">&quot;<span class="variable">$data</span>.classList.code&quot;</span>,count: &#123; <span class="variable">$sum</span>: 1 &#125;&#125;&#125;])</span><br><span class="line"></span><br><span class="line">db.getCollection(<span class="string">&#x27;xx&#x27;</span>).aggregate([&#123;<span class="string">&quot;<span class="variable">$match</span>&quot;</span>:&#123;<span class="string">&quot;ts_short&quot;</span>:<span class="string">&quot;2020-11-25&quot;</span>&#125;&#125;, &#123;<span class="string">&quot;<span class="variable">$group</span>&quot;</span>:&#123;<span class="string">&quot;_id&quot;</span>:&#123;<span class="string">&quot;city_name&quot;</span>:<span class="string">&quot;<span class="variable">$city_name</span>&quot;</span>,<span class="string">&quot;code&quot;</span>:<span class="string">&quot;<span class="variable">$data</span>.classList.code&quot;</span>&#125;&#125;&#125;])</span><br><span class="line"></span><br><span class="line">db.getCollection(<span class="string">&#x27;xx&#x27;</span>).aggregate([&#123;<span class="string">&quot;<span class="variable">$match</span>&quot;</span>:&#123;<span class="string">&quot;ts_short&quot;</span>:&#123;<span class="string">&#x27;$gte&#x27;</span>:<span class="string">&#x27;2020-12-20&#x27;</span>,<span class="string">&#x27;$lte&#x27;</span>:<span class="string">&#x27;2020-12-28&#x27;</span>&#125;&#125;&#125;,&#123;<span class="string">&quot;<span class="variable">$group</span>&quot;</span>:&#123;<span class="string">&quot;_id&quot;</span>:<span class="string">&quot;<span class="variable">$ts_short</span>&quot;</span>, count: &#123; <span class="variable">$sum</span>: 1 &#125;&#125;&#125;])</span><br><span class="line"></span><br><span class="line">db.getCollection(<span class="string">&#x27;xx&#x27;</span>).aggregate([&#123;<span class="string">&quot;<span class="variable">$match</span>&quot;</span>:&#123;<span class="string">&quot;ts_short&quot;</span>:&#123;<span class="string">&#x27;$gte&#x27;</span>:<span class="string">&#x27;2020-12-01&#x27;</span>,<span class="string">&#x27;$lte&#x27;</span>:<span class="string">&#x27;2020-12-28&#x27;</span>&#125;&#125;&#125;,&#123;<span class="string">&quot;<span class="variable">$group</span>&quot;</span>:&#123;<span class="string">&quot;_id&quot;</span>:<span class="string">&quot;<span class="variable">$ts_short</span>&quot;</span>, count: &#123; <span class="variable">$sum</span>: 1 &#125;&#125;&#125;, &#123;<span class="string">&quot;<span class="variable">$sort</span>&quot;</span>:&#123;_id:-1&#125;&#125;])</span><br><span class="line"></span><br><span class="line">db.getCollection(<span class="string">&#x27;xx&#x27;</span>).aggregate([&#123;<span class="string">&#x27;$match&#x27;</span>: &#123;<span class="string">&#x27;batch_id&#x27;</span>: &#123;<span class="string">&#x27;$gte&#x27;</span>: <span class="string">&#x27;2020-12-01&#x27;</span>, <span class="string">&#x27;$lte&#x27;</span>: <span class="string">&#x27;2020-12-28&#x27;</span>&#125;&#125;&#125;, &#123;<span class="string">&#x27;$group&#x27;</span>: &#123;<span class="string">&#x27;_id&#x27;</span>: &#123;<span class="string">&#x27;date&#x27;</span>: <span class="string">&#x27;$batch_id&#x27;</span>&#125;, count: &#123;<span class="string">&#x27;$sum&#x27;</span>: 1&#125;&#125;&#125;, &#123;<span class="string">&#x27;$sort&#x27;</span>: &#123;<span class="string">&#x27;_id&#x27;</span>: -1&#125;&#125;])</span><br></pre></td></tr></table></figure><h3 id="联表查询"><a href="#联表查询" class="headerlink" title="联表查询"></a>联表查询</h3><p><strong>特别注意：</strong></p><ol><li><p>只能两个表联合查询</p></li><li><p>不能跨库联合</p></li><li><p>from的集合不能分片</p><p>在<a href="https://www.docs4dev.com/docs/zh/mongodb/v3.6/reference/reference-operator-aggregation-lookup.html#pipe._S_lookup">$lookup</a>阶段，<code>from</code>集合不能为<a href="https://www.docs4dev.com/docs/zh/mongodb/v3.6/reference/sharding.html">sharded</a>。但是，可以对运行<a href="https://www.docs4dev.com/docs/zh/mongodb/v3.6/reference/reference-method-db.collection.aggregate.html#db.collection.aggregate">aggregate()</a>方法的集合进行分片。也就是说，在下面：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">db.collection.aggregate([</span><br><span class="line">   &#123; $lookup: &#123; from: &quot;fromCollection&quot;, ... &#125; &#125;</span><br><span class="line">])</span><br></pre></td></tr></table></figure><ul><li><code>collection</code>可以被分片。</li><li><code>fromCollection</code>无法分片。</li></ul><p>这样，要将分片集合与未分片集合连接在一起，可以在分片集合上运行聚合并查找未分片集合；例如。：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">db.shardedCollection.aggregate([</span><br><span class="line">   &#123; $lookup: &#123; from: &quot;unshardedCollection&quot;, ... &#125; &#125;</span><br><span class="line">])</span><br></pre></td></tr></table></figure><p>或者，或者要加入多个分片集合，请考虑：</p><ul><li>修改 Client 端应用程序以执行手动查找，而不是使用<a href="https://www.docs4dev.com/docs/zh/mongodb/v3.6/reference/reference-operator-aggregation-lookup.html#pipe._S_lookup">$lookup</a>聚合阶段。</li><li>如果可能，请使用<a href="https://www.docs4dev.com/docs/zh/mongodb/v3.6/reference/core-data-model-design.html#data-modeling-embedding">嵌入式数据模型</a>消除加入集合的需要</li></ul></li></ol><p><strong>$lookup 语法如下:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   $lookup:</span><br><span class="line">     &#123;</span><br><span class="line">       from: &lt;collection to join&gt;,   #右集合</span><br><span class="line">       localField: &lt;field from the input documents&gt;,  #左集合 join字段</span><br><span class="line">       foreignField: &lt;field from the documents of the &quot;from&quot; collection&gt;, #右集合 join字段</span><br><span class="line">       as: &lt;output array field&gt;   #新生成字段（类型array）</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th>Field</th><th>Description</th></tr></thead><tbody><tr><td><code>from</code></td><td>右集合，指定在同一数据库中执行连接的集合。此集合不能shared分片。</td></tr><tr><td><code>localField</code></td><td>指定左集合（db.collectionname）匹配的字段。如果左集合不包含localField，$lookup 视为null值来匹配。</td></tr><tr><td><code>foreignField</code></td><td>指定from集合（右集合）用来匹配的字段。如果集合不包含该字段，$lookup 视为null值来匹配。</td></tr><tr><td><code>as</code></td><td>指定要添加到输入文档的新数组字段的名称。新的数组字段包含from集合中匹配的文档。如果在文档中指定的名称已经存在，现有的领域覆盖。</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">db.getCollection(&quot;A表&quot;).aggregate([</span><br><span class="line">&#123;</span><br><span class="line">$lookup:&#123;</span><br><span class="line"><span class="keyword">from</span>:&quot;B表&quot;,</span><br><span class="line">localField:&quot;A_id&quot;, # 主集合的字段</span><br><span class="line">foreignField:&quot;B_id&quot;, # 被查集合的字段</span><br><span class="line"><span class="keyword">as</span>:&quot;B_list&quot; # 保存查询结果的字段名</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">db.getCollection(&quot;luckin_existed_shops&quot;).aggregate([</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">&#x27;$match&#x27;</span>:&#123;</span><br><span class="line"><span class="string">&#x27;ts_string&#x27;</span>: &#123;<span class="string">&#x27;$gte&#x27;</span>: <span class="string">&#x27;2020-12-28&#x27;</span>, <span class="string">&#x27;$lte&#x27;</span>: <span class="string">&#x27;2020-12-28&#x27;</span>&#125;</span><br><span class="line">&#125;&#125;,</span><br><span class="line">&#123;</span><br><span class="line">&quot;$lookup&quot;:&#123;</span><br><span class="line">&quot;from&quot;:&quot;luckin_all_shops_detail&quot;,</span><br><span class="line">&quot;localField&quot;:&quot;shopId&quot;,</span><br><span class="line">&quot;foreignField&quot;:&quot;deptId&quot;, </span><br><span class="line">&quot;as&quot;:&quot;luck_shops&quot; </span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line">])</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="过滤统计"><a href="#过滤统计" class="headerlink" title="过滤统计"></a>过滤统计</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">db.web.aggregate([</span><br><span class="line">    &#123;</span><br><span class="line">        //解析list</span><br><span class="line">        $unwind: &quot;$tasks&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">//     &#123;</span><br><span class="line">//         //去掉无效数据 进行数据过滤</span><br><span class="line">//         $match: &#123;</span><br><span class="line">//             &quot;$and&quot;: [&#123;</span><br><span class="line">//                 &quot;tasks.status&quot;: &#123;</span><br><span class="line">//                     $ne: []</span><br><span class="line">//                 &#125;</span><br><span class="line">//             &#125;, &#123;</span><br><span class="line">//                 &quot;tasks.status&quot;: &#123;</span><br><span class="line">//                     $ne: 0</span><br><span class="line">//                 &#125;</span><br><span class="line">//             &#125;]</span><br><span class="line">//         &#125;</span><br><span class="line">//     &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        //重构表格</span><br><span class="line">        $project: &#123;</span><br><span class="line">            _id: 0,</span><br><span class="line">            type: &quot;$tasks.status&quot;, </span><br><span class="line">            // 将tasks.status 转换成 别名 type 类似SQL中的AS别名</span><br><span class="line">            result: &#123;              </span><br><span class="line">            // 将tasks.counts 转换成 别名 result</span><br><span class="line">                $cond: &#123;</span><br><span class="line">                    //判断配型 数组取长度 数字取值</span><br><span class="line">                    if : &#123;</span><br><span class="line">                        $eq: [&#123;</span><br><span class="line">                            &quot;$type&quot;: &quot;$tasks.counts&quot;</span><br><span class="line">                        &#125;, &quot;array&quot;]</span><br><span class="line">                    &#125;,</span><br><span class="line">                    then: &#123;</span><br><span class="line">                        &quot;$size&quot;: &quot;$tasks.counts&quot;</span><br><span class="line">                    &#125;,</span><br><span class="line">                    else : &quot;$tasks.counts&quot;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        //按照type统计求合</span><br><span class="line">        $group: &#123;</span><br><span class="line">            _id: &quot;$type&quot;,</span><br><span class="line">            count: &#123;</span><br><span class="line">                $sum: &quot;$result&quot; //对应上方重构后的数据别名,进行统计</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="拆分数据查询"><a href="#拆分数据查询" class="headerlink" title="拆分数据查询"></a>拆分数据查询</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">db.getCollection(&#x27;xx&#x27;).aggregate([</span><br><span class="line">&#123;&quot;$match&quot;: </span><br><span class="line">    &#123;&quot;ts_short&quot;: </span><br><span class="line">        &#123;&#x27;$gte&#x27;: &#x27;2021-01-11&#x27;, &#x27;$lte&#x27;: &#x27;2021-01-13&#x27;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">&#123;</span><br><span class="line">//解析list</span><br><span class="line">&#x27;$unwind&#x27;: &quot;$data&quot;,</span><br><span class="line">&#125;,</span><br><span class="line">&#123;&#x27;$group&#x27;: </span><br><span class="line">&#123;</span><br><span class="line">    &#x27;_id&#x27;: 0,</span><br><span class="line">    &#x27;count&#x27;: &#123;&#x27;$sum&#x27;: 1&#125;,</span><br><span class="line">&#125;&#125;,</span><br><span class="line">])</span><br></pre></td></tr></table></figure><h2 id="mongo创建索引"><a href="#mongo创建索引" class="headerlink" title="mongo创建索引"></a>mongo创建索引</h2><p><a href="https://www.runoob.com/mongodb/mongodb-indexing.html">https://www.runoob.com/mongodb/mongodb-indexing.html</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">db.xxx.ensureIndex(&#123;_crawler_batch_id:1&#125;,&#123;background:true&#125;);</span><br><span class="line">&#123;</span><br><span class="line">    &quot;ts&quot; : 1.0</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="mongo的分片"><a href="#mongo的分片" class="headerlink" title="mongo的分片"></a>mongo的分片</h2><p>在Mongodb里面存在另一种集群，就是分片技术,可以满足MongoDB数据量大量增长的需求。</p><p>当MongoDB存储海量的数据时，一台机器可能不足以存储数据，也可能不足以提供可接受的读写吞吐量。这时，我们就可以通过在多台机器上分割数据，使得数据库系统能存储和处理更多的数据。</p><h3 id="查看当前的数据所占"><a href="#查看当前的数据所占" class="headerlink" title="查看当前的数据所占"></a>查看当前的数据所占</h3><h3 id="查看当前的collection的分片情况"><a href="#查看当前的collection的分片情况" class="headerlink" title="查看当前的collection的分片情况"></a>查看当前的collection的分片情况</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.&lt;collection&gt;.stats()</span><br></pre></td></tr></table></figure><p>&#x2F;data&#x2F;code&#x2F;Ctrip&#x2F;ctrip</p><h3 id="分片的操作"><a href="#分片的操作" class="headerlink" title="分片的操作"></a>分片的操作</h3><p>mongodb单表数据量 &gt; 500w 必须分片。<strong>最好在表为空的时候进行，否则有可能很慢 。</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">use xx</span><br><span class="line"><span class="comment"># 2.打开该数据库分片功能</span></span><br><span class="line">sh.enableSharding(<span class="string">&quot;xx&quot;</span>) </span><br><span class="line"><span class="comment"># 3.片键需要指定一个索引，所以需要创建hashed_id索引。这行意思是以_id字段，在背景创建一个名叫_id_hashed的哈希值的索引。这一步根据该表数据量而定，有可能需要数小时</span></span><br><span class="line">db.getCollection(<span class="string">&quot;xx&quot;</span>).createIndex( &#123; _id: <span class="string">&quot;hashed&quot;</span> &#125;, &#123; name: <span class="string">&quot;_id_hashed&quot;</span>, background: <span class="literal">true</span> &#125;)</span><br><span class="line"><span class="comment"># 4.指定该索引为片键</span></span><br><span class="line">sh.shardCollection( <span class="string">&quot;xx.xx&quot;</span>, &#123;_id: <span class="string">&quot;hashed&quot;</span>&#125;)</span><br><span class="line"><span class="comment"># 5.以上命令运行成功后，可以用这个命令来check现在分片的状态，这个命令查看的是所有的分片状态</span></span><br><span class="line">sh.status() </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> mongodb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mongodb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>poetry</title>
      <link href="/post/ca5259af.html"/>
      <url>/post/ca5259af.html</url>
      
        <content type="html"><![CDATA[<h1 id="poetry"><a href="#poetry" class="headerlink" title="poetry"></a><a href="https://python-poetry.org/">poetry</a></h1><p>常用命令</p><p><strong>init</strong></p><p>用于初始化项目，在项目目录下生成pyproject.toml文件，需要注意：执行这个命令时，会要求你输入pyproject.toml配置文件中的常用选项。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ poetry init</span><br></pre></td></tr></table></figure><p><strong>install</strong></p><p>上面也提到过，主要用来安装配置的依赖包，同时将依赖包信息写到poetry.lock文件中(首次)。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ poetry install</span><br></pre></td></tr></table></figure><p><strong>update</strong></p><p>上面提到过，主要用于获取最新版本的依赖，同时更新poetry.lock文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ poetry update</span><br></pre></td></tr></table></figure><p><strong>add</strong></p><p>主要用于将依赖包添加到pyproject.toml文件中，同时会安装它们。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ poetry add requests pendulum</span><br></pre></td></tr></table></figure><p><strong>remove</strong></p><p>主要用于删除已经安装的依赖包。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ poetry remove pendulum</span><br></pre></td></tr></table></figure><h3 id="show"><a href="#show" class="headerlink" title="show"></a>show</h3><p>主要用于列出可用的依赖包，show后面可以加上依赖包的名称，显示更详细的内容。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ poetry show (requests)</span><br></pre></td></tr></table></figure><h3 id="run"><a href="#run" class="headerlink" title="run"></a>run</h3><p>主要用来执行python命令，会将run之后的命令放到python环境执行。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ poetry run python -V</span><br></pre></td></tr></table></figure><h3 id="build"><a href="#build" class="headerlink" title="build"></a>build</h3><p>主要用来将python文件打包，打包之后的产物有两种包的格式：sdist是源码格式；wheel是编译之后的格式。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ poetry build</span><br></pre></td></tr></table></figure><p><strong>publish</strong></p><p>主要用来将用build命令打包完成的产物上传到PyPI上。</p><p>用于配置正确的账号和用户名，这样才可以正常上传</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ poetry config http-basic.pypi username password</span><br><span class="line">$ poetry publish</span><br></pre></td></tr></table></figure><p>假如你们公司有自己的私有仓库，则可以通过如下方式上传：<br>先配置私有仓库的信息，然后再上传</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ poetry config repositories.foo https://foo.bar/simple/</span><br><span class="line">$ poetry config http-basic.foo username password</span><br><span class="line">$ poetry publish -r my-repository</span><br></pre></td></tr></table></figure><p>运行Python脚本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">poetry run python app.py</span><br></pre></td></tr></table></figure><h2 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h2><p><strong>1.进入项目目录进行初始化，生成pyproject.toml文件</strong></p><p>cd pre-existing-project<br>poetry init</p><p>接下来会有一些设置选择，可看到有很多提示输入，不确定的内容就先按下Enter使用默认值，后续可以再修改pyproject.toml文件。<br>This command will guide you through creating your pyproject.toml config.</p><p>问题1:Package name [autotools]: </p><p>问题2:Version [0.1.0]:</p><p>问题3:Description []: </p><p>问题4:Author [Zhang-Jane <a href="mailto:&#120;&#120;&#x78;&#x40;&#x78;&#x78;&#x2e;&#99;&#111;&#109;">&#120;&#120;&#x78;&#x40;&#x78;&#x78;&#x2e;&#99;&#111;&#109;</a>, n to skip]:</p><p>问题5:License []: </p><p>问题6:Compatible Python versions [^3.7]:</p><p>问题7:Would you like to define your main dependencies interactively? (yes&#x2F;no) [yes] </p><p>问题8:Would you like to define your development dependencies interactively? (yes&#x2F;no)</p><p>问题9:Do you confirm generation? (yes&#x2F;no) [yes]</p><p>生成文件pyproject.toml</p><p>[tool.poetry]<br>name &#x3D; “demo”<br>version &#x3D; “0.1.0”<br>description &#x3D; “”<br>authors &#x3D; [“Zhang-Jane <a href="mailto:&#120;&#120;&#x40;&#x78;&#x78;&#46;&#x63;&#x6f;&#109;">&#120;&#120;&#x40;&#x78;&#x78;&#46;&#x63;&#x6f;&#109;</a>“]</p><p>[tool.poetry.dependencies]<br>python &#x3D; “^3.7”</p><p>[tool.poetry.dev-dependencies]</p><p>[build-system]<br>requires &#x3D; [“poetry-core&gt;&#x3D;1.0.0”]<br>build-backend &#x3D; “poetry.core.masonry.api”</p><p><strong>2.创建初始化python环境</strong></p><p>$ poetry config –list</p><p>cache-dir &#x3D; “&#x2F;Users&#x2F;janezhang&#x2F;Library&#x2F;Caches&#x2F;pypoetry”<br>experimental.new-installer &#x3D; true<br>installer.parallel &#x3D; true<br>virtualenvs.create &#x3D; true<br>virtualenvs.in-project &#x3D; null<br>virtualenvs.path &#x3D; “{cache-dir}&#x2F;virtualenvs”  # &#x2F;Users&#x2F;janezhang&#x2F;Library&#x2F;Caches&#x2F;pypoetry&#x2F;virtualenvs<br>virtualenvs.create&#x3D;true 自动创建</p><p>$ poetry env info –path 查看创建的虚拟环境所在位置</p><p>$ poetry install(会自动检测环境并安装)</p><p>Creating virtualenv autotools-WalQ0nly-py3.7 in &#x2F;Users&#x2F;janezhang&#x2F;Library&#x2F;Caches&#x2F;pypoetry&#x2F;virtualenvs<br>Updating dependencies<br>Resolving dependencies… (0.1s)</p><p>Writing lock file</p><p>$ poetry env list</p><p>autotools-WalQ0nly-py3.7 (Activated)</p><p>虚拟环境的文件名称会以你的在init的时候命名的Package name包为开头，结尾就是python的版本号</p><p><strong>3.指定python版本</strong><br>$ poetry env use python3 # 使用这个命令后，会在虚拟环境路径下创建一个envs.toml文件，用来存储哪些虚拟环境指定了Python解释器的版本<br>Using virtualenv: &#x2F;Users&#x2F;janezhang&#x2F;Library&#x2F;Caches&#x2F;pypoetry&#x2F;virtualenvs&#x2F;autotools-WalQ0nly-py3.</p><p><strong>4.激活虚拟环境</strong> </p><p>执行poetry的命令并不需要激活虚拟环境，因为poetry会自动检测当前虚拟环境，如果想在当前目录对应的虚拟环境中执行命令，可以使用以下命令：</p><p>poetry run &lt;你的命令&gt; # 例如： poetry run python flask.py<br>如果想显示的激活虚拟环境，使用如下命令：</p><p>$ poetry shell<br>Spawning shell within ˝˝©&#x2F;autotools-WalQ0nly-py3.7<br>janezhang@bogon AutoTools % . &#x2F;Users&#x2F;janezhang&#x2F;Library&#x2F;Caches&#x2F;pypoetry&#x2F;virtualenvs&#x2F;autotools-WalQ0nly-py3.7&#x2F;bin&#x2F;activate<br>(autotools-WalQ0nly-py3.7) janezhang@bogon AutoTools % </p><p><strong>5.加速镜像</strong><br>在项目根目录文件pyproject.toml末尾加入下述其一：</p><p>阿里云：</p><p>[[tool.poetry.source]]<br>name &#x3D; “aliyun”<br>url &#x3D; “<a href="https://mirrors.aliyun.com/pypi/simple/">https://mirrors.aliyun.com/pypi/simple/</a>“<br>豆瓣：</p><p>[[tool.poetry.source]]<br>name &#x3D; “douban”<br>url &#x3D; “<a href="https://pypi.doubanio.com/simple/">https://pypi.doubanio.com/simple/</a>“<br>网易：</p><p>[[tool.poetry.source]]<br>name &#x3D; “163”<br>url &#x3D; “<a href="https://mirrors.163.com/pypi/simple/">https://mirrors.163.com/pypi/simple/</a>“<br>清华大学：</p><p>[[tool.poetry.source]]<br>name &#x3D; “tsinghua”<br>url &#x3D; “<a href="https://pypi.tuna.tsinghua.edu.cn/simple/">https://pypi.tuna.tsinghua.edu.cn/simple/</a>“<br>default &#x3D; true</p><p><strong>6.安装依赖</strong></p><p>版本限制：<a href="https://python-poetry.org/docs/dependency-specification/">https://python-poetry.org/docs/dependency-specification/</a></p><p>poetry add flask ：安装最新稳定版本的flask</p><p>poetry add pytest –dev : 指定为开发依赖，会写到pyproject.toml中的[tool.poetry.dev-dependencies]区域</p><p>poetry add flask&#x3D;2.22.0 : 指定具体的版本</p><p>poetry install : 安装pyproject.toml文件中的全部依赖</p><p>poetry install –no-dev ： 只安装非development环境的依赖，一般部署时使用</p><p>poetry show ：查看项目安装的依赖</p><p>poetry show -t ：树形结构查看项目安装的依赖</p><p>poetry update：更新所有锁定版本的依赖</p><p>poetry update httprunner ：更新指定的依赖</p><p>poetry remove ： 卸载依赖</p><p><strong>7.部署环境</strong></p><p>poetry install –no-dev</p><p>poetry run python xxx 或者 poetry shell中执行</p>]]></content>
      
      
      
        <tags>
            
            <tag> python开发环境 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用的linux命令</title>
      <link href="/post/4074d3b3.html"/>
      <url>/post/4074d3b3.html</url>
      
        <content type="html"><![CDATA[<h1 id="常用的linux命令"><a href="#常用的linux命令" class="headerlink" title="常用的linux命令"></a>常用的linux命令</h1><h2 id="帮助命令tldr"><a href="#帮助命令tldr" class="headerlink" title="帮助命令tldr"></a>帮助命令tldr</h2><h2 id="du"><a href="#du" class="headerlink" title="du"></a>du</h2><p>du -sh .&#x2F;* | grep “G” | sort</p><p>du -h –max-depth&#x3D;1 -I</p><p>du -ah</p><h2 id="wget"><a href="#wget" class="headerlink" title="wget"></a>wget</h2><p>wget：</p><p> -c 断点续传</p><p>-b 后台下载文件</p><p>–limit-rate&#x3D;100k 限制下载速率</p><p><a href="https://linuxtools-rst.readthedocs.io/zh_CN/latest/tool/wget.html">https://linuxtools-rst.readthedocs.io/zh_CN/latest/tool/wget.html</a></p><h2 id="kill端口占用lsof"><a href="#kill端口占用lsof" class="headerlink" title="kill端口占用lsof"></a>kill端口占用lsof</h2><ul><li><p>netstat -tunplp | grep 端口号，命令用于显示tcp，udp的端口和进程等相关情况</p></li><li><p>使用 lsof -i 命令</p><ul><li>&#96;&#96;&#96;css<br>lsof  -i:<port><br>lsof  -iTCP<br>lsof  -iUDP<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 利用 kill -9 PID 干掉目标进程</span><br><span class="line"></span><br><span class="line">## curl</span><br><span class="line"></span><br><span class="line">curl https://blog.csdn.net/daiyu__zz/article/details/84887211 -x https://127.0.0.1:9991</span><br><span class="line"></span><br><span class="line">curl https://hungerstation.com/sa-en/restaurants/riyadh/al-rawdah  -x  https://45.131.177.36:3389</span><br><span class="line"></span><br><span class="line">测试网站响应时间</span><br><span class="line"></span><br><span class="line">time_connect：建立到服务器的 TCP 连接所用的时间</span><br><span class="line">time_starttransfer：在发出请求之后，Web 服务器返回数据的第一个字节所用的时间</span><br><span class="line">time_total：完成请求所用的时间</span><br><span class="line"></span><br></pre></td></tr></table></figure></port></li></ul></li></ul><p>curl -o &#x2F;dev&#x2F;null -s -w “time_connect: %{time_connect}\ntime_starttransfer: %{time_starttransfer}\ntime_total: %{time_total}\n” “<a href="http://www.zhengdazhi.com/">http://www.zhengdazhi.com</a>“</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">post请求：</span><br><span class="line"></span><br><span class="line">-H指的是请求的头信息，多个头信息加多个-H即可，-d用于指定的发送的数据，-X用于指定请求的方式</span><br><span class="line"></span><br><span class="line">-A自定义用户代理</span><br><span class="line"></span><br><span class="line">curl -v www.baidu.com</span><br><span class="line"></span><br><span class="line">## 补充</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>stat<br>file 查看文件类型<br>cut</p><p>paste 合并文件<br>paste -s file 合并指定文件的多行数据<br>按行合并，即数据是一行一行拼接，用cat<br>按列合并，则用paste</p><p>cut<br>-b ：以字节为单位进行分割。这些字节位置将忽略多字节字符边界，除非也指定了 -n 标志。<br>-c ：以字符为单位进行分割。<br>-d ：自定义分隔符，默认为制表符。<br>-f ：与-d一起使用，指定显示哪个区域。<br>-n ：取消分割多字节字符。仅和 -b 标志一起使用。如果字符的最后一个字节落在由 -b 标志的 List 参数指示的范围之内，该字符将被写出；否则，该字符将被排除</p><p>uniq<br>-c或–count 在每列旁边显示该行重复出现的次数。<br>-d或–repeated 仅显示重复出现的行列。<br>-f&lt;栏位&gt;或–skip-fields&#x3D;&lt;栏位&gt; 忽略比较指定的栏位。<br>-s&lt;字符位置&gt;或–skip-chars&#x3D;&lt;字符位置&gt; 忽略比较指定的字符。<br>-u或–unique 仅显示出一次的行列。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## 统计重复的信息</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>grep “ Crawled (200)” as_talabat_area_restaurants_21_2021-02-15_14:03:01.log | grep -Eo “http(.*)&gt;” | uniq -d</p><p>grep “ Crawled (200)” as_talabat_area_restaurants_21_2021-02-15_14:03:01.log | awk ‘{print $10}’</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">## Linux系统中暂停正在运行的进程并放入后台</span><br><span class="line"></span><br><span class="line">1. ctrl+z键 （暂停终端命令窗口正在运行的进程）</span><br><span class="line"></span><br><span class="line">2. bg %1 （将暂停的进程放入后台运行）</span><br><span class="line"></span><br><span class="line">3. jobs （查看后台运行的进程</span><br><span class="line">4. bg命令基本格式为 bg %工作号（可通过jobs命令查看暂停和后台运行的进程工作号）</span><br><span class="line"></span><br><span class="line">## watch</span><br><span class="line"></span><br><span class="line"> watch -n 1 tail -f as_nio_jiadian_charger_by_lat_2021-02-23_11:06:01.log</span><br><span class="line"></span><br><span class="line">## 断点续传 rsync</span><br><span class="line"></span><br><span class="line">## scp</span><br><span class="line"></span><br><span class="line">**SCP拷贝命令中常用的几个参数说明**</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>-B  使用批处理模式（传输过程中不询问传输口令或短语）<br>-C  允许压缩。（将-C标志传递给ssh，从而打开压缩功能）<br>-p  保留原文件的修改时间，访问时间和访问权限。<br>-q  不显示传输进度条。<br>-r  递归复制整个目录。<br>-v 详细方式显示输出。scp和ssh(1)会显示出整个过程的调试信息。这些信息用于调试连接，验证和配置问题。<br>-c cipher  以cipher将数据传输进行加密，这个选项将直接传递给ssh。<br>-F ssh_config  指定一个替代的ssh配置文件，此参数直接传递给ssh。<br>-i identity_file  从指定文件中读取传输时使用的密钥文件，此参数直接传递给ssh。<br>-l limit  限定用户所能使用的带宽，以Kbit&#x2F;s为单位。<br>-o ssh_option  如果习惯于使用ssh_config(5)中的参数传递方式，<br>-P port  注意是大写的P, port是指定数据传输用到的端口号<br>-S program  指定加密传输时所使用的程序。此程序必须能够理解ssh(1)的选项。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">正常传输：</span><br><span class="line"></span><br><span class="line">scp jane@106.75.26.184:/home/jane/plist ~/Downloads</span><br><span class="line"></span><br><span class="line">限制传输带宽：</span><br><span class="line"></span><br><span class="line">注意**：Kbit/s为单位**，b代表bit,指一位,B代表byte,指一字节,1B=8b</span><br><span class="line"></span><br><span class="line">scp -l 15000 jane@106.75.26.184:/home/jane/plist ~/Downloads</span><br><span class="line"></span><br><span class="line">## top</span><br><span class="line"></span><br><span class="line">Linux 系统里的进程状态:https://liam.page/2020/01/10/the-states-of-processes-on-Linux/</span><br><span class="line"></span><br><span class="line">## 批量kill进程</span><br><span class="line"></span><br><span class="line">```shell</span><br><span class="line"> ps -aux | grep &quot;scrapy crawl shop_spider&quot; | grep -v &quot;grep&quot; |cut -c 9-15 | xargs kill</span><br><span class="line"> </span><br><span class="line"> ps -ef | grep &quot;关键词&quot; | awk &#x27;&#123;print $2&#125;&#x27; | xargs kill</span><br><span class="line"> multi_process_task3.py</span><br><span class="line"> ps -ef | grep -w &quot;traverse_id&quot; | awk &#x27;&#123;print $2&#125;&#x27; | xargs kill</span><br><span class="line"> </span><br><span class="line">ps -ef | grep &quot;scrapy crawl shop_spider&quot; | awk &#x27;&#123;print $2&#125;&#x27; | xargs kill</span><br></pre></td></tr></table></figure><h2 id="日志查询scrapy请求的数量"><a href="#日志查询scrapy请求的数量" class="headerlink" title="日志查询scrapy请求的数量"></a>日志查询scrapy请求的数量</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">//查询上下</span><br><span class="line">git <span class="built_in">log</span> |grep <span class="string">&quot;xxxx&quot;</span> -C 5</span><br><span class="line"></span><br><span class="line">//查询往后 after</span><br><span class="line">git <span class="built_in">log</span> |grep <span class="string">&quot;xxxx&quot;</span> -A 5</span><br><span class="line"></span><br><span class="line">//查询往前 before</span><br><span class="line">git <span class="built_in">log</span> |grep <span class="string">&quot;xxxx&quot;</span> -B 5</span><br><span class="line"></span><br><span class="line"><span class="built_in">cat</span> box_online_2020-12-16 | grep <span class="string">&quot;2020-12-16 15.*授权超时需要重新登录&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cat</span> box_online_2020-11-27 | grep <span class="string">&quot;downloader/request_count&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cat</span> box_online_2020-11-27 | grep <span class="string">&quot;授权超时需要重新登录&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cat</span> box_online_2020-11-26 | grep <span class="string">&quot;Dumping Scrapy stats:&quot;</span> -A 10</span><br><span class="line"></span><br><span class="line"><span class="built_in">cat</span> box_online_2020-11-26 | grep <span class="string">&quot;downloader/request_count&quot;</span> | <span class="built_in">wc</span> -l</span><br><span class="line"></span><br><span class="line">//列出最新的日志文件</span><br><span class="line">ll -t | grep elong_hotel_list | <span class="built_in">head</span> -1 | awk <span class="string">&#x27;&#123;print $9&#125;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="日志分析命令"><a href="#日志分析命令" class="headerlink" title="日志分析命令"></a>日志分析命令</h2><table><thead><tr><th>操作</th><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>查看文件的内容</td><td>cat -n access.log</td><td>-n显示行号</td></tr><tr><td>分页显示文件</td><td>more access.log</td><td>Enter下一行，空格下一页，F下一屏，B上一屏</td></tr><tr><td>分页显示文件</td><td>less access.log</td><td>输入 &#x2F;字符串 可查找并高亮</td></tr><tr><td>显示文件尾</td><td>tail -n2 -f access.log</td><td>-n2显示最后2行，-f继续监听不退出</td></tr><tr><td>内容排序</td><td>sort -k 2 -t ‘ ‘ -n access.log</td><td>-k指定排序列，-t指定列分隔符，-n按数字顺序</td></tr><tr><td>字符统计</td><td>wc -l access.log</td><td>-l统计行数，-c字符数，-L最长行长度，-w单词数</td></tr><tr><td>查看重复出现的行</td><td>sort testfile | uniq -c -d</td><td>uniq去重，-c统计重复次数，-d只显示重复的</td></tr><tr><td>字符串查找</td><td>grep ‘G.*T’ access.log</td><td>查找G开头T结尾的字符串</td></tr><tr><td>文件查找</td><td>find &#x2F;home&#x2F;java -name access.log</td><td>递归&#x2F;home&#x2F;java的子目录找名为access.log</td></tr><tr><td>表达式求值</td><td>expr 10 * 3</td><td>计算10<em>3，其中*表示转义</em>不解读为通配符</td></tr><tr><td>表达式求值</td><td>expr length “this is a test”</td><td>计算长度</td></tr><tr><td>归档文件</td><td>tar -cf aaa.tar f1 f2</td><td>-c创建，-f指定包名</td></tr><tr><td>归档文件</td><td>tar -xf aaa.tar</td><td>-x解压</td></tr><tr><td>URL访问</td><td>curl <a href="http://www.google.com/">www.google.com</a></td><td>不带参返回响应体，-i返回带响应头，-I仅返回响应头</td></tr><tr><td>查看CPU的load</td><td>uptime</td><td></td></tr><tr><td>查看CPU使用率</td><td>top | grep Cpu</td><td>按1查看每个核，按shift+H按线程查看</td></tr><tr><td>查看CPU使用率</td><td>top -p 2864</td><td>查看指定进程</td></tr><tr><td>磁盘剩余空间</td><td>df -h</td><td></td></tr><tr><td>磁盘剩余空间</td><td>du -d 1 -h &#x2F;home&#x2F;java</td><td>分析目录的磁盘使用。-d设置递归深度</td></tr><tr><td>网络traffic</td><td>sar -n DEV 1 1</td><td>DEV查看各个网卡，1秒抽样，1总共取一次</td></tr><tr><td>磁盘I&#x2F;O</td><td>iostat -d -k</td><td></td></tr><tr><td>内存使用</td><td>free -m</td><td>通常是看“-&#x2F;+ buffers&#x2F;cache”对应的used和free</td></tr><tr><td>内存使用</td><td>vmstat</td><td>查看swap I&#x2F;O</td></tr></tbody></table><h2 id="sed行编辑器"><a href="#sed行编辑器" class="headerlink" title="sed行编辑器"></a>sed行编辑器</h2><h3 id="P（显示）模式"><a href="#P（显示）模式" class="headerlink" title="P（显示）模式"></a>P（显示）模式</h3><p>sed  -n  ‘&#x2F;^#&#x2F;p’  fstab            &#x2F;&#x2F;显示以“#”开头的行<br>sed   -n  ‘&#x2F;UUID$&#x2F;P’  fstab    &#x2F;&#x2F;显示以UUID结尾的行<br>sed  -n  ‘2,6P’  fstab             &#x2F;&#x2F;显示2到6行<br>sed  -n  ‘2,6!P’  fstab            &#x2F;&#x2F;不显示2到6行<br>sed  -n  ‘2p;6p’  fstab           &#x2F;&#x2F;显示第2行和第6行</p><h2 id="grep"><a href="#grep" class="headerlink" title="grep"></a>grep</h2><h3 id="常用选项："><a href="#常用选项：" class="headerlink" title="常用选项："></a>常用选项：</h3><p>​-m, –max-count&#x3D;NUM       NUM 次匹配后停止</p><p>　　-E ：开启扩展（Extend）的正则表达式。或者直接使用egrep</p><p>　　-i ：忽略大小写（ignore case）。</p><p>　　-v ：反过来（invert），只打印没有匹配的，而匹配的反而不打印。</p><p>　　-n ：显示行号</p><p>　　-w ：被匹配的文本只能是单词，而不能是单词中的某一部分，如文本中有liker，而我搜寻的只是like，就可以使用-w选项来避免匹配liker</p><p>　　-c ：显示总共有多少行被匹配到了，而不是显示被匹配到的内容，注意如果同时使用-cv选项是显示有多少行没有被匹配到。</p><p>　　-o ：只显示被模式匹配到的字符串。</p><p>　　–color :将匹配到的内容以颜色高亮显示。</p><p>　　-A  n：显示匹配到的字符串所在的行及其后n行，after</p><p>　　-B  n：显示匹配到的字符串所在的行及其前n行，before</p><p>　　-C  n：显示匹配到的字符串所在的行及其前后各n行，context</p><h2 id="awk"><a href="#awk" class="headerlink" title="awk"></a>awk</h2><p>$0代表整行所有数据，$1代表第一列</p><p>NF是个代表总列数的系统变量，所以$NF代表最后一列，还支持$(NF-1)来表示倒数第二列。</p><p>还支持列之间的运算，如$NF-$(NF-1)是最后两列的值相减。</p><p>只写一个print 是 print $0的简写，打印整行所有数据。</p><p>默认以空格做分割符，也可以重新指定:</p><p>​-F </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 使用&quot;,&quot;分割</span><br><span class="line">awk -F, &#x27;&#123;print $1,$2&#125;&#x27;   log.txt</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>几种常见的加密</title>
      <link href="/post/4a44c91f.html"/>
      <url>/post/4a44c91f.html</url>
      
        <content type="html"><![CDATA[<h1 id="对称加密体制"><a href="#对称加密体制" class="headerlink" title="对称加密体制"></a>对称加密体制</h1><p>对称加密体制分为俩种：</p><ol><li>对明文的单个位或者字节进行运算（流密码）</li></ol><ul><li>使用最广泛的流密码是RC4。</li></ul><ol start="2"><li>把明文信息划分为不同的组结构，分别对每个分组进行加密和解密（分组密码）</li></ol><ul><li><p>在分组加密算法中，有ECB,CBC,CFB,OFB这几种算法模式。</p></li><li><p>ECB-电子密码本模式</p><ul><li>优点<ul><li>容易理解，便于实现并行操作，没有误差传递</li></ul></li><li>缺点<ul><li>不能隐藏明文模式，如果明文重复，对应的密文也会重复，密文内容很容易被篡改</li></ul></li><li>用途<ul><li>适合加密密匙，随机数等短数据</li></ul></li></ul></li><li><p>CBC-秘文链接模式</p><ul><li>优点<ul><li>加密后的密文上下文关联，，明文中重复的信息也不会产生相同的密文，如果密文被篡改，或者破坏，无法完成解密还原。</li></ul></li><li>缺点<ul><li>不利于并行计算，如果加密过程出错，导致加密失败</li></ul></li><li>用途<ul><li>加密任何长度的数据；适合计算产生检测数据完整性的消息认证码</li></ul></li></ul></li><li><p>CFB-密文反馈模式</p><ul><li>优点<ul><li>隐藏明文，每一个分组的加密结果必受前面所有分组的内容影响，即使出现多次相同的明文，均产生不同的密文，分组密码转换为流模式。</li></ul></li><li>缺点<ul><li>不利于并行计算</li></ul></li><li>用途<ul><li>检查明文密文的篡改</li></ul></li></ul></li><li><p>OFB-输出反馈模式</p><ul><li>优点<ul><li>隐藏明文，分组密码转换为流模式，无误差传送</li></ul></li><li>缺点<ul><li>不利于并行计算，安全性比CFB差</li></ul></li><li>用途<ul><li>适用于加密较大的数据，比如语音和图像</li></ul></li></ul></li><li><p>对称加密的一些算法</p><ul><li><h2 id="DES-DES算法和DESede算法统称DES系列算法。DES算法是对称加密算法领域中典型的算法，为后续的对称加密算法的发展奠定了坚实的基础。但是随着计算机的发展DES算法已经越来越不安全，因此诞生了一些新的算法-DESede-对DES做了改良，但是这种算法吹速度慢，密钥激素三时间加长，加密效率不高"><a href="#DES-DES算法和DESede算法统称DES系列算法。DES算法是对称加密算法领域中典型的算法，为后续的对称加密算法的发展奠定了坚实的基础。但是随着计算机的发展DES算法已经越来越不安全，因此诞生了一些新的算法-DESede-对DES做了改良，但是这种算法吹速度慢，密钥激素三时间加长，加密效率不高" class="headerlink" title="DES- DES算法和DESede算法统称DES系列算法。DES算法是对称加密算法领域中典型的算法，为后续的对称加密算法的发展奠定了坚实的基础。但是随着计算机的发展DES算法已经越来越不安全，因此诞生了一些新的算法- DESede  - 对DES做了改良，但是这种算法吹速度慢，密钥激素三时间加长，加密效率不高"></a>DES<br>- DES算法和DESede算法统称DES系列算法。DES算法是对称加密算法领域中典型的算法，为后续的对称加密算法的发展奠定了坚实的基础。但是随着计算机的发展DES算法已经越来越不安全，因此诞生了一些新的算法<br>- DESede<br>  - 对DES做了改良，但是这种算法吹速度慢，密钥激素三时间加长，加密效率不高</h2><img src="/../images/encryption/DESede%E7%AE%97%E6%B3%95.jpeg" alt="des"></li></ul></li><li><p>ASE</p><ul><li>DESede虽然改进了，安全性提高了，但是效率低和实现慢完全不能满足需求。</li><li><img src="/../images/encryption/AES%E7%AE%97%E6%B3%95.jpeg" alt="aes"></li></ul></li><li><p>IDEA</p><ul><li>国际数据加密标准，常常见于电子邮件加密</li></ul></li><li><p>PBE</p><ul><li>基于口令的加密算法，其加密的特点在于口令由用户自己掌管采用随机数（盐）杂凑多重加密保证数据安全性，PBE算法没有密匙概念。PBE算法算法并没有真正的构建加密解密的算法，而是对已经知道的对称算法做了包装</li></ul></li></ul><h1 id="非对称加密体制"><a href="#非对称加密体制" class="headerlink" title="非对称加密体制"></a>非对称加密体制</h1><ul><li>非对称加密有俩个密匙：公开的密匙，私有的密匙<br>公开的密匙进行加密，私有的进行解密</li><li>DH（密钥交换算法）<ul><li>就是由甲方产出一对密钥（公钥、私钥），乙方依照甲方公钥产生乙方密钥对（公钥、私钥）。以此为基线，作为数据传输保密基础，同时双方使用同一种对称加密算法构建本地密钥（SecretKey）对数据加密。这样，在互通了本地密钥（SecretKey）算法后，甲乙双方公开自己的公钥，使用对方的公钥和刚才产生的私钥加密数据，同时可以使用对方的公钥和自己的私钥对数据解密。</li><li>整个流程：</li><li>1.甲乙双方初始化各自的密钥对，甲方构建出密钥对keyPair1–&gt;乙方使用甲方的密钥对中的公钥publicKey1构建出自己的密钥对keyPair2</li><li>2.甲乙双方构建各自的本地密钥，甲方使用自己的私钥privateKey1+乙方的公钥publicKey2构建出自己的本地密钥key1，乙方使用自己的私钥privateKey2+甲方的公钥publicKey1构建出自己的本地密钥key2，最后会发现key1&#x3D;&#x3D;key2，这两个本地密钥将会是接下来对对称加密所使用的密钥</li><li>3.发送方（甲方或乙方均可）使用本地密钥+对称加密算法对待加密数据进行加密，传递给接收方</li><li>4.接收方使用本地密钥+对称加密算法对待解密数据进行解密</li></ul></li><li>RSA<ul><li><p>甲方构建密钥对儿，将公钥公布给乙方，将私钥保留。<br>甲方使用私钥加密数据，然后用私钥对加密后的数据签名，发送给乙方签名以及加密后的数据；乙方使用公钥、签名来验证待解密数据是否有效，如果有效使用公钥对数据解密。<br>乙方使用公钥加密数据，向甲方发送经过加密后的数据；甲方获得加密数据，通过私钥解密。</p></li><li><p><img src="/../images/encryption/RSA%E7%AE%97%E6%B3%95.jpeg" alt="aes"></p></li></ul></li></ul><h1 id="散列函数（hash）"><a href="#散列函数（hash）" class="headerlink" title="散列函数（hash）"></a>散列函数（hash）</h1><ul><li>特性：<ul><li>消息长度不受限制</li><li>俩个散列值不同，俩个散列值的原来数据也不同</li><li>散列函数运算不可逆</li><li>不同消息的散列值一定不同</li></ul></li><li>用途：<br>消息完整的验证，常见算法md（消息摘要算法），sha（安全散列算法），mac（消息认证码算法）</li><li>MD<ul><li>MD5算法是由前面的ＭD2，MD3，MD4演变而来。它需要获取一个随机长度的信息并产生一个128位的信息摘要，再把这个128位的二进制摘要换成16进制（每四位二进制数转化为1个十六进制的数），最后得到一个32位的字符串。</li><li>MD5算法如今已经不再安全，只能期待下一代算法MD6（<a href="http://groups.csail.mit.edu/cis/md6/%EF%BC%89">http://groups.csail.mit.edu/cis/md6/）</a></li></ul></li><li>SHA<ul><li>SHA算法基于MD4算法的基础上，新一代的消息摘要算法，通过SHA算法同样能够获取一个固定长度的摘要信息，与MD系列不同的是，如果输入的消息不同，则赌赢的摘要信息差异概率很高。因此，由消息摘要反推输入原信息，很难。</li></ul></li><li>MAC<ul><li>MAC算法结合了MD5和SHA的优势，并加入了密钥，因此常把MAC称之为HMAC</li></ul></li></ul><h1 id="base64算法"><a href="#base64算法" class="headerlink" title="base64算法"></a>base64算法</h1><ul><li>由来<ul><li>Base64算法最早应用于解决电子邮件传输的问题。早期电子邮件传输只允许ASCII码字符，而传输一封信有非ASCII码字符的电子邮件就会出问题，由此产生了Base64算法</li></ul></li><li>定义<ul><li>Base64一种基于64个字符的编码算法</li></ul></li></ul><p><img src="/../images/encryption/base64%E6%98%A0%E5%B0%84%E8%A1%A8.jpeg" alt="aes"></p><p><img src="/../images/encryption/Base64%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86.jpeg" alt="aes"></p><p><img src="/../images/encryption/%E9%9D%9EASCII%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81.jpeg" alt="aes"></p><ul><li>应用<ul><li>电子邮件传输</li><li>网络请求url参数加密</li><li>密钥存储</li><li>数字证书存储</li></ul></li></ul><h1 id="加密填充的方式"><a href="#加密填充的方式" class="headerlink" title="加密填充的方式"></a>加密填充的方式</h1><ul><li><a href="https://blog.csdn.net/jingerppp/article/details/84256774?depth_1-utm_source=distribute.pc_relevant.none-task&utm_source=distribute.pc_relevant.none-task">https://blog.csdn.net/jingerppp/article/details/84256774?depth_1-utm_source&#x3D;distribute.pc_relevant.none-task&amp;utm_source&#x3D;distribute.pc_relevant.none-task</a></li><li>NoPadding</li><li>PKCS7Padding</li><li>ZeroPadding</li><li>AnsiX923</li><li>Iso10126</li><li>Iso97971</li></ul>]]></content>
      
      
      <categories>
          
          <category> 加密与解密 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 加密与解密 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>django的部署流程</title>
      <link href="/post/f634517f.html"/>
      <url>/post/f634517f.html</url>
      
        <content type="html"><![CDATA[<h1 id="django部署流程"><a href="#django部署流程" class="headerlink" title="django部署流程"></a>django部署流程</h1><h2 id="1-配置生产环境配置-settings-DEBUG-amp-Secret相关信息"><a href="#1-配置生产环境配置-settings-DEBUG-amp-Secret相关信息" class="headerlink" title="1. 配置生产环境配置(settings):DEBUG&amp;Secret相关信息"></a>1. 配置生产环境配置(settings):DEBUG&amp;Secret相关信息</h2><p>必须调整的关键配置:</p><ul><li>DEBUG – 在生产环境中设置为False(DEBUG&#x3D;False)。避免在web页面上显示敏感的调试跟踪和变量信息</li><li>SECRET_KEY – 这是用于CSRF保护的随机值<ul><li>生成SECRETKEY<ul><li>python -c ‘from django.core.management.utils import get_random_secret_key; print(get_random_secret_key())’</li></ul></li></ul></li><li>ALLOWED_HOSTS – 生产环境必须设置允许访问的域名</li></ul><h2 id="2-配置生产环境配置-密钥的存储和管理"><a href="#2-配置生产环境配置-密钥的存储和管理" class="headerlink" title="2. 配置生产环境配置:密钥的存储和管理"></a>2. 配置生产环境配置:密钥的存储和管理</h2><ol><li>外部引用密钥</li><li>保存在系统环境变量中</li><li>利用KMS系统保存<ol><li>vault <a href="https://github.com/hashicorp/vault">https://github.com/hashicorp/vault</a><ol><li><a href="https://www.ruoguedu.cn/post/deploy-vault-on-production-environment/">https://www.ruoguedu.cn/post/deploy-vault-on-production-environment/</a></li><li><a href="https://hvac.readthedocs.io/en/stable/overview.html#getting-started">https://hvac.readthedocs.io/en/stable/overview.html#getting-started</a></li></ol></li><li>keywhiz <a href="https://github.com/square/keywhiz">https://github.com/square/keywhiz</a></li><li>knox <a href="https://github.com/pinterest/knox">https://github.com/pinterest/knox</a></li></ol></li></ol><h2 id="3-部署前的安全检查"><a href="#3-部署前的安全检查" class="headerlink" title="3. 部署前的安全检查"></a>3. 部署前的安全检查</h2><p>python manage.py check –deploy</p><h2 id="4-静态文件的托管"><a href="#4-静态文件的托管" class="headerlink" title="4. 静态文件的托管"></a>4. 静态文件的托管</h2><ol><li>web服务器</li><li>CDN服务器</li></ol><h2 id="5-应用服务器"><a href="#5-应用服务器" class="headerlink" title="5. 应用服务器"></a>5. 应用服务器</h2><ul><li><p>同步应用</p><ul><li>uWSGI:C实现的PythonWeb应用服务器;Web服务器Apache&#x2F;Nginx与django-uwsgi进程通信来提供动态的内容;</li><li>gunicorn:纯Python实现的高性能Python应用服务器，无外部依赖，简单容易配置;还没有遇到性能问题的时候，推荐使用 gunicorn。</li><li><a href="http://xiaorui.cc/archives/4264">http://xiaorui.cc/archives/4264</a></li></ul></li><li><p>异步应用</p><ul><li>Daphne:twisted实现</li><li>Hypercorn:基于sans-iohyper,h11,h2,wsproto实现 </li><li>Uvicorn:基于uvloopandhttptools实现</li></ul></li><li><p>同步应用服务器，以 gunicorn 为例</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">python -m pip install gunicorn</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">export</span> DJANGO_SETTINGS_MODULE=settings.local</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">gunicorn -w 3 -b 127.0.0.1:8000 &lt;project_name&gt;.wsgi:application</span></span><br></pre></td></tr></table></figure><ul><li>异步应用服务器，以uvcorn 为例</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">python -m pip install uvicorn</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">export</span> DJANGO_SETTINGS_MODULE=settings.local</span> </span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">uvicorn &lt;project_name&gt;.asgi:application --workers 3</span></span><br></pre></td></tr></table></figure><h2 id="6-代理服务器"><a href="#6-代理服务器" class="headerlink" title="6. 代理服务器"></a>6. 代理服务器</h2><h3 id="Engine"><a href="#Engine" class="headerlink" title="Engine"></a>Engine</h3><p>nginx在启动后，会有一个master进程和多个worker进程。master进程主要用来管理worker进程，包含：接收来自外界的信号，向各worker进程发送信号，监控worker进程的运行状态，当worker进程退出后(异常情况下)，会自动重新启动新的worker进程。而基本的网络事件，则是放在worker进程中来处理了。多个worker进程之间是对等的，他们同等竞争来自客户端的请求，各进程互相之间是独立的。一个请求，只可能在一个worker进程中处理，一个worker进程，不可能处理其它进程的请求。worker进程的个数是可以设置的，一般我们会设置与机器cpu核数一致。</p><p>Nginx 里使用的 epoll，它把多个 HTTP 请求处理打散成碎片，都“复用”到一个单线程里，不按照先来后到的顺序处理，而是只当连接上真正可读、可写的时候才处理，如果可能发生阻塞就立刻切换出去，处理其他的请求。通过这种方式，Nginx 就完全消除了 I&#x2F;O 阻塞，把 CPU 利用得“满满当当”，又因为网络收发并不会消耗太多 CPU 计算能力，也不需要切换进程、线程，所以整体的 CPU 负载是相当低的。</p><p>当从一个任务切换到另一个任务，当前任务的上下文，如堆栈，指令指针等都要保存起来，以便下次任务时恢复，然后再把另一个任务的堆栈加载进来，如果有大量的上下文切换，就会影响性能。</p><p>epoll 还有一个特点，大量的连接管理工作都是在操作系统内核里做的，这就减轻了应用程序的负担，所以 Nginx 可以为每个连接只分配很小的内存维护状态，即使有几万、几十万的并发连接也只会消耗几百 M 内存</p><h3 id="Tengine"><a href="#Tengine" class="headerlink" title="Tengine"></a>Tengine</h3><p><a href="https://tengine.taobao.org/">https://tengine.taobao.org/</a></p><ul><li>Tengine完全兼容Nginx,同时提供了额外的强大功能</li><li>增强相关运维、监控能力,比如异步打印日志及回滚,本地DNS缓存,内存监控等;</li><li>动态脚本语言Lua支持。扩展功能简单高效;</li><li>更加强大的负载均衡能力，包括一致性hash模块、会话保持模块</li><li>主动健康检查，根据服务器状态自动上线下线，以及动态解析upstream中出现的域名; • 输入</li><li>过滤器机制支持，更强大的防攻击(访问速度限制)模块;方便实现应用防火墙;</li><li>…..</li></ul><h3 id="openresty"><a href="#openresty" class="headerlink" title="openresty"></a>openresty</h3><p><a href="https://openresty.org/cn/getting-started.html">https://openresty.org/cn/getting-started.html</a></p><h3 id="负载分流策略"><a href="#负载分流策略" class="headerlink" title="负载分流策略"></a>负载分流策略</h3><p>round-robin—平均分配流量:轮询模式</p><p>least-connected—最少连接优先，下一个请求分到活跃连接最少的服务器 </p><p>ip-hash—按照客户端IP哈希来分配服务器IP</p><p>带权重流量分配</p><p>一致性哈希(Tengine)</p><p>会话保持(Tengine特性)</p><h2 id="7-进程管理"><a href="#7-进程管理" class="headerlink" title="7. 进程管理"></a>7. 进程管理</h2><ul><li>supervisor<ul><li><a href="http://supervisord.org/installing.html">http://supervisord.org/installing.html</a></li></ul></li><li>pm2<ul><li><a href="https://pm2.keymetrics.io/docs/usage/pm2-doc-single-page/">https://pm2.keymetrics.io/docs/usage/pm2-doc-single-page/</a></li></ul></li></ul><h2 id="补充说明"><a href="#补充说明" class="headerlink" title="补充说明"></a>补充说明</h2><h3 id="区分uWSGI和WSGI"><a href="#区分uWSGI和WSGI" class="headerlink" title="区分uWSGI和WSGI"></a>区分uWSGI和WSGI</h3><p>在python web开发中，我们经常使用uwsgi配合nginx部署一个web框架，如Django或flask。同时我们又会说，框架和web服务器之间要符合WSGI协议。那就来厘清一下这几个概念。</p><h4 id="web服务器和web框架"><a href="#web服务器和web框架" class="headerlink" title="web服务器和web框架"></a>web服务器和web框架</h4><ul><li>在讲uWSGI和WSGI之前，先要弄清楚web开发的两大块，web服务器和web框架。<br>web服务器即用来接受客户端请求，建立连接，转发响应的程序。至于转发的内容是什么，交由web框架来处理，即处理这些业务逻辑。如查询数据库、生成实时信息等。Nginx就是一个web服务器，Django或flask就是web框架。</li></ul><h4 id="回到uWSGI和WSGI。"><a href="#回到uWSGI和WSGI。" class="headerlink" title="回到uWSGI和WSGI。"></a>回到uWSGI和WSGI。</h4><ul><li><p>那么如何实现uWSGI和WSGI的配合呢？如何做到任意一个web服务器，都能搭配任意一个框架呢？这就产生了WSGI协议。只要web服务器和web框架满足WSGI协议，它们就能相互搭配。所以WSGI只是一个协议，一个约定。而不是python的模块、框架等具体的功能。</p><p>而uWSGI，则是实现了WSGI协议的一个web服务器。即用来接受客户端请求，转发响应的程序。实际上，一个uWSGI的web服务器，再加上Django这样的web框架，就已经可以实现网站的功能了。那为什么还需要Nginx呢？</p></li><li><p>WSGI是什么</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">WSGI是 Web Server Gateway Interface 的缩写。</span><br><span class="line">它是python应用程序或者框架和web服务器之间的一种接口。是一种协议，一种规范，它是用来解决众多web框架和web server软件的兼容问题。有了它，不用管web server软件的兼容问题。</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>python中的wsgi的实现</p><ul><li><p>在python中有一个库，叫wsgiref，它是一个WSGI的参考实现库，它是web服务器实现的一个参考，不能直接应用于开发。</p><ul><li>WSGI服务器作用<ul><li>监听HTTP服务端口（TCPServer，默认端口80）</li><li>接受浏览器端的HTTP请求并解析封装成environ环境数据</li><li>负责调用应用程序，将environ和start_response方法传入</li></ul></li></ul></li><li><p>关于WSGI的application端的实现</p><ul><li>1.它是一个可调用的对象，在python中应该是是类，或者实现了__call__方法的类的实例</li><li>2.这个可调用的对象应该接受，environ(包含了http请求信息的dict对象)和start_response(可调用对象，三个参数，status-状态码，response_headers-包含信息的二元组列表，exc_info-异常信息)</li></ul></li></ul></li></ul><h4 id="为什么需要Nginx"><a href="#为什么需要Nginx" class="headerlink" title="为什么需要Nginx"></a>为什么需要Nginx</h4><p>一个普通的个人网站，访问量不大的话，当然可以由uWSGI和Django构成。但是一旦访问量过大，客户端请求连接就要进行长时间的等待。这个时候就出来了分布式服务器，我们可以多来几台web服务器，都能处理请求。但是谁来分配客户端的请求连接和web服务器呢？Nginx就是这样一个管家的存在，由它来分配。这也就是由Nginx实现反向代理，即代理服务器。</p><h4 id="nginx配置"><a href="#nginx配置" class="headerlink" title="nginx配置"></a>nginx配置</h4><ul><li><strong>全局块</strong>：配置影响nginx全局的指令。一般有运行nginx服务器的用户组，nginx进程pid存放路径，日志存放路径，配置文件引入，允许生成worker process数等。</li><li><strong>events块</strong>：配置影响nginx服务器或与用户的网络连接。有每个进程的最大连接数，选取哪种事件驱动模型处理连接请求，是否允许同时接受多个网路连接，开启多个网络连接序列化等。</li><li><strong>http块</strong>：可以嵌套多个server，配置代理，缓存，日志定义等绝大多数功能和第三方模块的配置。如文件引入，mime-type定义，日志自定义，是否使用sendfile传输文件，连接超时时间，单连接请求数等。</li><li><strong>server块</strong>：配置虚拟主机的相关参数，一个http中可以有多个server。</li><li><strong>location块</strong>：配置请求的路由，以及各种页面的处理情况。</li><li><strong>upstream：</strong>主要用于负载均衡，设置一系列的后端服务器；</li></ul>]]></content>
      
      
      <categories>
          
          <category> django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>django的DRF</title>
      <link href="/post/7dc334fa.html"/>
      <url>/post/7dc334fa.html</url>
      
        <content type="html"><![CDATA[<h2 id="前后端分离"><a href="#前后端分离" class="headerlink" title="前后端分离"></a>前后端分离</h2><ul><li>Django是很大很全，可以做到前端后端全包，提供了很棒的模版技术，orm操作。但是后来发现这样并不好，前端应该只是来绘制页面，后端只负责数据的部分，二者互不干扰，并行开发。随着前端不断的发展，出现了很多优秀的前端框架。</li><li>mvc的缺点<ul><li>开发者在代码中大量调用相同的DOM API，处理繁琐，操作冗余，使得代码难以维护。</li><li>大量的DOM操作使页面渲染性能降低，加载速度变慢，影响用户体验。</li><li>当Model频繁发生变化，开发者需要主动更新到View；当用户的操作导致View发生变化，开发者同样需要将变化的数据同步到Model中，这样的工作不仅繁琐，而且很难维护复杂多变的数据状态。</li></ul></li><li>mvvm<ul><li>Model层代表数据模型，也可以在Model中定义数据修改和操作的业务逻辑；</li><li>View代表UI组件，它负责将数据模型转化成UI 展现出来；</li><li>ViewModel是一个同步View和Model的对象。</li><li>在MVVM架构下，View和Model之间并没有直接的联系，而是通过ViewModel进行交互，Model和ViewModel之间的交互是双向的。因此View数据的变化会同步到Model中，而Model数据的变化也会立即反应到View上</li></ul></li></ul><h2 id="Django-REST-framework-简介"><a href="#Django-REST-framework-简介" class="headerlink" title="Django REST framework 简介"></a>Django REST framework 简介</h2><p>在开发REST API的视图中，虽然每个视图具体操作的数据不同，但增、删、改、查的实现流程基本套路化，所以这部分代码也是可以复用简化编写的：</p><ul><li><strong>增</strong>：校验请求数据 -&gt; 执行反序列化过程 -&gt; 保存数据库 -&gt; 将保存的对象序列化并返回</li><li><strong>删</strong>：判断要删除的数据是否存在 -&gt; 执行数据库删除</li><li><strong>改</strong>：判断要修改的数据是否存在 -&gt; 校验请求的数据 -&gt; 执行反序列化过程 -&gt; 保存数据库 -&gt; 将保存的对象序列化并返回</li><li><strong>查</strong>：查询数据库 -&gt; 将数据序列化并返回</li></ul><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ul><li>提供了定义序列化器Serializer的方法，可以快速根据 Django ORM 或者其它库自动序列化&#x2F;反序列化；</li><li>提供了丰富的类视图、Mixin扩展类，简化视图的编写；</li><li>丰富的定制层级：函数视图、类视图、视图集合到自动生成 API，满足各种需要；</li><li>多种身份认证和权限认证方式的支持；</li><li>内置了限流系统；</li><li>直观的 API web 界面；</li><li>可扩展性，插件丰富</li></ul><p>资料：</p><ul><li><a href="http://www.django-rest-framework.org/">官方文档</a></li><li><a href="https://github.com/encode/django-rest-framework/tree/master">Github源码</a></li></ul><h2 id="环境安装"><a href="#环境安装" class="headerlink" title="环境安装"></a>环境安装</h2><h3 id="1-安装DRF"><a href="#1-安装DRF" class="headerlink" title="1. 安装DRF"></a>1. 安装DRF</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install djangorestframework</span><br></pre></td></tr></table></figure><h3 id="2-添加rest-framework应用"><a href="#2-添加rest-framework应用" class="headerlink" title="2. 添加rest_framework应用"></a>2. 添加rest_framework应用</h3><p>我们利用在Django框架学习中创建的demo工程，在<strong>settings.py</strong>的<strong>INSTALLED_APPS</strong>中添加’rest_framework’。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">    ...</span><br><span class="line">    <span class="string">&#x27;rest_framework&#x27;</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="关于序列化器"><a href="#关于序列化器" class="headerlink" title="关于序列化器"></a>关于序列化器</h2><h3 id="序列化："><a href="#序列化：" class="headerlink" title="序列化："></a>序列化：</h3><p>将程序中的一个数据结构类型转换为其他格式（字典、JSON、XML等），例如将Django中的模型类对象装换为JSON字符串，这个转换过程我们称为<strong>序列化</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">queryset = BookInfo.objects.<span class="built_in">all</span>()</span><br><span class="line">book_list = []</span><br><span class="line"><span class="comment"># 序列化</span></span><br><span class="line"><span class="keyword">for</span> book <span class="keyword">in</span> queryset:</span><br><span class="line">    book_list.append(&#123;</span><br><span class="line">        <span class="string">&#x27;id&#x27;</span>: book.<span class="built_in">id</span>,</span><br><span class="line">        <span class="string">&#x27;title&#x27;</span>: book.title,</span><br><span class="line">        <span class="string">&#x27;pub_date&#x27;</span>: book.pub_date,</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="keyword">return</span> JsonResponse(book_list, safe=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><h3 id="反序列化："><a href="#反序列化：" class="headerlink" title="反序列化："></a>反序列化：</h3><p>反之，将其他格式（字典、JSON、XML等）转换为程序中的数据，例如将JSON字符串转换为Django中的模型类对象，这个过程我们称为<strong>反序列化</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">json_bytes = request.body</span><br><span class="line">json_str = json_bytes.decode()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 反序列化</span></span><br><span class="line">book_dict = json.loads(json_str)</span><br><span class="line">book = BookInfo.objects.create(</span><br><span class="line">    title=book_dict.get(<span class="string">&#x27;btitle&#x27;</span>),</span><br><span class="line">    pub_date=datetime.strptime(book_dict.get(<span class="string">&#x27;pub_date&#x27;</span>), <span class="string">&#x27;%Y-%m-%d&#x27;</span>).date()</span><br></pre></td></tr></table></figure><h3 id="序列化器创建和使用"><a href="#序列化器创建和使用" class="headerlink" title="序列化器创建和使用"></a>序列化器创建和使用</h3><p>Django REST framework中的Serializer使用类来定义，须继承自rest_framework.serializers.Serializer。我们在app中新建一个py文件serializer.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> serializers</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BookInfoSerializer</span>(serializers.Serializer):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;图书数据序列化器&quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">id</span> = serializers.IntegerField(label=<span class="string">&#x27;ID&#x27;</span>, read_only=<span class="literal">True</span>)</span><br><span class="line">    title = serializers.CharField(label=<span class="string">&#x27;名称&#x27;</span>, max_length=<span class="number">20</span>)</span><br><span class="line">    pub_date = serializers.DateField(label=<span class="string">&#x27;发布日期&#x27;</span>, required=<span class="literal">False</span>)</span><br><span class="line">    read_num = serializers.IntegerField(label=<span class="string">&#x27;阅读量&#x27;</span>, required=<span class="literal">False</span>)</span><br><span class="line">    cover = serializers.ImageField(label=<span class="string">&#x27;封面&#x27;</span>, required=<span class="literal">False</span>)</span><br><span class="line">    <span class="comment"># 关联关系的序列化</span></span><br><span class="line">    xx = serializers.xxRelatedField</span><br><span class="line">    xx = 关联的序列化器类</span><br></pre></td></tr></table></figure><p>对应的模型类：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">BookInfo</span>(models.Model):</span><br><span class="line">    title = models.CharField(max_length=<span class="number">20</span>, verbose_name=<span class="string">&#x27;名称&#x27;</span>)</span><br><span class="line">    pub_date = models.DateField(verbose_name=<span class="string">&#x27;发布日期&#x27;</span>, null=<span class="literal">True</span>)</span><br><span class="line">    read_num = models.IntegerField(default=<span class="number">0</span>, verbose_name=<span class="string">&#x27;阅读量&#x27;</span>)</span><br><span class="line">    cover = models.ImageField(upload_to=<span class="string">&#x27;booktest&#x27;</span>, verbose_name=<span class="string">&#x27;封面&#x27;</span>, null=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><h4 id="字段与选项-基本和在models中定义的类型一样，仅供参考，后续版本可能有新的"><a href="#字段与选项-基本和在models中定义的类型一样，仅供参考，后续版本可能有新的" class="headerlink" title="字段与选项(基本和在models中定义的类型一样，仅供参考，后续版本可能有新的)"></a>字段与选项(基本和在models中定义的类型一样，仅供参考，后续版本可能有新的)</h4><p><strong>常用字段类型</strong>：</p><table><thead><tr><th>字段</th><th>字段构造方式</th></tr></thead><tbody><tr><td><strong>BooleanField</strong></td><td>BooleanField()</td></tr><tr><td><strong>NullBooleanField</strong></td><td>NullBooleanField()</td></tr><tr><td><strong>CharField</strong></td><td>CharField(max_length&#x3D;None, min_length&#x3D;None, allow_blank&#x3D;False, trim_whitespace&#x3D;True)</td></tr><tr><td><strong>EmailField</strong></td><td>EmailField(max_length&#x3D;None, min_length&#x3D;None, allow_blank&#x3D;False)</td></tr><tr><td><strong>RegexField</strong></td><td>RegexField(regex, max_length&#x3D;None, min_length&#x3D;None, allow_blank&#x3D;False)</td></tr><tr><td><strong>SlugField</strong></td><td>SlugField(max<em>length&#x3D;50, min_length&#x3D;None, allow_blank&#x3D;False)  正则字段，验证正则模式 [a-zA-Z0-9</em>-]+</td></tr><tr><td><strong>URLField</strong></td><td>URLField(max_length&#x3D;200, min_length&#x3D;None, allow_blank&#x3D;False)</td></tr><tr><td><strong>UUIDField</strong></td><td>UUIDField(format&#x3D;’hex_verbose’)  format:  1) <code>&#39;hex_verbose&#39;</code> 如<code>&quot;5ce0e9a5-5ffa-654b-cee0-1238041fb31a&quot;</code>  2） <code>&#39;hex&#39;</code> 如 <code>&quot;5ce0e9a55ffa654bcee01238041fb31a&quot;</code>  3）<code>&#39;int&#39;</code> - 如: <code>&quot;123456789012312313134124512351145145114&quot;</code>  4）<code>&#39;urn&#39;</code> 如: <code>&quot;urn:uuid:5ce0e9a5-5ffa-654b-cee0-1238041fb31a&quot;</code></td></tr><tr><td><strong>IPAddressField</strong></td><td>IPAddressField(protocol&#x3D;’both’, unpack_ipv4&#x3D;False, **options)</td></tr><tr><td><strong>IntegerField</strong></td><td>IntegerField(max_value&#x3D;None, min_value&#x3D;None)</td></tr><tr><td><strong>FloatField</strong></td><td>FloatField(max_value&#x3D;None, min_value&#x3D;None)</td></tr><tr><td><strong>DecimalField</strong></td><td>DecimalField(max_digits, decimal_places, coerce_to_string&#x3D;None, max_value&#x3D;None, min_value&#x3D;None) max_digits: 最多位数 decimal_palces: 小数点位置</td></tr><tr><td><strong>DateTimeField</strong></td><td>DateTimeField(format&#x3D;api_settings.DATETIME_FORMAT, input_formats&#x3D;None)</td></tr><tr><td><strong>DateField</strong></td><td>DateField(format&#x3D;api_settings.DATE_FORMAT, input_formats&#x3D;None)</td></tr><tr><td><strong>TimeField</strong></td><td>TimeField(format&#x3D;api_settings.TIME_FORMAT, input_formats&#x3D;None)</td></tr><tr><td><strong>DurationField</strong></td><td>DurationField()</td></tr><tr><td><strong>ChoiceField</strong></td><td>ChoiceField(choices) choices与Django的用法相同</td></tr><tr><td><strong>MultipleChoiceField</strong></td><td>MultipleChoiceField(choices)</td></tr><tr><td><strong>FileField</strong></td><td>FileField(max_length&#x3D;None, allow_empty_file&#x3D;False, use_url&#x3D;UPLOADED_FILES_USE_URL)</td></tr><tr><td><strong>ImageField</strong></td><td>ImageField(max_length&#x3D;None, allow_empty_file&#x3D;False, use_url&#x3D;UPLOADED_FILES_USE_URL)</td></tr><tr><td><strong>ListField</strong></td><td>ListField(child&#x3D;, min_length&#x3D;None, max_length&#x3D;None)</td></tr><tr><td><strong>DictField</strong></td><td>DictField(child&#x3D;)</td></tr></tbody></table><p><strong>选项参数：</strong></p><table><thead><tr><th>参数名称</th><th>作用</th></tr></thead><tbody><tr><td><strong>max_length</strong></td><td>最大长度</td></tr><tr><td><strong>min_lenght</strong></td><td>最小长度</td></tr><tr><td><strong>allow_blank</strong></td><td>是否允许为空</td></tr><tr><td><strong>trim_whitespace</strong></td><td>是否截断空白字符</td></tr><tr><td><strong>max_value</strong></td><td>最小值</td></tr><tr><td><strong>min_value</strong></td><td>最大值</td></tr></tbody></table><h4 id="通用参数："><a href="#通用参数：" class="headerlink" title="通用参数："></a>通用参数：</h4><table><thead><tr><th>参数名称</th><th>说明</th></tr></thead><tbody><tr><td><strong>read_only</strong></td><td>表明该字段仅用于序列化输出，默认False</td></tr><tr><td><strong>write_only</strong></td><td>表明该字段仅用于反序列化输入，默认False</td></tr><tr><td><strong>required</strong></td><td>表明该字段在反序列化时必须输入，默认True</td></tr><tr><td><strong>default</strong></td><td>反序列化时使用的默认值</td></tr><tr><td><strong>allow_null</strong></td><td>表明该字段是否允许传入None，默认False</td></tr><tr><td><strong>validators</strong></td><td>该字段使用的验证器</td></tr><tr><td><strong>error_messages</strong></td><td>包含错误编号与错误信息的字典</td></tr><tr><td><strong>label</strong></td><td>用于HTML展示API页面时，显示的字段名称</td></tr><tr><td><strong>help_text</strong></td><td>用于HTML展示API页面时，显示的字段帮助提示信息</td></tr></tbody></table><h4 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Serializer(instance=<span class="literal">None</span>, data=empty, **kwarg)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 没有外键关联</span></span><br><span class="line"><span class="keyword">from</span> xxx.models <span class="keyword">import</span> BookInfo</span><br><span class="line">    title = serializers.CharField(label=<span class="string">&#x27;名称&#x27;</span>, max_length=<span class="number">20</span>)</span><br><span class="line">    pub_date = serializers.DateField(label=<span class="string">&#x27;发布日期&#x27;</span>, required=<span class="literal">False</span>)</span><br><span class="line">    read_num = serializers.IntegerField(label=<span class="string">&#x27;阅读量&#x27;</span>, required=<span class="literal">False</span>)</span><br><span class="line">    cover</span><br><span class="line">book = BookInfo(title=<span class="string">&quot;战争与和平&quot;</span>, pub_date=<span class="string">&quot;&quot;</span>, read_num=<span class="number">0</span>)</span><br><span class="line">book.save()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 把BookInfo的instance序列化成json对象</span></span><br><span class="line">book_serializer = BookInfoSerializer(instance=book)</span><br><span class="line"><span class="built_in">print</span>(book_serializer.data)</span><br><span class="line"><span class="comment"># 把json数据反序列化为model对象</span></span><br><span class="line">data = &#123;<span class="string">&quot;title&quot;</span>: <span class="string">&quot;天下&quot;</span>， <span class="string">&quot;pub_date&quot;</span>:<span class="string">&quot;2008-03-21&quot;</span>&#125;</span><br><span class="line">book_unserializer = BookInfoSerializer(data=data)</span><br><span class="line">is_vaild = book_unserializer.is_vaild()</span><br><span class="line"><span class="keyword">if</span> is_vaild:</span><br><span class="line">book_unserializer.save()</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">  <span class="built_in">print</span>(book_unserializer.errors)</span><br><span class="line">  </span><br></pre></td></tr></table></figure><p>is_valid()方法还可以在验证失败时抛出异常serializers.ValidationError，可以通过传递raise_exception&#x3D;True参数开启，REST framework接收到此异常，会向前端返回HTTP 400 Bad Request响应。</p><p>自定义验证行为，可以使用以下三种方法：</p><ol><li>对<code>&lt;field_name&gt;</code>字段进行验证，如</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">BookInfoSerializer</span>(serializers.Serializer):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;图书数据序列化器&quot;&quot;&quot;</span></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">validate_title</span>(<span class="params">self, value</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;django&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> value.lower():</span><br><span class="line">            <span class="keyword">raise</span> serializers.ValidationError(<span class="string">&quot;图书不是关于Django的&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> value</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>validate</strong></li></ol><p>在序列化器中需要同时对多个字段进行比较验证时，可以定义validate方法来验证，如</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">BookInfoSerializer</span>(serializers.Serializer):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;图书数据序列化器&quot;&quot;&quot;</span></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">validate</span>(<span class="params">self, attrs</span>):</span><br><span class="line">        read = attrs[<span class="string">&#x27;bread&#x27;</span>]</span><br><span class="line">        comment = attrs[<span class="string">&#x27;bcomment&#x27;</span>]</span><br><span class="line">        <span class="keyword">if</span> read &lt; comment:</span><br><span class="line">            <span class="keyword">raise</span> serializers.ValidationError(<span class="string">&#x27;阅读量小于评论量&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> attrs</span><br></pre></td></tr></table></figure><ol start="3"><li><strong>validators</strong></li></ol><p>在字段中添加validators选项参数，也可以补充验证行为，如</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">about_django</span>(<span class="params">value</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;django&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> value.lower():</span><br><span class="line">        <span class="keyword">raise</span> serializers.ValidationError(<span class="string">&quot;图书不是关于Django的&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BookInfoSerializer</span>(serializers.Serializer):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;图书数据序列化器&quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">id</span> = serializers.IntegerField(label=<span class="string">&#x27;ID&#x27;</span>, read_only=<span class="literal">True</span>)</span><br><span class="line">    title = serializers.CharField(label=<span class="string">&#x27;名称&#x27;</span>, max_length=<span class="number">20</span>, validators=[about_django])</span><br></pre></td></tr></table></figure><h3 id="保存对象"><a href="#保存对象" class="headerlink" title="保存对象"></a>保存对象</h3><p>serializers.Serializer中提供了数据的保存（save）和更新（update）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">BookInfoSerializer</span>(serializers.Serializer):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;图书数据序列化器&quot;&quot;&quot;</span></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create</span>(<span class="params">self, validated_data</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;新建&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> BookInfo(**validated_data)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">update</span>(<span class="params">self, instance, validated_data</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;更新，instance为要更新的对象实例&quot;&quot;&quot;</span></span><br><span class="line">        instance.title = validated_data.get(<span class="string">&#x27;title&#x27;</span>, instance.title)</span><br><span class="line">        instance.pub_date = validated_data.get(<span class="string">&#x27;pub_date&#x27;</span>, instance.pub_date)</span><br><span class="line">        <span class="keyword">return</span> instance</span><br></pre></td></tr></table></figure><p>在对序列化器进行save()保存时，可以额外传递数据，这些数据可以在create()和update()中的validated_data参数获取到</p><h3 id="模型类序列化器ModelSerializer"><a href="#模型类序列化器ModelSerializer" class="headerlink" title="模型类序列化器ModelSerializer"></a>模型类序列化器ModelSerializer</h3><p>比如我们创建一个BookInfoSerializer：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">BookInfoSerializer</span>(serializers.ModelSerializer):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;图书数据序列化器&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        model = BookInfo</span><br><span class="line">        fields = <span class="string">&#x27;__all__&#x27;</span></span><br></pre></td></tr></table></figure><ul><li>model 指明参照哪个模型类，有了这个就不用像之前字段一个个对应序列化初始化</li><li>fields 指明为模型类的哪些字段生成</li></ul><ol><li>使用<strong>fields</strong>来明确字段，<code>__all__</code>表名包含所有字段，也可以写明具体哪些字段，如</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">BookInfoSerializer</span>(serializers.ModelSerializer):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;图书数据序列化器&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        model = BookInfo</span><br><span class="line">        fields = (<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;title&#x27;</span>, <span class="string">&#x27;pub_date&#x27;</span>)</span><br></pre></td></tr></table></figure><ol start="2"><li>使用<strong>exclude</strong>可以明确排除掉哪些字段</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">BookInfoSerializer</span>(serializers.ModelSerializer):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;图书数据序列化器&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        model = BookInfo</span><br><span class="line">        exclude = (<span class="string">&#x27;image&#x27;</span>,)</span><br></pre></td></tr></table></figure><ol start="3"><li>显示指明字段，如：</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">xxxSerializer</span>(serializers.ModelSerializer):</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        model = xxx</span><br><span class="line">        fields = (<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;gender&#x27;</span>, <span class="string">&#x27;comment&#x27;</span>, <span class="string">&#x27;book&#x27;</span>)</span><br></pre></td></tr></table></figure><ol start="4"><li>指明只读字段</li></ol><p>可以通过<strong>read_only_fields</strong>指明只读字段，即仅用于序列化输出的字段</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">BookInfoSerializer</span>(serializers.ModelSerializer):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;图书数据序列化器&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Meta</span>:</span><br><span class="line">        model = BookInfo</span><br><span class="line">        fields = (<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;btitle&#x27;</span>, <span class="string">&#x27;bpub_date&#x27;</span>， <span class="string">&#x27;bread&#x27;</span>, <span class="string">&#x27;bcomment&#x27;</span>)</span><br><span class="line">        read_only_fields = (<span class="string">&#x27;id&#x27;</span>, <span class="string">&#x27;bread&#x27;</span>, <span class="string">&#x27;bcomment&#x27;</span>)</span><br></pre></td></tr></table></figure><p>添加额外参数</p><p><strong>extra_kwargs</strong>参数为ModelSerializer添加或修改原有的选项参数</p><h2 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h2><h2 id="1-两个基类"><a href="#1-两个基类" class="headerlink" title="1. 两个基类"></a>1. 两个基类</h2><h3 id="1-APIView"><a href="#1-APIView" class="headerlink" title="1. APIView"></a>1. APIView</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rest_framework.views.APIView</span><br></pre></td></tr></table></figure><p>APIView</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">APIView</span>(<span class="title class_ inherited__">View</span>):</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dispatch</span>(<span class="params">self, request, *args, **kwargs</span>):</span><br><span class="line">        self.args = args</span><br><span class="line">        self.kwargs = kwargs</span><br><span class="line">        <span class="comment"># 调用 APIView.self.initialize_request，创建一个新的Request对象</span></span><br><span class="line">        request = self.initialize_request(request, *args, **kwargs)</span><br><span class="line">        self.request = request</span><br><span class="line">        self.headers = self.default_response_headers  <span class="comment"># deprecate?</span></span><br><span class="line">        <span class="comment"># ################把一些值封装到新的Request对象 ################</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            self.initial(request, *args, **kwargs)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># Get the appropriate handler method</span></span><br><span class="line">            <span class="comment"># request.method，通过新request的getattr方法调用django的request.method</span></span><br><span class="line">            <span class="keyword">if</span> request.method.lower() <span class="keyword">in</span> self.http_method_names:</span><br><span class="line">                <span class="comment"># getattr(self,&quot;get&quot;)  =&gt; self.get</span></span><br><span class="line">                handler = <span class="built_in">getattr</span>(self, request.method.lower(),self.http_method_not_allowed)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                handler = self.http_method_not_allowed</span><br><span class="line"></span><br><span class="line">            response = handler(request, *args, **kwargs)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> exc:</span><br><span class="line">            response = self.handle_exception(exc)</span><br><span class="line"></span><br><span class="line">        self.response = self.finalize_response(request, response, *args, **kwargs)</span><br><span class="line">        <span class="keyword">return</span> self.response</span><br></pre></td></tr></table></figure><p><code>APIView</code>是REST framework提供的所有视图的基类，继承自Django的<code>View</code>父类。</p><p><code>APIView</code>与<code>View</code>的不同之处在于：</p><ul><li>传入到视图方法中的是REST framework的<code>Request</code>对象，而不是Django的<code>HttpRequeset</code>对象；</li><li>视图方法可以返回REST framework的<code>Response</code>对象，视图会为响应数据设置（render）符合前端要求的格式；</li><li>任何<code>APIException</code>异常都会被捕获到，并且处理成合适的响应信息；</li><li>在进行dispatch()分发前，会对请求进行身份认证、权限检查、流量控制。</li></ul><h5 id="支持定义的属性："><a href="#支持定义的属性：" class="headerlink" title="支持定义的属性："></a>支持定义的属性：</h5><ul><li><strong>authentication_classes</strong> 列表或元祖，身份认证类</li><li><strong>permissoin_classes</strong> 列表或元祖，权限检查类</li><li><strong>throttle_classes</strong> 列表或元祖，流量控制类</li></ul><p>在<code>APIView</code>中仍以常规的类视图定义方法来实现get() 、post() 或者其他请求方式的方法。</p><p>举例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.views <span class="keyword">import</span> APIView</span><br><span class="line"><span class="keyword">from</span> rest_framework.response <span class="keyword">import</span> Response</span><br><span class="line"></span><br><span class="line"><span class="comment"># url(r&#x27;^books/$&#x27;, views.BookListView.as_view()),</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BookListView</span>(<span class="title class_ inherited__">APIView</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self, request</span>):</span><br><span class="line">        books = BookInfo.objects.<span class="built_in">all</span>()</span><br><span class="line">        serializer = BookInfoSerializer(books, many=<span class="literal">True</span>)</span><br><span class="line">        <span class="keyword">return</span> Response(serializer.data)</span><br></pre></td></tr></table></figure><h3 id="2-GenericAPIView"><a href="#2-GenericAPIView" class="headerlink" title="2. GenericAPIView"></a>2. GenericAPIView</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rest_framework.generics.GenericAPIView</span><br></pre></td></tr></table></figure><p>继承自<code>APIVIew</code>，增加了对于列表视图和详情视图可能用到的通用支持方法。通常使用时，可搭配一个或多个Mixin扩展类。</p><h5 id="支持定义的属性：-1"><a href="#支持定义的属性：-1" class="headerlink" title="支持定义的属性："></a>支持定义的属性：</h5><ul><li>列表视图与详情视图通用：<ul><li><strong>queryset</strong> 列表视图的查询集</li><li><strong>serializer_class</strong> 视图使用的序列化器</li></ul></li><li>列表视图使用：<ul><li><strong>pagination_class</strong> 分页控制类</li><li><strong>filter_backends</strong> 过滤控制后端</li></ul></li><li>详情页视图使用：<ul><li><strong>lookup_field</strong> 查询单一数据库对象时使用的条件字段，默认为’<code>pk</code>‘</li><li><strong>lookup_url_kwarg</strong> 查询单一数据时URL中的参数关键字名称，默认与<strong>look_field</strong>相同</li></ul></li></ul><h5 id="提供的方法："><a href="#提供的方法：" class="headerlink" title="提供的方法："></a>提供的方法：</h5><ul><li><p>列表视图与详情视图通用：</p><ul><li><p><strong>get_queryset(self)</strong></p><p>返回视图使用的查询集，是列表视图与详情视图获取数据的基础，默认返回<code>queryset</code>属性，可以重写，例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get_queryset</span>(<span class="params">self</span>):</span><br><span class="line">    user = self.request.user</span><br><span class="line">    <span class="keyword">return</span> user.accounts.<span class="built_in">all</span>()</span><br></pre></td></tr></table></figure></li><li><p><strong>get_serializer_class(self)</strong></p><p>返回序列化器类，默认返回<code>serializer_class</code>，可以重写，例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get_serializer_class</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="keyword">if</span> self.request.user.is_staff:</span><br><span class="line">        <span class="keyword">return</span> FullAccountSerializer</span><br><span class="line">    <span class="keyword">return</span> BasicAccountSerializer</span><br></pre></td></tr></table></figure></li><li><h5 id="get-serializer-self-args-kwargs"><a href="#get-serializer-self-args-kwargs" class="headerlink" title="get_serializer(self, *args, **kwargs)"></a>get_serializer(self, *args, **kwargs)</h5><p>返回序列化器对象，被其他视图或扩展类使用，如果我们在视图中想要获取序列化器对象，可以直接调用此方法。</p><p><strong>注意，在提供序列化器对象的时候，REST framework会向对象的context属性补充三个数据：request、format、view，这三个数据对象可以在定义序列化器时使用。</strong></p></li></ul></li><li><p>详情视图使用：</p><ul><li><p><strong>get_object(self)</strong> 返回详情视图所需的模型类数据对象，默认使用<code>lookup_field</code>参数来过滤queryset。 在试图中可以调用该方法获取详情信息的模型类对象。</p><p><strong>若详情访问的模型类对象不存在，会返回404。</strong></p><p><strong>该方法会默认使用APIView提供的check_object_permissions方法检查当前对象是否有权限被访问。</strong></p></li></ul></li></ul><p>举例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># url(r&#x27;^books/(?P&lt;pk&gt;\d+)/$&#x27;, views.BookDetailView.as_view()),</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BookDetailView</span>(<span class="title class_ inherited__">GenericAPIView</span>):</span><br><span class="line">    queryset = BookInfo.objects.<span class="built_in">all</span>()</span><br><span class="line">    serializer_class = BookInfoSerializer</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self, request, pk</span>):</span><br><span class="line">        book = self.get_object()</span><br><span class="line">        serializer = self.get_serializer(book)</span><br><span class="line">        <span class="keyword">return</span> Response(serializer.data)</span><br></pre></td></tr></table></figure><h2 id="2-五个扩展类-配合-GenericAPIview使⽤用-继承⾃自object"><a href="#2-五个扩展类-配合-GenericAPIview使⽤用-继承⾃自object" class="headerlink" title="2. 五个扩展类(配合 GenericAPIview使⽤用) 继承⾃自object"></a>2. 五个扩展类(配合 GenericAPIview使⽤用) 继承⾃自object</h2><h3 id="1-ListModelMixin"><a href="#1-ListModelMixin" class="headerlink" title="1. ListModelMixin"></a>1. ListModelMixin</h3><p>列表视图扩展类，提供<code>list(request, *args, **kwargs)</code>方法快速实现列表视图，返回200状态码。</p><p>该Mixin的list方法会对数据进行过滤和分页。</p><p>源代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ListModelMixin</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    List a queryset.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">list</span>(<span class="params">self, request, *args, **kwargs</span>):</span><br><span class="line">        <span class="comment"># 过滤</span></span><br><span class="line">        queryset = self.filter_queryset(self.get_queryset())</span><br><span class="line">        <span class="comment"># 分页</span></span><br><span class="line">        page = self.paginate_queryset(queryset)</span><br><span class="line">        <span class="keyword">if</span> page <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            serializer = self.get_serializer(page, many=<span class="literal">True</span>)</span><br><span class="line">            <span class="keyword">return</span> self.get_paginated_response(serializer.data)</span><br><span class="line">        <span class="comment"># 序列化</span></span><br><span class="line">        serializer = self.get_serializer(queryset, many=<span class="literal">True</span>)</span><br><span class="line">        <span class="keyword">return</span> Response(serializer.data)</span><br></pre></td></tr></table></figure><p>举例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.mixins <span class="keyword">import</span> ListModelMixin</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BookListView</span>(ListModelMixin, GenericAPIView):</span><br><span class="line">    queryset = BookInfo.objects.<span class="built_in">all</span>()</span><br><span class="line">    serializer_class = BookInfoSerializer</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self, request</span>):</span><br><span class="line">        <span class="keyword">return</span> self.<span class="built_in">list</span>(request)</span><br></pre></td></tr></table></figure><h3 id="2-CreateModelMixin"><a href="#2-CreateModelMixin" class="headerlink" title="2. CreateModelMixin"></a>2. CreateModelMixin</h3><p>创建视图扩展类，提供<code>create(request, *args, **kwargs)</code>方法快速实现创建资源的视图，成功返回201状态码。</p><p>如果序列化器对前端发送的数据验证失败，返回400错误。</p><p>源代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">CreateModelMixin</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Create a model instance.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create</span>(<span class="params">self, request, *args, **kwargs</span>):</span><br><span class="line">        <span class="comment"># 获取序列化器</span></span><br><span class="line">        serializer = self.get_serializer(data=request.data)</span><br><span class="line">        <span class="comment"># 验证</span></span><br><span class="line">        serializer.is_valid(raise_exception=<span class="literal">True</span>)</span><br><span class="line">        <span class="comment"># 保存</span></span><br><span class="line">        self.perform_create(serializer)</span><br><span class="line">        headers = self.get_success_headers(serializer.data)</span><br><span class="line">        <span class="keyword">return</span> Response(serializer.data, status=status.HTTP_201_CREATED, headers=headers)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">perform_create</span>(<span class="params">self, serializer</span>):</span><br><span class="line">        serializer.save()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_success_headers</span>(<span class="params">self, data</span>):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">return</span> &#123;<span class="string">&#x27;Location&#x27;</span>: <span class="built_in">str</span>(data[api_settings.URL_FIELD_NAME])&#125;</span><br><span class="line">        <span class="keyword">except</span> (TypeError, KeyError):</span><br><span class="line">            <span class="keyword">return</span> &#123;&#125;</span><br></pre></td></tr></table></figure><h3 id="3-RetrieveModelMixin"><a href="#3-RetrieveModelMixin" class="headerlink" title="3. RetrieveModelMixin"></a>3. RetrieveModelMixin</h3><p>详情视图扩展类，提供<code>retrieve(request, *args, **kwargs)</code>方法，可以快速实现返回一个存在的数据对象。</p><p>如果存在，返回200， 否则返回404。</p><p>源代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">RetrieveModelMixin</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Retrieve a model instance.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">retrieve</span>(<span class="params">self, request, *args, **kwargs</span>):</span><br><span class="line">        <span class="comment"># 获取对象，会检查对象的权限</span></span><br><span class="line">        instance = self.get_object()</span><br><span class="line">        <span class="comment"># 序列化</span></span><br><span class="line">        serializer = self.get_serializer(instance)</span><br><span class="line">        <span class="keyword">return</span> Response(serializer.data)</span><br></pre></td></tr></table></figure><p>举例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">BookDetailView</span>(RetrieveModelMixin, GenericAPIView):</span><br><span class="line">    queryset = BookInfo.objects.<span class="built_in">all</span>()</span><br><span class="line">    serializer_class = BookInfoSerializer</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self, request, pk</span>):</span><br><span class="line">        <span class="keyword">return</span> self.retrieve(request)</span><br></pre></td></tr></table></figure><h3 id="4-UpdateModelMixin"><a href="#4-UpdateModelMixin" class="headerlink" title="4. UpdateModelMixin"></a>4. UpdateModelMixin</h3><p>更新视图扩展类，提供<code>update(request, *args, **kwargs)</code>方法，可以快速实现更新一个存在的数据对象。</p><p>同时也提供<code>partial_update(request, *args, **kwargs)</code>方法，可以实现局部更新。</p><p>成功返回200，序列化器校验数据失败时，返回400错误。</p><p>源代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">UpdateModelMixin</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Update a model instance.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">update</span>(<span class="params">self, request, *args, **kwargs</span>):</span><br><span class="line">        partial = kwargs.pop(<span class="string">&#x27;partial&#x27;</span>, <span class="literal">False</span>)</span><br><span class="line">        instance = self.get_object()</span><br><span class="line">        serializer = self.get_serializer(instance, data=request.data, partial=partial)</span><br><span class="line">        serializer.is_valid(raise_exception=<span class="literal">True</span>)</span><br><span class="line">        self.perform_update(serializer)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">getattr</span>(instance, <span class="string">&#x27;_prefetched_objects_cache&#x27;</span>, <span class="literal">None</span>):</span><br><span class="line">            <span class="comment"># If &#x27;prefetch_related&#x27; has been applied to a queryset, we need to</span></span><br><span class="line">            <span class="comment"># forcibly invalidate the prefetch cache on the instance.</span></span><br><span class="line">            instance._prefetched_objects_cache = &#123;&#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Response(serializer.data)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">perform_update</span>(<span class="params">self, serializer</span>):</span><br><span class="line">        serializer.save()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">partial_update</span>(<span class="params">self, request, *args, **kwargs</span>):</span><br><span class="line">        kwargs[<span class="string">&#x27;partial&#x27;</span>] = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> self.update(request, *args, **kwargs)</span><br></pre></td></tr></table></figure><h3 id="5-DestroyModelMixin"><a href="#5-DestroyModelMixin" class="headerlink" title="5. DestroyModelMixin"></a>5. DestroyModelMixin</h3><p>删除视图扩展类，提供<code>destroy(request, *args, **kwargs)</code>方法，可以快速实现删除一个存在的数据对象。</p><p>成功返回204，不存在返回404。</p><p>源代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">DestroyModelMixin</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Destroy a model instance.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">destroy</span>(<span class="params">self, request, *args, **kwargs</span>):</span><br><span class="line">        instance = self.get_object()</span><br><span class="line">        self.perform_destroy(instance)</span><br><span class="line">        <span class="keyword">return</span> Response(status=status.HTTP_204_NO_CONTENT)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">perform_destroy</span>(<span class="params">self, instance</span>):</span><br><span class="line">        instance.delete()</span><br></pre></td></tr></table></figure><h2 id="3-几个可用子类视图（重点掌握）"><a href="#3-几个可用子类视图（重点掌握）" class="headerlink" title="3. 几个可用子类视图（重点掌握）"></a>3. 几个可用子类视图（重点掌握）</h2><h3 id="1-CreateAPIView"><a href="#1-CreateAPIView" class="headerlink" title="1. CreateAPIView"></a>1. CreateAPIView</h3><p>提供 post 方法</p><p>继承自： GenericAPIView、CreateModelMixin</p><h3 id="2-ListAPIView"><a href="#2-ListAPIView" class="headerlink" title="2. ListAPIView"></a>2. ListAPIView</h3><p>提供 get 方法</p><p>继承自：GenericAPIView、ListModelMixin</p><h3 id="3-RetireveAPIView"><a href="#3-RetireveAPIView" class="headerlink" title="3. RetireveAPIView"></a>3. RetireveAPIView</h3><p>提供 get 方法</p><p>继承自: GenericAPIView、RetrieveModelMixin</p><h3 id="4-DestoryAPIView"><a href="#4-DestoryAPIView" class="headerlink" title="4. DestoryAPIView"></a>4. DestoryAPIView</h3><p>提供 delete 方法</p><p>继承自：GenericAPIView、DestoryModelMixin</p><h3 id="5-UpdateAPIView"><a href="#5-UpdateAPIView" class="headerlink" title="5. UpdateAPIView"></a>5. UpdateAPIView</h3><p>提供 put 和 patch 方法</p><p>继承自：GenericAPIView、UpdateModelMixin</p><h3 id="6-RetrieveUpdateAPIView"><a href="#6-RetrieveUpdateAPIView" class="headerlink" title="6. RetrieveUpdateAPIView"></a>6. RetrieveUpdateAPIView</h3><p>提供 get、put、patch方法</p><p>继承自： GenericAPIView、RetrieveModelMixin、UpdateModelMixin</p><h3 id="7-RetrieveUpdateDestoryAPIView"><a href="#7-RetrieveUpdateDestoryAPIView" class="headerlink" title="7. RetrieveUpdateDestoryAPIView"></a>7. RetrieveUpdateDestoryAPIView</h3><p>提供 get、put、patch、delete方法</p><p>继承自：GenericAPIView、RetrieveModelMixin、UpdateModelMixin、DestoryModelMixin</p><h1 id="视图集ViewSet（重点掌握）"><a href="#视图集ViewSet（重点掌握）" class="headerlink" title="视图集ViewSet（重点掌握）"></a>视图集ViewSet（重点掌握）</h1><p>使用视图集ViewSet，可以将一系列逻辑相关的动作放到一个类中：</p><ul><li>list() 提供一组数据</li><li>retrieve() 提供单个数据</li><li>create() 创建数据</li><li>update() 保存数据</li><li>destory() 删除数据</li></ul><p>ViewSet视图集类不再实现get()、post()等方法，而是实现动作 <strong>action</strong> 如 list() 、create() 等。</p><p>视图集只在使用as_view()方法的时候，才会将<strong>action</strong>动作与具体请求方式对应上。如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">BookInfoViewSet</span>(viewsets.ViewSet):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">list</span>(<span class="params">self, request</span>):</span><br><span class="line">        ...</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">retrieve</span>(<span class="params">self, request, pk=<span class="literal">None</span></span>):</span><br><span class="line">        ...</span><br></pre></td></tr></table></figure><p>在设置路由时，我们可以如下操作</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">urlpatterns = [</span><br><span class="line">    url(<span class="string">r&#x27;^books/$&#x27;</span>, BookInfoViewSet.as_view(&#123;<span class="string">&#x27;get&#x27;</span>:<span class="string">&#x27;list&#x27;</span>&#125;),</span><br><span class="line">    url(<span class="string">r&#x27;^books/(?P&lt;pk&gt;\d+)/$&#x27;</span>, BookInfoViewSet.as_view(&#123;<span class="string">&#x27;get&#x27;</span>: <span class="string">&#x27;retrieve&#x27;</span>&#125;)</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="action属性"><a href="#action属性" class="headerlink" title="action属性"></a>action属性</h3><p>在视图集中，我们可以通过action对象属性来获取当前请求视图集时的action动作是哪个。</p><p>例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get_serializer_class</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="keyword">if</span> self.action == <span class="string">&#x27;create&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> OrderCommitSerializer</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> OrderDataSerializer</span><br></pre></td></tr></table></figure><h2 id="常用视图集父类"><a href="#常用视图集父类" class="headerlink" title="常用视图集父类"></a>常用视图集父类</h2><h4 id="1-ViewSet"><a href="#1-ViewSet" class="headerlink" title="1. ViewSet"></a>1. ViewSet</h4><p>继承自<code>APIView</code>，作用也与APIView基本类似，提供了身份认证、权限校验、流量管理等。</p><p>在ViewSet中，没有提供任何动作action方法，需要我们自己实现action方法。</p><h4 id="2-GenericViewSet"><a href="#2-GenericViewSet" class="headerlink" title="2. GenericViewSet"></a>2. GenericViewSet</h4><p>继承自<code>GenericAPIView</code>，作用也与GenericAPIVIew类似，提供了get_object、get_queryset等方法便于列表视图与详情信息视图的开发。</p><h4 id="3-ModelViewSet"><a href="#3-ModelViewSet" class="headerlink" title="3. ModelViewSet"></a>3. ModelViewSet</h4><p>继承自<code>GenericAPIVIew</code>，同时包括了ListModelMixin、RetrieveModelMixin、CreateModelMixin、UpdateModelMixin、DestoryModelMixin。</p><h4 id="4-ReadOnlyModelViewSet"><a href="#4-ReadOnlyModelViewSet" class="headerlink" title="4. ReadOnlyModelViewSet"></a>4. ReadOnlyModelViewSet</h4><p>继承自<code>GenericAPIVIew</code>，同时包括了ListModelMixin、RetrieveModelMixin。</p><h2 id="视图集中定义附加action动作"><a href="#视图集中定义附加action动作" class="headerlink" title="视图集中定义附加action动作"></a>视图集中定义附加action动作</h2><p>在视图集中，除了上述默认的方法动作外，还可以添加自定义动作。</p><p>添加自定义动作需要使用<code>rest_framework.decorators.action</code>装饰器。</p><p>以action装饰器装饰的方法名会作为action动作名，与list、retrieve等同。</p><p>action装饰器可以接收两个参数：</p><ul><li><p><strong>methods</strong>: 该action支持的请求方式，列表传递</p></li><li><p>detail</p><p>: 表示是action中要处理的是否是视图资源的对象（即是否通过url路径获取主键）</p><ul><li>True 表示使用通过URL获取的主键对应的数据对象</li><li>False 表示不使用URL获取主键</li></ul></li></ul><p>举例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> mixins</span><br><span class="line"><span class="keyword">from</span> rest_framework.viewsets <span class="keyword">import</span> GenericViewSet</span><br><span class="line"><span class="keyword">from</span> rest_framework.decorators <span class="keyword">import</span> action</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BookInfoViewSet</span>(mixins.ListModelMixin, mixins.RetrieveModelMixin, GenericViewSet):</span><br><span class="line">    queryset = BookInfo.objects.<span class="built_in">all</span>()</span><br><span class="line">    serializer_class = BookInfoSerializer</span><br><span class="line"></span><br><span class="line">    <span class="comment"># detail为False 表示不需要处理具体的BookInfo对象</span></span><br><span class="line"><span class="meta">    @action(<span class="params">methods=[<span class="string">&#x27;get&#x27;</span>], detail=<span class="literal">False</span></span>)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">latest</span>(<span class="params">self, request</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        返回最新的图书信息</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        book = BookInfo.objects.latest(<span class="string">&#x27;id&#x27;</span>)</span><br><span class="line">        serializer = self.get_serializer(book)</span><br><span class="line">        <span class="keyword">return</span> Response(serializer.data)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># detail为True，表示要处理具体与pk主键对应的BookInfo对象</span></span><br><span class="line"><span class="meta">    @action(<span class="params">methods=[<span class="string">&#x27;put&#x27;</span>], detail=<span class="literal">True</span></span>)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">read</span>(<span class="params">self, request, pk</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        修改图书的阅读量数据</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        book = self.get_object()</span><br><span class="line">        book.bread = request.data.get(<span class="string">&#x27;read&#x27;</span>)</span><br><span class="line">        book.save()</span><br><span class="line">        serializer = self.get_serializer(book)</span><br><span class="line">        <span class="keyword">return</span> Response(serializer.data)</span><br></pre></td></tr></table></figure><p>url的定义</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">urlpatterns = [</span><br><span class="line">    url(<span class="string">r&#x27;^books/$&#x27;</span>, views.BookInfoViewSet.as_view(&#123;<span class="string">&#x27;get&#x27;</span>: <span class="string">&#x27;list&#x27;</span>&#125;)),</span><br><span class="line">    url(<span class="string">r&#x27;^books/latest/$&#x27;</span>, views.BookInfoViewSet.as_view(&#123;<span class="string">&#x27;get&#x27;</span>: <span class="string">&#x27;latest&#x27;</span>&#125;)),</span><br><span class="line">    url(<span class="string">r&#x27;^books/(?P&lt;pk&gt;\d+)/$&#x27;</span>, views.BookInfoViewSet.as_view(&#123;<span class="string">&#x27;get&#x27;</span>: <span class="string">&#x27;retrieve&#x27;</span>&#125;)),</span><br><span class="line">    url(<span class="string">r&#x27;^books/(?P&lt;pk&gt;\d+)/read/$&#x27;</span>, views.BookInfoViewSet.as_view(&#123;<span class="string">&#x27;put&#x27;</span>: <span class="string">&#x27;read&#x27;</span>&#125;)),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="路由Routers"><a href="#路由Routers" class="headerlink" title="路由Routers"></a>路由Routers</h2><p>对于视图集ViewSet，我们除了可以自己手动指明请求方式与动作action之间的对应关系外，还可以使用Routers来帮助我们快速实现路由信息。</p><p>REST framework提供了两个router</p><ul><li><strong>SimpleRouter</strong></li><li><strong>DefaultRouter</strong></li></ul><h2 id="1-使用方法"><a href="#1-使用方法" class="headerlink" title="1. 使用方法"></a>1. 使用方法</h2><p>1.创建router对象，并注册视图集，例如</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> routers</span><br><span class="line"></span><br><span class="line">router = routers.SimpleRouter()</span><br><span class="line">router.register(<span class="string">r&#x27;books&#x27;</span>, BookInfoViewSet, base_name=<span class="string">&#x27;book&#x27;</span>)</span><br></pre></td></tr></table></figure><p>register(prefix, viewset, base_name)</p><ul><li>prefix 该视图集的路由前缀</li><li>viewset 视图集</li><li>base_name 路由名称的前缀</li></ul><p>如上述代码会形成的路由如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">^books/$    name: book-<span class="built_in">list</span></span><br><span class="line">^books/&#123;pk&#125;/$   name: book-detail</span><br></pre></td></tr></table></figure><p>2.添加路由数据</p><p>可以有两种方式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">urlpatterns = [</span><br><span class="line">    ...</span><br><span class="line">]</span><br><span class="line">urlpatterns += router.urls</span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">urlpatterns = [</span><br><span class="line">    ...</span><br><span class="line">    url(<span class="string">r&#x27;^&#x27;</span>, include(router.urls))</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="2-视图集中包含附加action的"><a href="#2-视图集中包含附加action的" class="headerlink" title="2. 视图集中包含附加action的"></a>2. 视图集中包含附加action的</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">BookInfoViewSet</span>(mixins.ListModelMixin, mixins.RetrieveModelMixin, GenericViewSet):</span><br><span class="line">    queryset = BookInfo.objects.<span class="built_in">all</span>()</span><br><span class="line">    serializer_class = BookInfoSerializer</span><br><span class="line"></span><br><span class="line"><span class="meta">    @action(<span class="params">methods=[<span class="string">&#x27;get&#x27;</span>], detail=<span class="literal">False</span></span>)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">latest</span>(<span class="params">self, request</span>):</span><br><span class="line">        ...</span><br><span class="line"></span><br><span class="line"><span class="meta">    @action(<span class="params">methods=[<span class="string">&#x27;put&#x27;</span>], detail=<span class="literal">True</span></span>)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">read</span>(<span class="params">self, request, pk</span>):</span><br><span class="line">        ...</span><br></pre></td></tr></table></figure><p>此视图集会形成的路由：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">^books/latest/$    name: book-latest</span><br><span class="line">^books/&#123;pk&#125;/read/$  name: book-read</span><br></pre></td></tr></table></figure><h2 id="DRF的版本控制"><a href="#DRF的版本控制" class="headerlink" title="DRF的版本控制"></a>DRF的版本控制</h2><p>E:\python3.7.6\Lib\site-packages\rest_framework\views.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">initial</span>(<span class="params">self, request, *args, **kwargs</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Runs anything that needs to occur prior to calling the method handler.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    self.format_kwarg = self.get_format_suffix(**kwargs)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Perform content negotiation and store the accepted info on the request</span></span><br><span class="line">    neg = self.perform_content_negotiation(request)</span><br><span class="line">    request.accepted_renderer, request.accepted_media_type = neg</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Determine the API version, if versioning is in use.</span></span><br><span class="line">    version, scheme = self.determine_version(request, *args, **kwargs)</span><br><span class="line">    request.version, request.versioning_scheme = version, scheme</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Ensure that the incoming request is permitted</span></span><br><span class="line">    self.perform_authentication(request)</span><br><span class="line">    self.check_permissions(request)</span><br><span class="line">    self.check_throttles(request)</span><br></pre></td></tr></table></figure><p>E:\python3.7.6\Lib\site-packages\rest_framework\views.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">versioning_class = api_settings.DEFAULT_VERSIONING_CLASS</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">determine_version</span>(<span class="params">self, request, *args, **kwargs</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    If versioning is being used, then determine any API version for the</span></span><br><span class="line"><span class="string">    incoming request. Returns a two-tuple of (version, versioning_scheme)</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> self.versioning_class <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">return</span> (<span class="literal">None</span>, <span class="literal">None</span>)</span><br><span class="line">    scheme = self.versioning_class()</span><br><span class="line">    <span class="keyword">return</span> (scheme.determine_version(request, *args, **kwargs), scheme)</span><br></pre></td></tr></table></figure><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 全局配置</span></span><br><span class="line">REST_FRAMEWORK = &#123;</span><br><span class="line">    <span class="string">&#x27;DEFAULT_VERSIONING_CLASS&#x27;</span>: <span class="string">&quot;rest_framework.versioning.URLPathVersioning&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">REST_FRAMEWORK = &#123;</span><br><span class="line">    <span class="string">&#x27;DEFAULT_VERSIONING_CLASS&#x27;</span>:<span class="string">&quot;rest_framework.versioning.URLPathVersioning&quot;</span>,</span><br><span class="line">    <span class="string">&quot;ALLOWED_VERSIONS&quot;</span>:[<span class="string">&#x27;v1&#x27;</span>,<span class="string">&#x27;v2&#x27;</span>] <span class="comment"># allowed_versions</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 项目的urls</span></span><br><span class="line">]</span><br><span class="line">urlpatterns = [</span><br><span class="line">    url(<span class="string">r&#x27;^admin/&#x27;</span>, admin.site.urls),</span><br><span class="line">    url(<span class="string">r&#x27;^api/(?P&lt;version&gt;\w+)/&#x27;</span>, include(<span class="string">&#x27;api.urls&#x27;</span>)),</span><br><span class="line">]</span><br><span class="line"><span class="comment"># app的urls</span></span><br><span class="line">urlpatterns = [</span><br><span class="line">    url(<span class="string">r&#x27;^order/$&#x27;</span>, views.OrderView.as_view()),</span><br></pre></td></tr></table></figure><h1 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h1><p>推荐一个查看类继承关系的方法：<a href="https://blog.csdn.net/tscaxx/article/details/106819855">https://blog.csdn.net/tscaxx/article/details/106819855</a></p><p>drf的文档：</p><p>drf-yasg</p><p>django+fastapi：</p><p><a href="https://django-ninja.rest-framework.com/">https://django-ninja.rest-framework.com/</a></p>]]></content>
      
      
      <categories>
          
          <category> django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>产品开发</title>
      <link href="/post/d3f4b3a5.html"/>
      <url>/post/d3f4b3a5.html</url>
      
        <content type="html"><![CDATA[<ol><li>确认需求<ol><li>思考需求的功能性，复杂性，可行性，周期性。。。</li></ol></li><li>迭代的思想<ol><li>快速定位产品的核心功能，去除细枝末节，用最短的时间开发第一代产品</li><li>如何定位核心的功能<ol><li>产品的目标是什么？核心用户是谁？应用的场景？</li></ol></li></ol></li><li>功能的实现<ol><li>任务拆解，拆分产品的最小功能</li><li>需要解决最短时间可完成的功能</li><li>用<strong>最快的可扩展性</strong>的代码实现基本的功能</li><li>对于需要可能频繁变更的功能增加扩展性吗，同样的功能复用性</li><li>遵循DRY（Don’t Repeat Yourself）原则</li></ol></li><li>数据库设计<ol><li>表名称，字段名称清晰易读</li><li>每张表独立职责，不存储无关的信息，相关信息放一张表</li><li>长文本和短文本存储分离</li><li>当前数据和历史数据分离</li><li>设置合适的索引</li><li>不使用关联查询<ol><li>如果数据量大的时候，为了扩展，需要分库，这样无法join</li></ol></li><li>删除数据，逻辑删除</li></ol></li><li>技术方案文档编写<ol><li>系统设计</li><li>流程设计</li><li>任务调度设计</li><li>。。。</li></ol></li><li>代码质量保证<ol><li>code review</li><li>单元测试</li><li>自动化测试</li></ol></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>django常用的命令和语句</title>
      <link href="/post/b5b80a84.html"/>
      <url>/post/b5b80a84.html</url>
      
        <content type="html"><![CDATA[<h2 id="常见的命令"><a href="#常见的命令" class="headerlink" title="常见的命令"></a>常见的命令</h2><ul><li><p>python manage.py showmigrations，这个命令是显示出Django项目中的所有migrations文件及其状态</p><p>[x]　代表已经执行完毕的migrations文件，　[]表示未执行或执行失败的文件。</p></li><li><p>django-admin startproject mysite 创建Django项目</p></li><li><p>python manage.py runserver 启动服务</p></li><li><p>python manage.py startapp 创建应用</p></li><li><p>python manage.py createsuperuser 创建后台管理超级用户</p></li><li><p>python manage.py makemigrations <app>  生出迁移文件</app></p></li><li><p>python manage.py migrate 执行迁移文件产生表</p></li><li><p>python manage.py shell</p></li><li><p>python manage.py inspectdb &gt; models.py</p></li><li><p>python3 manage.py sqlmigrate <app> &lt;迁移文件前面的序号（0001）&gt;   如何查看迁移文件对应的sql语句</app></p></li><li><p>python<br>def showsql():<br>“””<br>  查看原生的sql<br>  “””<br>from django.db import connection<br>queries &#x3D; connection.queries<br>print(queries[-1][‘sql’])</p></li></ul><h2 id="单表"><a href="#单表" class="headerlink" title="单表"></a>单表</h2><h3 id="查询一个"><a href="#查询一个" class="headerlink" title="查询一个"></a>查询一个</h3><p>xxx.objects.get(mid&#x3D;147)</p><h3 id="获得第一个"><a href="#获得第一个" class="headerlink" title="获得第一个"></a>获得第一个</h3><p>xxx.objects.first()</p><h3 id="获得最后一个"><a href="#获得最后一个" class="headerlink" title="获得最后一个"></a>获得最后一个</h3><p>xxx.objects.last()</p><h3 id="获取总数"><a href="#获取总数" class="headerlink" title="获取总数"></a>获取总数</h3><p>xxx.objects.count()</p><h3 id="获得所有"><a href="#获得所有" class="headerlink" title="获得所有"></a>获得所有</h3><p>xxx.objects.all()</p><p>注意：LIMIT 21不是直接查询所有</p><p>指出切片 （不支持负数索引）xxx.objects.all()[20:40]</p><h3 id="过滤"><a href="#过滤" class="headerlink" title="过滤"></a>过滤</h3><p>xxx.objects.filter(name&#x3D;’jane’)</p><h3 id="模糊查询"><a href="#模糊查询" class="headerlink" title="模糊查询"></a>模糊查询</h3><p>查询j结尾的<br>xx.objects.filter(name__endswith&#x3D;’j’)<br>查询j开头的<br>xx.objects.filter(name__startswith&#x3D;’j’)<br>查询包含j的<br>xx.objects.filter(name__contains&#x3D;’j’)<br>完全相等<br>xx.objects.filter(name__exact&#x3D;’j’)</p><h3 id="查询某个字段是否为null"><a href="#查询某个字段是否为null" class="headerlink" title="查询某个字段是否为null"></a>查询某个字段是否为null</h3><p>xx.objects.filter(name__isnull&#x3D;True)__</p><h3 id="忽略大小写"><a href="#忽略大小写" class="headerlink" title="忽略大小写"></a>忽略大小写</h3><p>mnane__i*** 忽略大小写</p><h3 id="多条件查询"><a href="#多条件查询" class="headerlink" title="多条件查询"></a>多条件查询</h3><p>xxx.objects.filter(name__contains&#x3D;’j’,mid&#x3D;147)xxx.objects.filter(name__contains&#x3D;’j’).filter(mid&#x3D;147)</p><h3 id="排除一部分"><a href="#排除一部分" class="headerlink" title="排除一部分"></a>排除一部分</h3><p>xxx.objects.filter(name__contains&#x3D;’j’).exclude(mname__startswith&#x3D;’j’)</p><h3 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h3><p>xxx.objects.order_by(‘mid’)xxx.objects.order_by(‘-mid’)</p><h3 id="查询大于"><a href="#查询大于" class="headerlink" title="查询大于"></a>查询大于</h3><p>xxx.objects.filter(created__gt&#x3D;’2017-10-20’)</p><h3 id="范围"><a href="#范围" class="headerlink" title="范围"></a>范围</h3><p>sql的betwnxxx.objects.filter(created__range&#x3D;(‘2017-10-20’,’2017-11-20’))</p><h3 id="增加"><a href="#增加" class="headerlink" title="增加"></a>增加</h3><p>xxx &#x3D; xxx(title&#x3D;’’,created&#x3D;’2017-2-28’)xx.save()xxx.objects.create(title&#x3D;’’,created&#x3D;’2018-11-11’)</p><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><p>xxx.delete()xxx.objects.filter(title__contains&#x3D;’博客’).delete()</p><h3 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h3><ul><li><p>方法1 （更新的是所有的字段） (没有id主键，就添加，有主键就更新)</p><p>post &#x3D; Post.objects.first()post.title&#x3D;’更新了’post.save() UPDATE <code>post_post</code> SET <code>title</code> &#x3D; ‘更新了’, <code>created</code> &#x3D; ‘2017-11-27’ WHERE <code>post_post</code>.<code>id</code> &#x3D; 26</p></li><li><p>方法2（只更新修改的字段），推荐使用</p><p>Post.objects.filter(id&#x3D;26).update(title&#x3D;’又更新了’)UPDATE <code>post_post</code> SET <code>title</code> &#x3D; ‘又更新了’ WHERE <code>post_post</code>.<code>id</code> &#x3D; 26DataDisplay.objects.update_or_create</p></li></ul><h2 id="多表"><a href="#多表" class="headerlink" title="多表"></a>多表</h2><h3 id="一对一"><a href="#一对一" class="headerlink" title="一对一"></a>一对一</h3><p><a href="https://docs.djangoproject.com/en/3.2/ref/models/fields/#onetoonefield">OneToOneField</a></p><h3 id="一对多"><a href="#一对多" class="headerlink" title="一对多"></a>一对多</h3><p><a href="https://docs.djangoproject.com/en/3.2/ref/models/fields/#foreignkey">ForeignKey</a></p><h3 id="多对多"><a href="#多对多" class="headerlink" title="多对多"></a>多对多</h3><p><a href="https://docs.djangoproject.com/en/3.2/ref/models/fields/#manytomanyfield">ManyToManyField</a></p><h2 id="字段类型"><a href="#字段类型" class="headerlink" title="字段类型"></a>字段类型</h2><p><a href="https://docs.djangoproject.com/en/3.2/ref/models/fields/">https://docs.djangoproject.com/en/3.2/ref/models/fields/</a></p><h2 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数"></a>聚合函数</h2><ul><li>COUNT,MAX,MIN,AVG,SUM<ul><li>xxx.objects.aggregate()</li></ul></li></ul><h2 id="分组聚合"><a href="#分组聚合" class="headerlink" title="分组聚合"></a>分组聚合</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ChatMessage.objects.values(<span class="string">&quot;talker_id&quot;</span>).annotate(count=Count(<span class="string">&quot;*&quot;</span>)).<span class="built_in">filter</span>(count__gt=<span class="number">1</span>)Post.objects.values(<span class="string">&#x27;created&#x27;</span>).annotate(count=Count(<span class="string">&#x27;*&#x27;</span>))Post.objects.values(<span class="string">&#x27;category__name&#x27;</span>).annotate(count=Count(<span class="string">&#x27;*&#x27;</span>))</span><br></pre></td></tr></table></figure><h2 id="原生查询"><a href="#原生查询" class="headerlink" title="原生查询"></a>原生查询</h2><ul><li>任何管理器对象都都有一个raw</li></ul><p>Raw query must include the primary keyPost.objects.raw(‘select * from post_post’)</p><ul><li><p>connection （当前数据库的连接对象）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> connection</span><br><span class="line">cursor = connection.cursor()</span><br><span class="line">datas = cursor.execute(<span class="string">&#x27;SELECT count(*) ,post_category.name from post_post,post_category WHERE post_post.category_id==post_category.id GROUP BY post_post.category_id&#x27;</span>)</span><br><span class="line">cursor.close()  </span><br><span class="line"><span class="keyword">for</span> data <span class="keyword">in</span> datas:  </span><br><span class="line">  <span class="built_in">print</span>(data)</span><br><span class="line">  </span><br></pre></td></tr></table></figure></li><li><p>conection.queries 保存了这个执行的所有的sql语句</p></li></ul><h3 id="Q查询"><a href="#Q查询" class="headerlink" title="Q查询"></a>Q查询</h3><ul><li>orm的filer(id&#x3D;5).filter(created&#x3D;’2017-12-15’) and</li><li>Q查询支持and，or,~(与或非)</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db.models <span class="keyword">import</span> Q</span><br><span class="line">Post.objects.<span class="built_in">filter</span>(Q(<span class="built_in">id</span>=<span class="number">5</span>) | Q(created=<span class="string">&#x27;2017-12-15&#x27;</span>)) <span class="keyword">or</span> Post.objects.<span class="built_in">filter</span>(Q(<span class="built_in">id</span>=<span class="number">5</span>) &amp; Q(created=<span class="string">&#x27;2017-12-15&#x27;</span>)) <span class="keyword">and</span> Post.objects.<span class="built_in">filter</span>(~Q(<span class="built_in">id</span>=<span class="number">5</span>))</span><br></pre></td></tr></table></figure><h3 id="F查询"><a href="#F查询" class="headerlink" title="F查询"></a>F查询</h3><ul><li>给所有帖子的创建时间，都+1天</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db.models <span class="keyword">import</span> F </span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line">Post.objects.<span class="built_in">all</span>().update(created=F(<span class="string">&#x27;created&#x27;</span>)+datetime.timedelta(days=<span class="number">1</span>))</span><br></pre></td></tr></table></figure><ul><li>查询是热门的记录（100个人看了商品60个买了，100看了帖子50个评论了）</li><li>查询热门帖子 100看了帖子50个评论了,而且阅读的数量必须大于30</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Post.objects.<span class="built_in">filter</span>(read_count__lte=F(<span class="string">&#x27;remark_count&#x27;</span>)*<span class="number">2</span>).<span class="built_in">filter</span>(read_count__gt=<span class="number">30</span>)Post.objects.<span class="built_in">filter</span>(Q(read_count__lte=F(<span class="string">&#x27;remark_count&#x27;</span>)*<span class="number">2</span>)&amp;Q(read_count__gt=<span class="number">30</span>))</span><br></pre></td></tr></table></figure><h2 id="QuerySet（查询集）"><a href="#QuerySet（查询集）" class="headerlink" title="QuerySet（查询集）"></a>QuerySet（查询集）</h2><ul><li>django.db.models.query QuerySet</li><li>惰性查询 （延迟查询）</li><li>查询的数据有限</li><li>缓存查询</li></ul>]]></content>
      
      
      <categories>
          
          <category> django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>websocket</title>
      <link href="/post/42ce80b9.html"/>
      <url>/post/42ce80b9.html</url>
      
        <content type="html"><![CDATA[<h2 id="websocket的介绍"><a href="#websocket的介绍" class="headerlink" title="websocket的介绍"></a>websocket的介绍</h2><blockquote><p>WebSocket是一种在单个TCP连接上进行全双工通讯的协议。WebSocket通信协议于2011年被IETF定为标准RFC 6455，并由RFC7936补充规范。WebSocket API也被W3C定为标准。</p><p>WebSocket使得客户端和服务器之间的数据交换变得更加简单，允许服务端主动向客户端推送数据。在WebSocket API中，浏览器和服务器只需要完成一次握手，两者之间就直接可以创建持久性的连接，并进行双向数据传输。</p></blockquote><p>上面是维基百科的介绍.<br>简单的讲，websocket 和http一样，都是一种网络传输协议</p><h2 id="WebSocket-和-HTTP-的区别"><a href="#WebSocket-和-HTTP-的区别" class="headerlink" title="WebSocket 和 HTTP 的区别"></a>WebSocket 和 HTTP 的区别</h2><p>http 协议是用在应用层的协议，他是基于 tcp 协议的，http 协议建立链接也必须要有三次握手才能发送信息。 http 链接分为短链接，长链接，短链接是每次请求都要三次握手才能发送自己的信息。即每一个 request 对应一个 response。长链接是在一定的期限内保持链接。保持 TCP 连接不断开。客户端与服务器通信，必须要有客户端发起然后服务器返回结果。客户端是主动的，服务器是被动的。 WebSocket 他是为了解决客户端发起多个 http 请求到服务器资源浏览器必须要经过长时间的轮训问题而生的，他实现了多路复用，他是全双工通信。在 webSocket 协议下客服端和浏览器可以同时发送信息。 建立了 WenSocket 之后服务器不必在浏览器发送 request 请求之后才能发送信息到浏览器。这时的服务器已有主动权想什么时候发就可以发送信息到服务器。而且信息当中不必在带有 head 的部分信息了与 http 的长链接通信来说，这种方式，不仅能降低服务器的压力。而且信息当中也减少了部分多余的信息。</p><h2 id="HTTP-的长连接与-websocket-的持久连接"><a href="#HTTP-的长连接与-websocket-的持久连接" class="headerlink" title="HTTP 的长连接与 websocket 的持久连接"></a>HTTP 的长连接与 websocket 的持久连接</h2><p>HTTP1.1 的连接默认使用长连接（ persistent connection ）， 即在一定的期限内保持链接，客户端会需要在短时间内向服务端请求大量的资源，保持 TCP 连接不断开。客户端与服务器通信，必须要有客户端发起然后服务器返回结果。客户端是主动的，服务器是被动的。 在一个 TCP 连接上可以传输多个 Request&#x2F;Response 消息对，所以本质上还是 Request&#x2F;Response 消息对，仍然会造成资源的浪费、实时性不强等问题。 如果不是持续连接，即短连接，那么每个资源都要建立一个新的连接，HTTP 底层使用的是 TCP，那么每次都要使用三次握手建立 TCP 连接，即每一个 request 对应一个 response，将造成极大的资源浪费。 长轮询，即客户端发送一个超时时间很长的 Request，服务器 hold 住这个连接，在有新数据到达时返回 Response websocket 的持久连接 只需建立一次 Request&#x2F;Response 消息对，之后都是 TCP 连接，避免了需要多次建立 Request&#x2F;Response 消息对而产生的冗余头部信息。</p><p><strong>客户端请求</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">GET / HTTP/1.1</span><br><span class="line">Upgrade: websocket</span><br><span class="line">Connection: Upgrade</span><br><span class="line">Host: example.com</span><br><span class="line">Origin: http://example.com</span><br><span class="line">Sec-WebSocket-Key: sN9cRrP/n9NdMgdcy2VJFQ==</span><br><span class="line">Sec-WebSocket-Version: 13</span><br></pre></td></tr></table></figure><p><strong>服务器响应</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 101 Switching Protocols</span><br><span class="line">Upgrade: websocket</span><br><span class="line">Connection: Upgrade</span><br><span class="line">Sec-WebSocket-Accept: fFBooB7FAkLlXgRSz0BT3v4hq5s=</span><br><span class="line">Sec-WebSocket-Location: ws://example.com/</span><br></pre></td></tr></table></figure><p><strong>和http字段不一样的地方</strong></p><ul><li>Connection必须设置Upgrade，表示客户端希望连接升级。</li><li>Upgrade字段必须设置Websocket，表示希望升级到Websocket协议。</li><li>Sec-WebSocket-Key是随机的字符串，服务器端会用这些数据来构造出一个SHA-1的信息摘要。把“Sec-WebSocket-Key”加上一个特殊字符串“258EAFA5-E914-47DA-95CA-C5AB0DC85B11”，然后计算SHA-1摘要，之后进行BASE-64编码，将结果做为“Sec-WebSocket-Accept”头的值，返回给客户端。如此操作，可以尽量避免普通HTTP请求被误认为Websocket协议。</li><li>Sec-WebSocket-Version 表示支持的Websocket版本。RFC6455要求使用的版本是13，之前草案的版本均应当弃用。</li><li>Origin字段是可选的，通常用来表示在浏览器中发起此Websocket连接所在的页面，类似于Referer。但是，与Referer不同的是，Origin只包含了协议和主机名称。</li><li>其他一些定义在HTTP协议中的字段，如Cookie等，也可以在Websocket中使用。</li></ul><p>可以看到只是在http协议上增加了几个硬性规定，http协议的user-agent,cookie都可以在websocket握手过程中使用</p><p><strong>抓包时候的注意事项:因为websocket只有一次握手，握手成功后就可以双方发送消息了，假如你打开网页后没有找到你要抓的数据，那么你就需要重新刷新网页，让他重新握手一次</strong></p><h2 id="example"><a href="#example" class="headerlink" title="example"></a>example</h2><h3 id="简单例子"><a href="#简单例子" class="headerlink" title="简单例子"></a>简单例子</h3><p>client：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> urlparse</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_url_info</span>(<span class="params">url: <span class="built_in">str</span></span>) -&gt; <span class="built_in">tuple</span>:</span><br><span class="line">    url = urlparse(url)</span><br><span class="line">    host = url.netloc</span><br><span class="line">    resource = url.path <span class="keyword">or</span> <span class="string">&quot;/&quot;</span></span><br><span class="line">    <span class="keyword">return</span> host, resource</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_key</span>() -&gt; <span class="built_in">str</span>:</span><br><span class="line">    bytes_key = <span class="built_in">bytes</span>(random.getrandbits(<span class="number">8</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>))</span><br><span class="line">    res = base64.b64encode(bytes_key).decode()</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_header</span>(<span class="params">url: <span class="built_in">str</span></span>) -&gt; <span class="built_in">bytes</span>:</span><br><span class="line">    key = get_key()</span><br><span class="line">    host, resource = get_url_info(url)</span><br><span class="line">    head = &#123;</span><br><span class="line">        <span class="string">&quot;Connection&quot;</span>: <span class="string">&quot;Upgrade&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Upgrade&quot;</span>: <span class="string">&quot;websocket&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Sec-Websocket-Key&quot;</span>: key,</span><br><span class="line">        <span class="string">&quot;Origin&quot;</span>: <span class="built_in">str</span>(host)</span><br><span class="line">    &#125;</span><br><span class="line">    headers = [<span class="string">&quot;&#123;&#125;:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(k, item) <span class="keyword">for</span> k, item <span class="keyword">in</span> head.items()]</span><br><span class="line">    headers.insert(<span class="number">0</span>, <span class="string">&quot;GET &#123;&#125; HTTP/1.1&quot;</span>.<span class="built_in">format</span>(resource))</span><br><span class="line">    headers.append(<span class="string">&quot;\r\n&quot;</span>)</span><br><span class="line">    headers = <span class="string">&quot;\r\n&quot;</span>.join(headers)</span><br><span class="line">    <span class="keyword">return</span> headers.encode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">shake_hands</span>(<span class="params">client: socket, url: <span class="built_in">str</span></span>):</span><br><span class="line">    header = get_header(url)</span><br><span class="line">    client.send(header)</span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line">    message = client.recv(<span class="number">1024</span>).decode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(message)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;Status Code:101&quot;</span> <span class="keyword">in</span> message:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    url = <span class="string">&quot;ws://127.0.0.1:9999&quot;</span></span><br><span class="line">    host, resource = get_url_info(url)</span><br><span class="line">    client = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">    client.connect((<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">9999</span>))</span><br><span class="line">    <span class="built_in">print</span>(shake_hands(client, url))</span><br><span class="line">    client.close()</span><br></pre></td></tr></table></figure><p>server：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="comment"># AF_INET IPV4 AF_INET6 IPV6</span></span><br><span class="line"><span class="comment"># SOCK_STREAM TCP SOCK_DGRAM</span></span><br><span class="line"><span class="keyword">import</span> traceback</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">verify</span>(<span class="params">data: <span class="built_in">str</span></span>):</span><br><span class="line">    data = data[:-<span class="number">4</span>].split(<span class="string">&quot;\r\n&quot;</span>)</span><br><span class="line">    method = data.pop(<span class="number">0</span>)</span><br><span class="line">    headers = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> val <span class="keyword">in</span> data:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="built_in">print</span>(val.split(<span class="string">&quot;:&quot;</span>))</span><br><span class="line">            name, value = val.split(<span class="string">&quot;:&quot;</span>)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            name, host, port = val.split(<span class="string">&quot;:&quot;</span>)</span><br><span class="line">            value = <span class="string">&quot;&#123;&#125;:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(host, port)</span><br><span class="line">        headers[name] = value</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">any</span>([<span class="string">&quot;GET&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> method, <span class="string">&quot;HTTP/1.1&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> method,</span><br><span class="line">            headers.get(<span class="string">&quot;Connection&quot;</span>) != <span class="string">&quot;Upgrade&quot;</span>,</span><br><span class="line">            headers.get(<span class="string">&quot;Upgrade&quot;</span>) != <span class="string">&quot;websocket&quot;</span>,</span><br><span class="line">            <span class="keyword">not</span> headers.get(<span class="string">&quot;Origin&quot;</span>),</span><br><span class="line">            <span class="keyword">not</span> headers.get(<span class="string">&quot;Sec-Websocket-Key&quot;</span>),</span><br><span class="line">            ]):</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">set_response</span>(<span class="params">status</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> status:</span><br><span class="line">        head = &#123;<span class="string">&quot;Status Code&quot;</span>: <span class="number">403</span>&#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    head = &#123;</span><br><span class="line">        <span class="string">&quot;Status Code&quot;</span>: <span class="string">&quot;101 Switching Protocols&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Connection&quot;</span>: <span class="string">&quot;Upgrade&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Upgrade&quot;</span>: <span class="string">&quot;websocket&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Sec-Websocket-Accept&quot;</span>: <span class="string">&quot;Y3nhRRZjdrBphYXwpoEouw&quot;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    headers = [<span class="string">&quot;&#123;&#125;:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(k, item) <span class="keyword">for</span> k, item <span class="keyword">in</span> head.items()]</span><br><span class="line">    headers.append(<span class="string">&quot;\r\n&quot;</span>)</span><br><span class="line">    res = <span class="string">&quot;\r\n&quot;</span>.join(headers)</span><br><span class="line">    <span class="keyword">return</span> res.encode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ws_main</span>():</span><br><span class="line">    <span class="keyword">with</span> socket.socket(socket.AF_INET, socket.SOCK_STREAM) <span class="keyword">as</span> s:</span><br><span class="line">        s.bind((<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">9999</span>))</span><br><span class="line">        s.listen(<span class="number">1</span>)</span><br><span class="line">        conn, addr = s.accept()</span><br><span class="line">        <span class="keyword">with</span> conn:</span><br><span class="line">            data = conn.recv(<span class="number">1024</span>).decode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">            status = verify(data)</span><br><span class="line">            response = set_response(status)</span><br><span class="line">            conn.send(response)</span><br><span class="line">            conn.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    ws_main()</span><br></pre></td></tr></table></figure><h3 id="复杂一点"><a href="#复杂一点" class="headerlink" title="复杂一点"></a>复杂一点</h3><p>client：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> websockets</span><br><span class="line"></span><br><span class="line"><span class="comment"># 向服务器端认证，用户名密码通过才能退出循环</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">auth_system</span>(<span class="params">websocket</span>):</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        cred_text = <span class="built_in">input</span>(<span class="string">&quot;please enter your username and password: &quot;</span>)</span><br><span class="line">        <span class="keyword">await</span> websocket.send(cred_text)</span><br><span class="line">        response_str = <span class="keyword">await</span> websocket.recv()</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;congratulation&quot;</span> <span class="keyword">in</span> response_str:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 向服务器端发送认证后的消息</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">send_msg</span>(<span class="params">websocket</span>):</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        _text = <span class="built_in">input</span>(<span class="string">&quot;please enter your context: &quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> _text == <span class="string">&quot;exit&quot;</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&#x27;you have enter &quot;exit&quot;, goodbye&#x27;</span>)</span><br><span class="line">            <span class="keyword">await</span> websocket.close(reason=<span class="string">&quot;user exit&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">await</span> websocket.send(_text)</span><br><span class="line">        recv_text = <span class="keyword">await</span> websocket.recv()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;recv_text&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 客户端主逻辑</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">main_logic</span>():</span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">with</span> websockets.connect(<span class="string">&#x27;ws://127.0.0.1:5678&#x27;</span>) <span class="keyword">as</span> websocket:</span><br><span class="line">        <span class="keyword">await</span> auth_system(websocket)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">await</span> send_msg(websocket)</span><br><span class="line"></span><br><span class="line">asyncio.get_event_loop().run_until_complete(main_logic())</span><br></pre></td></tr></table></figure><p>server：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> websockets</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检测客户端权限，用户名密码通过才能退出循环</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">check_permit</span>(<span class="params">websocket</span>):</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        recv_str = <span class="keyword">await</span> websocket.recv()</span><br><span class="line">        cred_dict = recv_str.split(<span class="string">&quot;:&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> cred_dict[<span class="number">0</span>] == <span class="string">&quot;admin&quot;</span> <span class="keyword">and</span> cred_dict[<span class="number">1</span>] == <span class="string">&quot;123456&quot;</span>:</span><br><span class="line">            response_str = <span class="string">&quot;congratulation, you have connect with server\r\nnow, you can do something else&quot;</span></span><br><span class="line">            <span class="keyword">await</span> websocket.send(response_str)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            response_str = <span class="string">&quot;sorry, the username or password is wrong, please submit again&quot;</span></span><br><span class="line">            <span class="keyword">await</span> websocket.send(response_str)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 接收客户端消息并处理，这里只是简单把客户端发来的返回回去</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">recv_msg</span>(<span class="params">websocket</span>):</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        recv_text = <span class="keyword">await</span> websocket.recv()</span><br><span class="line">        response_text = <span class="string">f&quot;your submit context: <span class="subst">&#123;recv_text&#125;</span>&quot;</span></span><br><span class="line">        <span class="keyword">await</span> websocket.send(response_text)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 服务器端主逻辑</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">main_logic</span>(<span class="params">websocket, path</span>):</span><br><span class="line">    <span class="keyword">await</span> check_permit(websocket)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">await</span> recv_msg(websocket)</span><br><span class="line"></span><br><span class="line">start_server = websockets.serve(main_logic, <span class="string">&#x27;127.0.0.1&#x27;</span>, <span class="number">5678</span>)</span><br><span class="line">asyncio.get_event_loop().run_until_complete(start_server)</span><br><span class="line">asyncio.get_event_loop().run_forever()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>python的pydantic库</title>
      <link href="/post/c9e744c1.html"/>
      <url>/post/c9e744c1.html</url>
      
        <content type="html"><![CDATA[<h1 id="官方文档以及定义"><a href="#官方文档以及定义" class="headerlink" title="官方文档以及定义"></a>官方文档以及定义</h1><p><a href="https://pydantic-docs.helpmanual.io/">https://pydantic-docs.helpmanual.io/</a></p><p>Data validation and settings management using python type annotations.</p><p>使用 python 类型注释进行数据验证和设置管理。</p><p>pydantic enforces type hints at runtime, and provides user friendly errors when data is invalid.</p><p>Pydantic 在运行时强制类型提示，并在数据无效时提供用户友好的错误。</p><p>Define how data should be in pure, canonical python; validate it with pydantic.</p><p>定义纯粹的、规范的 python 中的数据应该是什么样的; 使用 pydantic 验证它。</p><h2 id="基本的类型"><a href="#基本的类型" class="headerlink" title="基本的类型"></a>基本的类型</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pydantic <span class="keyword">import</span> BaseModel</span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">Dict</span>, <span class="type">List</span>, <span class="type">Sequence</span>, <span class="type">Set</span>, <span class="type">Tuple</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Demo</span>(<span class="title class_ inherited__">BaseModel</span>):</span><br><span class="line">    a: <span class="built_in">int</span> <span class="comment"># 整型</span></span><br><span class="line">    b: <span class="built_in">float</span> <span class="comment"># 浮点型</span></span><br><span class="line">    c: <span class="built_in">str</span> <span class="comment"># 字符串</span></span><br><span class="line">    d: <span class="built_in">bool</span> <span class="comment"># 布尔型</span></span><br><span class="line">    e: <span class="type">List</span>[<span class="built_in">int</span>] <span class="comment"># 整型列表</span></span><br><span class="line">    f: <span class="type">Dict</span>[<span class="built_in">str</span>, <span class="built_in">int</span>] <span class="comment"># 字典型，key为str，value为int</span></span><br><span class="line">    g: <span class="type">Set</span>[<span class="built_in">int</span>] <span class="comment"># 集合</span></span><br><span class="line">    h: <span class="type">Tuple</span>[<span class="built_in">str</span>, <span class="built_in">int</span>] <span class="comment"># 元组</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 枚举类型</span></span><br><span class="line"><span class="keyword">from</span> enum <span class="keyword">import</span> Enum</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Gender</span>(<span class="built_in">str</span>, Enum):</span><br><span class="line">    man = <span class="string">&quot;man&quot;</span></span><br><span class="line">    women = <span class="string">&quot;women&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 可选数据类型 </span></span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">Optional</span></span><br><span class="line"><span class="keyword">from</span> pydantic <span class="keyword">import</span> BaseModel</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>(<span class="title class_ inherited__">BaseModel</span>):</span><br><span class="line">    name: <span class="built_in">str</span></span><br><span class="line">    age: <span class="type">Optional</span>[<span class="built_in">int</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 多种数据类型</span></span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">Union</span></span><br><span class="line"><span class="keyword">from</span> pydantic <span class="keyword">import</span> BaseModel</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Time</span>(<span class="title class_ inherited__">BaseModel</span>):</span><br><span class="line">    time: <span class="type">Union</span>[<span class="built_in">int</span>, <span class="built_in">str</span>]</span><br></pre></td></tr></table></figure><p>更多参考：<a href="https://pydantic-docs.helpmanual.io/usage/types/">https://pydantic-docs.helpmanual.io/usage/types/</a>****</p><h1 id="validator"><a href="#validator" class="headerlink" title="validator"></a>validator</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Password</span>(<span class="title class_ inherited__">BaseModel</span>):</span><br><span class="line">    password: <span class="built_in">str</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @validator(<span class="params"><span class="string">&quot;password&quot;</span></span>)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">password_rule</span>(<span class="params">cls, password</span>):</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">is_valid</span>(<span class="params">password</span>):</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(password) &lt; <span class="number">6</span> <span class="keyword">or</span> <span class="built_in">len</span>(password) &gt; <span class="number">20</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> re.search(<span class="string">&quot;[a-z]&quot;</span>, password):</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> re.search(<span class="string">&quot;[A-Z]&quot;</span>, password):</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> re.search(<span class="string">&quot;\d&quot;</span>, password):</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> is_valid(password):</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">&quot;password is invalid&quot;</span>)</span><br><span class="line"></span><br><span class="line">pw = Password(password=<span class="string">&quot;111222&quot;</span>)</span><br></pre></td></tr></table></figure><p>更多参考：<a href="https://pydantic-docs.helpmanual.io/usage/validators/">https://pydantic-docs.helpmanual.io/usage/validators/</a></p><h1 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">List</span></span><br><span class="line"><span class="keyword">from</span> pydantic <span class="keyword">import</span> BaseModel, constr</span><br><span class="line"><span class="keyword">from</span> sqlalchemy.dialects.postgresql <span class="keyword">import</span> ARRAY</span><br><span class="line"><span class="keyword">from</span> sqlalchemy.ext.declarative <span class="keyword">import</span> declarative_base</span><br><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> Integer, String, Column</span><br><span class="line"></span><br><span class="line">Base = declarative_base()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CompanyOrm</span>(<span class="title class_ inherited__">Base</span>):</span><br><span class="line">    __tablename__ = <span class="string">&#x27;companies&#x27;</span></span><br><span class="line">    <span class="built_in">id</span> =Column(Integer, primary_key=<span class="literal">True</span>, nullable=<span class="literal">True</span>)</span><br><span class="line">    public_key = Column(String(<span class="number">20</span>), index=<span class="literal">True</span>, nullable=<span class="literal">False</span>, unique=<span class="literal">True</span>)</span><br><span class="line">    name = Column(String(<span class="number">100</span>), unique=<span class="literal">True</span>)</span><br><span class="line">    domains = Column(ARRAY(String(<span class="number">255</span>)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CompanyModel</span>(<span class="title class_ inherited__">BaseModel</span>):</span><br><span class="line">    <span class="built_in">id</span>: <span class="built_in">int</span></span><br><span class="line">    public_key: constr(max_length=<span class="number">20</span>)</span><br><span class="line">    name: constr(max_length=<span class="number">100</span>)</span><br><span class="line">    domains: <span class="type">List</span>[constr(max_length=<span class="number">255</span>)]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Config</span>:</span><br><span class="line">        orm_mode = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">co_orm = CompanyOrm(</span><br><span class="line">    <span class="built_in">id</span>=<span class="number">1</span>,</span><br><span class="line">    public_key=<span class="string">&quot;akey&quot;</span>,</span><br><span class="line">    name=<span class="string">&quot;andy&quot;</span>,</span><br><span class="line">    domains=[<span class="string">&#x27;123.com&#x27;</span>, <span class="string">&#x27;456.com&#x27;</span>]</span><br><span class="line">)</span><br><span class="line"><span class="built_in">print</span>(CompanyModel.from_orm(co_orm))</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>python3类型注释</title>
      <link href="/post/f19d1117.html"/>
      <url>/post/f19d1117.html</url>
      
        <content type="html"><![CDATA[<h3 id="普通的注释"><a href="#普通的注释" class="headerlink" title="普通的注释"></a>普通的注释</h3><ul><li><p>在声明变量类型时，变量后方紧跟一个冒号，冒号后面跟一个空格，再跟上变量的类型。</p></li><li><p>在声明方法返回值的时候，箭头左边是方法定义，箭头右边是返回值的类型，箭头左右两边都要留有空格</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">name: <span class="built_in">str</span> = <span class="string">&quot;jack&quot;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">greeting</span>(<span class="params">name: <span class="built_in">str</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Hello &#x27;</span> + name</span><br></pre></td></tr></table></figure></li></ul><h3 id="typing模块的使用"><a href="#typing模块的使用" class="headerlink" title="typing模块的使用"></a>typing模块的使用</h3><p>List 列表，是 list 的泛型</p><p>Tuple 元组，是 tuple 的泛型</p><p>Dict 字典，是 dict 的泛型</p><p>Set 集合，是 set 的泛型</p><p>Sequence:</p><p>Sequence，是 collections.abc.Sequence 的泛型，在某些情况下，我们可能并不需要严格区分一个变量或参数到底是列表 list 类型还是元组 tuple 类型，我们可以使用一个更为泛化的类型，叫做 Sequence</p><p>泛型(Generic):</p><p>由于无法以通用方式静态推断有关保存在容器中的对象的类型信息，因此抽象基类已扩展为支持订阅以表示容器元素的预期类型。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">List</span>, <span class="type">Tuple</span></span><br><span class="line"></span><br><span class="line">var: <span class="type">List</span>[<span class="built_in">int</span> <span class="keyword">or</span> <span class="built_in">float</span>] = [<span class="number">2</span>, <span class="number">3.5</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">size</span>(<span class="params">rect: Mapping[<span class="built_in">str</span>, <span class="built_in">int</span>]</span>) -&gt; <span class="type">Dict</span>[<span class="built_in">str</span>, <span class="built_in">int</span>]:</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&#x27;width&#x27;</span>: rect[<span class="string">&#x27;width&#x27;</span>] + <span class="number">100</span>, <span class="string">&#x27;height&#x27;</span>: rect[<span class="string">&#x27;width&#x27;</span>] + <span class="number">100</span>&#125;</span><br></pre></td></tr></table></figure><h3 id="类型别名"><a href="#类型别名" class="headerlink" title="类型别名"></a>类型别名</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">List</span></span><br><span class="line">Vector = <span class="type">List</span>[<span class="built_in">float</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">scale</span>(<span class="params">scalar: <span class="built_in">float</span>, vector: Vector</span>) -&gt; Vector:</span><br><span class="line">    <span class="keyword">return</span> [scalar * num <span class="keyword">for</span> num <span class="keyword">in</span> vector]</span><br><span class="line"></span><br><span class="line"><span class="comment"># typechecks; a list of floats qualifies as a Vector.</span></span><br><span class="line">new_vector = scale(<span class="number">2.0</span>, [<span class="number">1.0</span>, -<span class="number">4.2</span>, <span class="number">5.4</span>])</span><br></pre></td></tr></table></figure><h3 id="用户定义的泛型类型"><a href="#用户定义的泛型类型" class="headerlink" title="用户定义的泛型类型"></a>用户定义的泛型类型</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> TypeVar, <span class="type">Generic</span></span><br><span class="line"><span class="keyword">from</span> logging <span class="keyword">import</span> Logger</span><br><span class="line"></span><br><span class="line">T = TypeVar(<span class="string">&#x27;T&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LoggedVar</span>(<span class="type">Generic</span>[T]):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, value: T, name: <span class="built_in">str</span>, logger: Logger</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        self.name = name</span><br><span class="line">        self.logger = logger</span><br><span class="line">        self.value = value</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">set</span>(<span class="params">self, new: T</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        self.log(<span class="string">&#x27;Set &#x27;</span> + <span class="built_in">repr</span>(self.value))</span><br><span class="line">        self.value = new</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self</span>) -&gt; T:</span><br><span class="line">        self.log(<span class="string">&#x27;Get &#x27;</span> + <span class="built_in">repr</span>(self.value))</span><br><span class="line">        <span class="keyword">return</span> self.value</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">log</span>(<span class="params">self, message: <span class="built_in">str</span></span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">        self.logger.info(<span class="string">&#x27;%s: %s&#x27;</span>, self.name, message</span><br></pre></td></tr></table></figure><h3 id="Any"><a href="#Any" class="headerlink" title="Any"></a>Any</h3><p>Any，是一种特殊的类型，它可以代表所有类型，静态类型检查器的所有类型都与 Any 类型兼容，所有的无参数类型注解和返回类型注解的都会默认使用 Any 类型</p><h3 id="NewType"><a href="#NewType" class="headerlink" title="NewType"></a>NewType</h3><p>NewType，我们可以借助于它来声明一些具有特殊含义的类型，例如像 Tuple 的例子一样，我们需要将它表示为 Person，即一个人的含义，但但从表面上声明为 Tuple 并不直观，所以我们可以使用 NewType 为其声明一个类型.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Person = NewType(<span class="string">&#x27;Person&#x27;</span>, <span class="type">Tuple</span>[<span class="built_in">str</span>, <span class="built_in">int</span>, <span class="built_in">float</span>])</span><br><span class="line">person = Person((<span class="string">&#x27;Mike&#x27;</span>, <span class="number">22</span>, <span class="number">1.75</span>))</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line">Person = NewType(<span class="string">&#x27;Person&#x27;</span>, <span class="type">Tuple</span>[<span class="built_in">str</span>, <span class="built_in">int</span>, <span class="built_in">float</span>])</span><br><span class="line">person = Person((<span class="string">&#x27;Mike&#x27;</span>, <span class="number">22</span>, <span class="number">1.75</span>))</span><br></pre></td></tr></table></figure><h3 id="Union"><a href="#Union" class="headerlink" title="Union"></a>Union</h3><p>Union，联合类型，<code>Union[X, Y]</code> 代表要么是 X 类型，要么是 Y 类型</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">process</span>(<span class="params">fn: <span class="type">Union</span>[<span class="built_in">str</span>, <span class="type">Callable</span>]</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">isinstance</span>(fn, <span class="built_in">str</span>):</span><br><span class="line">        <span class="comment"># str2fn and process</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">elif</span> <span class="built_in">isinstance</span>(fn, <span class="type">Callable</span>):</span><br><span class="line">        fn()</span><br></pre></td></tr></table></figure><h3 id="Callable"><a href="#Callable" class="headerlink" title="Callable"></a>Callable</h3><p>期望特定签名的回调函数的框架可以将类型标注为 <code>Callable[[Arg1Type, Arg2Type], ReturnType]</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">Callable</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">feeder</span>(<span class="params">get_next_item: <span class="type">Callable</span>[[], <span class="built_in">str</span>]</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">    <span class="comment"># Body</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">async_query</span>(<span class="params">on_success: <span class="type">Callable</span>[[<span class="built_in">int</span>], <span class="literal">None</span>],</span></span><br><span class="line"><span class="params">                on_error: <span class="type">Callable</span>[[<span class="built_in">int</span>, Exception], <span class="literal">None</span>]</span>) -&gt; <span class="literal">None</span>:</span><br><span class="line">    <span class="comment"># Body</span></span><br></pre></td></tr></table></figure><h3 id="Typing-Optional类"><a href="#Typing-Optional类" class="headerlink" title="Typing.Optional类"></a>Typing.Optional类</h3><p>可选类型，<strong>作用几乎和带默认值的参数等价</strong>，不同的是使用Optional会告诉你的IDE或者框架：这个参数除了给定的默认值外还可以是None，而且使用有些静态检查工具如mypy时，对 a: int &#x3D;None这样类似的声明可能会提示报错，但使用a :Optional[int] &#x3D; None不会。</p>]]></content>
      
      
      <categories>
          
          <category> python3 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python的dataclass类装饰器</title>
      <link href="/post/5dd32833.html"/>
      <url>/post/5dd32833.html</url>
      
        <content type="html"><![CDATA[<h1 id="Python3-7-dataclass使用指南"><a href="#Python3-7-dataclass使用指南" class="headerlink" title="Python3.7 dataclass使用指南"></a><a href="https://www.cnblogs.com/apocelipes/p/10284346.html">Python3.7 dataclass使用指南</a></h1><hr><p>本文将带你走进python3.7的新特性dataclass，通过本文你将学会dataclass的使用并避免踏入某些陷阱。</p><blockquote><ul><li><a href="https://www.cnblogs.com/apocelipes/p/10284346.html#abstract">dataclass简介</a></li><li>dataclass的使用<ul><li><a href="https://www.cnblogs.com/apocelipes/p/10284346.html#using-define">定义一个dataclass</a></li><li><a href="https://www.cnblogs.com/apocelipes/p/10284346.html#using-decorator">深入dataclass装饰器</a></li><li><a href="https://www.cnblogs.com/apocelipes/p/10284346.html#using-field">数据类的基石——dataclasses.field</a></li><li><a href="https://www.cnblogs.com/apocelipes/p/10284346.html#using-funcs">一些常用函数</a></li><li><a href="https://www.cnblogs.com/apocelipes/p/10284346.html#using-inheritance">dataclass继承</a></li></ul></li><li><a href="https://www.cnblogs.com/apocelipes/p/10284346.html#summary">总结</a></li></ul></blockquote><h2 id="dataclass简介"><a href="#dataclass简介" class="headerlink" title="dataclass简介"></a>dataclass简介</h2><p>dataclass的定义位于<a href="https://www.python.org/dev/peps/pep-0557/">PEP-557</a>，根据定义一个dataclass是指“一个带有默认值的可变的namedtuple”，广义的定义就是有一个类，它的属性均可公开访问，可以带有默认值并能被修改，而且类中含有与这些属性相关的类方法，那么这个类就可以称为dataclass，再通俗点讲，dataclass就是一个含有数据及操作数据方法的容器。</p><p>乍一看可能会觉得这个概念不就是普通的class么，然而还是有几处不同：</p><ol><li>相比普通class，dataclass通常不包含私有属性，数据可以直接访问</li><li>dataclass的repr方法通常有固定格式，会打印出类型名以及属性名和它的值</li><li>dataclass拥有<code>__eq__</code>和<code>__hash__</code>魔法方法</li><li>dataclass有着模式单一固定的构造方式，或是需要重载运算符，而普通class通常无需这些工作</li></ol><p>基于上述原因，通常自己实现一个dataclass是繁琐而无聊的，而dataclass单一固定的行为正适合程序为我们自动生成，于是<code>dataclasses</code>模块诞生了。</p><p>配合类型注解语法，我们可以轻松生成一个实现了<code>__init__</code>，<code>__repr__</code>，<code>__cmp__</code>等方法的dataclass：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">from dataclasses import dataclass</span><br><span class="line"></span><br><span class="line">@dataclass</span><br><span class="line">class InventoryItem:</span><br><span class="line">    &#x27;&#x27;&#x27;Class for keeping track of an item in inventory.&#x27;&#x27;&#x27;</span><br><span class="line">    name: str</span><br><span class="line">    unit_price: float</span><br><span class="line">    quantity_on_hand: int = 0</span><br><span class="line"></span><br><span class="line">    def total_cost(self) -&gt; float:</span><br><span class="line">        return self.unit_price * self.quantity_on_hand</span><br></pre></td></tr></table></figure><p>同时使用dataclass也有一些好处，它比namedtuple更灵活。同时因为它是一个常规的类，所以你可以享受继承带来的便利。</p><h2 id="dataclass的使用"><a href="#dataclass的使用" class="headerlink" title="dataclass的使用"></a>dataclass的使用</h2><p>我们分x步介绍dataclass的使用，首先是如何定义一个dataclass。</p><h3 id="定义一个dataclass"><a href="#定义一个dataclass" class="headerlink" title="定义一个dataclass"></a>定义一个dataclass</h3><p><code>dataclasses</code>模块提供了一个装饰器帮助我们定义自己的数据类：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@dataclass</span><br><span class="line">class Lang:</span><br><span class="line">    &quot;&quot;&quot;a dataclass that describes a programming language&quot;&quot;&quot;</span><br><span class="line">    name: str = &#x27;python&#x27;</span><br><span class="line">    strong_type: bool = True</span><br><span class="line">    static_type: bool = False</span><br><span class="line">    age: int = 28</span><br></pre></td></tr></table></figure><p>我们定义了一个描述某种程序语言特性的数据类——<code>Lang</code>，在接下来的例子中我们都会用到这个类。</p><p>在数据类被定义后，会根据给出的类型注解生成一个如下的初始函数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">def __init__(self, name: str=&#x27;python&#x27;,</span><br><span class="line">            strong_type: bool=True,</span><br><span class="line">            static_type: bool=False,</span><br><span class="line">            age: int=28):</span><br><span class="line">    self.name = name</span><br><span class="line">    self.strong_type = strong_type</span><br><span class="line">    self.static_type = static_type</span><br><span class="line">    self.age = age</span><br></pre></td></tr></table></figure><p>可以看到初始化操作都已经自动生成了，让我们试用一下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; Lang()</span><br><span class="line">Lang(name=&#x27;python&#x27;, strong_type=True, static_type=False, age=28)</span><br><span class="line">&gt;&gt;&gt; Lang(&#x27;js&#x27;, False, False, 23)</span><br><span class="line">Lang(name=&#x27;js&#x27;, strong_type=False, static_type=False, age=23)</span><br><span class="line">&gt;&gt;&gt; Lang(&#x27;js&#x27;, False, False, 23) == Lang()</span><br><span class="line">False</span><br><span class="line">&gt;&gt;&gt; Lang(&#x27;python&#x27;, True, False, 28) == Lang()</span><br><span class="line">True</span><br></pre></td></tr></table></figure><p>例子中可以看出<code>__repr__</code>和<code>__eq__</code>方法也已经为我们生成了，如果没有其他特殊要求的话这个dataclass已经具备了投入生产环境的能力，是不是很神奇？</p><h3 id="深入dataclass装饰器"><a href="#深入dataclass装饰器" class="headerlink" title="深入dataclass装饰器"></a>深入dataclass装饰器</h3><p>dataclass的魔力源泉都在<code>dataclass</code>这个装饰器中，如果想要完全掌控dataclass的话那么它是你必须了解的内容。</p><p>装饰器的原型如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dataclasses.dataclass(*, init=True, repr=True, eq=True, order=False, unsafe_hash=False, frozen=False)</span><br></pre></td></tr></table></figure><p><code>dataclass</code>装饰器将根据类属性生成数据类和数据类需要的方法。</p><p>我们的关注点集中在它的<code>kwargs</code>上：</p><table><thead><tr><th>key</th><th>含义</th></tr></thead><tbody><tr><td>init</td><td>指定是否自动生成<code>__init__</code>，如果已经有定义同名方法则忽略这个值，也就是指定为True也不会自动生成</td></tr><tr><td>repr</td><td>同init，指定是否自动生成<code>__repr__</code>；自动生成的打印格式为<code>class_name(arrt1:value1, attr2:value2, ...)</code></td></tr><tr><td>eq</td><td>同init，指定是否生成<code>__eq__</code>；自动生成的方法将按属性在类内定义时的顺序逐个比较，全部的值相同才会返回True</td></tr><tr><td>order</td><td>自动生成<code>__lt__</code>，<code>__le__</code>，<code>__gt__</code>，<code>__ge__</code>，比较方式与eq相同；如果order指定为True而eq指定为False，将引发<code>ValueError</code>；如果已经定义同名函数，将引发<code>TypeError</code></td></tr><tr><td>unsafehash</td><td>如果是False，将根据eq和frozen参数来生成<code>__hash__</code>: 1. eq和frozen都为True，<code>__hash__</code>将会生成 2. eq为True而frozen为False，<code>__hash__</code>被设为<code>None</code> 3. eq为False，frozen为True，<code>__hash__</code>将使用超类（object）的同名属性（通常就是基于对象id的hash） 当设置为True时将会根据类属性自动生成<code>__hash__</code>，然而这是不安全的，因为这些属性是默认可变的，这会导致hash的不一致，所以除非能保证对象属性不可随意改变，否则应该谨慎地设置该参数为True</td></tr><tr><td>frozen</td><td>设为True时对field赋值将会引发错误，对象将是不可变的，如果已经定义了<code>__setattr__</code>和<code>__delattr__</code>将会引发<code>TypeError</code></td></tr></tbody></table><p>有默认值的属性必须定义在没有默认值的属性之后，和对kw参数的要求一样。</p><p>上面我们偶尔提到了field的概念，我们所说的数据类属性，数据属性实际上都是被field的对象，它代表着一个数据的实体和它的元信息，下面我们了解一下<code>dataclasses.field</code>。</p><h3 id="数据类的基石——dataclasses-field"><a href="#数据类的基石——dataclasses-field" class="headerlink" title="数据类的基石——dataclasses.field"></a>数据类的基石——dataclasses.field</h3><p>先看下field的原型：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dataclasses.field(*, default=MISSING, default_factory=MISSING, repr=True, hash=None, init=True, compare=True, metadata=None)</span><br></pre></td></tr></table></figure><p>通常我们无需直接使用，装饰器会根据我们给出的类型注解自动生成field，但有时候我们也需要定制这一过程，这时<code>dataclasses.field</code>就显得格外有用了。</p><p>default和default_factory参数将会影响默认值的产生，它们的默认值都是None，意思是调用时如果为指定则产生一个为None的值。其中default是field的默认值，而default_factory控制如何产生值，它接收一个无参数或者全是默认参数的<code>callable</code>对象，然后用调用这个对象获得field的初始值，之后再将default（如果值不是MISSING）复制给<code>callable</code>返回的这个对象。</p><p>举个例子，对于list，当复制它时只是复制了一份引用，所以像dataclass里那样直接复制给实例的做法的危险而错误的，为了保证使用list时的安全性，应该这样做：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@dataclass</span><br><span class="line">class C:</span><br><span class="line">    mylist: List[int] = field(default_factory=list)</span><br></pre></td></tr></table></figure><p>当初始化<code>C</code>的实例时就会调用<code>list()</code>而不是直接复制一份list的引用：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; c1 = C()</span><br><span class="line">&gt;&gt;&gt; c1.mylist += [1,2,3]</span><br><span class="line">&gt;&gt;&gt; c1.mylist</span><br><span class="line">[1, 2, 3]</span><br><span class="line">&gt;&gt;&gt; c2 = C()</span><br><span class="line">&gt;&gt;&gt; c2.mylist</span><br><span class="line">[]</span><br></pre></td></tr></table></figure><p>数据污染得到了避免。</p><p>init参数如果设置为False，表示不为这个field生成初始化操作，dataclass提供了hook——<code>__post_init__</code>供我们利用这一特性：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@dataclass</span><br><span class="line">class C:</span><br><span class="line">    a: int</span><br><span class="line">    b: int</span><br><span class="line">    c: int = field(init=False)</span><br><span class="line"></span><br><span class="line">    def __post_init__(self):</span><br><span class="line">        self.c = self.a + self.b</span><br></pre></td></tr></table></figure><p><code>__post_init__</code>在<code>__init__</code>后被调用，我们可以在这里初始化那些需要前置条件的field。</p><p>repr参数表示该field是否被包含进repr的输出，compare和hash参数表示field是否参与比较和计算hash值。metadata不被dataclass自身使用，通常让第三方组件从中获取某些元信息时才使用，所以我们不需要使用这一参数。</p><p>如果指定一个field的类型注解为<code>dataclasses.InitVar</code>，那么这个field将只会在初始化过程中（<code>__init__</code>和<code>__post_init__</code>）可以被使用，当初始化完成后访问该field会返回一个<code>dataclasses.Field</code>对象而不是field原本的值，也就是该field不再是一个可访问的数据对象。举个例子，比如一个由数据库对象，它只需要在初始化的过程中被访问：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@dataclass</span><br><span class="line">class C:</span><br><span class="line">    i: int</span><br><span class="line">    j: int = None</span><br><span class="line">    database: InitVar[DatabaseType] = None</span><br><span class="line"></span><br><span class="line">    def __post_init__(self, database):</span><br><span class="line">        if self.j is None and database is not None:</span><br><span class="line">            self.j = database.lookup(&#x27;j&#x27;)</span><br><span class="line"></span><br><span class="line">c = C(10, database=my_database)</span><br></pre></td></tr></table></figure><p>这个例子中会返回<code>c.i</code>和<code>c.j</code>的数据，但是不会返回<code>c.database</code>的。</p><h3 id="一些常用函数"><a href="#一些常用函数" class="headerlink" title="一些常用函数"></a>一些常用函数</h3><p><code>dataclasses</code>模块中提供了一些常用函数供我们处理数据类。</p><p>使用<code>dataclasses.asdict</code>和<code>dataclasses.astuple</code>我们可以把数据类实例中的数据转换成字典或者元组：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; from dataclasses import asdict, astuple</span><br><span class="line">&gt;&gt;&gt; asdict(Lang())</span><br><span class="line">&#123;&#x27;name&#x27;: &#x27;python&#x27;, &#x27;strong_type&#x27;: True, &#x27;static_type&#x27;: False, &#x27;age&#x27;: 28&#125;</span><br><span class="line">&gt;&gt;&gt; astuple(Lang())</span><br><span class="line">(&#x27;python&#x27;, True, False, 28)</span><br></pre></td></tr></table></figure><p>使用<code>dataclasses.is_dataclass</code>可以判断一个类或实例对象是否是数据类：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; from dataclasses import is_dataclass</span><br><span class="line">&gt;&gt;&gt; is_dataclass(Lang)</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; is_dataclass(Lang())</span><br><span class="line">True</span><br></pre></td></tr></table></figure><h3 id="dataclass继承"><a href="#dataclass继承" class="headerlink" title="dataclass继承"></a>dataclass继承</h3><p>python3.7引入dataclass的一大原因就在于相比namedtuple，dataclass可以享受继承带来的便利。</p><p><code>dataclass</code>装饰器会检查当前class的所有基类，如果发现一个dataclass，就会把它的字段按顺序添加进当前的class，随后再处理当前class的field。所有生成的方法也将按照这一过程处理，因此如果子类中的field与基类同名，那么子类将会无条件覆盖基类。子类将会根据所有的field重新生成一个构造函数，并在其中初始化基类。</p><p>看个例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">@dataclass</span><br><span class="line">class Python(Lang):</span><br><span class="line">    tab_size: int = 4</span><br><span class="line">    is_script: bool = True</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; Python()</span><br><span class="line">Python(name=&#x27;python&#x27;, strong_type=True, static_type=False, age=28, tab_size=4, is_script=True)</span><br><span class="line"></span><br><span class="line">@dataclass</span><br><span class="line">class Base:</span><br><span class="line">    x: float = 25.0</span><br><span class="line">    y: int = 0</span><br><span class="line"></span><br><span class="line">@dataclass</span><br><span class="line">class C(Base):</span><br><span class="line">    z: int = 10</span><br><span class="line">    x: int = 15</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; C()</span><br><span class="line">C(x=15, y=0, z=10)</span><br></pre></td></tr></table></figure><p><code>Lang</code>的field被<code>Python</code>继承了，而<code>C</code>中的<code>x</code>则覆盖了<code>Base</code>中的定义。</p><p>没错，数据类的继承就是这么简单。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>合理使用dataclass将会大大减轻开发中的负担，将我们从大量的重复劳动中解放出来，这既是dataclass的魅力，不过魅力的背后也总是有陷阱相伴，最后我想提几点注意事项：</p><ul><li>dataclass通常情况下是unhashable的，因为默认生成的<code>__hash__</code>是<code>None</code>，所以不能用来做字典的key，如果有这种需求，那么应该指定你的数据类为frozen dataclass</li><li>小心当你定义了和<code>dataclass</code>生成的同名方法时会引发的问题</li><li>当使用可变类型（如list）时，应该考虑使用<code>field</code>的<code>default_factory</code></li><li>数据类的属性都是公开的，如果你有属性只需要初始化时使用而不需要在其他时候被访问，请使用<code>dataclasses.InitVar</code></li></ul><p>只要避开这些陷阱，dataclass一定能成为提高生产力的利器。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Python的Mixin概念</title>
      <link href="/post/7408a64e.html"/>
      <url>/post/7408a64e.html</url>
      
        <content type="html"><![CDATA[<h2 id="什么是mixin"><a href="#什么是mixin" class="headerlink" title="什么是mixin"></a>什么是mixin</h2><p><a href="https://blog.hszofficial.site/TutorialForPython/%E8%AF%AD%E6%B3%95%E7%AF%87/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E6%83%AF%E7%94%A8%E6%B3%95/%E5%A4%9A%E9%87%8D%E7%BB%A7%E6%89%BF%E5%92%8CMixin.html">https://blog.hszofficial.site/TutorialForPython/%E8%AF%AD%E6%B3%95%E7%AF%87/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E6%83%AF%E7%94%A8%E6%B3%95/%E5%A4%9A%E9%87%8D%E7%BB%A7%E6%89%BF%E5%92%8CMixin.html</a></p><p>定义和使用 Mixin 类应该遵循几个原则：</p><ol><li>Mixin 实现的功能需要是通用的，并且是单一的，比如上例中两个 Mixin 类都适用于大部分子类，每个 Mixin 只实现一种功能，可按需继承。</li><li>Mixin 只用于拓展子类的功能，不能影响子类的主要功能，子类也不能依赖 Mixin。</li><li>Mixin 类自身不能进行实例化，仅用于被子类继承。</li></ol><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">class Person1:</span><br><span class="line">    def __init__(self, name, gender, age):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.gender = gender</span><br><span class="line">        self.age = age</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class MappingMixin:</span><br><span class="line">    def __getitem__(self, key):</span><br><span class="line">        return self.__dict__.get(key)</span><br><span class="line"></span><br><span class="line">    def __setitem__(self, key, value):</span><br><span class="line">        return self.__dict__.setdefault(key, value)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Person2(MappingMixin):</span><br><span class="line">    def __init__(self, name, gender, age):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.gender = gender</span><br><span class="line">        self.age = age</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class ReprMixin:</span><br><span class="line">    def __repr__(self):</span><br><span class="line">        s = self.__class__.__name__ + &#x27;(&#x27;</span><br><span class="line">        for k, v in self.__dict__.items():</span><br><span class="line">            if not k.startswith(&#x27;_&#x27;):</span><br><span class="line">                s += &#x27;&#123;&#125;=&#123;&#125;, &#x27;.format(k, v)</span><br><span class="line">        s = s.rstrip(&#x27;, &#x27;) + &#x27;)&#x27;  # 将最后一个逗号和空格换成括号</span><br><span class="line">        return s</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Person(MappingMixin, ReprMixin):</span><br><span class="line">    def __init__(self, name, gender, age):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.gender = gender</span><br><span class="line">        self.age = age</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    p = Person(&quot;小陈&quot;, &quot;男&quot;, 18)</span><br><span class="line">    print(p.name)  # &quot;小陈&quot;</span><br><span class="line">    p = Person(&quot;小陈&quot;, &quot;男&quot;, 18)</span><br><span class="line">    print(p[&#x27;name&#x27;])  # &quot;小陈&quot;</span><br><span class="line">    print(p[&#x27;age&#x27;])  # 18</span><br><span class="line">    p[&quot;gender&quot;] = &quot;男&quot;</span><br><span class="line">    print(p.gender)</span><br><span class="line">    print(p)</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>微信小程序逆向分析</title>
      <link href="/post/684c4691.html"/>
      <url>/post/684c4691.html</url>
      
        <content type="html"><![CDATA[<h2 id="第一步，从手机中提取出wxapkg文件"><a href="#第一步，从手机中提取出wxapkg文件" class="headerlink" title="第一步，从手机中提取出wxapkg文件"></a>第一步，从手机中提取出wxapkg文件</h2><p>以安卓为例，进入以下目录：<br><strong>&#x2F;data&#x2F;data&#x2F;com.tencent.mm&#x2F;MicroMsg&#x2F;(一长串字符串)&#x2F;Appbrand&#x2F;pkg</strong></p><p>把这些包从手机里导出来，进行解析，用adb进行导出，如果不知道哪个文件可以批量导出如果很多wxapkg建议清理一下，重启目标小程序。可能出现好几个包)</p><p>可以找到wxapkg文件，把它提取到电脑上。</p><h2 id="第二步，利用解包工具解包"><a href="#第二步，利用解包工具解包" class="headerlink" title="第二步，利用解包工具解包"></a>第二步，利用解包工具解包</h2><ul><li><p>下载解包工具<strong><a href="https://github.com/wanliofficial/wxappUnpacker">https://github.com/wanliofficial/wxappUnpacker</a></strong>，<a href="https://github.com/Cherrison/CrackMinApp">https://github.com/Cherrison/CrackMinApp</a></p></li><li><pre><code class="js">  node wuWxapkg.js &lt;wx_mini_progranm_file_path&gt;</code></pre></li><li><p>解包要先解主包</p></li><li><p>node wuWxapkg.js 分包.wxapkg -s&#x3D;主包的目录</p></li><li><p>解决解包过程中的程序报错</p><ul><li>可能是子包</li><li>。。。</li></ul></li><li><p>解包成功的标识</p><ul><li>根目录下生成：app.js app.json app.wxss</li></ul></li></ul><h2 id="第三步，了解小程序的文件结构"><a href="#第三步，了解小程序的文件结构" class="headerlink" title="第三步，了解小程序的文件结构"></a>第三步，了解小程序的文件结构</h2><p>小程序包含一个描述整体程序的 <code>app</code> 和多个描述各自页面的 <code>page</code>。</p><p>一个小程序主体部分由三个文件组成，必须放在项目的根目录，如下：</p><table><thead><tr><th align="left">文件</th><th align="left">必需</th><th align="left">作用</th></tr></thead><tbody><tr><td align="left"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/app-service/app.html">app.js</a></td><td align="left">是</td><td align="left">小程序逻辑</td></tr><tr><td align="left"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/config.html">app.json</a></td><td align="left">是</td><td align="left">小程序公共配置</td></tr><tr><td align="left"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/view/wxss.html">app.wxss</a></td><td align="left">否</td><td align="left">小程序公共样式表</td></tr></tbody></table><p>一个小程序页面由四个文件组成，分别是：</p><table><thead><tr><th align="left">文件类型</th><th align="left">必需</th><th align="left">作用</th></tr></thead><tbody><tr><td align="left"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/app-service/page.html">js</a></td><td align="left">是</td><td align="left">页面逻辑</td></tr><tr><td align="left"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/view/wxml/">wxml</a></td><td align="left">是</td><td align="left">页面结构</td></tr><tr><td align="left"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/config.html#%E9%A1%B5%E9%9D%A2%E9%85%8D%E7%BD%AE">json</a></td><td align="left">否</td><td align="left">页面配置</td></tr><tr><td align="left"><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/view/wxss.html">wxss</a></td><td align="left">否</td><td align="left">页面样式表</td></tr></tbody></table><p><strong>注意：为了方便开发者减少配置项，描述页面的四个文件必须具有相同的路径与文件名。</strong></p><h3 id="允许上传的文件"><a href="#允许上传的文件" class="headerlink" title="允许上传的文件"></a>允许上传的文件</h3><p>在项目目录中，以下文件会经过编译，因此上传之后无法直接访问到：*.js、app.json、*.wxml、*.wxss（其中 wxml 和 wxss 文件仅针对在 app.json 中配置了的页面）。除此之外，只有后缀名在白名单内的文件可以被上传，不在白名单列表内文件在开发工具能被访问到，但无法被上传。具体白名单列表如下：</p><ol><li>wxs</li><li>png</li><li>jpg</li><li>jpeg</li><li>gif</li><li>svg</li><li>json</li><li>cer</li><li>mp3</li><li>aac</li><li>m4a</li><li>mp4</li><li>wav</li><li>ogg</li><li>silk</li></ol><h2 id="第四步，静态分析"><a href="#第四步，静态分析" class="headerlink" title="第四步，静态分析"></a>第四步，静态分析</h2><h2 id="第五步，调试小程序"><a href="#第五步，调试小程序" class="headerlink" title="第五步，调试小程序"></a>第五步，调试小程序</h2><ol><li><p>下载微信开发者工具</p></li><li><p>注册开发者账号</p></li><li><p>导入解包之后的程序</p></li><li><p>解决错误，导入之后可能出现各种错误，比如，缺少配置，属性错误，语法错误等，需要手动修改</p><ol><li><p>对于插件代码，一般来说都是根据控制台中的异常，找到插件id，然后在微信插件市场找到对应插件名称 然后在小程序app.json中删除该插件引用即可。</p><p> 对于相对路径错误，也是同理，根据异常找到对应文件进行修改即可，这里可能会遇到__wuBaseWxss__中wxss文无法找到的问题，一个可能原因是反编译分包时wxss文件没有解压到主包__wuBaseWxss__目录下，因此可以手动复制过去。</p><p> 在这步过程中就会用到小程序开发者文档中所学到的目录结构相关知识，对各文件作用需要一定了解才能顺利修复。</p></li></ol></li><li><p>实质上开发者工具是个类似Chrome的浏览器，虽然开发者工具也存在控制台，但是该控制台中只能看到逻辑层JS代码，无法看到渲染层</p><ol><li><p>查看微信小程序开发者工具的包内容，然后进入Contents&#x2F;Resources&#x2F;app.nw&#x2F;js&#x2F;core&#x2F;index.js，注释掉如下代码就可以查看开发者工具渲染后的代码。</p><p> if (nw.App.argv.indexOf(‘inspect’) !&#x3D;&#x3D; -1) {<br> tools.openInspectWin()</p><p> }</p></li></ol></li><li><p>动态调试接口信息</p></li></ol><h2 id="实现源码"><a href="#实现源码" class="headerlink" title="实现源码"></a>实现源码</h2><p>我们实现爬虫的时候，我们把js代码写好（可以调用加密开源库或把js从小程序里扣出来都可以的），通过nodejs环境执行js。Python可以通过pyexecjs完成调用。这个库会查找本地可用于执行的js环境，这个需要配置相关的环境变量即可。另外，如果我们执行的js引入了开源库，需要在工程目录下，把引入的库拷贝过来</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Vimium操作命令</title>
      <link href="/post/73fb024.html"/>
      <url>/post/73fb024.html</url>
      
        <content type="html"><![CDATA[<h1 id="v-visual-mode-，-需要着重讲一下"><a href="#v-visual-mode-，-需要着重讲一下" class="headerlink" title="v(visual mode)， 需要着重讲一下"></a>v(visual mode)， 需要着重讲一下</h1><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">　先用 / 定位，找到想要选择的字符</span><br><span class="line">　再按 v ,进入模式</span><br><span class="line">　然后使用</span><br><span class="line">　　　　j：向下一行</span><br><span class="line">　　　　k：向上一行</span><br><span class="line">　　　　h：向左一个字符或标点（数字+h，可以移动多个字符）</span><br><span class="line">　　　　l：向右一个字符或标点（数字+l，可以移动多个字符）</span><br><span class="line">　　　　w：下一个标点符号后位置，包括看不见的换行符</span><br><span class="line">　　　　e：下一个标点符号前位置</span><br><span class="line">　　　　b：取消选中上一个字符，字符和标点算一个字符</span><br></pre></td></tr></table></figure><h1 id="常用的基础快捷键在这："><a href="#常用的基础快捷键在这：" class="headerlink" title="常用的基础快捷键在这："></a>常用的基础快捷键在这：</h1><p><strong>温馨提示：</strong></p><ol><li>Mac对应的⌘就是Windows中的ctrl</li><li>大小写需要区分</li></ol><h2 id="操作网页"><a href="#操作网页" class="headerlink" title="操作网页"></a>操作网页</h2><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">j or &lt;c-e&gt;  向下滚动一点</span><br><span class="line">k or &lt;c-y&gt;  向上滚动一点</span><br><span class="line">d  向下滚动半页</span><br><span class="line">u  向上滚动半页</span><br><span class="line">h  向左滚动</span><br><span class="line">l   向右滚动</span><br><span class="line">r  刷新页面</span><br><span class="line">yy  复制当前页面URL到剪切板</span><br><span class="line">p  在当前标签页打开剪切板中的URL，如不是URL则默认引擎搜索</span><br><span class="line">P  在新标签页打开剪切板中的URL，如不是URL则默认引擎搜索</span><br><span class="line">i   输入模式，有些网页有内置的快捷键，进入该模式即可使用该网页内置的快捷键</span><br><span class="line">gi  定焦在页面第一个文本可输入位置</span><br><span class="line">f  打开元素定位器，是在当前标签页打开</span><br><span class="line">F  打开元素定位器，是在新标签页打开</span><br><span class="line">gf  选择下一个frame（尤其在选择网页内置视频的时候很管用）</span><br></pre></td></tr></table></figure><h2 id="操作标签"><a href="#操作标签" class="headerlink" title="操作标签"></a>操作标签</h2><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">t  新建标签页</span><br><span class="line">J  切换到左标签页</span><br><span class="line">K  切换到右标签页</span><br><span class="line">^  切换到 上一个历史标签页（可用于两个标签页之间切换）</span><br><span class="line">g0  切换到第一个标签（数字0，不是字母O）</span><br><span class="line">g$  切换到最后一个标签（我习惯用⌘+9）</span><br><span class="line">yt 复制当前标签页并打开</span><br><span class="line">x  关闭当前标签页(相当于⌘+w)</span><br><span class="line">X  恢复关闭的标签页 (相当于⌘+⇧+w)</span><br><span class="line">&lt;&lt; 将当前标签页向左移动</span><br><span class="line">&gt;&gt; 将当前标签页向左移动</span><br></pre></td></tr></table></figure><h2 id="浏览历史"><a href="#浏览历史" class="headerlink" title="浏览历史"></a>浏览历史</h2><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">L  前进</span><br><span class="line">H  后退</span><br></pre></td></tr></table></figure><h2 id="查找功能"><a href="#查找功能" class="headerlink" title="查找功能"></a>查找功能</h2><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/  开启查找功能（在右下角有输入框，输入要查找的字符，按下Enter，结束输入</span><br><span class="line">n  查找下一个</span><br><span class="line">N  查找上一个 （再按/ 结束查找）</span><br></pre></td></tr></table></figure><h2 id="使用搜索框"><a href="#使用搜索框" class="headerlink" title="使用搜索框"></a>使用搜索框</h2><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">o   从URL、书签、历史记录中搜索地址，回车打开</span><br><span class="line">O   从URL、书签、历史记录中搜索地址，回车在新标签页中打开</span><br><span class="line">b   仅从书签搜索地址，回车打开</span><br><span class="line">B   仅从书签搜索地址，回车新标签页中打开</span><br><span class="line">T   搜索当前浏览器的所有标签</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> vim </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>正则表达式</title>
      <link href="/post/2f57a694.html"/>
      <url>/post/2f57a694.html</url>
      
        <content type="html"><![CDATA[<h1 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h1><h2 id="参考-https-deerchao-cn-tutorials-regex-regex-htm"><a href="#参考-https-deerchao-cn-tutorials-regex-regex-htm" class="headerlink" title="参考 https://deerchao.cn/tutorials/regex/regex.htm"></a>参考 <a href="https://deerchao.cn/tutorials/regex/regex.htm">https://deerchao.cn/tutorials/regex/regex.htm</a></h2><h2 id="常用的操作"><a href="#常用的操作" class="headerlink" title="常用的操作"></a>常用的操作</h2><h3 id="使用re替换的函数"><a href="#使用re替换的函数" class="headerlink" title="使用re替换的函数"></a>使用re替换的函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">inputStr = <span class="string">&#x27;hello 234 world 567 额外rwe2121&#x27;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">_add111</span>(<span class="params">matched</span>):</span><br><span class="line">    intStr = matched.group(<span class="string">&quot;number&quot;</span>)</span><br><span class="line">    intValue = <span class="built_in">int</span>(intStr)</span><br><span class="line">    addedValue = intValue + <span class="number">111</span></span><br><span class="line">    addedValueStr = <span class="built_in">str</span>(addedValue)</span><br><span class="line">    <span class="keyword">return</span> addedValueStr</span><br><span class="line">replacedStr = re.sub(<span class="string">&quot;(?P&lt;number&gt;\d+)&quot;</span>, _add111, inputStr);</span><br><span class="line"><span class="built_in">print</span>(replacedStr)</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">replace</span>(<span class="params">matched</span>):</span><br><span class="line">    group_str = matched.group(<span class="string">&quot;page&quot;</span>)</span><br><span class="line">    addedValue = group_str+<span class="string">&quot;_&#123;&#125;&quot;</span></span><br><span class="line">    addedValueStr = <span class="built_in">str</span>(addedValue)</span><br><span class="line">    <span class="keyword">return</span> addedValueStr</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">replacedStr = re.sub(<span class="string">r&quot;\w&#123;1&#125;/(?P&lt;page&gt;\w+).js&quot;</span>, replace, inputStr);</span><br><span class="line"><span class="built_in">print</span>(replacedStr)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">inputStr = <span class="string">&#x27;http://www.tvibe.cn/revision/play/album?albumId=20365308&amp;pageNum=2&amp;sort=1&amp;pageSize=30&#x27;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">_next_page</span>(<span class="params">matched</span>):</span><br><span class="line">    intStr = matched.group(<span class="string">&quot;number&quot;</span>)</span><br><span class="line">    intValue = <span class="built_in">int</span>(intStr)</span><br><span class="line">    addedValue = intValue + <span class="number">1</span></span><br><span class="line">    addedValueStr = <span class="string">&quot;pageNum=&quot;</span> + <span class="built_in">str</span>(addedValue)</span><br><span class="line">    <span class="keyword">return</span> addedValueStr</span><br><span class="line">next_page_url = re.sub(<span class="string">&quot;pageNum=(?P&lt;number&gt;\d+)&quot;</span>, _next_page, inputStr)</span><br><span class="line"><span class="built_in">print</span>(next_page_url)</span><br></pre></td></tr></table></figure><h3 id="零宽断言"><a href="#零宽断言" class="headerlink" title="零宽断言"></a>零宽断言</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">info = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">No waywanteh eetehsdd kkl</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">regex1 = <span class="string">&quot;\w+(?=e)&quot;</span>  <span class="comment"># [&#x27;want&#x27;, &#x27;eet&#x27;]</span></span><br><span class="line">regex2 = <span class="string">&quot;\w+(?&lt;=e)&quot;</span> <span class="comment"># [&#x27;wante&#x27;, &#x27;eete&#x27;]</span></span><br><span class="line">regex3 = <span class="string">r&quot;\b(?!way)\w+&quot;</span> <span class="comment"># [&#x27;No&#x27;, &#x27;way&#x27;, &#x27;wanteh&#x27;, &#x27;kkl&#x27;]</span></span><br><span class="line">regex4 = <span class="string">r&quot;\w+(?&lt;!eh)\b&quot;</span>  <span class="comment"># [&#x27;No&#x27;, &#x27;eetehsdd&#x27;, &#x27;kkl&#x27;]</span></span><br><span class="line">pattern = re.<span class="built_in">compile</span>(regex3, re.M)</span><br><span class="line">result = pattern.findall(info)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 正则表达式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>scrapy中间件源码解读</title>
      <link href="/post/5ad14034.html"/>
      <url>/post/5ad14034.html</url>
      
        <content type="html"><![CDATA[<h2 id="源码解读"><a href="#源码解读" class="headerlink" title="源码解读"></a>源码解读</h2><h3 id="class-MiddlewareManager"><a href="#class-MiddlewareManager" class="headerlink" title="class MiddlewareManager"></a>class MiddlewareManager</h3><p>E:\python3.7.6\Lib\site-packages\scrapy\middleware.py</p><h3 id="class-Spider-MiddlewareManager"><a href="#class-Spider-MiddlewareManager" class="headerlink" title="class Spider(MiddlewareManager)"></a>class Spider(MiddlewareManager)</h3><p>E:\python3.7.6\Lib\site-packages\scrapy\core\spidermw.py</p><h3 id="class-Download-MiddlewareManager"><a href="#class-Download-MiddlewareManager" class="headerlink" title="class Download(MiddlewareManager)"></a>class Download(MiddlewareManager)</h3><p>E:\python3.7.6\Lib\site-packages\scrapy\core\downloader\middleware.py</p><h3 id="class-Extensions-MiddlewareManager"><a href="#class-Extensions-MiddlewareManager" class="headerlink" title="class Extensions(MiddlewareManager)"></a>class Extensions(MiddlewareManager)</h3><p>E:\python3.7.6\Lib\site-packages\scrapy\extension.py</p><h3 id="ItemPipelineManager-MiddlewareManager"><a href="#ItemPipelineManager-MiddlewareManager" class="headerlink" title="ItemPipelineManager(MiddlewareManager)"></a>ItemPipelineManager(MiddlewareManager)</h3><p>E:\python3.7.6\Lib\site-packages\scrapy\pipelines_<em>init</em>_.py</p><h2 id="关于中间件如何调用"><a href="#关于中间件如何调用" class="headerlink" title="关于中间件如何调用"></a>关于中间件如何调用</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">load_object</span>(<span class="params">path</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Load an object given its absolute object path, and return it.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    The object can be the import path of a class, function, variable or an</span></span><br><span class="line"><span class="string">    instance, e.g. &#x27;scrapy.downloadermiddlewares.redirect.RedirectMiddleware&#x27;.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    If ``path`` is not a string, but is a callable object, such as a class or</span></span><br><span class="line"><span class="string">    a function, then return it as is.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(path, <span class="built_in">str</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">callable</span>(path):</span><br><span class="line">            <span class="keyword">return</span> path</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">raise</span> TypeError(<span class="string">&quot;Unexpected argument type, expected string &quot;</span></span><br><span class="line">                            <span class="string">&quot;or object, got: %s&quot;</span> % <span class="built_in">type</span>(path))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        dot = path.rindex(<span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">    <span class="keyword">except</span> ValueError:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">f&quot;Error loading object &#x27;<span class="subst">&#123;path&#125;</span>&#x27;: not a full path&quot;</span>)</span><br><span class="line"></span><br><span class="line">    module, name = path[:dot], path[dot + <span class="number">1</span>:]</span><br><span class="line">    mod = import_module(module)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        obj = <span class="built_in">getattr</span>(mod, name)</span><br><span class="line">    <span class="keyword">except</span> AttributeError:</span><br><span class="line">        <span class="keyword">raise</span> NameError(<span class="string">f&quot;Module &#x27;<span class="subst">&#123;module&#125;</span>&#x27; doesn&#x27;t define any object named &#x27;<span class="subst">&#123;name&#125;</span>&#x27;&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> obj</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> importlib</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绝对导入</span></span><br><span class="line">a = importlib.import_module(<span class="string">&quot;a&quot;</span>)</span><br><span class="line">a.show()</span><br><span class="line"><span class="comment"># show A</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 相对导入</span></span><br><span class="line">b = importlib.import_module(<span class="string">&quot;b&quot;</span>, <span class="string">&quot;python_demo&quot;</span>)</span><br><span class="line">b.show()</span><br><span class="line"><span class="comment"># show B</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">create_instance</span>(<span class="params">objcls, settings, crawler, *args, **kwargs</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Construct a class instance using its ``from_crawler`` or</span></span><br><span class="line"><span class="string">    ``from_settings`` constructors, if available.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    At least one of ``settings`` and ``crawler`` needs to be different from</span></span><br><span class="line"><span class="string">    ``None``. If ``settings `` is ``None``, ``crawler.settings`` will be used.</span></span><br><span class="line"><span class="string">    If ``crawler`` is ``None``, only the ``from_settings`` constructor will be</span></span><br><span class="line"><span class="string">    tried.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    ``*args`` and ``**kwargs`` are forwarded to the constructors.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Raises ``ValueError`` if both ``settings`` and ``crawler`` are ``None``.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    .. versionchanged:: 2.2</span></span><br><span class="line"><span class="string">       Raises ``TypeError`` if the resulting instance is ``None`` (e.g. if an</span></span><br><span class="line"><span class="string">       extension has not been implemented correctly).</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> settings <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">if</span> crawler <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">&quot;Specify at least one of settings and crawler.&quot;</span>)</span><br><span class="line">        settings = crawler.settings</span><br><span class="line">    <span class="keyword">if</span> crawler <span class="keyword">and</span> <span class="built_in">hasattr</span>(objcls, <span class="string">&#x27;from_crawler&#x27;</span>):</span><br><span class="line">        instance = objcls.from_crawler(crawler, *args, **kwargs)</span><br><span class="line">        method_name = <span class="string">&#x27;from_crawler&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> <span class="built_in">hasattr</span>(objcls, <span class="string">&#x27;from_settings&#x27;</span>):</span><br><span class="line">        instance = objcls.from_settings(settings, *args, **kwargs)</span><br><span class="line">        method_name = <span class="string">&#x27;from_settings&#x27;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        instance = objcls(*args, **kwargs)</span><br><span class="line">        method_name = <span class="string">&#x27;__new__&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> instance <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">raise</span> TypeError(<span class="string">f&quot;<span class="subst">&#123;objcls.__qualname__&#125;</span>.<span class="subst">&#123;method_name&#125;</span> returned None&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> instance</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MiddlewareManager</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Base class for implementing middleware managers&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    component_name = <span class="string">&#x27;foo middleware&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, *middlewares</span>):</span><br><span class="line">        self.middlewares = middlewares</span><br><span class="line">        self.methods = defaultdict(deque)</span><br><span class="line">        <span class="keyword">for</span> mw <span class="keyword">in</span> middlewares:</span><br><span class="line">            self._add_middleware(mw)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_get_mwlist_from_settings</span>(<span class="params">cls, settings</span>):</span><br><span class="line">        <span class="keyword">raise</span> NotImplementedError</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">from_settings</span>(<span class="params">cls, settings, crawler=<span class="literal">None</span></span>):</span><br><span class="line">        mwlist = cls._get_mwlist_from_settings(settings)</span><br><span class="line">        middlewares = []</span><br><span class="line">        enabled = []</span><br><span class="line">        <span class="keyword">for</span> clspath <span class="keyword">in</span> mwlist:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                mwcls = load_object(clspath)  <span class="comment"># 加载中间件类</span></span><br><span class="line">                mw = create_instance(mwcls, settings, crawler) <span class="comment"># 创建中间件实例</span></span><br><span class="line">                middlewares.append(mw)</span><br><span class="line">                enabled.append(clspath)</span><br><span class="line">            <span class="keyword">except</span> NotConfigured <span class="keyword">as</span> e:</span><br><span class="line">                <span class="keyword">if</span> e.args:</span><br><span class="line">                    clsname = clspath.split(<span class="string">&#x27;.&#x27;</span>)[-<span class="number">1</span>]</span><br><span class="line">                    logger.warning(<span class="string">&quot;Disabled %(clsname)s: %(eargs)s&quot;</span>,</span><br><span class="line">                                   &#123;<span class="string">&#x27;clsname&#x27;</span>: clsname, <span class="string">&#x27;eargs&#x27;</span>: e.args[<span class="number">0</span>]&#125;,</span><br><span class="line">                                   extra=&#123;<span class="string">&#x27;crawler&#x27;</span>: crawler&#125;)</span><br><span class="line"></span><br><span class="line">        logger.info(<span class="string">&quot;Enabled %(componentname)ss:\n%(enabledlist)s&quot;</span>,</span><br><span class="line">                    &#123;<span class="string">&#x27;componentname&#x27;</span>: cls.component_name,</span><br><span class="line">                     <span class="string">&#x27;enabledlist&#x27;</span>: pprint.pformat(enabled)&#125;,</span><br><span class="line">                    extra=&#123;<span class="string">&#x27;crawler&#x27;</span>: crawler&#125;)</span><br><span class="line">        <span class="keyword">return</span> cls(*middlewares)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">from_crawler</span>(<span class="params">cls, crawler</span>):</span><br><span class="line">        <span class="keyword">return</span> cls.from_settings(crawler.settings, crawler)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_add_middleware</span>(<span class="params">self, mw</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">hasattr</span>(mw, <span class="string">&#x27;open_spider&#x27;</span>):</span><br><span class="line">            self.methods[<span class="string">&#x27;open_spider&#x27;</span>].append(mw.open_spider)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">hasattr</span>(mw, <span class="string">&#x27;close_spider&#x27;</span>):</span><br><span class="line">            self.methods[<span class="string">&#x27;close_spider&#x27;</span>].appendleft(mw.close_spider)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_process_parallel</span>(<span class="params">self, methodname, obj, *args</span>):</span><br><span class="line">        <span class="keyword">return</span> process_parallel(self.methods[methodname], obj, *args)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_process_chain</span>(<span class="params">self, methodname, obj, *args</span>):</span><br><span class="line">        <span class="keyword">return</span> process_chain(self.methods[methodname], obj, *args)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_process_chain_both</span>(<span class="params">self, cb_methodname, eb_methodname, obj, *args</span>):</span><br><span class="line">        <span class="keyword">return</span> process_chain_both(self.methods[cb_methodname],</span><br><span class="line">                                  self.methods[eb_methodname], obj, *args)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">open_spider</span>(<span class="params">self, spider</span>):</span><br><span class="line">        <span class="keyword">return</span> self._process_parallel(<span class="string">&#x27;open_spider&#x27;</span>, spider)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">close_spider</span>(<span class="params">self, spider</span>):</span><br><span class="line">        <span class="keyword">return</span> self._process_parallel(<span class="string">&#x27;close_spider&#x27;</span>, spider)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SpiderMiddlewareManager</span>(<span class="title class_ inherited__">MiddlewareManager</span>):</span><br><span class="line"></span><br><span class="line">    component_name = <span class="string">&#x27;spider middleware&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_get_mwlist_from_settings</span>(<span class="params">cls, settings</span>):</span><br><span class="line">        <span class="keyword">return</span> build_component_list(settings.getwithbase(<span class="string">&#x27;SPIDER_MIDDLEWARES&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_add_middleware</span>(<span class="params">self, mw</span>):</span><br><span class="line">        <span class="built_in">super</span>()._add_middleware(mw)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">hasattr</span>(mw, <span class="string">&#x27;process_spider_input&#x27;</span>):</span><br><span class="line">            self.methods[<span class="string">&#x27;process_spider_input&#x27;</span>].append(mw.process_spider_input)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">hasattr</span>(mw, <span class="string">&#x27;process_start_requests&#x27;</span>):</span><br><span class="line">            self.methods[<span class="string">&#x27;process_start_requests&#x27;</span>].appendleft(mw.process_start_requests)</span><br><span class="line">        process_spider_output = <span class="built_in">getattr</span>(mw, <span class="string">&#x27;process_spider_output&#x27;</span>, <span class="literal">None</span>)</span><br><span class="line">        self.methods[<span class="string">&#x27;process_spider_output&#x27;</span>].appendleft(process_spider_output)</span><br><span class="line">        process_spider_exception = <span class="built_in">getattr</span>(mw, <span class="string">&#x27;process_spider_exception&#x27;</span>, <span class="literal">None</span>)</span><br><span class="line">        self.methods[<span class="string">&#x27;process_spider_exception&#x27;</span>].appendleft(process_spider_exception)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">scrape_response</span>(<span class="params">self, scrape_func, response, request, spider</span>):</span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">process_spider_input</span>(<span class="params">response</span>):</span><br><span class="line">            <span class="keyword">for</span> method <span class="keyword">in</span> self.methods[<span class="string">&#x27;process_spider_input&#x27;</span>]:</span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    result = method(response=response, spider=spider)</span><br><span class="line">                    <span class="keyword">if</span> result <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">                        msg = (<span class="string">f&quot;Middleware <span class="subst">&#123;_fname(method)&#125;</span> must return None &quot;</span></span><br><span class="line">                               <span class="string">f&quot;or raise an exception, got <span class="subst">&#123;<span class="built_in">type</span>(result)&#125;</span>&quot;</span>)</span><br><span class="line">                        <span class="keyword">raise</span> _InvalidOutput(msg)</span><br><span class="line">                <span class="keyword">except</span> _InvalidOutput:</span><br><span class="line">                    <span class="keyword">raise</span></span><br><span class="line">                <span class="keyword">except</span> Exception:</span><br><span class="line">                    <span class="keyword">return</span> scrape_func(Failure(), request, spider)</span><br><span class="line">            <span class="keyword">return</span> scrape_func(response, request, spider)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">_evaluate_iterable</span>(<span class="params">iterable, exception_processor_index, recover_to</span>):</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="keyword">for</span> r <span class="keyword">in</span> iterable:</span><br><span class="line">                    <span class="keyword">yield</span> r</span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> ex:</span><br><span class="line">                exception_result = process_spider_exception(Failure(ex), exception_processor_index)</span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">isinstance</span>(exception_result, Failure):</span><br><span class="line">                    <span class="keyword">raise</span></span><br><span class="line">                recover_to.extend(exception_result)</span><br><span class="line">                </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DownloaderMiddlewareManager</span>(<span class="title class_ inherited__">MiddlewareManager</span>):</span><br><span class="line"></span><br><span class="line">    component_name = <span class="string">&#x27;downloader middleware&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_get_mwlist_from_settings</span>(<span class="params">cls, settings</span>):</span><br><span class="line">        <span class="keyword">return</span> build_component_list(</span><br><span class="line">            settings.getwithbase(<span class="string">&#x27;DOWNLOADER_MIDDLEWARES&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_add_middleware</span>(<span class="params">self, mw</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">hasattr</span>(mw, <span class="string">&#x27;process_request&#x27;</span>):</span><br><span class="line">            self.methods[<span class="string">&#x27;process_request&#x27;</span>].append(mw.process_request)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">hasattr</span>(mw, <span class="string">&#x27;process_response&#x27;</span>):</span><br><span class="line">            self.methods[<span class="string">&#x27;process_response&#x27;</span>].appendleft(mw.process_response)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">hasattr</span>(mw, <span class="string">&#x27;process_exception&#x27;</span>):</span><br><span class="line">            self.methods[<span class="string">&#x27;process_exception&#x27;</span>].appendleft(mw.process_exception)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">download</span>(<span class="params">self, download_func, request, spider</span>):</span><br><span class="line"><span class="meta">        @defer.inlineCallbacks</span></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">process_request</span>(<span class="params">request</span>):</span><br><span class="line">            <span class="keyword">for</span> method <span class="keyword">in</span> self.methods[<span class="string">&#x27;process_request&#x27;</span>]:</span><br><span class="line">                response = <span class="keyword">yield</span> deferred_from_coro(method(request=request, spider=spider))</span><br><span class="line">                <span class="keyword">if</span> response <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">and</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(response, (Response, Request)):</span><br><span class="line">                    <span class="keyword">raise</span> _InvalidOutput(</span><br><span class="line">                        <span class="string">f&quot;Middleware <span class="subst">&#123;method.__self__.__class__.__name__&#125;</span>&quot;</span></span><br><span class="line">                        <span class="string">&quot;.process_request must return None, Response or &quot;</span></span><br><span class="line">                        <span class="string">f&quot;Request, got <span class="subst">&#123;response.__class__.__name__&#125;</span>&quot;</span></span><br><span class="line">                    )</span><br><span class="line">                <span class="keyword">if</span> response:</span><br><span class="line">                    <span class="keyword">return</span> response</span><br><span class="line">            <span class="keyword">return</span> (<span class="keyword">yield</span> download_func(request=request, spider=spider))</span><br><span class="line"></span><br><span class="line"><span class="meta">        @defer.inlineCallbacks</span></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">process_response</span>(<span class="params">response</span>):</span><br><span class="line">            <span class="keyword">if</span> response <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                <span class="keyword">raise</span> TypeError(<span class="string">&quot;Received None in process_response&quot;</span>)</span><br><span class="line">            <span class="keyword">elif</span> <span class="built_in">isinstance</span>(response, Request):</span><br><span class="line">                <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> method <span class="keyword">in</span> self.methods[<span class="string">&#x27;process_response&#x27;</span>]:</span><br><span class="line">                response = <span class="keyword">yield</span> deferred_from_coro(method(request=request, response=response, spider=spider))</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(response, (Response, Request)):</span><br><span class="line">                    <span class="keyword">raise</span> _InvalidOutput(</span><br><span class="line">                        <span class="string">f&quot;Middleware <span class="subst">&#123;method.__self__.__class__.__name__&#125;</span>&quot;</span></span><br><span class="line">                        <span class="string">&quot;.process_response must return Response or Request, &quot;</span></span><br><span class="line">                        <span class="string">f&quot;got <span class="subst">&#123;<span class="built_in">type</span>(response)&#125;</span>&quot;</span></span><br><span class="line">                    )</span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">isinstance</span>(response, Request):</span><br><span class="line">                    <span class="keyword">return</span> response</span><br><span class="line">            <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line"><span class="meta">        @defer.inlineCallbacks</span></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">process_exception</span>(<span class="params">failure</span>):</span><br><span class="line">            exception = failure.value</span><br><span class="line">            <span class="keyword">for</span> method <span class="keyword">in</span> self.methods[<span class="string">&#x27;process_exception&#x27;</span>]:</span><br><span class="line">                response = <span class="keyword">yield</span> deferred_from_coro(method(request=request, exception=exception, spider=spider))</span><br><span class="line">                <span class="keyword">if</span> response <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">and</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(response, (Response, Request)):</span><br><span class="line">                    <span class="keyword">raise</span> _InvalidOutput(</span><br><span class="line">                        <span class="string">f&quot;Middleware <span class="subst">&#123;method.__self__.__class__.__name__&#125;</span>&quot;</span></span><br><span class="line">                        <span class="string">&quot;.process_exception must return None, Response or &quot;</span></span><br><span class="line">                        <span class="string">f&quot;Request, got <span class="subst">&#123;<span class="built_in">type</span>(response)&#125;</span>&quot;</span></span><br><span class="line">                    )</span><br><span class="line">                <span class="keyword">if</span> response:</span><br><span class="line">                    <span class="keyword">return</span> response</span><br><span class="line">            <span class="keyword">return</span> failure</span><br><span class="line"></span><br><span class="line">        deferred = mustbe_deferred(process_request, request)</span><br><span class="line">        deferred.addErrback(process_exception)</span><br><span class="line">        deferred.addCallback(process_response)</span><br><span class="line">        <span class="keyword">return</span> deferred</span><br></pre></td></tr></table></figure><h2 id="关于中间件源码解读，转换过来差不多这个意思"><a href="#关于中间件源码解读，转换过来差不多这个意思" class="headerlink" title="关于中间件源码解读，转换过来差不多这个意思"></a>关于中间件源码解读，转换过来差不多这个意思</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> operator <span class="keyword">import</span> itemgetter</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># def without_none_values(iterable):</span></span><br><span class="line"><span class="comment">#     &quot;&quot;&quot;Return a copy of ``iterable`` with all ``None`` entries removed.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#     If ``iterable`` is a mapping, return a dictionary where all pairs that have</span></span><br><span class="line"><span class="comment">#     value ``None`` have been removed.</span></span><br><span class="line"><span class="comment">#     &quot;&quot;&quot;</span></span><br><span class="line"><span class="comment">#     try:</span></span><br><span class="line"><span class="comment">#         return &#123;k: v for k, v in iterable.items() if v is not None&#125;</span></span><br><span class="line"><span class="comment">#     except AttributeError:</span></span><br><span class="line"><span class="comment">#         return type(iterable)((v for v in iterable if v is not None))</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># def build_component_list(compdict, custom=None, convert=update_classpath):</span></span><br><span class="line"><span class="comment">#     &quot;&quot;&quot;Compose a component list from a &#123; class: order &#125; dictionary.&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#     def _check_components(complist):</span></span><br><span class="line"><span class="comment">#         if len(&#123;convert(c) for c in complist&#125;) != len(complist):</span></span><br><span class="line"><span class="comment">#             raise ValueError(f&#x27;Some paths in &#123;complist!r&#125; convert to the same object, &#x27;</span></span><br><span class="line"><span class="comment">#                              &#x27;please update your settings&#x27;)</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#     def _map_keys(compdict):</span></span><br><span class="line"><span class="comment">#         if isinstance(compdict, BaseSettings):</span></span><br><span class="line"><span class="comment">#             compbs = BaseSettings()</span></span><br><span class="line"><span class="comment">#             for k, v in compdict.items():</span></span><br><span class="line"><span class="comment">#                 prio = compdict.getpriority(k)</span></span><br><span class="line"><span class="comment">#                 if compbs.getpriority(convert(k)) == prio:</span></span><br><span class="line"><span class="comment">#                     raise ValueError(f&#x27;Some paths in &#123;list(compdict.keys())!r&#125; &#x27;</span></span><br><span class="line"><span class="comment">#                                      &#x27;convert to the same &#x27;</span></span><br><span class="line"><span class="comment">#                                      &#x27;object, please update your settings&#x27;</span></span><br><span class="line"><span class="comment">#                                      )</span></span><br><span class="line"><span class="comment">#                 else:</span></span><br><span class="line"><span class="comment">#                     compbs.set(convert(k), v, priority=prio)</span></span><br><span class="line"><span class="comment">#             return compbs</span></span><br><span class="line"><span class="comment">#         else:</span></span><br><span class="line"><span class="comment">#             _check_components(compdict)</span></span><br><span class="line"><span class="comment">#             return &#123;convert(k): v for k, v in compdict.items()&#125;</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#     def _validate_values(compdict):</span></span><br><span class="line"><span class="comment">#         &quot;&quot;&quot;Fail if a value in the components dict is not a real number or None.&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment">#         for name, value in compdict.items():</span></span><br><span class="line"><span class="comment">#             if value is not None and not isinstance(value, numbers.Real):</span></span><br><span class="line"><span class="comment">#                 raise ValueError(f&#x27;Invalid value &#123;value&#125; for component &#123;name&#125;, &#x27;</span></span><br><span class="line"><span class="comment">#                                  &#x27;please provide a real number or None instead&#x27;)</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#     # BEGIN Backward compatibility for old (base, custom) call signature</span></span><br><span class="line"><span class="comment">#     if isinstance(custom, (list, tuple)):</span></span><br><span class="line"><span class="comment">#         _check_components(custom)</span></span><br><span class="line"><span class="comment">#         return type(custom)(convert(c) for c in custom)</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#     if custom is not None:</span></span><br><span class="line"><span class="comment">#         compdict.update(custom)</span></span><br><span class="line"><span class="comment">#     # END Backward compatibility</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#     _validate_values(compdict)</span></span><br><span class="line"><span class="comment">#     compdict = without_none_values(_map_keys(compdict))</span></span><br><span class="line"><span class="comment">#     &quot;&quot;&quot;</span></span><br><span class="line"><span class="comment">#     compdict = &#123;&quot;a&quot;: 1, &quot;b&quot;: 2&#125;</span></span><br><span class="line"><span class="comment">#     [k for k, v in sorted(compdict.items(), key=itemgetter(1))] # 排序从小到大</span></span><br><span class="line"><span class="comment">#     &quot;&quot;&quot;</span></span><br><span class="line"><span class="comment">#     return [k for k, v in sorted(compdict.items(), key=itemgetter(1))]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MiddlewareManager</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Base class for implementing middleware managers&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    component_name = <span class="string">&#x27;foo middleware&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, middlewares</span>):</span><br><span class="line">        self.middlewares = middlewares</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_get_mwlist_from_settings</span>(<span class="params">cls, settings</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        读取配置文件里面的中间件</span></span><br><span class="line"><span class="string">        :param settings:</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># def getwithbase(self, name):</span></span><br><span class="line">        <span class="comment">#     &quot;&quot;&quot;Get a composition of a dictionary-like setting and its `_BASE`</span></span><br><span class="line">        <span class="comment">#     counterpart.</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        <span class="comment">#     :param name: name of the dictionary-like setting</span></span><br><span class="line">        <span class="comment">#     :type name: str</span></span><br><span class="line">        <span class="comment">#     &quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment">#     compbs = BaseSettings()</span></span><br><span class="line">        <span class="comment">#     compbs.update(self[name + &#x27;_BASE&#x27;])</span></span><br><span class="line">        <span class="comment">#     compbs.update(self[name])</span></span><br><span class="line">        <span class="comment">#     return compbs</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># return build_component_list(settings.getwithbase(&#x27;SPIDER_MIDDLEWARES&#x27;)) # 原本的返回</span></span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="string">&quot;a&quot;</span>: <span class="number">1</span>, <span class="string">&quot;b&quot;</span>: <span class="number">2</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">from_settings</span>(<span class="params">cls, settings, crawler=<span class="literal">None</span></span>):</span><br><span class="line">        middlewares = []</span><br><span class="line">        mwlist = cls._get_mwlist_from_settings(settings)</span><br><span class="line">        <span class="keyword">for</span> k, v <span class="keyword">in</span> mwlist.items():</span><br><span class="line">            middlewares.append(k)</span><br><span class="line">        <span class="keyword">return</span> cls(middlewares)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">from_crawler</span>(<span class="params">cls, crawler</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        进行中间件的初始化</span></span><br><span class="line"><span class="string">        :param crawler:</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> cls.from_settings(crawler.settings, crawler)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Crawl</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    settings = &#123;<span class="string">&quot;c&quot;</span>: <span class="number">1</span>, <span class="string">&quot;d&quot;</span>: <span class="number">2</span>&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    crawler = Crawl()</span><br><span class="line">    a = MiddlewareManager.from_crawler(crawler)</span><br><span class="line">    <span class="built_in">print</span>(a.middlewares)</span><br></pre></td></tr></table></figure><h2 id="关于读取settings异常处理"><a href="#关于读取settings异常处理" class="headerlink" title="关于读取settings异常处理"></a>关于读取settings异常处理</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> scrapy.exceptions <span class="keyword">import</span> NotConfigured, IgnoreRequest</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BaseRedirectMiddleware</span>:</span><br><span class="line"></span><br><span class="line">    enabled_setting = <span class="string">&#x27;REDIRECT_ENABLED&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, settings</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> settings.get(self.enabled_setting, <span class="literal">False</span>):</span><br><span class="line">            <span class="keyword">raise</span> NotConfigured</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RedirectMiddleware</span>(<span class="title class_ inherited__">BaseRedirectMiddleware</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="number">1111</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mye</span>(<span class="params">level</span>):</span><br><span class="line">    <span class="keyword">if</span> level &lt; <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">raise</span> Exception(<span class="string">&quot;Invalid level!&quot;</span>)</span><br><span class="line">        <span class="comment"># 触发异常后，后面的代码就不会再执行</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    mye(<span class="number">0</span>)  <span class="comment"># 触发异常</span></span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> err:</span><br><span class="line">    <span class="built_in">print</span>(<span class="number">1</span>, err.args)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        BaseRedirectMiddleware(&#123;<span class="string">&quot;REDIRECT_ENABLED&quot;</span>: <span class="literal">False</span>&#125;)</span><br><span class="line">    <span class="keyword">except</span> NotConfigured <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(e)</span><br><span class="line">        <span class="keyword">if</span> e.args:</span><br><span class="line">            <span class="built_in">print</span>(<span class="number">2222</span>)</span><br></pre></td></tr></table></figure><h2 id="代码阅读"><a href="#代码阅读" class="headerlink" title="代码阅读"></a>代码阅读</h2><ol><li><p>所有中间件包括Extension以及ItemPipeline都是继承MiddlewareManager类</p></li><li><p>所有的继承必须实现_get_mwlist_from_settings方法，这个方法调用getwithbase，合并base中间件，按照数值从小到大排序。</p></li><li><p>初始化的时候会自动调用方法_add_middleware，这个方法调用了中间件几个关键的函数，就是每次默认中间给的例子中实现的几个方法，比如process_request(self, request, spider):</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> mw <span class="keyword">in</span> middlewares:</span><br><span class="line">            self._add_middleware(mw)</span><br></pre></td></tr></table></figure></li><li><p>关于中间件方法是否必须实现，官方的提示如下，代码_add_middleware中也能看到，不是必须的。</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># Not all methods need to be defined. If a method is not defined,</span><br><span class="line"># scrapy acts as if the downloader middleware does not modify the</span><br><span class="line"># passed objects.</span><br></pre></td></tr></table></figure></li><li><p>注意到，源码里面定义了一个双向的队列，methods &#x3D; defaultdict(deque)，append表示向右添加，left表示向左添加，以下载中间为例子：</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">def</span> <span class="title function_">_add_middleware</span>(<span class="params">self, mw</span>):</span><br><span class="line">          <span class="keyword">if</span> <span class="built_in">hasattr</span>(mw, <span class="string">&#x27;process_request&#x27;</span>):</span><br><span class="line">              self.methods[<span class="string">&#x27;process_request&#x27;</span>].append(mw.process_request)</span><br><span class="line">          <span class="keyword">if</span> <span class="built_in">hasattr</span>(mw, <span class="string">&#x27;process_response&#x27;</span>):</span><br><span class="line">              self.methods[<span class="string">&#x27;process_response&#x27;</span>].appendleft(mw.process_response)</span><br><span class="line">          <span class="keyword">if</span> <span class="built_in">hasattr</span>(mw, <span class="string">&#x27;process_exception&#x27;</span>):</span><br><span class="line">              self.methods[<span class="string">&#x27;process_exception&#x27;</span>].appendleft(mw.process_exception)</span><br><span class="line">每个中间件的process_response和process_exception方法，后来的却先调用</span><br></pre></td></tr></table></figure></li><li><p>关于下载中间件：</p><ol><li><p>下载中间件位于引擎和下载器之间，官方给的提示已经够清晰了</p><ol><li><pre><code>     def process_request(self, request, spider):         # Called for each request that goes through the downloader         # middleware.          # Must either:         # - return None: continue processing this request         # - or return a Response object         # - or return a Request object         # - or raise IgnoreRequest: process_exception() methods of         #   installed downloader middleware will be called         return None      def process_response(self, request, response, spider):         # Called with the response returned from the downloader.          # Must either;         # - return a Response object         # - return a Request object         # - or raise IgnoreRequest         return response      def process_exception(self, request, exception, spider):         # Called when a download handler or a process_request()         # (from other downloader middleware) raises an exception.          # Must either:         # - return None: continue processing this exception         # - return a Response object: stops process_exception() chain         # - return a Request object: stops process_exception() chain         pass</code></pre></li></ol></li></ol></li><li><p>关于爬虫中间件，用的比较少，位于下载器和spider之间</p></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> scrapy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>scrapy调试技巧</title>
      <link href="/post/d9d98b82.html"/>
      <url>/post/d9d98b82.html</url>
      
        <content type="html"><![CDATA[<h2 id="scrapy-fetch"><a href="#scrapy-fetch" class="headerlink" title="scrapy fetch"></a>scrapy fetch</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">scrapy fetch https://segmentfault.com/a/1190000017087999</span><br><span class="line">scrapy fetch https://segmentfault.com/a/1190000017087999 --nolog --headers</span><br></pre></td></tr></table></figure><h2 id="scrapy-shell"><a href="#scrapy-shell" class="headerlink" title="scrapy shell"></a>scrapy shell</h2><ul><li><p>带请求头</p></li><li><pre><code class="bash">  scrapy shell -s USER_AGENT=&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:61.0) Gecko/20100101 Firefox/61.0&quot; https://www.zhihu.com/question/285908404<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- ```</span><br><span class="line">    $ scrapy shell</span><br><span class="line">    &gt;&gt;&gt; from scrapy import Request</span><br><span class="line">    &gt;&gt;&gt; req = Request(&#x27;yoururl.com&#x27;, headers=&#123;&quot;header1&quot;:&quot;value1&quot;&#125;)</span><br><span class="line">    &gt;&gt;&gt; fetch(req)</span><br></pre></td></tr></table></figure></code></pre></li><li><p>&#96;&#96;&#96;</p><h1 id="指定请求目标的-URL-链接"><a href="#指定请求目标的-URL-链接" class="headerlink" title="指定请求目标的 URL 链接"></a>指定请求目标的 URL 链接</h1><p>  url &#x3D; ‘’</p><h1 id="自定义-Headers-请求头-一般建议在调试时使用自定义-UA，以绕过最基础的-User-Agent-检测"><a href="#自定义-Headers-请求头-一般建议在调试时使用自定义-UA，以绕过最基础的-User-Agent-检测" class="headerlink" title="自定义 Headers 请求头(一般建议在调试时使用自定义 UA，以绕过最基础的 User-Agent 检测)"></a>自定义 Headers 请求头(一般建议在调试时使用自定义 UA，以绕过最基础的 User-Agent 检测)</h1><p>  headers &#x3D; {‘User-Agent’: ‘Mozilla&#x2F;5.0 (Windows NT 10.0; WOW64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;74.0.3729.169 Safari&#x2F;537.36’}</p><h1 id="构造需要附带的-Cookies-字典"><a href="#构造需要附带的-Cookies-字典" class="headerlink" title="构造需要附带的 Cookies 字典"></a>构造需要附带的 Cookies 字典</h1><p>  cookies &#x3D; {“key_1”: “value_1”, “key_2”: “value_2”, “key_3”: “value_3”}</p><h1 id="构造-Request-请求对象"><a href="#构造-Request-请求对象" class="headerlink" title="构造 Request 请求对象"></a>构造 Request 请求对象</h1><p>  req &#x3D; scrapy.Request(url, cookies&#x3D;cookies, headers&#x3D;headers)</p><h1 id="发起-Request-请求"><a href="#发起-Request-请求" class="headerlink" title="发起 Request 请求"></a>发起 Request 请求</h1><p>  fetch(req)</p><h1 id="在系统默认浏览器查看请求的页面（主要为了检查是否正常爬取到内页）"><a href="#在系统默认浏览器查看请求的页面（主要为了检查是否正常爬取到内页）" class="headerlink" title="在系统默认浏览器查看请求的页面（主要为了检查是否正常爬取到内页）"></a>在系统默认浏览器查看请求的页面（主要为了检查是否正常爬取到内页）</h1><p>  view(response)</p><h1 id="网页响应正文-byte类型"><a href="#网页响应正文-byte类型" class="headerlink" title="网页响应正文 byte类型"></a>网页响应正文 byte类型</h1><p>  response.body</p><h1 id="网页响应正文-str类型"><a href="#网页响应正文-str类型" class="headerlink" title="网页响应正文 str类型"></a>网页响应正文 str类型</h1><p>  response.text  </p><h1 id="xpath选择器"><a href="#xpath选择器" class="headerlink" title="xpath选择器"></a>xpath选择器</h1><p>  repsonse.xpath()</p></li></ul><p>&#96;&#96;&#96;</p><ul><li>scrapy shell .&#x2F;1.html 调用本地的文件</li></ul><h3 id="shell内部的命令"><a href="#shell内部的命令" class="headerlink" title="shell内部的命令"></a>shell内部的命令</h3><ul><li>shelp()：打印出所有可使用的属性与命令。</li><li>fetch(url[, redirect&#x3D;True])：从给定的URL获取一个新的Response，同时更新所有相关的项目数据。当指定redirect&#x3D;False时，不会获取重定向的数据。<br>  fetch(request)：根据给定的Request获取一个新的Response，同时更新所有相关的项目数据。</li><li>view(response)：使用指定的Response打开浏览器，方便检查抓取数据。当使用这条命令的时候，为使外部的图像或者表格等正确显示，会自动为Response中添加一个<base>标签，指定基准URL，也就是Response对应的url</li></ul><h2 id="scrapy代码中启动shell调试response"><a href="#scrapy代码中启动shell调试response" class="headerlink" title="scrapy代码中启动shell调试response"></a>scrapy代码中启动shell调试response</h2><p>可通过 scrapy.shell.inspect_response 函数实现，当程序运行到此处时会阻塞，这时你可以尽情的调试。当调试完成后按Ctrl-D(Windows下Ctrl-Z)退出后继续运行，当下一次运行此处时又会阻塞在这里供你调试</p><p>from scrapy.shell import inspect_response<br>def paser(self, response):<br>    inspect_response(response, self)  </p><h2 id="暂停和恢复爬虫"><a href="#暂停和恢复爬虫" class="headerlink" title="暂停和恢复爬虫"></a>暂停和恢复爬虫</h2><p>初学者最头疼的事情就是没有处理好异常，当爬虫爬到一半的时候突然因为错误而中断了，但是这时又不能从中断的地方开始继续爬，顿时感觉心里日了狗，但是这里有一个方法可以暂时的存储你爬的状态，当爬虫中断的时候继续打开后依然可以从中断的地方爬，不过虽说持久化可以有效的处理，但是要注意的是当使用cookie临时的模拟登录状态的时候要注意cookie的有效期。</p><p><strong>只需要在<code>setting.py</code>中<code>JOB_DIR=file_name</code> 其中填的是你的文件目录，注意这里的目录不允许共享，只能存储单独的一个spdire的运行状态，如果你不想在从中断的地方开始运行，只需要将这个文件夹删除即可</strong></p><p><strong>当然还有其他的放法：<code>scrapy crawl somespider -s JOBDIR=crawls/somespider-1</code>，这个是在终端启动爬虫的时候调用的，可以通过<code>ctr+c</code>中断，恢复还是输入上面的命令</strong></p>]]></content>
      
      
      <categories>
          
          <category> scrapy </category>
          
      </categories>
      
      
        <tags>
            
            <tag> scrapy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>scrapy的extensions</title>
      <link href="/post/cd590e67.html"/>
      <url>/post/cd590e67.html</url>
      
        <content type="html"><![CDATA[<h2 id="EXTENSIONS"><a href="#EXTENSIONS" class="headerlink" title="EXTENSIONS"></a>EXTENSIONS</h2><p>EXTENSIONS_BASE</p><p><strong>注意：关于scrapy爬虫extensions 执行顺序的问题</strong></p><ul><li><p>查看默认的爬虫中间件scrapy settings –get EXTENSIONS_BASE</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;scrapy.extensions.corestats.CoreStats&quot;: 0,</span><br><span class="line">&quot;scrapy.extensions.telnet.TelnetConsole&quot;: 0, </span><br><span class="line">&quot;scrapy.extensions.memusage.MemoryUsage&quot;: 0, </span><br><span class="line">&quot;scrapy.extensions.memdebug.MemoryDebugger&quot;: 0,</span><br><span class="line">&quot;scrapy.extensions.closespider.CloseSpider&quot;: 0, </span><br><span class="line">&quot;scrapy.extensions.feedexport.FeedExporter&quot;: 0, </span><br><span class="line">&quot;scrapy.extensions.logstats.LogStats&quot;: 0, </span><br><span class="line">&quot;scrapy.extensions.spiderstate.SpiderState&quot;: 0, </span><br><span class="line">&quot;scrapy.extensions.throttle.AutoThrottle&quot;: 0</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>EXTENSIONS 设置是一个 dict，其中键是扩展路径，它们的值是定义扩展加载顺序的顺序。EXTENSIONS 设置与 Scrapy 中定义的 <strong>EXTENSIONS_BASE</strong> 设置合并(无意被重写) ，然后按顺序排序，以获得最终的已启用扩展的排序列表。</p></li><li><p>由于扩展通常不相互依赖，因此它们的加载顺序在大多数情况下是不相关的。这就是 <strong>EXTENSIONS_BASE</strong> 设置以相同顺序(0)定义所有扩展的原因。但是，如果您需要添加一个依赖于已经加载的其他扩展的扩展，则可以利用这个特性</p></li></ul></li><li><p>需要重点关注的几个默认extensions</p><ul><li>from scrapy.extensions.corestats import CoreStats</li><li>from scrapy.extensions.logstats import LogStats</li><li>from scrapy.extensions.throttle import AutoThrottle</li></ul></li></ul><h2 id="关于signal"><a href="#关于signal" class="headerlink" title="关于signal"></a>关于signal</h2><ul><li><p>scrapy.crawler.signals中定义了scrapy的各种状态</p></li><li><p>E:\python3.7.6\Lib\site-packages\scrapy\crawler.py，中初始化self.signals &#x3D; SignalManager(self)</p></li><li><p>E:\python3.7.6\Lib\site-packages\scrapy\signalmanager.py（SignalManager），基于from pydispatch import dispatcher这个模块</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> twisted.internet.defer <span class="keyword">import</span> DeferredList, Deferred</span><br><span class="line"><span class="keyword">from</span> twisted.python.failure <span class="keyword">import</span> Failure</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pydispatch.dispatcher <span class="keyword">import</span> Anonymous, <span class="type">Any</span>, disconnect, getAllReceivers, liveReceivers</span><br><span class="line"><span class="keyword">from</span> pydispatch.robustapply <span class="keyword">import</span> robustApply</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> scrapy.exceptions <span class="keyword">import</span> StopDownload</span><br><span class="line"><span class="keyword">from</span> scrapy.utils.defer <span class="keyword">import</span> maybeDeferred_coro</span><br><span class="line"><span class="keyword">from</span> scrapy.utils.log <span class="keyword">import</span> failure_to_exc_info</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">send_catch_log</span>(<span class="params">signal=<span class="type">Any</span>, sender=Anonymous, *arguments, **named</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Like pydispatcher.robust.sendRobust but it also logs errors and returns</span></span><br><span class="line"><span class="string">    Failures instead of exceptions.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    dont_log = (named.pop(<span class="string">&#x27;dont_log&#x27;</span>, _IgnoredException), StopDownload)</span><br><span class="line">    spider = named.get(<span class="string">&#x27;spider&#x27;</span>, <span class="literal">None</span>)</span><br><span class="line">    responses = []</span><br><span class="line">    <span class="comment"># getAllReceivers给定sender和signal，获取所有的receiver</span></span><br><span class="line">    <span class="keyword">for</span> receiver <span class="keyword">in</span> liveReceivers(getAllReceivers(sender, signal)):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment"># 调用receiver</span></span><br><span class="line">            response = robustApply(receiver, signal=signal, sender=sender, *arguments, **named)</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">isinstance</span>(response, Deferred):</span><br><span class="line">                logger.error(<span class="string">&quot;Cannot return deferreds from signal handler: %(receiver)s&quot;</span>,</span><br><span class="line">                                &#123;<span class="string">&#x27;receiver&#x27;</span>: receiver&#125;, extra=&#123;<span class="string">&#x27;spider&#x27;</span>: spider&#125;)</span><br><span class="line">        <span class="keyword">except</span> dont_log:</span><br><span class="line">            result = Failure()</span><br><span class="line">        <span class="keyword">except</span> Exception:</span><br><span class="line">            result = Failure()</span><br><span class="line">            logger.error(<span class="string">&quot;Error caught on signal handler: %(receiver)s&quot;</span>,</span><br><span class="line">                            &#123;<span class="string">&#x27;receiver&#x27;</span>: receiver&#125;,</span><br><span class="line">                            exc_info=<span class="literal">True</span>, extra=&#123;<span class="string">&#x27;spider&#x27;</span>: spider&#125;)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            result = response</span><br><span class="line">        responses.append((receiver, result))</span><br><span class="line">    <span class="keyword">return</span> responses</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pydispatch <span class="keyword">import</span> dispatcher</span><br><span class="line"><span class="keyword">from</span> scrapy.utils <span class="keyword">import</span> signal <span class="keyword">as</span> _signal</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SignalManager</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, sender=dispatcher.Anonymous</span>):</span><br><span class="line">        self.sender = sender</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">connect</span>(<span class="params">self, receiver, signal, **kwargs</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Connect a receiver function to a signal.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        The signal can be any object, although Scrapy comes with some</span></span><br><span class="line"><span class="string">        predefined signals that are documented in the :ref:`topics-signals`</span></span><br><span class="line"><span class="string">        section.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        :param receiver: the function to be connected</span></span><br><span class="line"><span class="string">        :type receiver: collections.abc.Callable</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        :param signal: the signal to connect to</span></span><br><span class="line"><span class="string">        :type signal: object</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        kwargs.setdefault(<span class="string">&#x27;sender&#x27;</span>, self.sender)</span><br><span class="line">        <span class="keyword">return</span> dispatcher.connect(receiver, signal, **kwargs)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">disconnect</span>(<span class="params">self, receiver, signal, **kwargs</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Disconnect a receiver function from a signal. This has the</span></span><br><span class="line"><span class="string">        opposite effect of the :meth:`connect` method, and the arguments</span></span><br><span class="line"><span class="string">        are the same.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        kwargs.setdefault(<span class="string">&#x27;sender&#x27;</span>, self.sender)</span><br><span class="line">        <span class="keyword">return</span> dispatcher.disconnect(receiver, signal, **kwargs)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">send_catch_log</span>(<span class="params">self, signal, **kwargs</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Send a signal, catch exceptions and log them.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        The keyword arguments are passed to the signal handlers (connected</span></span><br><span class="line"><span class="string">        through the :meth:`connect` method).</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        kwargs.setdefault(<span class="string">&#x27;sender&#x27;</span>, self.sender)</span><br><span class="line">        <span class="keyword">return</span> _signal.send_catch_log(signal, **kwargs)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">send_catch_log_deferred</span>(<span class="params">self, signal, **kwargs</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Like :meth:`send_catch_log` but supports returning</span></span><br><span class="line"><span class="string">        :class:`~twisted.internet.defer.Deferred` objects from signal handlers.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Returns a Deferred that gets fired once all signal handlers</span></span><br><span class="line"><span class="string">        deferreds were fired. Send a signal, catch exceptions and log them.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        The keyword arguments are passed to the signal handlers (connected</span></span><br><span class="line"><span class="string">        through the :meth:`connect` method).</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        kwargs.setdefault(<span class="string">&#x27;sender&#x27;</span>, self.sender)</span><br><span class="line">        <span class="keyword">return</span> _signal.send_catch_log_deferred(signal, **kwargs)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">disconnect_all</span>(<span class="params">self, signal, **kwargs</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Disconnect all receivers from the given signal.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        :param signal: the signal to disconnect from</span></span><br><span class="line"><span class="string">        :type signal: object</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        kwargs.setdefault(<span class="string">&#x27;sender&#x27;</span>, self.sender)</span><br><span class="line">        <span class="keyword">return</span> _signal.disconnect_all(signal, **kwargs)</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>例子：</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pydispatch <span class="keyword">import</span> dispatcher</span><br><span class="line"><span class="keyword">from</span> settings <span class="keyword">import</span> TASK_END_SIGNAL, TASK_START_SIGNAL</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TaskSignal</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">task_start</span>(<span class="params">self, app_task</span>):</span><br><span class="line">        dispatcher.send(</span><br><span class="line">            signal=TASK_START_SIGNAL, sender=app_task</span><br><span class="line">        )</span><br><span class="line">        <span class="keyword">return</span> app_task</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">task_close</span>(<span class="params">self, app_task</span>):</span><br><span class="line">        dispatcher.send(</span><br><span class="line">            signal=TASK_END_SIGNAL, sender=app_task</span><br><span class="line">        )</span><br><span class="line">        <span class="keyword">return</span> app_task</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">_start_spider</span>(<span class="params">sender, **kwargs</span>):</span><br><span class="line">    <span class="built_in">print</span>(sender, kwargs)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;任务开始&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">_finish_spider</span>(<span class="params">sender, **kwargs</span>):</span><br><span class="line">    <span class="built_in">print</span>(sender, kwargs)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;任务结束&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">dispatcher.connect(</span><br><span class="line">    receiver=_start_spider,</span><br><span class="line">    signal=TASK_START_SIGNAL,</span><br><span class="line">    sender=dispatcher.<span class="type">Any</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">dispatcher.connect(</span><br><span class="line">    receiver=_finish_spider,</span><br><span class="line">    signal=TASK_END_SIGNAL,</span><br><span class="line">    sender=dispatcher.<span class="type">Any</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    s = &#123;<span class="string">&quot;task&quot;</span>: <span class="string">&quot;demo&quot;</span>, <span class="string">&quot;name&quot;</span>: <span class="string">&quot;xx&quot;</span>&#125;,</span><br><span class="line">    ts = TaskSignal()</span><br><span class="line">    ts.task_start(s)</span><br></pre></td></tr></table></figure></li></ul><h2 id="关于scrapy的爬虫状态统计CoreStats"><a href="#关于scrapy的爬虫状态统计CoreStats" class="headerlink" title="关于scrapy的爬虫状态统计CoreStats"></a>关于scrapy的爬虫状态统计CoreStats</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">CoreStats</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, stats</span>):</span><br><span class="line">        self.stats = stats</span><br><span class="line">        self.start_time = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">from_crawler</span>(<span class="params">cls, crawler</span>):</span><br><span class="line">        <span class="comment"># 默认的STATS_CLASS = &#x27;scrapy.statscollectors.MemoryStatsCollector&#x27;(继承自StatsCollector)</span></span><br><span class="line">        <span class="comment"># self.stats = load_object(self.settings[&#x27;STATS_CLASS&#x27;])(self)</span></span><br><span class="line">        o = cls(crawler.stats)</span><br><span class="line">         <span class="comment"># 注册方法，当爬虫启动的时候</span></span><br><span class="line">        crawler.signals.connect(o.spider_opened, signal=signals.spider_opened)</span><br><span class="line">        <span class="comment"># 注册方法，当爬虫关闭的时候</span></span><br><span class="line">        crawler.signals.connect(o.spider_closed, signal=signals.spider_closed)</span><br><span class="line">        <span class="comment"># 注册方法，当pipieline处理完item完毕的时候</span></span><br><span class="line">        crawler.signals.connect(o.item_scraped, signal=signals.item_scraped)</span><br><span class="line">        crawler.signals.connect(o.item_dropped, signal=signals.item_dropped)</span><br><span class="line">        crawler.signals.connect(o.response_received, signal=signals.response_received)</span><br><span class="line">        <span class="keyword">return</span> o</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">spider_opened</span>(<span class="params">self, spider</span>):</span><br><span class="line">        self.start_time = datetime.utcnow()</span><br><span class="line">        self.stats.set_value(<span class="string">&#x27;start_time&#x27;</span>, self.start_time, spider=spider)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">spider_closed</span>(<span class="params">self, spider, reason</span>):</span><br><span class="line">        finish_time = datetime.utcnow()</span><br><span class="line">        elapsed_time = finish_time - self.start_time</span><br><span class="line">        elapsed_time_seconds = elapsed_time.total_seconds()</span><br><span class="line">        self.stats.set_value(<span class="string">&#x27;elapsed_time_seconds&#x27;</span>, elapsed_time_seconds, spider=spider)</span><br><span class="line">        self.stats.set_value(<span class="string">&#x27;finish_time&#x27;</span>, finish_time, spider=spider)</span><br><span class="line">        self.stats.set_value(<span class="string">&#x27;finish_reason&#x27;</span>, reason, spider=spider)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">item_scraped</span>(<span class="params">self, item, spider</span>):</span><br><span class="line">        self.stats.inc_value(<span class="string">&#x27;item_scraped_count&#x27;</span>, spider=spider)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">response_received</span>(<span class="params">self, spider</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">E:\python3.7.6\Lib\site-packages\scrapy\core\engine.py</span></span><br><span class="line"><span class="string">    def _download(self, request, spider):</span></span><br><span class="line"><span class="string">        slot = self.slot</span></span><br><span class="line"><span class="string">        slot.add_request(request)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        def _on_success(response):</span></span><br><span class="line"><span class="string">            if not isinstance(response, (Response, Request)):</span></span><br><span class="line"><span class="string">                raise TypeError(</span></span><br><span class="line"><span class="string">                    &quot;Incorrect type: expected Response or Request, got &quot;</span></span><br><span class="line"><span class="string">                    f&quot;&#123;type(response)&#125;: &#123;response!r&#125;&quot;</span></span><br><span class="line"><span class="string">                )</span></span><br><span class="line"><span class="string">            if isinstance(response, Response):</span></span><br><span class="line"><span class="string">                if response.request is None:</span></span><br><span class="line"><span class="string">                    response.request = request</span></span><br><span class="line"><span class="string">                logkws = self.logformatter.crawled(response.request, response, spider)</span></span><br><span class="line"><span class="string">                if logkws is not None:</span></span><br><span class="line"><span class="string">                    logger.log(*logformatter_adapter(logkws), extra=&#123;&#x27;spider&#x27;: spider&#125;)</span></span><br><span class="line"><span class="string">                self.signals.send_catch_log(</span></span><br><span class="line"><span class="string">                    signal=signals.response_received, # 这里</span></span><br><span class="line"><span class="string">                    response=response,</span></span><br><span class="line"><span class="string">                    request=response.request,</span></span><br><span class="line"><span class="string">                    spider=spider,</span></span><br><span class="line"><span class="string">                )</span></span><br><span class="line"><span class="string">            return response</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        def _on_complete(_):</span></span><br><span class="line"><span class="string">            slot.nextcall.schedule()</span></span><br><span class="line"><span class="string">            return _</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        dwld = self.downloader.fetch(request, spider)</span></span><br><span class="line"><span class="string">        dwld.addCallbacks(_on_success)</span></span><br><span class="line"><span class="string">        dwld.addBoth(_on_complete)</span></span><br><span class="line"><span class="string">        return dwld</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        self.stats.inc_value(<span class="string">&#x27;response_received_count&#x27;</span>, spider=spider)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">item_dropped</span>(<span class="params">self, item, spider, exception</span>):</span><br><span class="line">        reason = exception.__class__.__name__</span><br><span class="line">        self.stats.inc_value(<span class="string">&#x27;item_dropped_count&#x27;</span>, spider=spider)</span><br><span class="line">        self.stats.inc_value(<span class="string">f&#x27;item_dropped_reasons_count/<span class="subst">&#123;reason&#125;</span>&#x27;</span>, spider=spider)</span><br></pre></td></tr></table></figure><h2 id="关于scrapy的爬虫状态统计LogStats"><a href="#关于scrapy的爬虫状态统计LogStats" class="headerlink" title="关于scrapy的爬虫状态统计LogStats"></a>关于scrapy的爬虫状态统计LogStats</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">LogStats</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Log basic scraping stats periodically&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, stats, interval=<span class="number">60.0</span></span>):</span><br><span class="line">        self.stats = stats</span><br><span class="line">        self.interval = interval <span class="comment"># 爬虫状态间隔时间，一般日志INFO会输出</span></span><br><span class="line">        self.multiplier = <span class="number">60.0</span> / self.interval</span><br><span class="line">        self.task = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">from_crawler</span>(<span class="params">cls, crawler</span>):</span><br><span class="line">        interval = crawler.settings.getfloat(<span class="string">&#x27;LOGSTATS_INTERVAL&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> interval:</span><br><span class="line">            <span class="keyword">raise</span> NotConfigured</span><br><span class="line">        o = cls(crawler.stats, interval)</span><br><span class="line">        crawler.signals.connect(o.spider_opened, signal=signals.spider_opened)</span><br><span class="line">        crawler.signals.connect(o.spider_closed, signal=signals.spider_closed)</span><br><span class="line">        <span class="keyword">return</span> o</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">spider_opened</span>(<span class="params">self, spider</span>):</span><br><span class="line">        self.pagesprev = <span class="number">0</span></span><br><span class="line">        self.itemsprev = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        self.task = task.LoopingCall(self.log, spider)</span><br><span class="line">        self.task.start(self.interval)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">log</span>(<span class="params">self, spider</span>):</span><br><span class="line">        items = self.stats.get_value(<span class="string">&#x27;item_scraped_count&#x27;</span>, <span class="number">0</span>)</span><br><span class="line">        pages = self.stats.get_value(<span class="string">&#x27;response_received_count&#x27;</span>, <span class="number">0</span>)</span><br><span class="line">        irate = (items - self.itemsprev) * self.multiplier</span><br><span class="line">        prate = (pages - self.pagesprev) * self.multiplier</span><br><span class="line">        self.pagesprev, self.itemsprev = pages, items</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        日志里面的经常出现Crawled pages多少，这里page指的是response_received_count，</span></span><br><span class="line"><span class="string">        response_received_count看源码指的是请求成功的个数，这个成功不是http状态码的200，</span></span><br><span class="line"><span class="string">        而是程序成功调用的成功，有异常就不是成功</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        </span><br><span class="line">        msg = (<span class="string">&quot;Crawled %(pages)d pages (at %(pagerate)d pages/min), &quot;</span></span><br><span class="line">               <span class="string">&quot;scraped %(items)d items (at %(itemrate)d items/min)&quot;</span>)</span><br><span class="line">        log_args = &#123;<span class="string">&#x27;pages&#x27;</span>: pages, <span class="string">&#x27;pagerate&#x27;</span>: prate,</span><br><span class="line">                    <span class="string">&#x27;items&#x27;</span>: items, <span class="string">&#x27;itemrate&#x27;</span>: irate&#125;</span><br><span class="line">        logger.info(msg, log_args, extra=&#123;<span class="string">&#x27;spider&#x27;</span>: spider&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">spider_closed</span>(<span class="params">self, spider, reason</span>):</span><br><span class="line">        <span class="keyword">if</span> self.task <span class="keyword">and</span> self.task.running:</span><br><span class="line">            self.task.stop()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> scrapy </category>
          
      </categories>
      
      
        <tags>
            
            <tag> scrapy的extensions </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>scrapy的download中间件</title>
      <link href="/post/86d1693.html"/>
      <url>/post/86d1693.html</url>
      
        <content type="html"><![CDATA[<h2 id="下载中间件"><a href="#下载中间件" class="headerlink" title="下载中间件"></a>下载中间件</h2><p>DOWNLOADER_MIDDLEWARES</p><p><strong>注意：关于scrapy下载中间件执行顺序的问题</strong></p><ul><li><p>scrapy本身有默认的一些中间件<strong>DOWNLOADER_MIDDLEWARES_BASE</strong>，可以通过scrapy settings –get DOWNLOADER_MIDDLEWARES_BASE命令查看</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">&quot;scrapy.downloadermiddlewares.robotstxt.RobotsTxtMiddleware&quot;: 100,</span><br><span class="line">&quot;scrapy.downloadermiddlewares.httpauth.HttpAuthMiddleware&quot;: 300,</span><br><span class="line">&quot;scrapy.downloadermiddlewares.downloadtimeout.DownloadTimeoutMiddleware&quot;: 350,</span><br><span class="line">&quot;scrapy.downloadermiddlewares.defaultheaders.DefaultHeadersMiddleware&quot;: 400, </span><br><span class="line">&quot;scrapy.downloadermiddlewares.useragent.UserAgentMiddleware&quot;: 500,</span><br><span class="line">&quot;scrapy.downloadermiddlewares.retry.RetryMiddleware&quot;: 550,</span><br><span class="line">&quot;scrapy.downloadermiddlewares.ajaxcrawl.AjaxCrawlMiddleware&quot;: 560,</span><br><span class="line">&quot;scrapy.downloadermiddlewares.redirect.MetaRefreshMiddleware&quot;: 580, </span><br><span class="line">&quot;scrapy.downloadermiddlewares.httpcompression.HttpCompressionMiddleware&quot;: 590,</span><br><span class="line">&quot;scrapy.downloadermiddlewares.redirect.RedirectMiddleware&quot;: 600, </span><br><span class="line">&quot;scrapy.downloadermiddlewares.cookies.CookiesMiddleware&quot;: 700, </span><br><span class="line">&quot;scrapy.downloadermiddlewares.httpproxy.HttpProxyMiddleware&quot;: 750, </span><br><span class="line">&quot;scrapy.downloadermiddlewares.stats.DownloaderStats&quot;: 850, </span><br><span class="line">&quot;scrapy.downloadermiddlewares.httpcache.HttpCacheMiddleware&quot;: 900</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>DOWNLOADER_MIDDLEWARES设置会与Scrapy定义的DOWNLOADER_MIDDLEWARES_BASE 设置合并(但不是覆盖)， 而后根据顺序(order)进行排序，最后得到启用中间件的有序列表: 第一个中间件是最靠近引擎的，最后一个中间件是最靠近下载器的。</p></li><li><p>理解就是，数字越小的中间件越先执行，例如Scrapy自带的第1个中间件<strong>RobotsTxtMiddleware</strong>，它的作用是首先查看settings.py中<strong>ROBOTSTXT_OBEY</strong>这一项的配置是<strong>True</strong>还是<strong>False</strong>。如果是<strong>True</strong>，表示要遵守<strong>Robots.txt</strong>协议，它就会检查将要访问的网址能不能被运行访问，如果不被允许访问，那么直接就取消这一次请求，接下来的和这次请求有关的各种操作全部都不需要继续了。<strong>因此注意，这个中间件的数值不能随意的去设定</strong>。</p></li><li><p>如果想禁止内置的(在 <strong><a href="https://scrapy-chs.readthedocs.io/zh_CN/latest/topics/settings.html#std:setting-DOWNLOADER_MIDDLEWARES_BASE">DOWNLOADER_MIDDLEWARES_BASE</a></strong> 中设置并默认启用的)中间件， 您必须在项目的 <strong><a href="https://scrapy-chs.readthedocs.io/zh_CN/latest/topics/settings.html#std:setting-DOWNLOADER_MIDDLEWARES">DOWNLOADER_MIDDLEWARES</a></strong> 设置中定义该中间件，并将其值赋为 None</p></li></ul><h2 id="需要重点关注的几个默认中间件"><a href="#需要重点关注的几个默认中间件" class="headerlink" title="需要重点关注的几个默认中间件"></a>需要重点关注的几个默认中间件</h2><p>像我们平常爬虫最常使用的HttpProxyMiddleware，RedirectMiddleware，CookiesMiddleware，UserAgentMiddleware中间件，scrapy都有内置好的。那么在自定义编写相同功能的中间件的时候，最好先禁止掉内置的中间件</p><h2 id="from-scrapy-downloadermiddlewares-useragent-import-UserAgentMiddleware"><a href="#from-scrapy-downloadermiddlewares-useragent-import-UserAgentMiddleware" class="headerlink" title="from scrapy.downloadermiddlewares.useragent import UserAgentMiddleware"></a>from scrapy.downloadermiddlewares.useragent import UserAgentMiddleware</h2><p>当爬虫启动的时候会去读setting.py中的<strong>USER_AGENT</strong></p><h2 id="from-scrapy-downloadermiddlewares-httpproxy-import-HttpProxyMiddleware"><a href="#from-scrapy-downloadermiddlewares-httpproxy-import-HttpProxyMiddleware" class="headerlink" title="from scrapy.downloadermiddlewares.httpproxy import HttpProxyMiddleware"></a>from scrapy.downloadermiddlewares.httpproxy import HttpProxyMiddleware</h2><p>先读setting.py中的<strong>HTTPPROXY_ENABLED</strong>是否开启，默认是TRUE，初始化还会读取<strong>HTTPPROXY_AUTH_ENCODING</strong>参数，它会忽略已经设置的代理。</p><h2 id="from-scrapy-downloadermiddlewares-cookies-import-CookiesMiddleware"><a href="#from-scrapy-downloadermiddlewares-cookies-import-CookiesMiddleware" class="headerlink" title="from scrapy.downloadermiddlewares.cookies import CookiesMiddleware"></a>from scrapy.downloadermiddlewares.cookies import CookiesMiddleware</h2><p>默认：</p><p>COOKIES_ENABLED &#x3D; True<br>COOKIES_DEBUG &#x3D; False</p><p>特别注意：如果要使用dont_merge_cookies&#x3D;true，那么需要我们自己将cookie加入到header中，通过request.cookies &#x3D; cookie方式添加的cookie，scrapy也不再会帮我们合并到header 中了。</p><p>在request的meta中加入<strong>dont_merge_cookies</strong>属性，并设置为true，在CookieMiddleware中，我们将cookie添加在header中，而不是赋值给request.cookies</p><p>关于多个response返回set_cookie</p><p>cookie_list &#x3D; response.headers.getlist(“Set-Cookie”)<br>然后拼接一下就可以了<br>headers[“Cookie”] &#x3D; “;”.join(cookie)</p><h2 id="from-scrapy-downloadermiddlewares-stats-import-DownloaderStats"><a href="#from-scrapy-downloadermiddlewares-stats-import-DownloaderStats" class="headerlink" title="from scrapy.downloadermiddlewares.stats import DownloaderStats"></a>from scrapy.downloadermiddlewares.stats import DownloaderStats</h2><p>统计请求，响应以及异常的信息。</p><p>最后在爬虫结束的时候会显示[scrapy.statscollectors] INFO: Dumping Scrapy stats（E:\python3.7.6\Lib\site-packages\scrapy\statscollectors.py StatsCollector），结束打印的流程如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">step:1</span><br><span class="line">E:\python3.7.6\Lib\site-packages\scrapy\crawler.py</span><br><span class="line">STATS_CLASS = &#x27;scrapy.statscollectors.MemoryStatsCollector&#x27;</span><br><span class="line">STATS_DUMP = True</span><br><span class="line">self.stats = load_object(self.settings[&#x27;STATS_CLASS&#x27;])(self)</span><br><span class="line">step:2</span><br><span class="line">E:\python3.7.6\Lib\site-packages\scrapy\core\engine.py</span><br><span class="line">d.addBoth(lambda _: self.crawler.stats.close_spider(spider, reason=reason))</span><br></pre></td></tr></table></figure><h2 id="scrapy-downloadermiddlewares-retry-import-RetryMiddleware（默认）"><a href="#scrapy-downloadermiddlewares-retry-import-RetryMiddleware（默认）" class="headerlink" title="scrapy.downloadermiddlewares.retry import RetryMiddleware（默认）"></a>scrapy.downloadermiddlewares.retry import RetryMiddleware（默认）</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 默认</span></span><br><span class="line">RETRY_ENABLED = <span class="literal">True</span></span><br><span class="line">RETRY_TIMES = <span class="number">2</span>  <span class="comment"># initial response + 2 retries = 3 requests</span></span><br><span class="line">RETRY_HTTP_CODES = [<span class="number">500</span>, <span class="number">502</span>, <span class="number">503</span>, <span class="number">504</span>, <span class="number">522</span>, <span class="number">524</span>, <span class="number">408</span>, <span class="number">429</span>]</span><br><span class="line">RETRY_PRIORITY_ADJUST = -<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RetryMiddleware</span>:</span><br><span class="line"></span><br><span class="line">    <span class="comment"># IOError is raised by the HttpCompression middleware when trying to</span></span><br><span class="line">    <span class="comment"># decompress an empty response</span></span><br><span class="line">    EXCEPTIONS_TO_RETRY = (defer.TimeoutError, TimeoutError, DNSLookupError,</span><br><span class="line">                           ConnectionRefusedError, ConnectionDone, ConnectError,</span><br><span class="line">                           ConnectionLost, TCPTimedOutError, ResponseFailed,</span><br><span class="line">                           IOError, TunnelError)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, settings</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> settings.getbool(<span class="string">&#x27;RETRY_ENABLED&#x27;</span>):</span><br><span class="line">            <span class="keyword">raise</span> NotConfigured</span><br><span class="line">        self.max_retry_times = settings.getint(<span class="string">&#x27;RETRY_TIMES&#x27;</span>)</span><br><span class="line">        self.retry_http_codes = <span class="built_in">set</span>(<span class="built_in">int</span>(x) <span class="keyword">for</span> x <span class="keyword">in</span> settings.getlist(<span class="string">&#x27;RETRY_HTTP_CODES&#x27;</span>))</span><br><span class="line">        self.priority_adjust = settings.getint(<span class="string">&#x27;RETRY_PRIORITY_ADJUST&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">from_crawler</span>(<span class="params">cls, crawler</span>):</span><br><span class="line">        <span class="keyword">return</span> cls(crawler.settings)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">process_response</span>(<span class="params">self, request, response, spider</span>):</span><br><span class="line">        <span class="keyword">if</span> request.meta.get(<span class="string">&#x27;dont_retry&#x27;</span>, <span class="literal">False</span>):</span><br><span class="line">            <span class="keyword">return</span> response</span><br><span class="line">        <span class="keyword">if</span> response.status <span class="keyword">in</span> self.retry_http_codes:</span><br><span class="line">            reason = response_status_message(response.status)</span><br><span class="line">            <span class="keyword">return</span> self._retry(request, reason, spider) <span class="keyword">or</span> response</span><br><span class="line">        <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">process_exception</span>(<span class="params">self, request, exception, spider</span>):</span><br><span class="line">        <span class="keyword">if</span> (</span><br><span class="line">            <span class="built_in">isinstance</span>(exception, self.EXCEPTIONS_TO_RETRY)</span><br><span class="line">            <span class="keyword">and</span> <span class="keyword">not</span> request.meta.get(<span class="string">&#x27;dont_retry&#x27;</span>, <span class="literal">False</span>)</span><br><span class="line">        ):</span><br><span class="line">            <span class="keyword">return</span> self._retry(request, exception, spider)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_retry</span>(<span class="params">self, request, reason, spider</span>):</span><br><span class="line">        retries = request.meta.get(<span class="string">&#x27;retry_times&#x27;</span>, <span class="number">0</span>) + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        retry_times = self.max_retry_times</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;max_retry_times&#x27;</span> <span class="keyword">in</span> request.meta:</span><br><span class="line">            retry_times = request.meta[<span class="string">&#x27;max_retry_times&#x27;</span>]</span><br><span class="line"></span><br><span class="line">        stats = spider.crawler.stats</span><br><span class="line">        <span class="keyword">if</span> retries &lt;= retry_times:</span><br><span class="line">            logger.debug(<span class="string">&quot;Retrying %(request)s (failed %(retries)d times): %(reason)s&quot;</span>,</span><br><span class="line">                         &#123;<span class="string">&#x27;request&#x27;</span>: request, <span class="string">&#x27;retries&#x27;</span>: retries, <span class="string">&#x27;reason&#x27;</span>: reason&#125;,</span><br><span class="line">                         extra=&#123;<span class="string">&#x27;spider&#x27;</span>: spider&#125;)</span><br><span class="line">            retryreq = request.copy()</span><br><span class="line">            retryreq.meta[<span class="string">&#x27;retry_times&#x27;</span>] = retries</span><br><span class="line">            retryreq.dont_filter = <span class="literal">True</span></span><br><span class="line">            retryreq.priority = request.priority + self.priority_adjust</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">isinstance</span>(reason, Exception):</span><br><span class="line">                reason = global_object_name(reason.__class__)</span><br><span class="line"></span><br><span class="line">            stats.inc_value(<span class="string">&#x27;retry/count&#x27;</span>)</span><br><span class="line">            stats.inc_value(<span class="string">f&#x27;retry/reason_count/<span class="subst">&#123;reason&#125;</span>&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span> retryreq</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            stats.inc_value(<span class="string">&#x27;retry/max_reached&#x27;</span>)</span><br><span class="line">            logger.error(<span class="string">&quot;Gave up retrying %(request)s (failed %(retries)d times): %(reason)s&quot;</span>,</span><br><span class="line">                         &#123;<span class="string">&#x27;request&#x27;</span>: request, <span class="string">&#x27;retries&#x27;</span>: retries, <span class="string">&#x27;reason&#x27;</span>: reason&#125;,</span><br><span class="line">                         extra=&#123;<span class="string">&#x27;spider&#x27;</span>: spider&#125;)</span><br></pre></td></tr></table></figure><h2 id="from-scrapy-downloadermiddlewares-redirect-import-RedirectMiddleware"><a href="#from-scrapy-downloadermiddlewares-redirect-import-RedirectMiddleware" class="headerlink" title="from scrapy.downloadermiddlewares.redirect import RedirectMiddleware"></a>from scrapy.downloadermiddlewares.redirect import RedirectMiddleware</h2><p>RedirectMiddleware继承自BaseRedirectMiddleware</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 来自于BaseRedirectMiddleware</span></span><br><span class="line">REDIRECT_ENABLED = <span class="literal">True</span></span><br><span class="line">REDIRECT_MAX_TIMES = <span class="number">20</span>  <span class="comment"># uses Firefox default setting</span></span><br><span class="line">REDIRECT_PRIORITY_ADJUST = +<span class="number">2</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BaseRedirectMiddleware</span>:</span><br><span class="line"></span><br><span class="line">    enabled_setting = <span class="string">&#x27;REDIRECT_ENABLED&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, settings</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> settings.getbool(self.enabled_setting):</span><br><span class="line">            <span class="keyword">raise</span> NotConfigured</span><br><span class="line"></span><br><span class="line">        self.max_redirect_times = settings.getint(<span class="string">&#x27;REDIRECT_MAX_TIMES&#x27;</span>)</span><br><span class="line">        self.priority_adjust = settings.getint(<span class="string">&#x27;REDIRECT_PRIORITY_ADJUST&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">from_crawler</span>(<span class="params">cls, crawler</span>):</span><br><span class="line">        <span class="keyword">return</span> cls(crawler.settings)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_redirect</span>(<span class="params">self, redirected, request, spider, reason</span>):</span><br><span class="line">        ttl = request.meta.setdefault(<span class="string">&#x27;redirect_ttl&#x27;</span>, self.max_redirect_times)</span><br><span class="line">        redirects = request.meta.get(<span class="string">&#x27;redirect_times&#x27;</span>, <span class="number">0</span>) + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> ttl <span class="keyword">and</span> redirects &lt;= self.max_redirect_times:</span><br><span class="line">            redirected.meta[<span class="string">&#x27;redirect_times&#x27;</span>] = redirects</span><br><span class="line">            redirected.meta[<span class="string">&#x27;redirect_ttl&#x27;</span>] = ttl - <span class="number">1</span></span><br><span class="line">            redirected.meta[<span class="string">&#x27;redirect_urls&#x27;</span>] = request.meta.get(<span class="string">&#x27;redirect_urls&#x27;</span>, []) + [request.url]</span><br><span class="line">            redirected.meta[<span class="string">&#x27;redirect_reasons&#x27;</span>] = request.meta.get(<span class="string">&#x27;redirect_reasons&#x27;</span>, []) + [reason]</span><br><span class="line">            redirected.dont_filter = request.dont_filter</span><br><span class="line">            redirected.priority = request.priority + self.priority_adjust</span><br><span class="line">            logger.debug(<span class="string">&quot;Redirecting (%(reason)s) to %(redirected)s from %(request)s&quot;</span>,</span><br><span class="line">                         &#123;<span class="string">&#x27;reason&#x27;</span>: reason, <span class="string">&#x27;redirected&#x27;</span>: redirected, <span class="string">&#x27;request&#x27;</span>: request&#125;,</span><br><span class="line">                         extra=&#123;<span class="string">&#x27;spider&#x27;</span>: spider&#125;)</span><br><span class="line">            <span class="keyword">return</span> redirected</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            logger.debug(<span class="string">&quot;Discarding %(request)s: max redirections reached&quot;</span>,</span><br><span class="line">                         &#123;<span class="string">&#x27;request&#x27;</span>: request&#125;, extra=&#123;<span class="string">&#x27;spider&#x27;</span>: spider&#125;)</span><br><span class="line">            <span class="keyword">raise</span> IgnoreRequest(<span class="string">&quot;max redirections reached&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_redirect_request_using_get</span>(<span class="params">self, request, redirect_url</span>):</span><br><span class="line">        redirected = request.replace(url=redirect_url, method=<span class="string">&#x27;GET&#x27;</span>, body=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        redirected.headers.pop(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="literal">None</span>)</span><br><span class="line">        redirected.headers.pop(<span class="string">&#x27;Content-Length&#x27;</span>, <span class="literal">None</span>)</span><br><span class="line">        <span class="keyword">return</span> redirected</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">process_response</span>(<span class="params">self, request, response, spider</span>):</span><br><span class="line">    <span class="keyword">if</span> (</span><br><span class="line">        request.meta.get(<span class="string">&#x27;dont_redirect&#x27;</span>, <span class="literal">False</span>)</span><br><span class="line">        <span class="keyword">or</span> response.status <span class="keyword">in</span> <span class="built_in">getattr</span>(spider, <span class="string">&#x27;handle_httpstatus_list&#x27;</span>, [])</span><br><span class="line">        <span class="keyword">or</span> response.status <span class="keyword">in</span> request.meta.get(<span class="string">&#x27;handle_httpstatus_list&#x27;</span>, [])</span><br><span class="line">        <span class="keyword">or</span> request.meta.get(<span class="string">&#x27;handle_httpstatus_all&#x27;</span>, <span class="literal">False</span>)</span><br><span class="line">    ):</span><br><span class="line">        <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line">    allowed_status = (<span class="number">301</span>, <span class="number">302</span>, <span class="number">303</span>, <span class="number">307</span>, <span class="number">308</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;Location&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> response.headers <span class="keyword">or</span> response.status <span class="keyword">not</span> <span class="keyword">in</span> allowed_status:</span><br><span class="line">        <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line">    location = safe_url_string(response.headers[<span class="string">&#x27;Location&#x27;</span>])</span><br><span class="line">    <span class="keyword">if</span> response.headers[<span class="string">&#x27;Location&#x27;</span>].startswith(<span class="string">b&#x27;//&#x27;</span>):</span><br><span class="line">        request_scheme = urlparse(request.url).scheme</span><br><span class="line">        location = request_scheme + <span class="string">&#x27;://&#x27;</span> + location.lstrip(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    redirected_url = urljoin(request.url, location)</span><br><span class="line"><span class="comment"># 注意这里，301,307,308状态码重定向的时候不改变原来的请求的方式</span></span><br><span class="line">    <span class="keyword">if</span> response.status <span class="keyword">in</span> (<span class="number">301</span>, <span class="number">307</span>, <span class="number">308</span>) <span class="keyword">or</span> request.method == <span class="string">&#x27;HEAD&#x27;</span>:</span><br><span class="line">        redirected = request.replace(url=redirected_url)</span><br><span class="line">        <span class="keyword">return</span> self._redirect(redirected, request, spider, response.status)</span><br><span class="line"><span class="comment">#  302, 303使用GET方式进行重定向</span></span><br><span class="line">    redirected = self._redirect_request_using_get(request, redirected_url)</span><br><span class="line">    <span class="keyword">return</span> self._redirect(redirected, request, spider, response.status)</span><br></pre></td></tr></table></figure><p>补充说明</p><ul><li><p>301 Moved Permanently 的定义<br>301 状态码表明目标资源被永久的移动到了一个新的 URI，任何未来对这个资源的引用都应该使用新的 URI。</p></li><li><p>302 Found 的定义<br>302 状态码表示目标资源临时移动到了另一个 URI 上。由于重定向是临时发生的，所以客户端在之后的请求中还应该使用原本的 URI。<br>服务器会在响应 Header 的 Location 字段中放上这个不同的 URI。浏览器可以使用 Location 中的 URI 进行自动重定向。</p></li><li><p>303 See Other 的定义<br>303 状态码表示服务器要将浏览器重定向到另一个资源，这个资源的 URI 会被写在响应 Header 的 Location 字段。从语义上讲，重定向到的资源并不是你所请求的资源，而是对你所请求资源的一些描述。<br>303 常用于将 POST 请求重定向到 GET 请求，比如你上传了一份个人信息，服务器发回一个 303 响应，将你导向一个上传成功页面。</p></li><li><p>307 Temporary Redirect 的定义<br>307 的定义实际上和 302 是一致的，唯一的区别在于，307 状态码不允许浏览器将原本为 POST 的请求重定向到 GET 请求上</p></li><li><p>308 Permanent Redirect 的定义<br>308 的定义实际上和 301 是一致的，唯一的区别在于，308 状态码不允许浏览器将原本为 POST 的请求重定向到 GET 请求上</p></li></ul><p>1×× Informational<br>100 Continue<br>101 Switching Protocols<br>102 Processing<br>2×× Success<br>200 OK<br>201 Created<br>202 Accepted<br>203 Non-authoritative Information<br>204 No Content<br>205 Reset Content<br>206 Partial Content<br>207 Multi-Status<br>208 Already Reported<br>226 IM Used<br>3×× Redirection<br>300 Multiple Choices<br>301 Moved Permanently<br>302 Found<br>303 See Other<br>304 Not Modified<br>305 Use Proxy<br>307 Temporary Redirect<br>308 Permanent Redirect<br>4×× Client Error<br>400 Bad Request<br>401 Unauthorized<br>402 Payment Required<br>403 Forbidden<br>404 Not Found<br>405 Method Not Allowed<br>406 Not Acceptable<br>407 Proxy Authentication Required<br>408 Request Timeout<br>409 Conflict<br>410 Gone<br>411 Length Required<br>412 Precondition Failed<br>413 Payload Too Large<br>414 Request-URI Too Long<br>415 Unsupported Media Type<br>416 Requested Range Not Satisfiable<br>417 Expectation Failed<br>418 I’m a teapot<br>421 Misdirected Request<br>422 Unprocessable Entity<br>423 Locked<br>424 Failed Dependency<br>426 Upgrade Required<br>428 Precondition Required<br>429 Too Many Requests<br>431 Request Header Fields Too Large<br>444 Connection Closed Without Response<br>451 Unavailable For Legal Reasons<br>499 Client Closed Request<br>5×× Server Error<br>500 Internal Server Error<br>501 Not Implemented<br>502 Bad Gateway<br>503 Service Unavailable<br>504 Gateway Timeout<br>505 HTTP Version Not Supported<br>506 Variant Also Negotiates<br>507 Insufficient Storage<br>508 Loop Detected<br>510 Not Extended<br>511 Network Authentication Required<br>599 Network Connect Timeout Error</p><h2 id="from-scrapy-downloadermiddlewares-downloadtimeout-import-DownloadTimeoutMiddleware"><a href="#from-scrapy-downloadermiddlewares-downloadtimeout-import-DownloadTimeoutMiddleware" class="headerlink" title="from scrapy.downloadermiddlewares.downloadtimeout import DownloadTimeoutMiddleware"></a>from scrapy.downloadermiddlewares.downloadtimeout import DownloadTimeoutMiddleware</h2>]]></content>
      
      
      <categories>
          
          <category> scrapy </category>
          
      </categories>
      
      
        <tags>
            
            <tag> scrapy中间件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>scrapy的spider中间件</title>
      <link href="/post/415eb720.html"/>
      <url>/post/415eb720.html</url>
      
        <content type="html"><![CDATA[<h2 id="爬虫中间件"><a href="#爬虫中间件" class="headerlink" title="爬虫中间件"></a>爬虫中间件</h2><p>SPIDER_MIDDLEWARES</p><p><strong>注意：关于scrapy爬虫中间件执行顺序的问题</strong></p><ul><li><p>查看默认的爬虫中间件scrapy settings –get SPIDER_MIDDLEWARES_BASE</p>   <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"> &quot;scrapy.spidermiddlewares.httperror.HttpErrorMiddleware&quot;: 50,</span><br><span class="line"> &quot;scrapy.spidermiddlewares.offsite.OffsiteMiddleware&quot;: 500, </span><br><span class="line"> &quot;scrapy.spidermiddlewares.referer.RefererMiddleware&quot;: 700,</span><br><span class="line"> &quot;scrapy.spidermiddlewares.urllength.UrlLengthMiddleware&quot;: 800,</span><br><span class="line"> &quot;scrapy.spidermiddlewares.depth.DepthMiddleware&quot;: 900</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><a href="https://scrapy-chs.readthedocs.io/zh_CN/stable/topics/settings.html#std:setting-SPIDER_MIDDLEWARES"><code>SPIDER_MIDDLEWARES</code></a> 设置会与Scrapy定义的 <a href="https://scrapy-chs.readthedocs.io/zh_CN/stable/topics/settings.html#std:setting-SPIDER_MIDDLEWARES_BASE"><code>SPIDER_MIDDLEWARES_BASE</code></a> 设置合并(但不是覆盖)， 而后根据顺序(order)进行排序，最后得到启用中间件的有序列表: 第一个中间件是最靠近引擎的，最后一个中间件是最靠近spider的。关于如何分配中间件的顺序请查看 <a href="https://scrapy-chs.readthedocs.io/zh_CN/stable/topics/settings.html#std:setting-SPIDER_MIDDLEWARES_BASE"><code>SPIDER_MIDDLEWARES_BASE</code></a> 设置，而后根据您想要放置中间件的位置选择一个值。 由于每个中间件执行不同的动作，您的中间件可能会依赖于之前(或者之后)执行的中间件，因此顺序是很重要如果您想禁止内置的(在 <a href="https://scrapy-chs.readthedocs.io/zh_CN/stable/topics/settings.html#std:setting-SPIDER_MIDDLEWARES_BASE"><code>SPIDER_MIDDLEWARES_BASE</code></a> 中设置并默认启用的)中间件， 您必须在项目的 <a href="https://scrapy-chs.readthedocs.io/zh_CN/stable/topics/settings.html#std:setting-SPIDER_MIDDLEWARES"><code>SPIDER_MIDDLEWARES</code></a> 设置中定义该中间件，并将其值赋为 None </p></li><li><p>需要重点关注的几个默认中间件</p></li><li><p>from scrapy.spidermiddlewares.httperror import HttpErrorMiddleware</p>   <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HttpErrorMiddleware</span>:</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">from_crawler</span>(<span class="params">cls, crawler</span>):</span><br><span class="line">        <span class="keyword">return</span> cls(crawler.settings)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, settings</span>):</span><br><span class="line">        self.handle_httpstatus_all = settings.getbool(<span class="string">&#x27;HTTPERROR_ALLOW_ALL&#x27;</span>)</span><br><span class="line">        self.handle_httpstatus_list = settings.getlist(<span class="string">&#x27;HTTPERROR_ALLOWED_CODES&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">process_spider_input</span>(<span class="params">self, response, spider</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="number">200</span> &lt;= response.status &lt; <span class="number">300</span>:  <span class="comment"># common case</span></span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        meta = response.meta</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;handle_httpstatus_all&#x27;</span> <span class="keyword">in</span> meta:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;handle_httpstatus_list&#x27;</span> <span class="keyword">in</span> meta:</span><br><span class="line">            allowed_statuses = meta[<span class="string">&#x27;handle_httpstatus_list&#x27;</span>]</span><br><span class="line">        <span class="keyword">elif</span> self.handle_httpstatus_all:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            allowed_statuses = <span class="built_in">getattr</span>(spider, <span class="string">&#x27;handle_httpstatus_list&#x27;</span>, self.handle_httpstatus_list)</span><br><span class="line">        <span class="keyword">if</span> response.status <span class="keyword">in</span> allowed_statuses:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">raise</span> HttpError(response, <span class="string">&#x27;Ignoring non-200 response&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">process_spider_exception</span>(<span class="params">self, response, exception, spider</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(exception, HttpError):</span><br><span class="line">            spider.crawler.stats.inc_value(<span class="string">&#x27;httperror/response_ignored_count&#x27;</span>)</span><br><span class="line">            spider.crawler.stats.inc_value(</span><br><span class="line">                <span class="string">f&#x27;httperror/response_ignored_status_count/<span class="subst">&#123;response.status&#125;</span>&#x27;</span></span><br><span class="line">            )</span><br><span class="line">            logger.info(</span><br><span class="line">                <span class="string">&quot;Ignoring response %(response)r: HTTP status code is not handled or not allowed&quot;</span>,</span><br><span class="line">                &#123;<span class="string">&#x27;response&#x27;</span>: response&#125;, extra=&#123;<span class="string">&#x27;spider&#x27;</span>: spider&#125;,</span><br><span class="line">            )</span><br><span class="line">            <span class="keyword">return</span> []</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>注意，如果REDIRECT_ENABLED为Fasle或者没有配置任何HTTPERROR_ALLOW_ALL等参数，那么scrapy只会处理200 &lt;&#x3D; response.status &lt; 300的请求，</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> scrapy </category>
          
      </categories>
      
      
        <tags>
            
            <tag> scrapy中间件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mitmdump</title>
      <link href="/post/a7db3127.html"/>
      <url>/post/a7db3127.html</url>
      
        <content type="html"><![CDATA[<h1 id="mitmdump"><a href="#mitmdump" class="headerlink" title="mitmdump"></a>mitmdump</h1><h2 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h2><p><a href="https://docs.mitmproxy.org/stable/">https://docs.mitmproxy.org/stable/</a></p><ul><li><p>安装<code>pip install mitmproxy</code></p></li><li><p>mitmdump -q -s inect_js.py -p 9999</p></li><li><p>-q：屏蔽mitmdump默认的控制台日志，只显示自己脚本中的</p></li><li><p>-s：入口脚本文件</p></li><li><p>-p：更改端口，默认为8080</p></li><li><p>修改脚本文件时，不用重启也会生效</p></li></ul><h2 id="针对-HTTP-生命周期的事件"><a href="#针对-HTTP-生命周期的事件" class="headerlink" title="针对 HTTP 生命周期的事件"></a>针对 HTTP 生命周期的事件</h2><ul><li><p>请求：def request(self, flow: mitmproxy.http.HTTPFlow):</p></li><li><p>响应：def response(self, flow: mitmproxy.http.HTTPFlow):</p></li><li><p>其它：</p><ul><li><p>def http_connect(self, flow: mitmproxy.http.HTTPFlow):</p></li><li><p>def requestheaders(self, flow: mitmproxy.http.HTTPFlow):</p></li><li><p>def responseheaders(self, flow: mitmproxy.http.HTTPFlow):</p></li><li><p>def error(self, flow: mitmproxy.http.HTTPFlow):</p></li></ul></li></ul><h2 id="请求：def-request-flow-flow"><a href="#请求：def-request-flow-flow" class="headerlink" title="请求：def request(flow:flow)"></a>请求：def request(flow:flow)</h2><ul><li>flow.request.headers<ul><li>获取所有头信息，包含Host、User-Agent、Content-type等字段</li></ul></li><li>flow.request.url<ul><li>完整的请求地址，包含域名及请求参数，但是不包含放在body里面的请求参数</li></ul></li><li>flow.request.host<ul><li>域名</li></ul></li><li>flow.request.method<ul><li>请求方式：POST、GET等</li></ul></li><li>flow.request.scheme<ul><li>请求类型：http、https</li></ul></li><li>flow.request.path<ul><li>请求的路径，URL除域名之外的内容</li></ul></li><li>flow.request.get_text()<ul><li>请求中body的内容，有一些http会把请求参数放在body里面，可通过此方法获取，返回字典类型</li></ul></li><li>flow.request.get_content()<ul><li>结果如flow.request.get_text()，返回bytes类型</li></ul></li><li>flow.request.raw_content<ul><li>结果如flow.request.get_content()，返回bytes类型</li></ul></li><li>flow.request.urlencoded_form<ul><li>MultiDictView，content-type：application&#x2F;x-www-form-urlencoded的请求参数，不包含url直接带的键值参数</li></ul></li><li>flow.request.multipart_form<ul><li>MultiDictView，content-type：multipart&#x2F;form-data</li></ul></li><li>flow.request.query<ul><li>返回MultiDictView类型的数据，URL的键值参数</li><li>flow.request.query.get(‘wd‘)<ul><li>取得请求参数wd的值</li></ul></li><li>flow.request.query.keys()<ul><li>取得所有请求参数</li></ul></li><li>flow.request.query.set_all(key,[value])<ul><li>修改请求参数</li></ul></li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">from mitmproxy.http import flow</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def request(flow:flow):</span><br><span class="line">    # 获取所有头信息，包含Host、User-Agent、Content-type等字段</span><br><span class="line">    # print(flow.request.headers)</span><br><span class="line"></span><br><span class="line">    # 域名</span><br><span class="line">    # print(flow.request.host)</span><br><span class="line"></span><br><span class="line">    # 请求方式：POST、GET等</span><br><span class="line">    # print(flow.request.method)</span><br><span class="line"></span><br><span class="line">    # 请求类型：http、https</span><br><span class="line">    # print(flow.request.scheme)</span><br><span class="line"></span><br><span class="line">    # 请求的路径，URL除域名之外的内容</span><br><span class="line">    # print(flow.request.path)</span><br><span class="line"></span><br><span class="line">    # 请求中body的内容，有一些http会把请求参数放在body里面，可通过此方法获取，返回字典类型</span><br><span class="line">    # print(flow.request.get_text())</span><br><span class="line"></span><br><span class="line">    # 返回MultiDictView类型的数据，URL的键值参数</span><br><span class="line">    # print(flow.request.query)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    # 完整的请求地址，包含域名及请求参数，但是不包含放在body里面的请求参数</span><br><span class="line">    if &#x27;https://www.baidu.com&#x27; in flow.request.url:</span><br><span class="line">        # 取得请求参数wd的值</span><br><span class="line">        # print(flow.request.query.get(&#x27;wd&#x27;))</span><br><span class="line"></span><br><span class="line">        # 取得所有请求参数</span><br><span class="line">        print(list(flow.request.query.keys()))</span><br><span class="line"></span><br><span class="line">        # 修改请求参数</span><br><span class="line">        flow.request.query.set_all(&#x27;wd&#x27;,[&#x27;python&#x27;])</span><br><span class="line">        # 打印修改过后的参数</span><br><span class="line">        print(flow.request.query.get(&#x27;wd&#x27;))</span><br></pre></td></tr></table></figure><h2 id="响应：def-response-flow-flow"><a href="#响应：def-response-flow-flow" class="headerlink" title="响应：def response(flow: flow)"></a>响应：def response(flow: flow)</h2><ul><li>flow.response.status_code<ul><li>状态码</li></ul></li><li>flow.response.text<ul><li>返回内容，已解码</li></ul></li><li>flow.response.content<ul><li>返回内容，Bytes类型</li></ul></li><li>flow.response.get_text()<ul><li>取得响应的文本</li></ul></li><li>flow.response.set_text()<ul><li>修改响应的文本</li></ul></li><li>flow.response &#x3D; flow.response.make(404)<ul><li>返回404</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> mitmproxy.http <span class="keyword">import</span> flow</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">response</span>(<span class="params">flow: flow</span>):</span><br><span class="line">    <span class="comment"># 状态码</span></span><br><span class="line">    <span class="comment"># print(flow.response.status_code)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 返回内容，已解码</span></span><br><span class="line">    <span class="comment"># print(flow.response.text)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 返回内容，Bytes类型</span></span><br><span class="line">    <span class="comment"># print(flow.response.content)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 取得响应的文本</span></span><br><span class="line">    <span class="comment"># print(flow.response.get_text())</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 修改响应的文本</span></span><br><span class="line">    <span class="comment"># flow.response.set_text(&#x27;123&#x27;)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 返回404</span></span><br><span class="line">    <span class="comment"># flow.response = flow.response.make(404)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 修改淘宝对selenium的js检测文件</span></span><br><span class="line">    targetUrl = <span class="string">&#x27;https://g.alicdn.com/AWSC/uab/122.js&#x27;</span></span><br><span class="line">    <span class="keyword">if</span>  targetUrl <span class="keyword">in</span> flow.request.url:</span><br><span class="line">        taobao_js =flow.response.get_text()</span><br><span class="line">        taobao_js = taobao_js.replace(<span class="string">&#x27;!function()&#123;function&#x27;</span>,<span class="string">&#x27;!function ()&#123;Object.defineProperties(navigator,&#123;webdriver: &#123;get: () =&gt; false&#125;&#125;)function&#x27;</span>)</span><br><span class="line">        flow.response.set_text(taobao_js)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;已修改&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 淘宝搜索商品时，自动打印商品信息</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;https://s.taobao.com/search&#x27;</span> <span class="keyword">in</span> flow.request.url:</span><br><span class="line">        start = flow.response.text.strip().index(<span class="string">&#x27;&#123;&#x27;</span>)</span><br><span class="line">        end = -<span class="number">2</span></span><br><span class="line">        <span class="built_in">print</span>(json.loads(flow.response.text.strip()[start: end])[<span class="string">&#x27;mods&#x27;</span>][<span class="string">&#x27;itemlist&#x27;</span>][<span class="string">&#x27;data&#x27;</span>][<span class="string">&#x27;auctions&#x27;</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 空气质量网，修改检测F12的JS</span></span><br><span class="line">    <span class="comment"># https://www.aqistudy.cn/historydata</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;https://www.aqistudy.cn/historydata/monthdata.php&#x27;</span> <span class="keyword">in</span> flow.request.url:</span><br><span class="line">        js = flow.response.text</span><br><span class="line">        js = re.sub(<span class="string">r&#x27;endebug.*?&#125;\);&#x27;</span>,<span class="string">&#x27;&#x27;</span>,js,flags=re.S)</span><br><span class="line">        flow.response.set_text(js)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;已正常&#x27;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"># *_*coding:utf-8 *_*</span><br><span class="line">import sys</span><br><span class="line">import requests</span><br><span class="line">import time</span><br><span class="line">import mitmproxy</span><br><span class="line">from mitmproxy import http</span><br><span class="line">from mitmproxy import flow, proxy, controller, options</span><br><span class="line">from mitmproxy.proxy.server import ProxyServer</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line">程序运行</span><br><span class="line"> mitmdump -s scripts.py</span><br><span class="line"> mitmdump -s &lt;python1.y&gt; | python &lt;python2.py&gt;</span><br><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line">#https://api-litchi.jstv.com/nav/10002630?OrderIndex=0&amp;channel=0&amp;pagesize=20&amp;gid=9c2ea19a3963&amp;AppID=litchiV5&amp;Sign=e3b261f567e71db23d8d329a0c573f26&amp;TT=495074222</span><br><span class="line">def response(flow):</span><br><span class="line">    if &#x27;https://api-litchi.jstv.com/v6s/nav&#x27;  in flow.request.url:</span><br><span class="line">        data = flow.request.url</span><br><span class="line">        print(f&quot;&gt;&gt;&gt;&#123;data&#125;&lt;&lt;&lt;&quot;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="自定义脚本编写"><a href="#自定义脚本编写" class="headerlink" title="自定义脚本编写"></a>自定义脚本编写</h2><h3 id="脚本编写的两个条件"><a href="#脚本编写的两个条件" class="headerlink" title="脚本编写的两个条件"></a>脚本编写的两个条件</h3><ul><li>1.1、编写一个 py 文件供 mitmproxy 加载，文件中定义了若干函数，这些函数实现了某些 mitmproxy 提供的事件，mitmproxy 会在某个事件发生时调用对应的函数</li><li>1.2、编写一个 py 文件供 mitmproxy 加载，文件定义了【变量 addons】，addons 是个数组，每个元素是一个类实例，这些类有若干方法，这些方法实现了某些 mitmproxy 提供的事件，mitmproxy 会在某个事件发生时调用对应的方法。这些类，称为一个个 addon。</li></ul><h3 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">from mitmproxy import http, ctx</span><br><span class="line">import json</span><br><span class="line"></span><br><span class="line">class xxx:</span><br><span class="line">def xxx:</span><br><span class="line">def xxx</span><br><span class="line"></span><br><span class="line">addons = [</span><br><span class="line">xxx() //类名的加载，也可以定义多个类，然后以数组的形式添加，进行加载</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>参考：</p><p><a href="https://docs.mitmproxy.org/stable/addons-examples/">https://docs.mitmproxy.org/stable/addons-examples/</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> mitmdump </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git笔记</title>
      <link href="/post/d9283bc6.html"/>
      <url>/post/d9283bc6.html</url>
      
        <content type="html"><![CDATA[<h1 id="常用的git命令"><a href="#常用的git命令" class="headerlink" title="常用的git命令"></a>常用的git命令</h1><ul><li>git mv file_from file_to（重命名文件，删除原来的文件，添加新文件到暂存区）</li><li>git switch 命令专门用于切换分支，可以用来替代 checkout 的部分用途。</li><li>git update-index –skip-worktree</li><li>git branch -u origin&#x2F;branch 建立当前分支与远程分支的映射关系</li><li>git update-index –assume-unchanged </li><li>git log –all –since “2021-03-01” –oneline –author&#x3D;”Zhang-Jane”</li><li>git remote update origin —prune 更新远程分支本地列表</li><li>git branch -vv 查看分支映射</li><li>git push origin –delete <BranchName> 删除远程分支</BranchName></li><li>git rev-list —all | xargs git grep -F 关键词</li><li>git ls-files 查看哪些文件在版本控制下</li><li>git clone -b 远程分支名  仓库地址</li><li>git blame 查找文件修改者</li><li>git log –oneline</li><li>git restore<ul><li>对于git restore <file>命令，会撤销文件的修改，使文件恢复到暂存区或本地代码库（取决于文件在修改前的状态）；</file></li><li>对于git restore –staged <file>命令，把文件从暂存区撤回到工作区，保留文件最后一次修改的内容；</file></li></ul></li><li>git log –all –grep&#x3D;’fix’</li><li>git log –author&#x3D;”Maxence”</li><li>git reflog</li><li>git rm file_path &amp;&amp; git rm –cached file_path</li><li>git diff master..my-branch 查看分支之间的不同</li><li>git reset <file> 撤销单个文件的add</file></li><li>git stash apply 应用某个存储,但不会把存储从存储列表中删除，默认使用第一个存储,即stash@{0}，如果要使用其他个，git stash apply stash@{$num} ， 比如第二个：git stash apply stash@{1} </li><li>git commit –amend -m “更好的提交日志” 编辑上次提交</li></ul><h1 id="如何使用git-clone一个指定文件或者目录"><a href="#如何使用git-clone一个指定文件或者目录" class="headerlink" title="如何使用git clone一个指定文件或者目录"></a>如何使用git clone一个指定文件或者目录</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">mkdir</span> xx <span class="comment"># 创建一个与要clone的仓库同名或不同命的目录</span></span><br><span class="line">$ <span class="built_in">cd</span> xx</span><br><span class="line">$ git init <span class="comment">#初始化</span></span><br><span class="line">$ git remote add origin  https://github.com/xxx.git <span class="comment"># 增加远端的仓库地址</span></span><br><span class="line">$ git config core.sparsecheckout <span class="literal">true</span> <span class="comment"># 设置Sparse Checkout 为true </span></span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">&quot;xx/xxx&quot;</span> &gt;&gt; .git/info/sparse-checkout <span class="comment"># 将要部分clone的目录相对根目录的路径写入配置文件</span></span><br><span class="line">$ git pull origin xxx <span class="comment"># pull下来代码</span></span><br><span class="line">$ git ls-files -v <span class="comment"># S: skip-worktree H: 缓存 R: removed/deleted C：modified/changed</span></span><br></pre></td></tr></table></figure><h1 id="git-add-的各种区别-version：git-version-2-36-1-windows-1"><a href="#git-add-的各种区别-version：git-version-2-36-1-windows-1" class="headerlink" title="git add 的各种区别(version：git version 2.36.1.windows.1):"></a>git add 的各种区别(version：git version 2.36.1.windows.1):</h1><ul><li><p>git add -u ：他仅监控已经被add的文件（即tracked file），他会将被修改的文件提交到暂存区。add -u 不会提交新文件（untracked file）。（git add –update的缩写）</p></li><li><p>git add . ：他会监控工作区的状态树，使用它会把工作时的所有变化提交到暂存区，包括文件内容修改(modified)以及新文件(new)，包括被删除的文件(网上好多说不包含，实际测试被删除的也会被添加，这是因为版本问题2.x版本包含被删除的文件)。</p></li><li><p>git add -A: []表示把中所有跟踪文件中被修改过或已删除文件和所有未跟踪的文件信息添加到索引库。省略<path></path>表示 . ,即当前目录。</p></li><li><p>git add -i: 我们可以通过git add -i [<path></path>]命令查看中被所有修改过或已删除文件但没有提交的文件，并通过其revert子命令可以查看<path></path>中所有未跟踪的文件，同时进入一个子命令系统。</p></li></ul><p>.和*分别是目录路径(当前目录)和通配符，用于说明命令的路径。</p><h1 id="代码回滚"><a href="#代码回滚" class="headerlink" title="代码回滚"></a>代码回滚</h1><p>工作区 -&gt; 暂存区（stage） -&gt; 版本库<br>git checkout – readme.txt 撤销</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># HEAD是当前版本</span><br><span class="line"># HEAD^是上一个版本</span><br><span class="line"># HEAD^^是上上个版本</span><br><span class="line"># HEAD~100是前100个版本</span><br><span class="line"></span><br><span class="line"># 回到上一个版本</span><br><span class="line">git reset --hard HEAD^ </span><br><span class="line"></span><br><span class="line"># 若本地不小心修改或删除了很多文件，一个一个恢复太麻烦，可以这样，回到上一个版本 git reset --hard HEAD</span><br></pre></td></tr></table></figure><ul><li>拉取远程分支并合并到指定分支<ul><li>git pull origin &lt;远程分支名&gt;:&lt;本地分支名&gt;</li></ul></li><li>本地分支重命名(还没有推送到远程)<ul><li>git branch -m oldName newName</li></ul></li><li>远程分支重命名 (已经推送远程-假设本地分支和远程对应分支名称相同)</li><li>重命名远程分支对应的本地分支<ul><li>git branch -m oldName newName</li></ul></li><li>删除远程分支<ul><li>git push –delete origin oldName</li></ul></li><li>上传新命名的本地分支<ul><li>git push origin newName</li></ul></li></ul><h3 id="git-checkout和reset的区别"><a href="#git-checkout和reset的区别" class="headerlink" title="git checkout和reset的区别"></a>git checkout和reset的区别</h3><p>git checkout – file；撤销对工作区修改；这个命令是以最新的存储时间节点（add和commit）为参照，覆盖工作区对应文件file；这个命令改变的是工作区</p><p>git reset HEAD – file；清空add命令向暂存区提交的关于file文件的修改（Ustage）；这个命令仅改变暂存区，并不改变工作区，这意味着在无任何其他操作的情况下，工作区中的实际文件同该命令运行之前无任何变化</p><h1 id="git忽略"><a href="#git忽略" class="headerlink" title="git忽略"></a>git忽略</h1><h3 id="gitignore"><a href="#gitignore" class="headerlink" title=".gitignore"></a>.gitignore</h3><p>只要在.gitignore 里面加入你自己的文件，那么 git 就会忽略这些文件，不去追踪,可以说说大部分人的解决方案。</p><h3 id="git-x2F-info-x2F-exclude"><a href="#git-x2F-info-x2F-exclude" class="headerlink" title=".git&#x2F;info&#x2F;exclude"></a>.git&#x2F;info&#x2F;exclude</h3><p>修改.gitignore 会告诉别人你忽略了哪些文件。 这个排除设置都是是保存在本地，所以排除信息不会共享到远程仓库 ，适用于一些不想跟别人分享的忽视。</p><p><em>注意：以上方法都只适用未被 git 追踪的文件，一但被 git 追踪就没用了，但是接下来就有请下两个方法</em></p><h3 id="git-update-index-–assume-unchanged"><a href="#git-update-index-–assume-unchanged" class="headerlink" title="git update-index –assume-unchanged"></a>git update-index –assume-unchanged</h3><p>设计用于检查一组文件是否已被修改的开销很大的情况；当您设置该位时，git（当然）假定与索引的该部分相对应的文件尚未在工作副本中被修改。这样可以避免一团糟stat。只要索引中的文件条目发生更改（因此，当文件在上游更改时），该位就会丢失。</p><p>如果有需要提交的改动 可以用 git update-index –no-assume-unchanged <file> 来撤销申明。</file></p><p>使用git update-index –assume-unchanged config.log 忽略文件<br>然后切换分支 ，提示有文件没提交。<br>使用commit做版本提示没有文件要做版本。</p><p>解决方案：<br>执行命令 git update-index –no-assume-unchanged config.log 恢复文件跟踪即可解决</p><h3 id="git-update-index-–skip-worktree"><a href="#git-update-index-–skip-worktree" class="headerlink" title="git update-index –skip-worktree"></a>git update-index –skip-worktree</h3><p>比 assume-unchanged 的方式 更进一步 是 skip-worktree，适用于 希望某些配置文件不会随着 git 更新而发生变化的时候用</p><p>即使 git 知道文件已经被修改(或者需要通过 reset 进行修改—— hard 或类似的方式) ，它也会假装没有被修改，而是使用索引中的版本。这种情况一直持续到索引被丢弃。</p><p>区别是 assume-unchanged 是告诉 git 你没改过，所以检出分支，git 会把对应更新还原到分支的状态。</p><h1 id="git-恢复误删的远程分支"><a href="#git-恢复误删的远程分支" class="headerlink" title="git 恢复误删的远程分支"></a>git 恢复误删的远程分支</h1><p>查看reflog，找到最后一次commitid<br>git reflog –date&#x3D;iso<br>reflog是reference log的意思，也就是引用log，记录HEAD在各个分支上的移动轨迹。选项 –date&#x3D;iso，表示以标准时间格式展示。这里你肯定会问，为什么不用git log？git log是用来记录当前分支的commit log，分支都删除了，找不到commit log了。<br>找到目标分支最后一次的commitid</p><p>切出分支</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b recovery_branch_name commitid</span><br></pre></td></tr></table></figure><p>切出分支后，本地有分支了，再push到远程仓库就可以了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push  origin recovery_branch_name </span><br></pre></td></tr></table></figure><h1 id="修改commit信息"><a href="#修改commit信息" class="headerlink" title="修改commit信息"></a>修改commit信息</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//执行的命令</span><br><span class="line">git log //查看提交日志，找到要修改的commit</span><br><span class="line">git rebase -i HEAD~1 //切到需要修改的commit中</span><br><span class="line">//按 i 进入编辑模式，修改pick 为 edit 然后  :wq 保存退出</span><br><span class="line">git commit --amend  //修该commit信息</span><br><span class="line">// 按 i 进入编辑模式，修改需要的内容然后  :wq 保存退出</span><br><span class="line">git rebase --continue  //退出修改，继续之后的git操作</span><br><span class="line">git push //推送到服务器</span><br></pre></td></tr></table></figure><h1 id="git提交的message规范"><a href="#git提交的message规范" class="headerlink" title="git提交的message规范"></a>git提交的message规范</h1><h2 id="提交格式："><a href="#提交格式：" class="headerlink" title="提交格式："></a>提交格式：</h2><p><type>(<scope>):   <subject></subject></scope></type></p><h2 id="type"><a href="#type" class="headerlink" title="type"></a>type</h2><ul><li>feat：新功能（feature）,⼀般是新写的代码</li><li>fix：修补bug</li><li>perf: 提升性能</li><li>docs：⽂档（documentation）</li><li>style： 格式，修改了空格、格式缩进、逗号等等，格式化等不影响代码运⾏的变动</li><li>refactor：重构，即不是新增功能，也不是修改bug的代码变动</li><li>test：增加测试代码</li><li>chore：构建过程或辅助⼯具的变动或改变构建流程、或者增加依赖库、⼯具等</li><li>revert: 回滚到上⼀个版本</li></ul><scope>范围可以是指定提交更改位置的任何内容，如：\- 对 package.json 文件新增依赖库，chore(package.json): 新增依赖库\- 或对代码进行重构，refacto(weChat.vue): 重构微信进件<subject>如果没有更合适的范围，可以直接写提交内容<p>示例：feat(user):  add user list interface  </p><p>type，scope，subject都是要有的，不能为空</p><h2 id="subject-简短描述"><a href="#subject-简短描述" class="headerlink" title="subject 简短描述"></a>subject 简短描述</h2><p>以动词开头，使⽤第⼀⼈称现在时，⽐如change，⽽不是changed或changes</p><p>第⼀个字⺟⼩写</p><p>结尾不加标点符号</p><p>commit subject 应该清晰明了，说明本次提交的⽬的</p><p>不超过50个字符</p><p>subject前⾯有个空格</p><h1 id="git误提交敏感信息"><a href="#git误提交敏感信息" class="headerlink" title="git误提交敏感信息"></a>git误提交敏感信息</h1><ol><li>git filter-branch –force –index-filter “git rm –cached –ignore-unmatch -r 要删除的文件,相对路径” –prune-empty –tag-name-filter cat – –all</li><li>git push origin –all –force</li></ol><h1 id="git-ignore"><a href="#git-ignore" class="headerlink" title="git ignore"></a>git ignore</h1><p><a href="https://www.toptal.com/developers/gitignore/">https://www.toptal.com/developers/gitignore/</a></p></subject></scope>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>frida的hook脚本</title>
      <link href="/post/93535598.html"/>
      <url>/post/93535598.html</url>
      
        <content type="html"><![CDATA[<h2 id="Hook-RegisterNatives"><a href="#Hook-RegisterNatives" class="headerlink" title="Hook RegisterNatives"></a>Hook RegisterNatives</h2><h3 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h3><p><code>frida -U --no-pause -f package_name -l xx.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ishook_libart = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hook_libart</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (ishook_libart === <span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> symbols = <span class="title class_">Module</span>.<span class="title function_">enumerateSymbolsSync</span>(<span class="string">&quot;libart.so&quot;</span>);</span><br><span class="line">    <span class="keyword">var</span> addrGetStringUTFChars = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">var</span> addrNewStringUTF = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">var</span> addrFindClass = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">var</span> addrGetMethodID = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">var</span> addrGetStaticMethodID = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">var</span> addrGetFieldID = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">var</span> addrGetStaticFieldID = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">var</span> addrRegisterNatives = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">var</span> addrAllocObject = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">var</span> addrCallObjectMethod = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">var</span> addrGetObjectClass = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">var</span> addrReleaseStringUTFChars = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; symbols.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">var</span> symbol = symbols[i];</span><br><span class="line">        <span class="keyword">if</span> (symbol.<span class="property">name</span> == <span class="string">&quot;_ZN3art3JNI17GetStringUTFCharsEP7_JNIEnvP8_jstringPh&quot;</span>) &#123;</span><br><span class="line">            addrGetStringUTFChars = symbol.<span class="property">address</span>;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;GetStringUTFChars is at &quot;</span>, symbol.<span class="property">address</span>, symbol.<span class="property">name</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (symbol.<span class="property">name</span> == <span class="string">&quot;_ZN3art3JNI12NewStringUTFEP7_JNIEnvPKc&quot;</span>) &#123;</span><br><span class="line">            addrNewStringUTF = symbol.<span class="property">address</span>;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;NewStringUTF is at &quot;</span>, symbol.<span class="property">address</span>, symbol.<span class="property">name</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (symbol.<span class="property">name</span> == <span class="string">&quot;_ZN3art3JNI9FindClassEP7_JNIEnvPKc&quot;</span>) &#123;</span><br><span class="line">            addrFindClass = symbol.<span class="property">address</span>;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;FindClass is at &quot;</span>, symbol.<span class="property">address</span>, symbol.<span class="property">name</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (symbol.<span class="property">name</span> == <span class="string">&quot;_ZN3art3JNI11GetMethodIDEP7_JNIEnvP7_jclassPKcS6_&quot;</span>) &#123;</span><br><span class="line">            addrGetMethodID = symbol.<span class="property">address</span>;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;GetMethodID is at &quot;</span>, symbol.<span class="property">address</span>, symbol.<span class="property">name</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (symbol.<span class="property">name</span> == <span class="string">&quot;_ZN3art3JNI17GetStaticMethodIDEP7_JNIEnvP7_jclassPKcS6_&quot;</span>) &#123;</span><br><span class="line">            addrGetStaticMethodID = symbol.<span class="property">address</span>;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;GetStaticMethodID is at &quot;</span>, symbol.<span class="property">address</span>, symbol.<span class="property">name</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (symbol.<span class="property">name</span> == <span class="string">&quot;_ZN3art3JNI10GetFieldIDEP7_JNIEnvP7_jclassPKcS6_&quot;</span>) &#123;</span><br><span class="line">            addrGetFieldID = symbol.<span class="property">address</span>;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;GetFieldID is at &quot;</span>, symbol.<span class="property">address</span>, symbol.<span class="property">name</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (symbol.<span class="property">name</span> == <span class="string">&quot;_ZN3art3JNI16GetStaticFieldIDEP7_JNIEnvP7_jclassPKcS6_&quot;</span>) &#123;</span><br><span class="line">            addrGetStaticFieldID = symbol.<span class="property">address</span>;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;GetStaticFieldID is at &quot;</span>, symbol.<span class="property">address</span>, symbol.<span class="property">name</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (symbol.<span class="property">name</span> == <span class="string">&quot;_ZN3art3JNI15RegisterNativesEP7_JNIEnvP7_jclassPK15JNINativeMethodi&quot;</span>) &#123;</span><br><span class="line">            addrRegisterNatives = symbol.<span class="property">address</span>;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;RegisterNatives is at &quot;</span>, symbol.<span class="property">address</span>, symbol.<span class="property">name</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (symbol.<span class="property">name</span>.<span class="title function_">indexOf</span>(<span class="string">&quot;_ZN3art3JNI11AllocObjectEP7_JNIEnvP7_jclass&quot;</span>) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            addrAllocObject = symbol.<span class="property">address</span>;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;AllocObject is at &quot;</span>, symbol.<span class="property">address</span>, symbol.<span class="property">name</span>);</span><br><span class="line">        &#125;  <span class="keyword">else</span> <span class="keyword">if</span> (symbol.<span class="property">name</span>.<span class="title function_">indexOf</span>(<span class="string">&quot;_ZN3art3JNI16CallObjectMethodEP7_JNIEnvP8_jobjectP10_jmethodIDz&quot;</span>) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            addrCallObjectMethod = symbol.<span class="property">address</span>;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;CallObjectMethod is at &quot;</span>, symbol.<span class="property">address</span>, symbol.<span class="property">name</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (symbol.<span class="property">name</span>.<span class="title function_">indexOf</span>(<span class="string">&quot;_ZN3art3JNI14GetObjectClassEP7_JNIEnvP8_jobject&quot;</span>) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            addrGetObjectClass = symbol.<span class="property">address</span>;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;GetObjectClass is at &quot;</span>, symbol.<span class="property">address</span>, symbol.<span class="property">name</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (symbol.<span class="property">name</span>.<span class="title function_">indexOf</span>(<span class="string">&quot;_ZN3art3JNI21ReleaseStringUTFCharsEP7_JNIEnvP8_jstringPKc&quot;</span>) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            addrReleaseStringUTFChars = symbol.<span class="property">address</span>;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;ReleaseStringUTFChars is at &quot;</span>, symbol.<span class="property">address</span>, symbol.<span class="property">name</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (addrRegisterNatives != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(addrRegisterNatives, &#123;</span><br><span class="line">            <span class="attr">onEnter</span>: <span class="keyword">function</span> (<span class="params">args</span>) &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;[RegisterNatives] method_count:&quot;</span>, args[<span class="number">3</span>]);</span><br><span class="line">                <span class="keyword">var</span> env = args[<span class="number">0</span>];</span><br><span class="line">                <span class="keyword">var</span> java_class = args[<span class="number">1</span>];</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">var</span> funcAllocObject = <span class="keyword">new</span> <span class="title class_">NativeFunction</span>(addrAllocObject, <span class="string">&quot;pointer&quot;</span>, [<span class="string">&quot;pointer&quot;</span>, <span class="string">&quot;pointer&quot;</span>]);</span><br><span class="line">                <span class="keyword">var</span> funcGetMethodID = <span class="keyword">new</span> <span class="title class_">NativeFunction</span>(addrGetMethodID, <span class="string">&quot;pointer&quot;</span>, [<span class="string">&quot;pointer&quot;</span>, <span class="string">&quot;pointer&quot;</span>, <span class="string">&quot;pointer&quot;</span>, <span class="string">&quot;pointer&quot;</span>]);</span><br><span class="line">                <span class="keyword">var</span> funcCallObjectMethod = <span class="keyword">new</span> <span class="title class_">NativeFunction</span>(addrCallObjectMethod, <span class="string">&quot;pointer&quot;</span>, [<span class="string">&quot;pointer&quot;</span>, <span class="string">&quot;pointer&quot;</span>, <span class="string">&quot;pointer&quot;</span>]);</span><br><span class="line">                <span class="keyword">var</span> funcGetObjectClass = <span class="keyword">new</span> <span class="title class_">NativeFunction</span>(addrGetObjectClass, <span class="string">&quot;pointer&quot;</span>, [<span class="string">&quot;pointer&quot;</span>, <span class="string">&quot;pointer&quot;</span>]);</span><br><span class="line">                <span class="keyword">var</span> funcGetStringUTFChars = <span class="keyword">new</span> <span class="title class_">NativeFunction</span>(addrGetStringUTFChars, <span class="string">&quot;pointer&quot;</span>, [<span class="string">&quot;pointer&quot;</span>, <span class="string">&quot;pointer&quot;</span>, <span class="string">&quot;pointer&quot;</span>]);</span><br><span class="line">                <span class="keyword">var</span> funcReleaseStringUTFChars = <span class="keyword">new</span> <span class="title class_">NativeFunction</span>(addrReleaseStringUTFChars, <span class="string">&quot;void&quot;</span>, [<span class="string">&quot;pointer&quot;</span>, <span class="string">&quot;pointer&quot;</span>, <span class="string">&quot;pointer&quot;</span>]);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">var</span> clz_obj = <span class="title function_">funcAllocObject</span>(env, java_class);</span><br><span class="line">                <span class="keyword">var</span> mid_getClass = <span class="title function_">funcGetMethodID</span>(env, java_class, <span class="title class_">Memory</span>.<span class="title function_">allocUtf8String</span>(<span class="string">&quot;getClass&quot;</span>), <span class="title class_">Memory</span>.<span class="title function_">allocUtf8String</span>(<span class="string">&quot;()Ljava/lang/Class;&quot;</span>));</span><br><span class="line">                <span class="keyword">var</span> clz_obj2 = <span class="title function_">funcCallObjectMethod</span>(env, clz_obj, mid_getClass);</span><br><span class="line">                <span class="keyword">var</span> cls = <span class="title function_">funcGetObjectClass</span>(env, clz_obj2);</span><br><span class="line">                <span class="keyword">var</span> mid_getName = <span class="title function_">funcGetMethodID</span>(env, cls, <span class="title class_">Memory</span>.<span class="title function_">allocUtf8String</span>(<span class="string">&quot;getName&quot;</span>), <span class="title class_">Memory</span>.<span class="title function_">allocUtf8String</span>(<span class="string">&quot;()Ljava/lang/String;&quot;</span>));</span><br><span class="line">                <span class="keyword">var</span> name_jstring = <span class="title function_">funcCallObjectMethod</span>(env, clz_obj2, mid_getName);</span><br><span class="line">                <span class="keyword">var</span> name_pchar = <span class="title function_">funcGetStringUTFChars</span>(env, name_jstring, <span class="title function_">ptr</span>(<span class="number">0</span>));</span><br><span class="line">                <span class="keyword">var</span> class_name = <span class="title function_">ptr</span>(name_pchar).<span class="title function_">readCString</span>();</span><br><span class="line">                <span class="title function_">funcReleaseStringUTFChars</span>(env, name_jstring, name_pchar);</span><br><span class="line"></span><br><span class="line">                <span class="comment">//console.log(class_name);</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">var</span> methods_ptr = <span class="title function_">ptr</span>(args[<span class="number">2</span>]);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">var</span> method_count = <span class="built_in">parseInt</span>(args[<span class="number">3</span>]);</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; method_count; i++) &#123;</span><br><span class="line">                    <span class="keyword">var</span> name_ptr = <span class="title class_">Memory</span>.<span class="title function_">readPointer</span>(methods_ptr.<span class="title function_">add</span>(i * <span class="title class_">Process</span>.<span class="property">pointerSize</span> * <span class="number">3</span>));</span><br><span class="line">                    <span class="keyword">var</span> sig_ptr = <span class="title class_">Memory</span>.<span class="title function_">readPointer</span>(methods_ptr.<span class="title function_">add</span>(i * <span class="title class_">Process</span>.<span class="property">pointerSize</span> * <span class="number">3</span> + <span class="title class_">Process</span>.<span class="property">pointerSize</span>));</span><br><span class="line">                    <span class="keyword">var</span> fnPtr_ptr = <span class="title class_">Memory</span>.<span class="title function_">readPointer</span>(methods_ptr.<span class="title function_">add</span>(i * <span class="title class_">Process</span>.<span class="property">pointerSize</span> * <span class="number">3</span> + <span class="title class_">Process</span>.<span class="property">pointerSize</span> * <span class="number">2</span>));</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">var</span> name = <span class="title class_">Memory</span>.<span class="title function_">readCString</span>(name_ptr);</span><br><span class="line">                    <span class="keyword">var</span> sig = <span class="title class_">Memory</span>.<span class="title function_">readCString</span>(sig_ptr);</span><br><span class="line">                    <span class="keyword">var</span> find_module = <span class="title class_">Process</span>.<span class="title function_">findModuleByAddress</span>(fnPtr_ptr);</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;[RegisterNatives] java_class:&quot;</span>, class_name, <span class="string">&quot;name:&quot;</span>, name, <span class="string">&quot;sig:&quot;</span>, sig, <span class="string">&quot;fnPtr:&quot;</span>, fnPtr_ptr, <span class="string">&quot;module_name:&quot;</span>, find_module.<span class="property">name</span>, <span class="string">&quot;module_base:&quot;</span>, find_module.<span class="property">base</span>, <span class="string">&quot;offset:&quot;</span>, <span class="title function_">ptr</span>(fnPtr_ptr).<span class="title function_">sub</span>(find_module.<span class="property">base</span>));</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">onLeave</span>: <span class="keyword">function</span> (<span class="params">retval</span>) &#123; &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ishook_libart = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">hook_libart</span>();</span><br></pre></td></tr></table></figure><h2 id="Hook-Java-类中的方法："><a href="#Hook-Java-类中的方法：" class="headerlink" title="Hook Java 类中的方法："></a>Hook Java 类中的方法：</h2><p>1.调用源码中的java类</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> demo = <span class="title class_">Java</span>.<span class="title function_">use</span>(所要hook的类：com.<span class="property">jsbc</span>.<span class="property">lznews</span>.<span class="property">util</span>.<span class="property">net</span>.<span class="property">AntiTheftUtils</span>);</span><br></pre></td></tr></table></figure><p>2.调用类中的方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">demo.所需hook的方法名.<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params">url, params, timeStampExtra</span>)构造java方法所需的参数，无需声明参数类型</span><br><span class="line">&#123;</span><br><span class="line">打印日志</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.遇到重载的方法：</p><p>查看出错的日志信息，将需要重载的方法一一实现：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">para_func.<span class="property">transform</span>.<span class="title function_">overload</span>(<span class="string">&#x27;java.lang.String&#x27;</span>,<span class="string">&#x27;int&#x27;</span>).<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params">url, timeStampExtra</span>)&#123;</span><br><span class="line">                <span class="title function_">send</span>(<span class="string">&quot;第一个函数&quot;</span>);</span><br><span class="line">                <span class="title function_">send</span>(<span class="string">&quot;url：&quot;</span>+url);</span><br><span class="line">                <span class="title function_">send</span>(<span class="string">&quot;timeStampExtra：&quot;</span>+timeStampExtra);</span><br><span class="line">                <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">transform</span>(url, timeStampExtra);</span><br><span class="line">      </span><br><span class="line">      &#125;;</span><br></pre></td></tr></table></figure><p>注意重载的方法参数个数，需要一一对应<br>4.hook java层 参数打印信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">//hook java层 参数打印信息</span><br><span class="line">jscode = &quot;&quot;&quot;</span><br><span class="line">Java.perform(function () &#123;</span><br><span class="line">    </span><br><span class="line">    var HttpRequestEntity = Java.use(&#x27;cn.thecover.www.covermedia.data.entity.HttpRequestEntity&#x27;);//要hook的类名完整路径</span><br><span class="line"></span><br><span class="line">    HttpRequestEntity.getSign.implementation = function (arg1,arg2,arg3) &#123; // 重写要hook的方法getSign，当有多个重名函数时需要重载，function括号为函数的参数个数</span><br><span class="line">       </span><br><span class="line">        var Sign=this.getSign(arg1,arg2,arg3); //调用原始的函数实现并且获得返回值，如果不写的话我们下面的代码会全部替换原函数</span><br><span class="line">       </span><br><span class="line">        send(&quot;arg1:&quot;+arg1);  //打印参数值</span><br><span class="line">        send(&quot;arg2:&quot;+arg2);</span><br><span class="line">        send(&quot;arg3:&quot;+arg3);</span><br><span class="line">        send(this.timestamp);       //&#123;u&#x27;fieldReturnType&#x27;: &#123;u&#x27;className&#x27;: u&#x27;java.lang.String&#x27;, u&#x27;type&#x27;: u&#x27;pointer&#x27;, u&#x27;name&#x27;: u&#x27;Ljava/lang/String;&#x27;, u&#x27;size&#x27;: 1&#125;, u&#x27;fieldType&#x27;: 2, u&#x27;value&#x27;: u&#x27;1529071177437&#x27;&#125;</span><br><span class="line">        send(this.timestamp.value); //1529071177437</span><br><span class="line">        send(Sign);   //打印返回值</span><br><span class="line">        return Sign;  //函数有返回值时需要返回</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>5.修改值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">//call public method</span><br><span class="line">  var money = coin.getMoney();//直接调用方法没问题</span><br><span class="line">  send(&quot;getCoinMoney money:&quot; +money);</span><br><span class="line">  </span><br><span class="line">  //get public field</span><br><span class="line">  var money1 = coin.money;//直接调用字段就有问题了，不管字段是private还是，public</span><br><span class="line">  send(&quot;money field:&quot; money1);</span><br><span class="line">  </span><br><span class="line">  //如何去做,我们的做法就是用反射进行操作，先用java.cast获取对应类的class类型，然后就和java中类似了，基本类型修改值都是setXXX方法，对象类型都是set方法即可</span><br><span class="line">  //reflect field to get value</span><br><span class="line">  var money_field_name = Java.cast(coin.getClass(),clazz).getDeclaredField(&quot;money&quot;);</span><br><span class="line">   var money_field_name.setAccessible(true);</span><br><span class="line">  send(&quot;reflect money field :&quot;+ money_field_name.get(coin));</span><br><span class="line">  </span><br><span class="line">  //reflect field to set value</span><br><span class="line">  money_field_name.setInt(coin,101);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> frida </category>
          
      </categories>
      
      
        <tags>
            
            <tag> frida </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>appium启动多个移动设备</title>
      <link href="/post/47341153.html"/>
      <url>/post/47341153.html</url>
      
        <content type="html"><![CDATA[<h2 id="元素的判断"><a href="#元素的判断" class="headerlink" title="元素的判断"></a>元素的判断</h2><p>from selenium.webdriver.support import expected_conditions as EC</p><p>expected_condtions提供了16种判断页面元素的方法：</p><p>1.title_is:判断当前页面的title是否完全等于预期字符串，返回布尔值</p><p>2.title_contains:判断当前页面的title是否包含预期字符串，返回布尔值</p><p>3.presence_of_element_located:判断某个元素是否被加到dom树下,不代表该元素一定可见</p><p>4.visibility_of_element_located:判断某个元素是否可见,可见代表元素非隐藏,并且元素的宽和高都不为0</p><p>5.visibility_of:跟上面的方法是一样的,只是上面需要传入locator,这个方法直接传定位到的element就好</p><p>6.presence_of_all_elements_located:判断是否至少一个元素存在于dom树中,举个例子,如果页面上有n个元素的class都是’coumn-md-3’,name只要有一个元素存在,这个方法就返回True</p><p>7.text_to_be_present_in_element:判断某个元素中的text文本是否包含预期字符串</p><p>8.text_to_be_present_in_element_value:判断某个元素中的value属性值是否包含了预期字符串</p><p>9.frame_to_be_availabe_and_switch_to_it:判断该frame是否可以switch进去,如果可以,则返回True并且switch进去,否则返回False</p><p>10.invisibility_of_element_located:判断某个元素是否不存在于dom树或不可见</p><p>11.element_to_be_clickable:判断某个元素是见并且是enable(有效)的,这样的话才叫clickable</p><p>12.staleness_of:等某个元素从dom树下移除,返回True或False</p><p>13.element_to_be_selected:判断某个元素是否被选中,一般用于select下拉表</p><p>14.element_selection_state_to_be:判断某个元素的选中状态是否符合预期</p><p>15.element_located_selection_state_to_be:跟上面的方法一样,只是上面的方法传入定位到的element,这个方法传入locator</p><p>16.alert_is_present:判断页面上是会否存在alert</p><h2 id="appium启动多个移动设备"><a href="#appium启动多个移动设备" class="headerlink" title="appium启动多个移动设备"></a>appium启动多个移动设备</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">## appium初始化的配置</span><br><span class="line"></span><br><span class="line">http://appium.io/docs/en/writing-running-appium/caps/</span><br><span class="line"></span><br><span class="line">## Parallel Android Tests</span><br><span class="line">https://github.com/appium/appium/blob/master/docs/en/advanced-concepts/parallel-tests.md#parallel-android-tests</span><br><span class="line"></span><br><span class="line">## 启动appium服务</span><br><span class="line"></span><br><span class="line">appium -a 127.0.0.1 -p 4730  -bp 8201</span><br><span class="line">appium -a 127.0.0.1 -p 4730 -U HT69B0203366 -bp 8201</span><br><span class="line"></span><br><span class="line">appium -a 127.0.0.1 -p 4740  -bp 8202</span><br><span class="line">appium -a 127.0.0.1 -p 4740 -U HT69L0206174 -bp 8202</span><br><span class="line"></span><br><span class="line">## 卸载</span><br><span class="line">adb uninstall io.appium.uiautomator2.server</span><br><span class="line">adb uninstall io.appium.uiautomator2.server.test</span><br><span class="line">adb uninstall io.appium.settings</span><br><span class="line">## 配置设备</span><br><span class="line">self.desired_caps = &#123;</span><br><span class="line">&#x27;platformName&#x27;: PLATFORM,</span><br><span class="line">&#x27;platformVersion&#x27;: &#x27;8.1.0&#x27;,</span><br><span class="line">&#x27;deviceName&#x27;: &quot;Pixel_XL&quot;,</span><br><span class="line">&#x27;appPackage&#x27;: app_package,</span><br><span class="line">&#x27;appActivity&#x27;: app_activity,</span><br><span class="line">&#x27;automationName&#x27;: &#x27;UIAutomator2&#x27;,</span><br><span class="line">&#x27;noReset&#x27;: True,</span><br><span class="line">&#x27;fullReset&#x27;: False,</span><br><span class="line">&#x27;udid&#x27;: device_id,</span><br><span class="line">&#x27;systemPort&#x27;: 8221, # port from 8200 to 8299</span><br><span class="line">&#x27;unicodeKeyboard&#x27;: True,</span><br><span class="line">&#x27;newCommandTimeout&#x27;: 60*2,</span><br><span class="line">&#x27;resetKeyboard&#x27;: True</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 自动化测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 自动化测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>远程连接服务器的一些配置</title>
      <link href="/post/eb9d357a.html"/>
      <url>/post/eb9d357a.html</url>
      
        <content type="html"><![CDATA[<h3 id="ssh免密连接"><a href="#ssh免密连接" class="headerlink" title="ssh免密连接"></a>ssh免密连接</h3><h4 id="服务器："><a href="#服务器：" class="headerlink" title="服务器："></a>服务器：</h4><p>生成秘钥:</p><p>执行下面命令,默认生成位置是~&#x2F;.ssh</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen</span><br><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;youremail@example.com&quot;</span></span><br></pre></td></tr></table></figure><p>系统会询问你文件名和秘钥密码，可以一路回车过去，会生成两个文件：</p><ul><li>id_rsa 私钥</li><li>id_rsa.pub 公钥</li></ul><h4 id="连接的客户端："><a href="#连接的客户端：" class="headerlink" title="连接的客户端："></a>连接的客户端：</h4><p>修改 vim ~&#x2F;.ssh&#x2F;config，添加如下的信息：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Host nb</span><br><span class="line">User xxx</span><br><span class="line">Port 22</span><br><span class="line">HostName xxxxx</span><br><span class="line">IdentityFile ~/.ssh/id_rsa</span><br><span class="line">IdentitiesOnly yes</span><br><span class="line"></span><br><span class="line">注释：</span><br><span class="line">Host 别名</span><br><span class="line">HostName 指定登录的主机名或IP地址</span><br><span class="line">Port 指定登录的端口号</span><br><span class="line">User 登录用户名</span><br><span class="line">IdentityFile 登录的公钥文件</span><br><span class="line">IdentitiesOnly 只接受SSH key 登录</span><br></pre></td></tr></table></figure><p>把本地的公钥传送到服务器：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-copy-id -i ~/.ssh/id_rsa.pub xxx@&lt;ip&gt;</span><br></pre></td></tr></table></figure><h3 id="个人用户环境配置"><a href="#个人用户环境配置" class="headerlink" title="个人用户环境配置"></a>个人用户环境配置</h3><h4 id="修改rm命令，防止手残误删除"><a href="#修改rm命令，防止手残误删除" class="headerlink" title="修改rm命令，防止手残误删除"></a>修改rm命令，防止手残误删除</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.bashrc</span><br></pre></td></tr></table></figure><p>写入：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p ~/.trash   #在家目录下创建一个.trash文件夹</span><br><span class="line"></span><br><span class="line">alias rm=del        #使用别名del代替rm   </span><br><span class="line"></span><br><span class="line">del()               #函数del，作用：将rm命令修改为mv命令</span><br><span class="line"></span><br><span class="line">&#123;  </span><br><span class="line">  mv $@ ~/.trash/  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line">clearall()          #函数clearall，作用：清空回收站.trash文件夹，y或Y表示确认，n表示取消</span><br><span class="line"></span><br><span class="line">&#123;  </span><br><span class="line">    read -p &quot;clear sure?[Input &#x27;y&#x27; or &#x27;Y&#x27; to confirm. &amp;&amp; Input &#x27;n&#x27; to cancel.]&quot; confirm   </span><br><span class="line">    [ $confirm == &#x27;y&#x27; ] || [ $confirm == &#x27;Y&#x27; ]  &amp;&amp; /bin/rm -rf ~/.trash/*   </span><br><span class="line"></span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>记得souce：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure><h3 id="git配置"><a href="#git配置" class="headerlink" title="git配置"></a>git配置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name <span class="string">&quot;John Doe&quot;</span></span><br><span class="line">$ git config --global user.email johndoe@example.com</span><br></pre></td></tr></table></figure><h4 id="git服务器端免密拉取"><a href="#git服务器端免密拉取" class="headerlink" title="git服务器端免密拉取"></a>git服务器端免密拉取</h4><p>在git上添加ssh证书</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure><p>进入项目文件夹，重新remote一下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote set-url origin git@gitlab.com:xxxxxx/xxx.git</span><br></pre></td></tr></table></figure><h4 id="拉取远程分支，并创建本地分支"><a href="#拉取远程分支，并创建本地分支" class="headerlink" title="拉取远程分支，并创建本地分支:"></a>拉取远程分支，并创建本地分支:</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b dev（本地分支名） origin/dev（远程分支名）</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>mac安装pyenv遇到的问题</title>
      <link href="/post/42c0375b.html"/>
      <url>/post/42c0375b.html</url>
      
        <content type="html"><![CDATA[<h2 id="加速pyenv下载"><a href="#加速pyenv下载" class="headerlink" title="加速pyenv下载"></a>加速pyenv下载</h2><p>将源码下好放在~&#x2F;.pyenv&#x2F;cache目录, pyenv检查有源码就会直接使用cache目录里的源码进行安装.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">mkdir</span> -pv ~/.pyenv/cache</span><br><span class="line">$ wget https://www.python.org/ftp/python/&lt;version&gt;/Python-&lt;version&gt;.tar.xz</span><br><span class="line">$ pyenv install &lt;version&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://www.python.org/ftp/python/3.7.5/Python-3.7.5.tar.xz</span><br></pre></td></tr></table></figure><h2 id="pycahrm无法判断pyenv多个python版本"><a href="#pycahrm无法判断pyenv多个python版本" class="headerlink" title="pycahrm无法判断pyenv多个python版本"></a>pycahrm无法判断pyenv多个python版本</h2><p><a href="https://github.com/concordusapps/pyenv-implict">https://github.com/concordusapps/pyenv-implict</a></p><h2 id="mac无法安装python3解决方案"><a href="#mac无法安装python3解决方案" class="headerlink" title="mac无法安装python3解决方案"></a>mac无法安装python3解决方案</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CFLAGS=<span class="string">&quot;-I<span class="subst">$(brew --prefix openssl)</span>/include -I<span class="subst">$(brew --prefix bzip2)</span>/include -I<span class="subst">$(brew --prefix readline)</span>/include -I<span class="subst">$(xcrun --show-sdk-path)</span>/usr/include&quot;</span> LDFLAGS=<span class="string">&quot;-L<span class="subst">$(brew --prefix openssl)</span>/lib -L<span class="subst">$(brew --prefix readline)</span>/lib -L<span class="subst">$(brew --prefix zlib)</span>/lib -L<span class="subst">$(brew --prefix bzip2)</span>/lib&quot;</span> pyenv install --patch 3.8.0 &lt; &lt;(curl -sSL [https://github.com/python/cpython/commit/8ea6353.patch\?full_index\=1)](https://github.com/python/cpython/commit/8ea6353.patch/?full_index\=1))</span><br></pre></td></tr></table></figure><p><a href="https://koji-kanao.medium.com/install-python-3-8-0-via-pyenv-on-bigsur-b4246987a548">https://koji-kanao.medium.com/install-python-3-8-0-via-pyenv-on-bigsur-b4246987a548</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> pyenv </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Twisted之@inlineCallbacks</title>
      <link href="/post/631ce788.html"/>
      <url>/post/631ce788.html</url>
      
        <content type="html"><![CDATA[<h2 id="inlineCallbacks"><a href="#inlineCallbacks" class="headerlink" title="inlineCallbacks"></a>inlineCallbacks</h2><p>文档：<a href="https://twistedmatrix.com/documents/current/api/twisted.internet.defer.inlineCallbacks.html">https://twistedmatrix.com/documents/current/api/twisted.internet.defer.inlineCallbacks.html</a></p><h3 id="1-inlineCallbacks-是一个decorator，它可以把一个generator函数（使用了yield语句的函数）变成是一系列的异步callbacks的调用。"><a href="#1-inlineCallbacks-是一个decorator，它可以把一个generator函数（使用了yield语句的函数）变成是一系列的异步callbacks的调用。" class="headerlink" title="1.inlineCallbacks 是一个decorator，它可以把一个generator函数（使用了yield语句的函数）变成是一系列的异步callbacks的调用。"></a>1.inlineCallbacks 是一个decorator，它可以把一个generator函数（使用了yield语句的函数）变成是一系列的异步callbacks的调用。</h3><h3 id="2-调用decoratored-by-inlineCallbacks-的函数的时候，我们不需要调用send、next等函数把yield的结果发送给generator，inlineCallbacks负责这一切，保证generator可以顺利跑完（前提是generator本身不抛异常）"><a href="#2-调用decoratored-by-inlineCallbacks-的函数的时候，我们不需要调用send、next等函数把yield的结果发送给generator，inlineCallbacks负责这一切，保证generator可以顺利跑完（前提是generator本身不抛异常）" class="headerlink" title="2.调用decoratored by inlineCallbacks 的函数的时候，我们不需要调用send、next等函数把yield的结果发送给generator，inlineCallbacks负责这一切，保证generator可以顺利跑完（前提是generator本身不抛异常）"></a>2.调用decoratored by inlineCallbacks 的函数的时候，我们不需要调用send、next等函数把yield的结果发送给generator，inlineCallbacks负责这一切，保证generator可以顺利跑完（前提是generator本身不抛异常）</h3><h3 id="3-如果yield的是defer，那么generator会暂停，直到返回的defer被fired。如果defer是success的，则返回defer的结果，否则，就抛异常（普通的Exception-而不是Failue）"><a href="#3-如果yield的是defer，那么generator会暂停，直到返回的defer被fired。如果defer是success的，则返回defer的结果，否则，就抛异常（普通的Exception-而不是Failue）" class="headerlink" title="3.如果yield的是defer，那么generator会暂停，直到返回的defer被fired。如果defer是success的，则返回defer的结果，否则，就抛异常（普通的Exception,而不是Failue）"></a>3.如果yield的是defer，那么generator会暂停，直到返回的defer被fired。如果defer是success的，则返回defer的结果，否则，就抛异常（普通的Exception,而不是Failue）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> twisted.internet <span class="keyword">import</span> reactor, defer</span><br><span class="line"><span class="keyword">from</span> twisted.internet.defer <span class="keyword">import</span> returnValue, inlineCallbacks</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@inlineCallbacks</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">some_func</span>():</span><br><span class="line">    res1 = <span class="keyword">yield</span> ...</span><br><span class="line">    res2 = <span class="keyword">yield</span> ..</span><br><span class="line">    defer.returnValue(res2)</span><br><span class="line">    d = some_func()</span><br><span class="line">    d.addCallback(func1)</span><br><span class="line">    d.addBoth(func2)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>经过inlineCallBacks的修饰，some_funct() 返回的是一个deffer，调用者只需要往这个defer添加callback&#x2F;errback, 剩下的事情就由inlineCallBacks和some_func来协调完成。注意，返回的defer并不是yield 的defer，这个返回的defer仅当generator运行完或者抛一个异常的时候，才会被fired。</p><p>some_func里面有三种跟inlineCallBacks会产生互动的语句：</p><p>1、yield some_expr </p><p>如果yield 的是common value（就是不是defer），那么会直接返回给yield左边的表达式，a &#x3D; yield b 相当于 a &#x3D; b; 如果yield的是defer，那么inlineCallback会保证yield 表达式的值（如res1 ）会得到defer被fired的时候的结果(res or err)</p><p>2、defer.returnVale(some_val)</p><p>实际上是带着some_val 的异常，这个异常被inlineCallbacks捕捉，然后some_val作为defer的结果用来fired 这个defer：defer.callback(some_value)</p><p>3、最后没有使用returnValue() 来返回值，到了some_func执行完</p><p>inlineCallback会捕获一个StopIteration（表示一个generator执行到了the end of function），此时对于some_func来说，是没有值返回的，所以在inlineCallbacks里面，就会调用deffer.callback(None)，然后返回defer。</p><h3 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h3><p>demo01</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> twisted.internet <span class="keyword">import</span> defer</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">scheduler_open</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;scheduler_open&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">_send_catch_log_deferred</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;_send_catch_log_deferred&#x27;</span>, n)</span><br><span class="line">    <span class="keyword">return</span> defer.DeferredList([])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">send_catch_log_deferred</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">return</span> _send_catch_log_deferred(n)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@defer.inlineCallbacks</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">engine_start</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;engine_start&#x27;</span>)</span><br><span class="line">    a = <span class="keyword">yield</span> send_catch_log_deferred(<span class="number">2</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;engine_start~&#x27;</span>, a)</span><br><span class="line">    _closewait = defer.Deferred()</span><br><span class="line">    <span class="keyword">yield</span> _closewait</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;====================&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@defer.inlineCallbacks</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">engine_open_spider</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;engine_open_spider&#x27;</span>)</span><br><span class="line">    x = <span class="keyword">yield</span> scheduler_open()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;engine_open_spider~~&#x27;</span>)</span><br><span class="line">    <span class="keyword">yield</span> send_catch_log_deferred(<span class="number">1</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;engine_open_spider~~~&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@defer.inlineCallbacks</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">crawl</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;crawl&#x27;</span>)</span><br><span class="line">    <span class="keyword">yield</span> engine_open_spider()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;crawl~&#x27;</span>)</span><br><span class="line">    <span class="keyword">yield</span> engine_start()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;crawl~~&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">d = crawl()</span><br></pre></td></tr></table></figure><p>demo02</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> twisted.internet <span class="keyword">import</span> reactor, defer</span><br><span class="line"><span class="keyword">from</span> twisted.internet.defer <span class="keyword">import</span> returnValue, inlineCallbacks</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">succes_callback</span>(<span class="params">res</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;res&quot;</span>, res)</span><br><span class="line"></span><br><span class="line"><span class="meta">@inlineCallbacks</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">demo</span>():</span><br><span class="line">    result = <span class="keyword">yield</span> <span class="number">1</span></span><br><span class="line">    <span class="comment"># print(result)</span></span><br><span class="line">    <span class="comment"># returnValue(result)</span></span><br><span class="line">    <span class="comment"># returnValue(1)</span></span><br><span class="line">    <span class="comment"># yield x</span></span><br><span class="line">    closewait = defer.Deferred()</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">2</span></span><br><span class="line">    <span class="keyword">yield</span> closewait</span><br><span class="line">    <span class="keyword">return</span> <span class="number">3</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    defered = demo()</span><br><span class="line">    defered.addCallback(succes_callback)</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">type</span>(defered))</span><br><span class="line">    <span class="built_in">print</span>(defered)</span><br><span class="line">    <span class="comment"># print(next(s))</span></span><br></pre></td></tr></table></figure><p>demo03</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">from twisted.internet import reactor, defer</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def get_dummpy_data(input_data):</span><br><span class="line">    print(&#x27;get_dummpy_data called&#x27;)</span><br><span class="line">    deferred = defer.Deferred()</span><br><span class="line">    reactor.callLater(2, deferred.callback, input_data * 3)</span><br><span class="line">    return deferred</span><br><span class="line"></span><br><span class="line">def cb_print_data(result):</span><br><span class="line">    print(&#x27;Result received: &#123;&#125;&#x27;.format(result))</span><br><span class="line"></span><br><span class="line"># @defer.inlineCallbacks</span><br><span class="line">def main():</span><br><span class="line">    result = get_dummpy_data(3)</span><br><span class="line">    print(result)</span><br><span class="line">    return result</span><br><span class="line"></span><br><span class="line">d = main()</span><br><span class="line"></span><br><span class="line">d.addCallback(cb_print_data)</span><br><span class="line"></span><br><span class="line">reactor.callLater(4, reactor.stop)</span><br><span class="line">reactor.run()</span><br><span class="line"></span><br><span class="line"># ---------------------------------------------</span><br><span class="line"></span><br><span class="line">from twisted.internet import reactor, defer</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def get_dummpy_data(input_data):</span><br><span class="line">    print(&#x27;get_dummpy_data called&#x27;)</span><br><span class="line">    deferred = defer.Deferred()</span><br><span class="line">    reactor.callLater(2, deferred.callback, input_data * 3)</span><br><span class="line">    return deferred</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def cb_print_data(result):</span><br><span class="line">    print(&#x27;Result received: &#123;&#125;&#x27;.format(result))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@defer.inlineCallbacks</span><br><span class="line">def main():</span><br><span class="line">    result = yield get_dummpy_data(3)</span><br><span class="line">    print(result)</span><br><span class="line">    return result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">d = main()</span><br><span class="line"></span><br><span class="line">d.addCallback(cb_print_data)</span><br><span class="line"></span><br><span class="line">reactor.callLater(4, reactor.stop)</span><br><span class="line">reactor.run()</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Twisted之Thread</title>
      <link href="/post/35c415ad.html"/>
      <url>/post/35c415ad.html</url>
      
        <content type="html"><![CDATA[<h2 id="callFromThread和callInThread区别"><a href="#callFromThread和callInThread区别" class="headerlink" title="callFromThread和callInThread区别"></a>callFromThread和callInThread区别</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> twisted.internet <span class="keyword">import</span> reactor</span><br><span class="line"><span class="keyword">from</span> twisted.internet <span class="keyword">import</span> defer</span><br><span class="line"><span class="keyword">from</span> twisted.internet.interfaces <span class="keyword">import</span> IReactorThreads</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">from</span> twisted.python.threadpool <span class="keyword">import</span> ThreadPool</span><br><span class="line"></span><br><span class="line">logging.basicConfig(</span><br><span class="line">    level=logging.DEBUG,  <span class="comment"># 定义输出到文件的log级别，</span></span><br><span class="line">    <span class="built_in">format</span>=<span class="string">&#x27;%(asctime)s : %(levelname)s &quot;%(threadName)s %(thread)d %(message)s&quot; %(message)s&#x27;</span>,  <span class="comment"># 定义输出log的格式</span></span><br><span class="line">    datefmt=<span class="string">&#x27;%Y-%m-%d %H:%M:%S&#x27;</span>,  <span class="comment"># 时间</span></span><br><span class="line">    <span class="comment"># filename=logFilename,  # log文件名</span></span><br><span class="line">    <span class="comment"># filemode=&#x27;w&#x27;</span></span><br><span class="line">)</span><br><span class="line">log = logging</span><br><span class="line"></span><br><span class="line"><span class="comment"># tp = reactor.getThreadPool()</span></span><br><span class="line"><span class="comment"># tp.adjustPoolsize(2)</span></span><br><span class="line"><span class="comment"># reactor.suggestThreadPoolSize(10)</span></span><br><span class="line"><span class="comment"># reactor.getThreadPool()</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gg</span>(<span class="params">i</span>):</span><br><span class="line">    <span class="keyword">if</span> i == <span class="number">2</span>:</span><br><span class="line">        reactor.stop()</span><br><span class="line">    log.info(i)</span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">    reactor.callFromThread(gg,i)  <span class="comment"># 派生自主线程，会阻塞</span></span><br><span class="line">    <span class="comment"># reactor.callInThread(gg, i)  # 新的线程，不会阻塞</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">log.info(<span class="string">&quot;I want to start&quot;</span>)</span><br><span class="line">reactor.run() <span class="comment"># 启动主线程</span></span><br><span class="line">log.info(<span class="string">&quot;I want to end&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="deferToThread"><a href="#deferToThread" class="headerlink" title="deferToThread"></a>deferToThread</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> print_function</span><br><span class="line"><span class="keyword">from</span> twisted.internet <span class="keyword">import</span> reactor, threads</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">doLongCalculation</span>():</span><br><span class="line">    <span class="comment"># .... do long calculation here ...</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">printResult</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="built_in">print</span>(x)</span><br><span class="line"></span><br><span class="line"><span class="comment"># run method in thread and get result as defer.Deferred</span></span><br><span class="line">d = threads.deferToThread(doLongCalculation)</span><br><span class="line">d.addCallback(printResult)</span><br><span class="line">d.addBoth(<span class="keyword">lambda</span> _: reactor.stop())</span><br><span class="line">reactor.run()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Twisted </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Twisted </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Twisted之各种callback</title>
      <link href="/post/cd11064.html"/>
      <url>/post/cd11064.html</url>
      
        <content type="html"><![CDATA[<h2 id="callLater（延迟执行，多少秒后执行某任务）"><a href="#callLater（延迟执行，多少秒后执行某任务）" class="headerlink" title="callLater（延迟执行，多少秒后执行某任务）"></a>callLater（延迟执行，多少秒后执行某任务）</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> twisted.internet <span class="keyword">import</span> reactor</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">s</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;this will run 3.5 seconds after it was scheduled: %s&#x27;</span> % s)</span><br><span class="line">    reactor.stop()</span><br><span class="line"></span><br><span class="line">reactor.callLater(<span class="number">3.5</span>, f, <span class="string">&#x27;hello, world&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># f() will only be called if the event loop is started.</span></span><br><span class="line"></span><br><span class="line">reactor.run()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="LoopingCall间隔时间执行某任务"><a href="#LoopingCall间隔时间执行某任务" class="headerlink" title="LoopingCall间隔时间执行某任务"></a>LoopingCall间隔时间执行某任务</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> twisted.internet <span class="keyword">import</span> reactor, task</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">s</span>):</span><br><span class="line">    <span class="built_in">print</span>(s)</span><br><span class="line"></span><br><span class="line">loop = task.LoopingCall(f, <span class="string">&#x27;hello, world&#x27;</span>)</span><br><span class="line"><span class="comment"># Start looping every 1 second.</span></span><br><span class="line">loop.start(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">reactor.run()</span><br></pre></td></tr></table></figure><h2 id="各种callback"><a href="#各种callback" class="headerlink" title="各种callback"></a>各种callback</h2><h3 id="ErrorBack"><a href="#ErrorBack" class="headerlink" title="ErrorBack"></a>ErrorBack</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> twisted.internet <span class="keyword">import</span> reactor, defer</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_dummpy_data</span>(<span class="params">input_data</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;get_dummpy_data called&#x27;</span>)</span><br><span class="line">    deferred = defer.Deferred()</span><br><span class="line">    <span class="keyword">if</span> input_data % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">        reactor.callLater(<span class="number">2</span>, deferred.callback, input_data * <span class="number">3</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        reactor.callLater(<span class="number">2</span>, deferred.errback, ValueError(<span class="string">&#x27;You used an odd number!&#x27;</span>))</span><br><span class="line">    <span class="keyword">return</span> deferred</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cb_print_data</span>(<span class="params">result</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Result received: &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(result))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">eb_print_error</span>(<span class="params">failure</span>):</span><br><span class="line">    <span class="built_in">print</span>(failure)</span><br><span class="line"></span><br><span class="line">deferred = get_dummpy_data(<span class="number">2</span>)</span><br><span class="line">deferred.addCallback(cb_print_data)</span><br><span class="line">deferred.addErrback(eb_print_error)</span><br><span class="line"></span><br><span class="line">reactor.callLater(<span class="number">4</span>, reactor.stop)</span><br><span class="line">reactor.run()</span><br></pre></td></tr></table></figure><h3 id="多个callback之间的关系"><a href="#多个callback之间的关系" class="headerlink" title="多个callback之间的关系"></a>多个callback之间的关系</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> twisted.internet <span class="keyword">import</span> reactor, defer</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getDeferredFromSomewhere</span>(<span class="params">num</span>):</span><br><span class="line">    deferred = defer.Deferred()</span><br><span class="line">    <span class="keyword">if</span> num &gt;= <span class="number">5</span>:</span><br><span class="line">        reactor.callLater(<span class="number">0</span>, deferred.callback, num / <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> deferred</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">eb1</span>(<span class="params">res</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;eb1&quot;</span>, res)</span><br><span class="line">    <span class="keyword">raise</span> Exception(<span class="string">&quot;error1&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">eb2</span>(<span class="params">res</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;eb2&quot;</span>, res)</span><br><span class="line">    <span class="keyword">raise</span> Exception(<span class="string">&quot;error2&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cb1</span>(<span class="params">res</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;cb1&quot;</span>, res)</span><br><span class="line">    <span class="keyword">raise</span> Exception(<span class="string">&quot;error3&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cb2</span>(<span class="params">res</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;cb2&quot;</span>, res)</span><br><span class="line">    <span class="keyword">raise</span> Exception(<span class="string">&quot;error4&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">d = getDeferredFromSomewhere(<span class="number">10</span>)</span><br><span class="line">d.addCallback(cb1)</span><br><span class="line">d.addErrback(eb1)</span><br><span class="line">d.addCallback(cb2)</span><br><span class="line">d.addErrback(eb2)</span><br><span class="line"></span><br><span class="line">reactor.callLater(<span class="number">4</span>, reactor.stop)</span><br><span class="line"></span><br><span class="line">reactor.run()</span><br><span class="line"></span><br><span class="line">result:</span><br><span class="line">cb1 <span class="number">3.3333333333333335</span> <span class="comment"># 先打印cb1，正常的结果从callLater传入，再抛出一个异常</span></span><br><span class="line">eb1 [Failure instance: Traceback: &lt;<span class="keyword">class</span> <span class="string">&#x27;Exception&#x27;</span>&gt;: error3 <span class="comment"># eb1接收异常回调</span></span><br><span class="line">eb2 [Failure instance: Traceback: &lt;<span class="keyword">class</span> <span class="string">&#x27;Exception&#x27;</span>&gt;: error1 <span class="comment"># eb2接收异常回调</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="DeferredList"><a href="#DeferredList" class="headerlink" title="DeferredList"></a>DeferredList</h2><p>当碰到需要等待多个 deferred 执行完毕的时候，我们可以使用 DeferredList</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dl = defer.DeferredList([deferred1, deferred2, deferred3])</span><br></pre></td></tr></table></figure><p>看个例子</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">from twisted.internet import defer</span><br><span class="line"></span><br><span class="line">def print_result(result):</span><br><span class="line">    for (success, value) in result:</span><br><span class="line">        if success:</span><br><span class="line">            print(&#x27;Success:&#x27;, value)</span><br><span class="line">        else:</span><br><span class="line">            print(&#x27;Failure:&#x27;, value.getErrorMessage())</span><br><span class="line"></span><br><span class="line">deferred1 = defer.Deferred()</span><br><span class="line">deferred2 = defer.Deferred()</span><br><span class="line">deferred3 = defer.Deferred()</span><br><span class="line"></span><br><span class="line">dl = defer.DeferredList([deferred1, deferred2, deferred3], consumeErrors=True)</span><br><span class="line"></span><br><span class="line">dl.addCallback(print_result)</span><br><span class="line"></span><br><span class="line">deferred1.callback(&#x27;one&#x27;)</span><br><span class="line">deferred2.errback(Exception(&#x27;bang!&#x27;))</span><br><span class="line">deferred3.callback(&#x27;three&#x27;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Twisted </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Twisted </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Twisted之twisted.web.client.Agent</title>
      <link href="/post/d78ab318.html"/>
      <url>/post/d78ab318.html</url>
      
        <content type="html"><![CDATA[<h2 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h2><p><a href="https://twistedmatrix.com/documents/current/api/twisted.web.client.html">https://twistedmatrix.com/documents/current/api/twisted.web.client.html</a></p><h2 id="Agent的用法"><a href="#Agent的用法" class="headerlink" title="Agent的用法"></a>Agent的用法</h2><p><code>Agent is a very basic HTTP client. It supports HTTP and HTTPS scheme URIs.</code></p><h3 id="demo01"><a href="#demo01" class="headerlink" title="demo01"></a>demo01</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> scrapy.core.downloader.contextfactory <span class="keyword">import</span> ScrapyClientContextFactory</span><br><span class="line"><span class="keyword">from</span> twisted.internet <span class="keyword">import</span> reactor</span><br><span class="line"><span class="keyword">from</span> twisted.web.client <span class="keyword">import</span> Agent</span><br><span class="line"><span class="keyword">from</span> twisted.web.http_headers <span class="keyword">import</span> Headers</span><br><span class="line"><span class="keyword">from</span> twisted.internet.ssl <span class="keyword">import</span> ClientContextFactory</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">WebClientContextFactory</span>(<span class="title class_ inherited__">ClientContextFactory</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">getContext</span>(<span class="params">self, hostname, port</span>):</span><br><span class="line">        <span class="built_in">print</span>( <span class="string">&quot;getting context for &#123;&#125;:&#123;&#125;&quot;</span>.<span class="built_in">format</span>( hostname, port ) )</span><br><span class="line">        <span class="comment"># <span class="doctag">FIXME:</span> no attempt to verify certificates!</span></span><br><span class="line">        <span class="keyword">return</span> ClientContextFactory.getContext(self)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 成功回调函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">success_callback</span>(<span class="params">response</span>):</span><br><span class="line">    <span class="built_in">print</span>(response.__dict__)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Response version:&#x27;</span>, response.version)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Response code:&#x27;</span>, response.code)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Response phrase:&#x27;</span>, response.phrase)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Response headers:&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Response received&#x27;</span>, response)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 失败回调函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fail_callback</span>(<span class="params">err</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Something error&#x27;</span>, err)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">to_bytes</span>(<span class="params">text, encoding=<span class="literal">None</span>, errors=<span class="string">&#x27;strict&#x27;</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return the binary representation of ``text``. If ``text``</span></span><br><span class="line"><span class="string">    is already a bytes object, return it as-is.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">isinstance</span>(text, <span class="built_in">bytes</span>):</span><br><span class="line">        <span class="keyword">return</span> text</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(text, <span class="built_in">str</span>):</span><br><span class="line">        <span class="keyword">raise</span> TypeError(<span class="string">&#x27;to_bytes must receive a str or bytes &#x27;</span></span><br><span class="line">                        <span class="string">&#x27;object, got %s&#x27;</span> % <span class="built_in">type</span>(text).__name__)</span><br><span class="line">    <span class="keyword">if</span> encoding <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        encoding = <span class="string">&#x27;utf-8&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> text.encode(encoding, errors)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_request</span>(<span class="params">url, method=<span class="string">&quot;GET&quot;</span>, timeout=<span class="number">10</span></span>):</span><br><span class="line">    <span class="comment"># 创建agent对象</span></span><br><span class="line">    agent = Agent(reactor, contextFactory=ScrapyClientContextFactory())</span><br><span class="line">    d = agent.request(</span><br><span class="line">        to_bytes(method, encoding=<span class="string">&#x27;ascii&#x27;</span>),</span><br><span class="line">        to_bytes(url),</span><br><span class="line">        Headers(&#123;<span class="string">b&#x27;accept&#x27;</span>: [<span class="string">b&#x27;text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8&#x27;</span>],</span><br><span class="line">                 <span class="string">b&#x27;accept-language&#x27;</span>: [<span class="string">b&#x27;en&#x27;</span>], <span class="string">b&#x27;user-agent&#x27;</span>: [<span class="string">b&#x27;Scrapy/2.2.1 (+https://scrapy.org)&#x27;</span>],</span><br><span class="line">                 <span class="string">b&#x27;accept-encoding&#x27;</span>: [<span class="string">b&#x27;gzip, deflate&#x27;</span>]&#125;),</span><br><span class="line">        <span class="literal">None</span>)</span><br><span class="line">    d.addCallback(success_callback)</span><br><span class="line">    d.addErrback(fail_callback)</span><br><span class="line">    timeout_cl = reactor.callLater(timeout, d.cancel)</span><br><span class="line">    <span class="built_in">print</span>(timeout_cl.active())</span><br><span class="line">    d.addBoth(<span class="keyword">lambda</span> _: reactor.stop())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    url = <span class="string">&quot;https://blog.csdn.net&quot;</span></span><br><span class="line">    get_request(url=url)</span><br><span class="line">    reactor.run()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="demo02"><a href="#demo02" class="headerlink" title="demo02"></a>demo02</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> scrapy.core.downloader.contextfactory <span class="keyword">import</span> ScrapyClientContextFactory, BrowserLikeContextFactory</span><br><span class="line"><span class="keyword">from</span> twisted.internet <span class="keyword">import</span> reactor</span><br><span class="line"><span class="keyword">from</span> twisted.web.client <span class="keyword">import</span> Agent</span><br><span class="line"><span class="keyword">from</span> twisted.web.http_headers <span class="keyword">import</span> Headers</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 成功回调函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">success_callback</span>(<span class="params">response</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Response version:&#x27;</span>, response.version)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Response code:&#x27;</span>, response.code)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Response phrase:&#x27;</span>, response.phrase)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Response headers:&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Response received&#x27;</span>, response)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 失败回调函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fail_callback</span>(<span class="params">err</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Something error&#x27;</span>, err)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">do_something</span>(<span class="params">response, request</span>):</span><br><span class="line">    <span class="built_in">print</span>(request.__dict__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">to_bytes</span>(<span class="params">text, encoding=<span class="literal">None</span>, errors=<span class="string">&#x27;strict&#x27;</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Return the binary representation of ``text``. If ``text``</span></span><br><span class="line"><span class="string">    is already a bytes object, return it as-is.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">isinstance</span>(text, <span class="built_in">bytes</span>):</span><br><span class="line">        <span class="keyword">return</span> text</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(text, <span class="built_in">str</span>):</span><br><span class="line">        <span class="keyword">raise</span> TypeError(<span class="string">&#x27;to_bytes must receive a str or bytes &#x27;</span></span><br><span class="line">                        <span class="string">&#x27;object, got %s&#x27;</span> % <span class="built_in">type</span>(text).__name__)</span><br><span class="line">    <span class="keyword">if</span> encoding <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        encoding = <span class="string">&#x27;utf-8&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> text.encode(encoding, errors)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_request</span>(<span class="params">url, method=<span class="string">&quot;GET&quot;</span>, timeout=<span class="number">10</span></span>):</span><br><span class="line">    <span class="comment"># 创建agent对象</span></span><br><span class="line">    <span class="comment"># agent = Agent(reactor)</span></span><br><span class="line">    agent = Agent(reactor, contextFactory=ScrapyClientContextFactory())</span><br><span class="line">    agent = Agent(reactor, contextFactory=BrowserLikeContextFactory())</span><br><span class="line">    d = agent.request(</span><br><span class="line">        to_bytes(method, encoding=<span class="string">&#x27;ascii&#x27;</span>),</span><br><span class="line">        to_bytes(url),</span><br><span class="line">        Headers(&#123;<span class="string">b&#x27;accept&#x27;</span>: [<span class="string">b&#x27;text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8&#x27;</span>],</span><br><span class="line">                 <span class="string">b&#x27;accept-language&#x27;</span>: [<span class="string">b&#x27;en&#x27;</span>], <span class="string">b&#x27;user-agent&#x27;</span>: [<span class="string">b&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.70 Safari/537.36&#x27;</span>],</span><br><span class="line">                 <span class="string">b&#x27;accept-encoding&#x27;</span>: [<span class="string">b&#x27;gzip, deflate&#x27;</span>]&#125;),</span><br><span class="line">        <span class="literal">None</span>)</span><br><span class="line">    d.addCallback(success_callback)</span><br><span class="line">    d.addCallback(do_something, Headers)</span><br><span class="line">    d.addErrback(fail_callback)</span><br><span class="line">    timeout_cl = reactor.callLater(timeout, d.cancel)</span><br><span class="line">    <span class="built_in">print</span>(timeout_cl.active())</span><br><span class="line">    d.addBoth(<span class="keyword">lambda</span> _: reactor.stop())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    url = <span class="string">&quot;https://blog.csdn.net&quot;</span></span><br><span class="line">    get_request(url=url)</span><br><span class="line">    reactor.run()</span><br></pre></td></tr></table></figure><h3 id="demo03"><a href="#demo03" class="headerlink" title="demo03"></a>demo03</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># *_*coding:utf-8 *_*</span></span><br><span class="line"><span class="keyword">from</span> pprint <span class="keyword">import</span> pformat</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> scrapy.core.downloader.contextfactory <span class="keyword">import</span> ScrapyClientContextFactory</span><br><span class="line"><span class="keyword">from</span> twisted.internet <span class="keyword">import</span> reactor</span><br><span class="line"><span class="keyword">from</span> twisted.internet.defer <span class="keyword">import</span> Deferred, DeferredList</span><br><span class="line"><span class="keyword">from</span> twisted.web.client <span class="keyword">import</span> Agent</span><br><span class="line"><span class="keyword">from</span> twisted.web.http_headers <span class="keyword">import</span> Headers</span><br><span class="line"><span class="keyword">from</span> twisted.internet.protocol <span class="keyword">import</span> Protocol</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个协议Protocol类，用来收集数据</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BodyCollector</span>(<span class="title class_ inherited__">Protocol</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, finished, uri</span>):</span><br><span class="line">        self.finished = finished  <span class="comment"># 共外部定义的defered对象，用于数据接收完毕后，触发相应回调函数</span></span><br><span class="line">        self.uri = uri</span><br><span class="line">        self.body = <span class="built_in">bytes</span>()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">dataReceived</span>(<span class="params">self, data</span>):</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;每接收到一次数据，该方法就会被调用一次&#x27;&#x27;&#x27;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;data bytes: &quot;</span>, self.uri, data)</span><br><span class="line">        self.body += data</span><br><span class="line">    <span class="comment"># 收集所有的的响应数据</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">connectionLost</span>(<span class="params">self, reason</span>):</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        当socket连接关闭后，该方法会被调用</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;已完成数据的收集:&#x27;</span>, reason.getErrorMessage())</span><br><span class="line">        <span class="comment"># 触发对应的回调函数</span></span><br><span class="line">        self.finished.callback(self.body)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">succes_callback</span>(<span class="params">response</span>):</span><br><span class="line">    <span class="comment"># print(&#x27;Response version:&#x27;, response.version)</span></span><br><span class="line">    <span class="comment"># print(&#x27;Response code:&#x27;, response.code)</span></span><br><span class="line">    <span class="comment"># print(&#x27;Response phrase:&#x27;, response.phrase)</span></span><br><span class="line">    <span class="comment"># print(&#x27;Response headers:&#x27;)</span></span><br><span class="line">    finished = Deferred()</span><br><span class="line">    collector = BodyCollector(finished, response.request.absoluteURI)</span><br><span class="line">    response.deliverBody(collector)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">handle_body</span>(<span class="params">body</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;body size &quot;</span>, <span class="built_in">len</span>(body))</span><br><span class="line">    finished.addCallback(handle_body)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">error_callback</span>(<span class="params">error</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;error back &quot;</span>, pformat(error))</span><br><span class="line"></span><br><span class="line">    finished.addErrback(error_callback)</span><br><span class="line">    <span class="keyword">return</span> finished</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建agent对象</span></span><br><span class="line">agent = Agent(reactor, contextFactory=ScrapyClientContextFactory())</span><br><span class="line"></span><br><span class="line">d_list = []</span><br><span class="line"></span><br><span class="line">url_list = [</span><br><span class="line">    <span class="string">b&quot;https://www.baidu.com/&quot;</span>,</span><br><span class="line">    <span class="comment"># b&quot;http://www.qq.com/&quot;,</span></span><br><span class="line">    <span class="comment"># b&quot;http://www.163.com/&quot;,</span></span><br><span class="line">    <span class="comment"># b&quot;http://www.sina.com/&quot;,</span></span><br><span class="line">    <span class="comment"># b&quot;http://www.sougou.com/&quot;,</span></span><br><span class="line">]</span><br><span class="line"><span class="keyword">for</span> url <span class="keyword">in</span> url_list:</span><br><span class="line">    d = agent.request(</span><br><span class="line">        <span class="string">b&#x27;GET&#x27;</span>,</span><br><span class="line">        url,</span><br><span class="line">        Headers(</span><br><span class="line">            &#123;<span class="string">&#x27;User-Agent&#x27;</span>: [<span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36&#x27;</span>]&#125;),</span><br><span class="line">        <span class="literal">None</span>  <span class="comment"># post请求的body</span></span><br><span class="line">    )</span><br><span class="line">    <span class="comment"># 设置回调：如果任务成功执行，那么将会调用该回调函数</span></span><br><span class="line">    d.addCallback(succes_callback)</span><br><span class="line">    d_list.append(d)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># # 设置失败回调：如果任务执行出现异常或者成功回调函数出现异常， 那么将会调用</span></span><br><span class="line"><span class="comment"># defered.addErrback(error_callback)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">callback_shutdown</span>(<span class="params">ignored</span>):</span><br><span class="line">    reactor.stop()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">dl = DeferredList(d_list)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置最终的回调：无论成功与否。都会调用</span></span><br><span class="line">dl.addBoth(callback_shutdown)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动事件循环</span></span><br><span class="line">reactor.run()</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Twisted </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Twisted </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Twisted简介</title>
      <link href="/post/86a0063b.html"/>
      <url>/post/86a0063b.html</url>
      
        <content type="html"><![CDATA[<h3 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1.介绍"></a>1.介绍</h3><p>​熟悉scrpay爬虫框架的人，对Twisted应该不太陌生，scrapy底层请求就是基于Twisted框架实现的。</p><p>​<strong>官方定义：</strong></p><p>Twisted is an event-based framework for internet applications, supporting Python 2.7 and Python 3.5+. It includes modules for many different purposes, including the following:</p><ul><li><code>twisted.web</code>: HTTP clients and servers, HTML templating, and a WSGI server</li><li><code>twisted.conch</code>: SSHv2 and Telnet clients and servers and terminal emulators</li><li><code>twisted.words</code>: Clients and servers for IRC, XMPP, and other IM protocols</li><li><code>twisted.mail</code>: IMAPv4, POP3, SMTP clients and servers</li><li><code>twisted.positioning</code>: Tools for communicating with NMEA-compatible GPS receivers</li><li><code>twisted.names</code>: DNS client and tools for making your own DNS servers</li><li><code>twisted.trial</code>: A unit testing framework that integrates well with Twisted-based code.</li></ul><p>Twisted supports all major system event loops – <code>select</code> (all platforms), <code>poll</code> (most POSIX platforms), <code>epoll</code> (Linux), <code>kqueue</code> (FreeBSD, macOS), IOCP (Windows), and various GUI event loops (GTK+2&#x2F;3, Qt, wxWidgets). Third-party reactors can plug into Twisted, and provide support for additional event loops.</p><h3 id="2-核心模块："><a href="#2-核心模块：" class="headerlink" title="2.核心模块："></a>2.核心模块：</h3><h4 id="2-1-reactor模式"><a href="#2-1-reactor模式" class="headerlink" title="2.1 reactor模式"></a>2.1 reactor模式</h4><p><a href="https://twisted.org/documents/12.1.0/core/howto/reactor-basics.html">https://twisted.org/documents/12.1.0/core/howto/reactor-basics.html</a><br><img src="/../images/Twisted/twsited-reactor.png" alt="twsited-reactor"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">time_until_next_timed_event</span>():</span><br><span class="line">    <span class="comment"># timed_events is the list of events scheduled with reactor.callLater</span></span><br><span class="line">    now = time.time()</span><br><span class="line">    timed_events.sort(key=<span class="keyword">lambda</span> event: event.desired_time)</span><br><span class="line">    soonest_event = timed_events[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">return</span> soonest_event.desired_time - now</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">not</span> loop.stopped:</span><br><span class="line">    <span class="comment"># Each of these possible events are functions that the reactor might call on your objects: dataReceived, buildProtocol, resumeProducing</span></span><br><span class="line">    timeout = time_until_next_timed_event()</span><br><span class="line">    <span class="comment"># events is simply a list of an abstract Event class, which has a process method that each specific type of event needs to fill out.</span></span><br><span class="line">    events = wait_for_events(timeout)</span><br><span class="line">    <span class="comment"># wait_for_events, stopped blocking. However, we don&#x27;t know how many timed events we might need to execute based on how long it was &quot;asleep&quot; for. We might have slept for the full timeout if nothign was going on, but if lots of connections were active we might have slept for effectively no time at all. So we check the current time (&quot;now()&quot;), and we add to the list of events we need to process, every timed event with a desired_time that is at, or before, the present time.</span></span><br><span class="line">    events += timed_events_until(now())</span><br><span class="line">    <span class="keyword">for</span> event <span class="keyword">in</span> events:</span><br><span class="line">        <span class="comment"># event.process here might mean calling socket.recv() and then yourProtocol.dataReceived with the result</span></span><br><span class="line">        event.process()</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li>我们的代码与Twisted代码运行在同一个线程中。</li><li>当我们的代码运行时，Twisted代码是处于暂停状态的。</li><li>同样，当Twisted代码处于运行状态时，我们的代码处于暂停状态。</li><li>reactor事件循环会在我们的回调函数返回后恢复运行。</li><li>在一个回调函数执行过程中，实际上Twisted的循环是被有效地阻塞在我们的代码上的。因此，<strong>我们应该确保回调函数不要浪费时间（尽快返回）</strong>。特别需要强调的是，我们应该尽量避免在回调函数中使用会阻塞I&#x2F;O的函数。否则，我们将失去所有使用reactor所带来的优势</li></ol><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><ol><li>Twisted的reactor只有通过调用reactor.run()才启动。</li><li>reactor循环是在其开始的线程中运行，也就是运行在主线程中。</li><li>一旦启动，reactor就会在程序的控制下（或者具体在一个启动它的线程的控制下）一直运行下去。</li><li>reactor空转时并不会消耗任何CPU的资源。</li><li>并不需要显式的创建reactor，只需要引入就OK了。</li></ol><h4 id="2-2-twisted抽象层之Transpotts对象"><a href="#2-2-twisted抽象层之Transpotts对象" class="headerlink" title="2.2.twisted抽象层之Transpotts对象"></a>2.2.twisted抽象层之Transpotts对象</h4><p>​一个Twisted的Transport对象具体代表-个可以收发字节的单条连接。其实也就是代表一个TCP或UDP的套接字连接的抽象，每一次数据的收发就是一 次具体 的&#x2F;O操作。因此twisted其实就是通过利用&#x2F;O多路复用控制每一个套接字的每次数据收发操作。实现的异步I&#x2F;O，这也是前面几个模块(asyncio、tornado等)的底层 原理, ;只不过twisted将其开放出来，可供我们直接控制。但是一般情况下， 我们不会自己实现一个Transport, 而是直接使用twisted已经帮我们实现的类。</p><h4 id="2-3-twisted抽象层之Protocols对象"><a href="#2-3-twisted抽象层之Protocols对象" class="headerlink" title="2.3.twisted抽象层之Protocols对象"></a>2.3.<strong>twisted抽象层之Protocols对象</strong></h4><p>​Protocols对象代表的就是一个Transports对象的连接所对应的协议的抽象，比如HTTP、FTP或自定义协议等协议，为一个具体的连接提供协议解析。程序每建立一条连接， 都需要一个协议实例。 也就是说，每一个Transports对象都会有一 个Protocols对象。Twisted内部已经内置了许多Protocols协议对象，如后面将用到封装了HTTP协议的Protocols对象。</p><h4 id="2-4-twisted抽象层之Protocol-Factories"><a href="#2-4-twisted抽象层之Protocol-Factories" class="headerlink" title="2.4.twisted抽象层之Protocol Factories"></a>2.4.twisted抽象层之Protocol Factories</h4><p>​由于我们可以自己定义Protocol类，并且要将其交给twisted来控制使用，因此twlsted需要一 种方式来为- -个新的连接创建- -个合适的协议。这就是Protocol Factores的作用。</p><h4 id="2-5-twisted中的回调-Deferred"><a href="#2-5-twisted中的回调-Deferred" class="headerlink" title="2.5.twisted中的回调: Deferred"></a>2.5.twisted中的回调: Deferred</h4><p>​用于回调在异步程序中大量被使用，并且正确的使用这一-机制需要一-些技巧。因此，Twisted开 发者设计了一种抽象机制Deferred-让程序员在使用回调时更加简便。</p><p><a href="https://twistedmatrix.com/documents/current/core/howto/defer.html">https://twistedmatrix.com/documents/current/core/howto/defer.html</a><br><a href="https://twistedmatrix.com/documents/current/api/twisted.internet.defer.html">https://twistedmatrix.com/documents/current/api/twisted.internet.defer.html</a></p><h3 id="一些方法"><a href="#一些方法" class="headerlink" title="一些方法"></a>一些方法</h3><ul><li><p>reactor.callInThread： 可以新起一个线程，用来处理耗时逻辑，需注意线程安全</p></li><li><p>reactor.callFromThread： 和上面相反，在别的线程调用，去回到reactor主线程执行逻辑</p></li><li><p>threads.deferToThread： 将任务放到线程池去执行以免阻塞主线程，特点是返回的是deferred对象，这样我们可以加入回调逻辑</p></li><li><p>reactor.suggestThreadPoolSize: 建议用于调度传递给IReactorInThreads.callInThread的函数的内部线程池的大小。</p></li><li><p>getThreadPool：返回 IReactorInThreads.callInThread 使用的线程池，如有必要，请首先创建它</p></li><li><p>reactor.run&#x2F;stop 启动、停止主线程</p></li><li><p>reactor.callLater 延迟执行</p></li><li><p>reactor.callWhenRunning reactor运行之后运行…</p></li><li><p>reactor.callFromRunning 立刻执行</p></li><li><p>blockingCallFromThread：Run a function in the reactor from a thread, and wait for the result synchronously. If the function returns a <a href="https://twistedmatrix.com/documents/20.3.0/api/twisted.internet.defer.Deferred.html"><code>Deferred</code></a>, wait for its result and return that.</p></li><li><p><a href="https://twistedmatrix.com/documents/current/api/twisted.internet.interfaces.IReactorThreads.html">https://twistedmatrix.com/documents/current/api/twisted.internet.interfaces.IReactorThreads.html</a></p></li><li><p><a href="https://twistedmatrix.com/documents/current/core/howto/threading.html#auto3">https://twistedmatrix.com/documents/current/core/howto/threading.html#auto3</a></p></li><li><p><a href="https://twistedmatrix.com/documents/current/core/howto/index.html">https://twistedmatrix.com/documents/current/core/howto/index.html</a></p></li><li><p><a href="https://twistedmatrix.com/documents/current/web/howto/client.html">https://twistedmatrix.com/documents/current/web/howto/client.html</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Twisted </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Twisted </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>android刷机教程</title>
      <link href="/post/574e8458.html"/>
      <url>/post/574e8458.html</url>
      
        <content type="html"><![CDATA[<h1 id="刷机相关的词汇解释"><a href="#刷机相关的词汇解释" class="headerlink" title="刷机相关的词汇解释"></a>刷机相关的词汇解释</h1><h2 id="权限"><a href="#权限" class="headerlink" title="权限"></a>权限</h2><ul><li>第三方软件权限（低）<ul><li>比如，每次app启动都会向用户请求读取信息，当然流氓软件你不同意，APP直接不让你启动</li></ul></li><li>用户权限（中）<ul><li>基本的增删改查，安装app，卸载app，设置登陆密码，搜索浏览本地文件等</li></ul></li><li>Root权限（超级用户，最高）<ul><li>至高无上的权限</li></ul></li></ul><h2 id="分区"><a href="#分区" class="headerlink" title="分区"></a>分区</h2><ul><li>Boot分区<ul><li>启动和引导文件<ul><li>Kernel（内核）</li><li>Ramdisk（虚拟内存）</li></ul></li></ul></li><li>System分区<ul><li>系统分区<ul><li>操作系统和预装的软件</li></ul></li></ul></li><li>Data分区<ul><li>用户数据，包括应用，音视频，图片，文档，系统设置等</li></ul></li><li>Cache<ul><li>缓存</li></ul></li><li>Recovery<ul><li>恢复和更新其他分区的内容</li></ul></li></ul><p>Android7.0以后分为A，B区（Boot，System）<br>A区：日常使用的分区<br>B区：备用分区</p><p><strong>…后续还可能会改变</strong></p><h2 id="Bootloader锁"><a href="#Bootloader锁" class="headerlink" title="Bootloader锁"></a>Bootloader锁</h2><p>Bootloader中文名称为“启动加载”。在嵌入式操作系统中，BootLoader是在操作系统内核运行之前运行，它可以初始化硬件设备、建立内存空间映射图，从而将系统的软硬件环境带到一个合适状态，以便为最终调用操作系统内核准备好正确的环境。</p><p>Bootloader引导启动时检测即将被启动的东西（recovery.img &#x2F; boot.img）的签名是否是厂商的，如果不是的话就拒绝启动。</p><h2 id="Recovery"><a href="#Recovery" class="headerlink" title="Recovery"></a>Recovery</h2><p>Recovery是Android手机备份功能，指的是一种可以对安卓机内部的数据或系统进行修改的模式（类似于windows PE或DOS）。在这个模式下可以，对已有的系统进行备份或升级，也可以在此恢复出厂设置。</p><p>刷入第三方的Recovery，将获得更多的功能，并且可以刷入第三方rom，官方自带则不行。</p><p><strong>进入recovery的方法：</strong></p><p>1、将手机完全关机后，按住音量键下（上）+电源键，进入bootloader界面；</p><p>2、按音量键将光标移动到recovery那一行；</p><p>3、按电源键，之后手机会自动重启进入recovery模式。</p><p>其中音量键为光标选择键，可以用来移动光标，电源键则是确认键。</p><h3 id="主界面"><a href="#主界面" class="headerlink" title="主界面"></a>主界面</h3><p><em>reboot system now</em>：重启手机（刷机完毕选择此项就能重新启动系统）</p><p><em>apply SDcard：update.zip</em>：安装存储卡中的update.zip升级包（你可以把刷机包命名为update.zip然后用这个选项直接升级）</p><p><em>wipe data&#x2F;factory reset</em>：清除用户数据并恢复出厂设置（刷机前必须执行的选项）</p><p><em>wipe cache partition</em>：清除系统缓存（刷机前执行）（系统出问题也可尝试此选项，一般能够解决）</p><p><em>install zip from SDcard</em>：从SDcard上安装zip升级包（可以执行任意名称的zip升级包，不限制升级包名称）</p><p><em>backup and restore</em>：备份和还原系统（作用和原理如同电脑上的Ghost一键备份和还原）</p><p><em>mounts and storage</em>：挂载和存储选项（详细功能见下面的解释）</p><p><em>advanced</em>：高级设置</p><h2 id="Fastboot"><a href="#Fastboot" class="headerlink" title="Fastboot"></a>Fastboot</h2><p>Fastboot，英语翻译意思是快速启动。在安卓手机中fastboot是一种比recovery更底层的刷机模式（俗称引导模式）。就是使用USB数据线连接手机的一种刷机模式。相对于某些系统（如iOS）卡刷来说，线刷更可靠，安全。</p><h3 id="准备工具"><a href="#准备工具" class="headerlink" title="准备工具"></a>准备工具</h3><ol><li>fastboot工具(安卓工具箱中有提供)</li><li>自己手机能用的boot.img、recovery.img文件。</li></ol><h3 id="具体步骤"><a href="#具体步骤" class="headerlink" title="具体步骤"></a>具体步骤</h3><p>一、手机进入fastboot模式并用数据线连接电脑，安装好相关驱动程序。</p><p>二、解压下载好的fastboot工具，如解压到D:&#x2F;fastboot&#x2F;。</p><p>三、将准备好的boot.img、recovery.img文件文件也放到D:&#x2F;fastboot&#x2F;中。</p><p>四、打开命令行工具cmd，执行如下命令进入到fastboot所在目录中</p><p>d: 回车</p><p>cd fastboot 回车</p><p>fastboot devices 回车</p><p>如果它列出了你的手机，如HT*******，说明手机连接好了</p><p>执行以下命令刷入boot与recovery：</p><p>fastboot flash recovery recovery.img 回车</p><p>等待OKAY （这里是刷新recovery）</p><p>fastboot flash boot boot.img 回车</p><p>等待OKAY （这里是刷新boot）</p><h2 id="双清-x2F-三清-x2F-四清"><a href="#双清-x2F-三清-x2F-四清" class="headerlink" title="双清&#x2F;三清&#x2F;四清"></a>双清&#x2F;三清&#x2F;四清</h2><p>双清就是清除Data、Cache两个分区，这个操作会导致你在系统刷好后安装的普通APP通通被清空，但并不会清空sdcard中的数据（也就是你日常存文件的那个目录），相当于恢复出厂设置。</p><p>三清就是在双清的基础上把Dalvik Cache也给清了，某些特定场景下可以解决程序崩溃的问题。</p><p>四清通常指的是在三清的基础上连System分区也给清了，这会导致你的系统彻底消失，类似于在电脑上把系统盘格式化了一样，通常并不需要进行这个操作。</p><h2 id="boot-img"><a href="#boot-img" class="headerlink" title="boot.img"></a>boot.img</h2><p>boot.img是Android系统启动所必须加载的文件。简单的说，boot.img包含两部分，分别为kernel 和ramdisk。</p><h2 id="twrp-img"><a href="#twrp-img" class="headerlink" title="twrp.img"></a>twrp.img</h2><p>TWRP实际上就是替换了原机自带Recovery的第三方程序</p><h1 id="常用的命名"><a href="#常用的命名" class="headerlink" title="常用的命名"></a>常用的命名</h1><h2 id="adb命令"><a href="#adb命令" class="headerlink" title="adb命令"></a>adb命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">adb devices                         显示设备信息</span><br><span class="line">adb install 123.apk                 安装一个软件</span><br><span class="line">adb uninstall -k 123.apk            删除一个软件</span><br><span class="line">adb shell                           进入shell环境</span><br><span class="line">adb push c:/1.txt /sdcard/sdir/     向设备推送文件</span><br><span class="line">adb pull /sdcard/1.txt C:/          从设备取回文件</span><br><span class="line">adb reboot bootloader/recovery      使手机重启进入BL或RE</span><br><span class="line">adb reboot recovery </span><br></pre></td></tr></table></figure><h2 id="fastboot命令"><a href="#fastboot命令" class="headerlink" title="fastboot命令"></a>fastboot命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入fastboot</span></span><br><span class="line">adb  reboot  fastboot </span><br><span class="line"><span class="comment"># 刷入第三方的recovery，分区</span></span><br><span class="line">fastboot flash recovery recovery.img</span><br><span class="line"><span class="comment"># 重启手机</span></span><br><span class="line">adb reboot</span><br><span class="line"><span class="comment"># 重启到Recovery界面</span></span><br><span class="line">adb reboot recovery</span><br><span class="line"><span class="comment"># 重启到bootloader界面</span></span><br><span class="line">adb reboot bootloader</span><br><span class="line"><span class="comment"># 擦除分区</span></span><br><span class="line">fastboot erase 分区名</span><br><span class="line">比如：清除system分区 fastboot erase system</span><br></pre></td></tr></table></figure><h1 id="刷机流程"><a href="#刷机流程" class="headerlink" title="刷机流程"></a>刷机流程</h1><h2 id="twrp"><a href="#twrp" class="headerlink" title="twrp"></a>twrp</h2><p><strong>TWRP实际上就是替换了原机自带Recovery的第三方程序</strong></p><p><a href="https://twrp.me/">https://twrp.me/</a></p><h3 id="1-打开手机的开发者模式"><a href="#1-打开手机的开发者模式" class="headerlink" title="1.打开手机的开发者模式"></a>1.打开手机的开发者模式</h3><p>提前下载一个ADB工具</p><h3 id="1-解锁bootloader"><a href="#1-解锁bootloader" class="headerlink" title="1.解锁bootloader"></a>1.解锁bootloader</h3><p>解锁bootloader(bl锁)的风险和可行性<br>小米（官方申请），oneplus（直接命令,进入fastboot，fastboot oem unlock），samsung，sony，moto解锁教学<br>难解锁的机型：<br>华为，荣耀，oppo，realme，vivo<br>推荐：<br>小米，oneplus</p><p><strong>注意：</strong><br>非必要不解锁，解锁可能带来如下的风险：</p><ol><li>失去厂家保修</li><li>失去一些原生功能</li><li>清除系统数据</li><li>会存在一些安全问题，密码泄露，个人信息泄露等</li></ol><h3 id="2-申请root权限（线刷跳过）"><a href="#2-申请root权限（线刷跳过）" class="headerlink" title="2.申请root权限（线刷跳过）"></a>2.申请root权限（线刷跳过）</h3><p>刷入第三方Recovery：<br>刷入magisk，申请超级用户（root，也可以隐藏）</p><h3 id="3-开始刷机"><a href="#3-开始刷机" class="headerlink" title="3.开始刷机"></a>3.开始刷机</h3><p>方法1: Recovery卡刷：TWRP(可玩性高，但麻烦)<br>方法2: Fastboot线刷：要找boot镜像 (简单，可玩性低)，通过命令：<code>fastboot flash boot boot.img</code>(boot.img去官方或者论坛中对应的手机刷机包中找到 )</p><h3 id="1-找手机厂商"><a href="#1-找手机厂商" class="headerlink" title="1.找手机厂商"></a>1.找手机厂商</h3><p><a href="https://twrp.me/Devices/">https://twrp.me/Devices/</a></p><h3 id="2-找机型"><a href="#2-找机型" class="headerlink" title="2. 找机型"></a>2. 找机型</h3><p><a href="https://twrp.me/Devices/LG/">https://twrp.me/Devices/LG/</a></p><h3 id="3-找img包"><a href="#3-找img包" class="headerlink" title="3.找img包"></a>3.找img包</h3><p><a href="https://dl.twrp.me/hammerhead/">https://dl.twrp.me/hammerhead/</a></p><h3 id="刷包"><a href="#刷包" class="headerlink" title="刷包"></a>刷包</h3><p>然后将手机设置到<code>fastboot</code>模式，使用<code>fastboot</code>命令将镜像刷进去。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ fastboot flash recovery twrp-3.2.3-0-bullhead.img</span><br></pre></td></tr></table></figure><h2 id="谷歌的原生系统"><a href="#谷歌的原生系统" class="headerlink" title="谷歌的原生系统"></a>谷歌的原生系统</h2><p>根据手机的型号找就行了</p><p><a href="https://developers.google.com/android/ota#hammerhead">https://developers.google.com/android/ota#hammerhead</a></p><h2 id="面具（帮你root的app）"><a href="#面具（帮你root的app）" class="headerlink" title="面具（帮你root的app）"></a>面具（帮你root的app）</h2><p><a href="https://github.com/topjohnwu/Magisk/releases">https://github.com/topjohnwu/Magisk/releases</a></p><h2 id="老版本的xposed"><a href="#老版本的xposed" class="headerlink" title="老版本的xposed"></a>老版本的xposed</h2><p>安装<a href="https://repo.xposed.info/module/de.robv.android.xposed.installer">https://repo.xposed.info/module/de.robv.android.xposed.installer</a></p><p>或者</p><p>下载Xposed框架：<a href="http://dl-xda.xposed.info/framework/sdk23/arm/">http://dl-xda.xposed.info/framework/sdk23/arm/</a><br>我这里是下载最新的v86-sdk23版本。直接刷入</p><h2 id="新版本的edxposed，安卓8以后"><a href="#新版本的edxposed，安卓8以后" class="headerlink" title="新版本的edxposed，安卓8以后"></a>新版本的edxposed，安卓8以后</h2><p><a href="https://repo.xposed.info/module/org.meowcat.edxposed.manager">https://repo.xposed.info/module/org.meowcat.edxposed.manager</a></p><h1 id="小米手机挂载问题"><a href="#小米手机挂载问题" class="headerlink" title="小米手机挂载问题"></a>小米手机挂载问题</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># 手机 root 方法参考各手机 root 教程，小米手机在 Windows 电脑下载[解锁工具](//www.miui.com/unlock/index.html)，开启 fastboot 模式，手机端启用 root 权限（注意备份好手机上的数据到电脑）</span><br><span class="line"># 以小米手机为例来开启 root 权限后设置 /system 目录为读写</span><br><span class="line"># 以 root 权限执行</span><br><span class="line">adb root</span><br><span class="line"># 解决目录 read only 关键命令行</span><br><span class="line">adb disable-verity</span><br><span class="line"># 重启</span><br><span class="line">adb reboot</span><br><span class="line"># 以 root 权限运行</span><br><span class="line">adb root</span><br><span class="line"># 重新挂载</span><br><span class="line">adb remount</span><br><span class="line"># 设置读写</span><br><span class="line">adb shell mount -o rw,remount /system</span><br></pre></td></tr></table></figure><h1 id="刷机谷歌pixel手机（版本android8-1-0，系统sailfish）"><a href="#刷机谷歌pixel手机（版本android8-1-0，系统sailfish）" class="headerlink" title="刷机谷歌pixel手机（版本android8.1.0，系统sailfish）"></a>刷机谷歌pixel手机（版本android8.1.0，系统<a href="https://developers.google.com/android/ota#sailfish">sailfish</a>）</h1><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><p>注意：刷完机之后，取消账号登录</p><ol><li><code>adb reboot bootloader</code>进入Bootloader界面</li><li>刷入必要的img文件，执行flash-all</li><li>刷入TWRP（和刷入的系统发布年份差不多一致）</li><li>安装<a href="https://github.com/ElderDrivers/EdXposed">https://github.com/ElderDrivers/EdXposed</a></li><li>安装frida</li><li>配置charles（注意android7版本以上，证书不信任问题）<ol><li><a href="https://github.com/NVISO-BE/MagiskTrustUserCerts%EF%BC%88%E5%BF%85%E9%A1%BB%E5%88%B7%E5%85%A5Magisk%EF%BC%89">https://github.com/NVISO-BE/MagiskTrustUserCerts（必须刷入Magisk）</a></li><li>re管理器把<code>/data/misc/user/0/cacerts-added/</code>这个路径下面的文件复制到<code>/system/etc/security/cacerts</code>，记得挂在读写</li></ol></li></ol><h2 id="附地址"><a href="#附地址" class="headerlink" title="附地址"></a>附地址</h2><p>各种玩机地址&#x2F;工具&#x2F;命令汇总：<a href="http://wanji.jamcz.com/">http://wanji.jamcz.com/</a></p><p>Android SDK（ADB和Fastboot电脑端工具）：<a href="https://developer.android.google.cn/s">https://developer.android.google.cn/s</a>…</p><p>ADB&#x2F;Fastboot驱动：<a href="https://cz-jam.lanzouj.com/iZICY02v2k8j">https://cz-jam.lanzouj.com/iZICY02v2k8j</a></p><p>TWRP：<a href="https://twrp.me/">https://twrp.me/</a></p><p>Magisk：<a href="https://github.com/topjohnwu/Magisk">https://github.com/topjohnwu/Magisk</a></p><p>小米解锁工具：<a href="https://www.miui.com/unlock/index.html">https://www.miui.com/unlock/index.html</a></p><p>小米ROM下载：<a href="https://xiaomirom.com/series/">https://xiaomirom.com/series/</a></p><p>小米刷机工具：<a href="https://cdn.alsgp0.fds.api.mi-img.com/">https://cdn.alsgp0.fds.api.mi-img.com</a>…</p><p>一加ROM下载：<a href="https://www.oneplus.com/cn/support/so">https://www.oneplus.com/cn/support/so</a>…</p><p>三星刷机工具：<a href="https://odindownload.com/">https://odindownload.com/</a></p><p>三星ROM下载：<a href="https://www.sammobile.com/firmwares/">https://www.sammobile.com/firmwares/</a></p><p>魅族ROOT链接：<a href="https://mroot.flyme.cn/">https://mroot.flyme.cn/</a></p><p>OPPO解锁：<a href="https://www.oppo.cn/thread-397164526-1">https://www.oppo.cn/thread-397164526-1</a></p><p>OPPO ROM：<a href="https://www.coloros.com/rom">https://www.coloros.com/rom</a></p><p>Realme解锁：<a href="https://www.realmebbs.com/post-detail">https://www.realmebbs.com/post-detail</a>…</p><p>Realme刷机工具：<a href="https://www.realmebbs.com/post-detail">https://www.realmebbs.com/post-detail</a>…</p><p>Realme ROM：<a href="https://www.realme.com/support/softwa">https://www.realme.com/support/softwa</a>…</p><p>索尼解锁：<a href="https://developer.sony.com/develop/op">https://developer.sony.com/develop/op</a>…</p><p>索尼ROM：<a href="https://xperifirm.com/">https://xperifirm.com/</a></p><p>MOTO解锁：<a href="https://motorola-global-portal.custhe/">https://motorola-global-portal.custhe</a>…</p><p>MOTO ROM：<a href="https://mirrors.lolinet.com/firmware/">https://mirrors.lolinet.com/firmware/</a>…</p><p>payload-dumper解包工具：<a href="https://mrzzoxo.lanzouw.com/iR65zpaueyd">https://mrzzoxo.lanzouw.com/iR65zpaueyd</a></p><p>酷安（玩机社区）：<a href="https://www.coolapk.com/">https://www.coolapk.com/</a></p><p>XDA（海外玩机论坛）：<a href="https://forum.xda-developers.com/">https://forum.xda-developers.com/</a></p>]]></content>
      
      
      <categories>
          
          <category> 刷机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> android刷机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>scrapy基础</title>
      <link href="/post/1c2afddb.html"/>
      <url>/post/1c2afddb.html</url>
      
        <content type="html"><![CDATA[<h2 id="Scrapy"><a href="#Scrapy" class="headerlink" title="Scrapy"></a><a href="https://doc.scrapy.org/en/latest/intro/tutorial.html">Scrapy</a></h2><h2 id="新建一个项目的命令："><a href="#新建一个项目的命令：" class="headerlink" title="新建一个项目的命令："></a>新建一个项目的命令：</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">scrapy startproject 项目的名称</span><br><span class="line"></span><br><span class="line">产生如下的目录：</span><br><span class="line">tutorial/</span><br><span class="line">    scrapy.cfg</span><br><span class="line">    tutorial/</span><br><span class="line">        __init__.py</span><br><span class="line">        items.py</span><br><span class="line">        pipelines.py</span><br><span class="line">        settings.py</span><br><span class="line">        spiders/</span><br><span class="line">            __init__.py</span><br><span class="line">            ...</span><br><span class="line">这些文件分别是:</span><br><span class="line"></span><br><span class="line">scrapy.cfg: 项目的配置文件</span><br><span class="line">tutorial/: 该项目的python模块。之后您将在此加入代码。</span><br><span class="line">tutorial/items.py: 项目中的item文件.</span><br><span class="line">tutorial/pipelines.py: 项目中的pipelines文件.</span><br><span class="line">tutorial/settings.py: 项目的设置文件.</span><br><span class="line">tutorial/spiders/: 放置spider代码的目录.</span><br></pre></td></tr></table></figure><h2 id="新建一个爬虫项目："><a href="#新建一个爬虫项目：" class="headerlink" title="新建一个爬虫项目："></a>新建一个爬虫项目：</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Available templates:</span><br><span class="line">    basic</span><br><span class="line">    crawl</span><br><span class="line">    csvfeed</span><br><span class="line">    xmlfeed</span><br><span class="line">scrapy -t basic genspider 爬虫名 爬虫地址的域名 <span class="comment"># -t 表示使用的模板，默认使用的就是basic，所以-t basic可以不写</span></span><br></pre></td></tr></table></figure><h2 id="运行爬虫："><a href="#运行爬虫：" class="headerlink" title="运行爬虫："></a>运行爬虫：</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scrapy crawl 爬虫的项目名称</span><br></pre></td></tr></table></figure><h2 id="scrapy重点命令学习："><a href="#scrapy重点命令学习：" class="headerlink" title="scrapy重点命令学习："></a>scrapy重点命令学习：</h2><h3 id="scrapy命令分俩类："><a href="#scrapy命令分俩类：" class="headerlink" title="scrapy命令分俩类："></a>scrapy命令分俩类：</h3><ul><li><p>1.全局命令:</p><p>  *<strong>startproject  建立一个项目（不是爬虫项目）</strong><br>  settings  获取配置文件 #scrapy settings –get BOT_NAME<br>  *<strong>runspider 运行spider # scrapy runspider &lt;spider_file.py&gt;</strong><br>  *<strong>shell 打开scrapyshell，做测试</strong><br>  fetch 将网页内容下载下来，然后在终端打印当前返回的内容<br>  view  将网页内容保存下来，并在浏览器中打开当前网页内容，直观呈现要爬取网页的内容<br>  version 查看scrapy以及所依赖包的版本</p></li><li><p>2.爬虫项目里面的命令：</p><p>  *<strong>crawl  开始爬虫</strong><br>  check  检测项目有没有问题<br>  list  列出当前项目的目录<br>  edit 编辑爬虫<br>  parse 获取给定的URL并使用相应的spider分析处理<br>  *<strong>genspider 创建爬虫的项目</strong><br>  *<strong>deploy 打包上传服务器 # scrapy deploy [ <a href="target:project">target:project</a> | -l <target> | -L ]</target></strong><br>  bench 测试电脑当前爬取速度性能</p><ul><li><p>scrapy shell具体学习</p><ul><li><p>scrapy 爬虫数据文件导出：</p><ul><li><p>scrapy 内置主要有四种：JSON，JSON lines，CSV，XML</p><p>  我们将结果用最常用的JSON导出，命令如下：</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scrapy crawl dmoz -o douban.json -t json -s FEED_EXPORT_ENCODING=UTF-<span class="number">8</span> </span><br></pre></td></tr></table></figure></li></ul></li><li><p>scrapy shell 目标网址：</p><ul><li>主要用于调式代码，十分重要</li></ul></li></ul></li></ul></li></ul><h2 id="scrapy配置信息"><a href="#scrapy配置信息" class="headerlink" title="scrapy配置信息"></a>scrapy配置信息</h2><h3 id="setting配置："><a href="#setting配置：" class="headerlink" title="setting配置："></a>setting配置：</h3><pre><code>* 默认: &#39;scrapybot&#39;,当您使用 startproject 命令创建项目时其也被自动赋值。    BOT_NAME = &#39;mySpider&#39;        爬虫应用路径    SPIDER_MODULES = [&#39;mySpider.spiders&#39;]    NEWSPIDER_MODULE = &#39;mySpider.spiders&#39;        客户端 user-agent请求头        USER_AGENT = &#39;mySpider (+http://www.yourdomain.com)&#39;        禁止爬虫配置    ROBOTSTXT_OBEY = False        并发请求数        CONCURRENT_REQUESTS = 32        延迟下载秒数        DOWNLOAD_DELAY = 3        单域名访问并发数，并且延迟下次秒数也应用在每个域名        CONCURRENT_REQUESTS_PER_DOMAIN = 16        单IP访问并发数，如果有值则忽略：CONCURRENT_REQUESTS_PER_DOMAIN，并且延迟下次秒数也应用在每个IP        CONCURRENT_REQUESTS_PER_IP = 16        是否支持cookie，cookiejar进行操作cookie        COOKIES_ENABLED = True        COOKIES_DEBUG = True        Telnet用于查看当前爬虫的信息，操作爬虫等...        使用telnet ip port ，然后通过命令操作        TELNETCONSOLE_ENABLED = True        TELNETCONSOLE_HOST = &#39;127.0.0.1&#39;        TELNETCONSOLE_PORT = [6023,]        默认请求头        DEFAULT_REQUEST_HEADERS = &#123;        &#39;Accept&#39;: &#39;text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8&#39;,        &#39;Accept-Language&#39;: &#39;en&#39;,        &#125;        爬虫中间件        SPIDER_MIDDLEWARES = &#123;        &#39;mySpider.middlewares.MyspiderSpiderMiddleware&#39;: 543,        &#125;        下载中间件        DOWNLOADER_MIDDLEWARES = &#123;        &#39;mySpider.middlewares.MyspiderDownloaderMiddleware&#39;: 543,        &#125;        自定义扩展，基于信号进行调用        EXTENSIONS = &#123;        &#39;scrapy.extensions.telnet.TelnetConsole&#39;: None,        &#125;        定义pipeline处理请求        ITEM_PIPELINES = &#123;            &#39;mySpider.pipelines.MyspiderPipeline&#39;: 300,        &#125;        爬虫允许的最大深度，可以通过meta查看当前深度；0表示无深度        DEPTH_LIMIT = 3        爬取时，0表示深度优先Lifo(默认)；1表示广度优先FiFo        后进先出，深度优先        DEPTH_PRIORITY = 0        SCHEDULER_DISK_QUEUE = &#39;scrapy.squeue.PickleLifoDiskQueue&#39;        SCHEDULER_MEMORY_QUEUE = &#39;scrapy.squeue.LifoMemoryQueue&#39;        先进先出，广度优先        DEPTH_PRIORITY = 1        SCHEDULER_DISK_QUEUE = &#39;scrapy.squeue.PickleFifoDiskQueue&#39;        SCHEDULER_MEMORY_QUEUE = &#39;scrapy.squeue.FifoMemoryQueue&#39;        调度器队列        SCHEDULER = &#39;scrapy.core.scheduler.Scheduler&#39;        from scrapy.core.scheduler import Scheduler        访问URL去重        DUPEFILTER_CLASS = &#39;step8_king.duplication.RepeatUrl&#39;        开始自动限速        AUTOTHROTTLE_ENABLED = True        初始下载延迟        AUTOTHROTTLE_START_DELAY = 5        最大下载延迟        AUTOTHROTTLE_MAX_DELAY = 60        平均每秒并发数        AUTOTHROTTLE_TARGET_CONCURRENCY = 1.0        是否显示        AUTOTHROTTLE_DEBUG = False    是否启用缓存策略    HTTPCACHE_ENABLED = True    缓存策略：所有请求均缓存，下次在请求直接访问原来的缓存即可    HTTPCACHE_POLICY = &quot;scrapy.extensions.httpcache.DummyPolicy&quot;    缓存策略：根据Http响应头：Cache-Control、Last-Modified 等进行缓存的策略    HTTPCACHE_POLICY = &quot;scrapy.extensions.httpcache.RFC2616Policy&quot;    缓存超时时间    HTTPCACHE_EXPIRATION_SECS = 0    缓存保存路径    HTTPCACHE_DIR = &#39;httpcache&#39;    缓存忽略的Http状态码    HTTPCACHE_IGNORE_HTTP_CODES = []    缓存存储的插件    HTTPCACHE_STORAGE = &#39;scrapy.extensions.httpcache.FilesystemCacheStorage&#39;</code></pre><h2 id="scrapy中间件学习-分值越小，优先级越高-："><a href="#scrapy中间件学习-分值越小，优先级越高-：" class="headerlink" title="scrapy中间件学习(分值越小，优先级越高)："></a>scrapy中间件学习(分值越小，优先级越高)：</h2><ul><li><p>scrapy中有俩个中间件，一个是下载中间件（DownloaderMiddleware）,一个是蜘蛛中间件（SpiderMiddleware）</p></li><li><p>DownloaderMiddleware：</p><p>  当调度器拿出一个request发送给downloader下载的时候，会经过下载中间件，然后当downloader下载完之后，返回response给spider的时候也会再次经过下载中间件</p><p>  下载中间件是处于引擎和下载器之间，可以用来修改Request和Response</p><p>  def process_request(self, request, spider)<br>  process_request()必须需返回一下其中之一：<br>  None：</p><blockquote><p>如果返回None:Scrapy将继续处理request，执行其他的中间件的响应方法</p></blockquote><p>  Response 对象：</p><blockquote><p>如果返回 Response 对象: Scrapy不会再调用任 何其他的中间件的 process_request() 或相应地下 载函数； 直接返回这个response对象。 已激活的中间件的 **process_response()**方法则会在 每个 response 返回时被调用。</p></blockquote><p>  Request 对象:</p><blockquote><p>如果返回 Request 对象，Scrapy则停止调用 其他中间件的process_request方法，并重新将返回的 request对象放置到调度器等待下载。</p></blockquote><p>  IgnoreRequest异常</p><blockquote><p>如果返回raise IgnoreRequest 异常: 下载中间件的 process_exception() 方法会被用。 如果没有捕获该异常， 则request发情请求时设置的 errback(Request.errback)方法会被调用。如果也 没有设置异常回调，则该异常被忽略且不记录</p></blockquote><p>  <strong>主要作用：</strong></p><p>  ​1.随机请求头</p><p>  ​2.代理中间件</p><p>  ​3.cookie登录</p><p>  ​4.网页动态加载</p><p>  ​…</p></li><li><p>SpiderMiddleware:</p><p>  当downloader下载完成之后，返回给spider的时候，发送之前会经过蜘蛛中间件，然后当spider处理生成item和request之后，还会经过蜘蛛中间件一次。</p><p>  详细参考：<a href="https://scrapy-chs.readthedocs.io/zh_CN/1.0/topics/spider-middleware.html">https://scrapy-chs.readthedocs.io/zh_CN/1.0/topics/spider-middleware.html</a></p></li></ul><h2 id="scrapy-redis"><a href="#scrapy-redis" class="headerlink" title="scrapy-redis"></a>scrapy-redis</h2><p><a href="https://github.com/rmax/scrapy-redis">scrapy-redis</a></p><h3 id="scrapy-redis分布式配置"><a href="#scrapy-redis分布式配置" class="headerlink" title="scrapy_redis分布式配置"></a>scrapy_redis分布式配置</h3><p>如果不配下列文件，scrapy的调度引擎默认走的是</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">D:\python3.7.5\Lib\site-packages\scrapy\下的文件</span><br></pre></td></tr></table></figure><p>而不是scrapy_redis。</p><p>一般在配置文件中添加如下几个常用配置选项：</p><p>1(必须). 使用了scrapy_redis的去重组件，在redis数据库里做去重</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DUPEFILTER_CLASS = &quot;scrapy_redis.dupefilter.RFPDupeFilter&quot;</span><br></pre></td></tr></table></figure><p>2(必须). 使用了scrapy_redis的调度器，在redis里分配请求</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SCHEDULER = &quot;scrapy_redis.scheduler.Scheduler&quot;</span><br></pre></td></tr></table></figure><p>3(可选). 在redis中保持scrapy-redis用到的各个队列，从而允许暂停和暂停后恢复，也就是不清理redis queues</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SCHEDULER_PERSIST = True</span><br></pre></td></tr></table></figure><p>4(可以自定义). 通过配置RedisPipeline将item写入key为 spider.name : items 的redis的list中，供后面的分布式处理item 这个已经由 scrapy-redis 实现，不需要我们写代码，直接使用即可</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ITEM_PIPELINES = &#123;　　 &#x27;scrapy_redis.pipelines.RedisPipeline&#x27;: 100 ,&#125;</span><br></pre></td></tr></table></figure><p>5(必须). 指定redis数据库的连接参数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">REDIS_HOST = &#x27;127.0.0.1&#x27; REDIS_PORT = 6379</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> scrapy </category>
          
      </categories>
      
      
        <tags>
            
            <tag> scrapy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>scrapy的运行方式</title>
      <link href="/post/bf2ca3c2.html"/>
      <url>/post/bf2ca3c2.html</url>
      
        <content type="html"><![CDATA[<h2 id="scrapy不同的运行方式"><a href="#scrapy不同的运行方式" class="headerlink" title="scrapy不同的运行方式"></a>scrapy不同的运行方式</h2><h3 id="CrawlerProcess"><a href="#CrawlerProcess" class="headerlink" title="CrawlerProcess"></a>CrawlerProcess</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">custom_settings = &#123;&#125;  <span class="comment"># 项目的配置文件</span></span><br><span class="line">project_settings = get_project_settings()</span><br><span class="line">settings = <span class="built_in">dict</span>(project_settings.copy())</span><br><span class="line">settings.update(custom_settings.get(<span class="string">&#x27;settings&#x27;</span>))</span><br><span class="line">process = CrawlerProcess(settings)</span><br><span class="line">process.crawl(Example2Spider)</span><br><span class="line">process.start()</span><br></pre></td></tr></table></figure><h3 id="CrawlerRunner"><a href="#CrawlerRunner" class="headerlink" title="CrawlerRunner"></a>CrawlerRunner</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">configure_logging()</span><br><span class="line">runner = CrawlerRunner()</span><br><span class="line"><span class="meta">@defer.inlineCallbacks</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">crawl</span>():</span><br><span class="line">    <span class="keyword">yield</span> runner.crawl(Example2Spider)</span><br><span class="line">    <span class="comment"># yield runner.crawl()</span></span><br><span class="line">    reactor.stop()</span><br><span class="line"><span class="comment"># 调用crawl()</span></span><br><span class="line">crawl()</span><br><span class="line">reactor.run()</span><br></pre></td></tr></table></figure><h3 id="cmd"><a href="#cmd" class="headerlink" title="cmd"></a>cmd</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">custom_settings = &#123;&#125;</span><br><span class="line">project_settings = get_project_settings()</span><br><span class="line">settings = <span class="built_in">dict</span>(project_settings.copy())</span><br><span class="line">settings.update(custom_settings)</span><br><span class="line">execute([<span class="string">&quot;scrapy&quot;</span>, <span class="string">&quot;crawl&quot;</span>, <span class="string">&quot;&#123;&#125;&quot;</span>.<span class="built_in">format</span>(name)], settings)</span><br></pre></td></tr></table></figure><h3 id="custom-settings设置"><a href="#custom-settings设置" class="headerlink" title="custom_settings设置"></a>custom_settings设置</h3><h3 id="多个spider自动运行"><a href="#多个spider自动运行" class="headerlink" title="多个spider自动运行"></a>多个spider自动运行</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">process = CrawlerProcess(settings=get_project_settings())</span><br><span class="line"><span class="keyword">for</span> module_string <span class="keyword">in</span> find_modules(<span class="string">&#x27;demo_project.spiders&#x27;</span>):</span><br><span class="line">    <span class="comment"># 通过模块名找到py文件</span></span><br><span class="line">    module = import_string(module_string)</span><br><span class="line">    <span class="comment"># 拼接spider中的类名，比如demo</span></span><br><span class="line">    class_string = module_string.split(<span class="string">&#x27;.&#x27;</span>)[-<span class="number">1</span>].capitalize() + <span class="string">&#x27;Spider&#x27;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;正在处理的spider：-&gt; <span class="subst">&#123;class_string&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="comment"># 通过反射拿到对应的类</span></span><br><span class="line">    spider_class = <span class="built_in">getattr</span>(module, class_string)</span><br><span class="line">    <span class="comment"># 开始运行所有的spider</span></span><br><span class="line">    process.crawl(spider_class)</span><br><span class="line">process.start()</span><br></pre></td></tr></table></figure><h3 id="多进程运行spider"><a href="#多进程运行spider" class="headerlink" title="多进程运行spider"></a>多进程运行spider</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">subpros = []</span><br><span class="line">s = <span class="string">&#x27;scrapy crawl &#123;&#125; &gt;/dev/null 2&gt;&amp;1&#x27;</span>.<span class="built_in">format</span>(spider_name)</span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(pools):</span><br><span class="line">    subpro = subprocess.Popen(s, shell=<span class="literal">True</span>, stdout=<span class="literal">None</span>)</span><br><span class="line">    subpros.append(subpro)</span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line"><span class="keyword">for</span> por <span class="keyword">in</span> subpros:</span><br><span class="line">    por.wait()</span><br></pre></td></tr></table></figure><p>具体可以参考:<a href="https://github.com/SummerWorm-Bullfrog/ScrapyTemplate">https://github.com/SummerWorm-Bullfrog/ScrapyTemplate</a></p>]]></content>
      
      
      <categories>
          
          <category> scrapy </category>
          
      </categories>
      
      
        <tags>
            
            <tag> scrapy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>xposed的hook</title>
      <link href="/post/ec4e79f7.html"/>
      <url>/post/ec4e79f7.html</url>
      
        <content type="html"><![CDATA[<h2 id="Xposed-的原理"><a href="#Xposed-的原理" class="headerlink" title="Xposed 的原理"></a>Xposed 的原理</h2><p>Android基于Linux，第一个启动的进程自然是<code>init进程</code>，该进程会启动所有Android进程的父进程——<code>Zygote(孵化)进程</code>，该进程的启动配置在<code>/init.rc</code>脚本中，而Zygote进程对应的执行文件是<code>/system/bin/app_process</code>，该文件完成类库的加载以及一些函数的调用工作。在Zygote进程创建后，再fork出SystemServer进程和其他进程。而Xposed Framework呢，就是<strong>用自己实现的app_process替换掉了系统原本提供的app_process</strong>，加载一个额外的jar包，然后入口从原来的<code>com.android.internal.osZygoteInit.main()</code>被替换成了<code>de.robv.android.xposed.XposedBridge.main()</code>，然后<strong>创建的Zygote进程就变成Hook的Zygote进程了</strong>，而后面Fork出来的进程也是被Hook过的。这个Jar包在<code>/data/data/de.rbov.android.xposed.installer/bin/XposedBridge.jar</code>。</p><h2 id="Xposed代码的编写"><a href="#Xposed代码的编写" class="headerlink" title="Xposed代码的编写"></a>Xposed代码的编写</h2><h3 id="https-www-freebuf-com-news-189021-html"><a href="#https-www-freebuf-com-news-189021-html" class="headerlink" title="https://www.freebuf.com/news/189021.html"></a><a href="https://www.freebuf.com/news/189021.html">https://www.freebuf.com/news/189021.html</a></h3><p>新建一个项目，请注意如果你只是hook，那么可以选择add no activity，但是如果有和自身app交互，那么就选择empty activity。我为了给大家演示，是有展示的，所以我选择empty activity。</p><h3 id="1-创建成功后找到AndroidManifest-xml中的application，在文件里面添加如下代码。"><a href="#1-创建成功后找到AndroidManifest-xml中的application，在文件里面添加如下代码。" class="headerlink" title="1.创建成功后找到AndroidManifest.xml中的application，在文件里面添加如下代码。"></a>1.创建成功后找到AndroidManifest.xml中的application，在文件里面添加如下代码。</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta-data</span><br><span class="line">    android:name=<span class="string">&quot;xposedmodule&quot;</span></span><br><span class="line">    android:value=<span class="string">&quot;true&quot;</span> /&gt;</span><br><span class="line">&lt;meta-data</span><br><span class="line">    android:name=<span class="string">&quot;xposeddescription&quot;</span></span><br><span class="line">    android:value=<span class="string">&quot;XposedProject&quot;</span> /&gt;</span><br><span class="line">&lt;meta-data</span><br><span class="line">    android:name=<span class="string">&quot;xposedminversion&quot;</span></span><br><span class="line">    android:value=<span class="string">&quot;53&quot;</span> /&gt;</span><br></pre></td></tr></table></figure><p>第一个xposedmodule的属性为ture，证明这是一个xposed的module；</p><p>第二个xposeddescription，这是介绍项目的话语；</p><p>第三个xposedminversion则是说明该xposedmodule所支持的最小版本，而最低版本就是30。</p><p>添加到AndroidManifest.xml中的application里面。</p><h3 id="2-加入xposed的依赖包到libs目录"><a href="#2-加入xposed的依赖包到libs目录" class="headerlink" title="2.加入xposed的依赖包到libs目录"></a>2.加入xposed的依赖包到libs目录</h3><p><a href="https://bintray.com/rovo89/de.robv.android.xposed/api">https://bintray.com/rovo89/de.robv.android.xposed/api</a></p><h3 id="3-接下来找到build-gradle-module-app是你app项目下的（不是外层的）-文件，在里面添加如下代码。"><a href="#3-接下来找到build-gradle-module-app是你app项目下的（不是外层的）-文件，在里面添加如下代码。" class="headerlink" title="3.接下来找到build.gradle(module:app是你app项目下的（不是外层的）)文件，在里面添加如下代码。"></a>3.接下来找到build.gradle(module:app是你app项目下的（不是外层的）)文件，在里面添加如下代码。</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">compileOnly <span class="string">&#x27;de.robv.android.xposed:api:82&#x27;</span></span><br><span class="line"> </span><br><span class="line">compileOnly <span class="string">&#x27;de.robv.android.xposed:api:82:sources&#x27;</span></span><br></pre></td></tr></table></figure><p>添加到buile.gradle中dependencies中</p><h3 id="4-建一个Java类并且继承接口IXposedHookLoadPackage和重写handleLoadPackage方法。"><a href="#4-建一个Java类并且继承接口IXposedHookLoadPackage和重写handleLoadPackage方法。" class="headerlink" title="4.建一个Java类并且继承接口IXposedHookLoadPackage和重写handleLoadPackage方法。"></a>4.建一个Java类并且继承接口IXposedHookLoadPackage和重写handleLoadPackage方法。</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> de.robv.android.xposed.IXposedHookLoadPackage;</span><br><span class="line"><span class="keyword">import</span> de.robv.android.xposed.callbacks.XC_LoadPackage;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HookMain</span> <span class="keyword">implements</span> <span class="title class_">IXposedHookLoadPackage</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleLoadPackage</span><span class="params">(XC_LoadPackage.LoadPackageParam lpparam)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-在src-x2F-mian目录下添加一个assets目录，目录下添加一个xposed-init文件，里面的代码是你的Hook类的包名-类名。"><a href="#5-在src-x2F-mian目录下添加一个assets目录，目录下添加一个xposed-init文件，里面的代码是你的Hook类的包名-类名。" class="headerlink" title="5.在src&#x2F;mian目录下添加一个assets目录，目录下添加一个xposed_init文件，里面的代码是你的Hook类的包名+类名。"></a>5.在src&#x2F;mian目录下添加一个assets目录，目录下添加一个xposed_init文件，里面的代码是你的Hook类的包名+类名。</h3><p>而本项目就是：com.yymjr.android.xposedproject.HookMain。</p><h2 id="注意的"><a href="#注意的" class="headerlink" title="注意的"></a>注意的</h2><p>不管是连接真机调试还是用模拟器调试，都不要直接点 Android Stduio的那个三角按钮直接运行！！！ Build → Build APK, 要生成一个APK文件，未签名的也可以，然后放到模拟器或手机上运行再试试。</p><h2 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h2><p><a href="https://api.xposed.info/reference/de/robv/android/xposed/package-summary.html">https://api.xposed.info/reference/de/robv/android/xposed/package-summary.html</a></p><h2 id="免重启"><a href="#免重启" class="headerlink" title="免重启"></a>免重启</h2><p><a href="https://www.freebuf.com/sectool/167274.html">https://www.freebuf.com/sectool/167274.html</a></p><h2 id="example"><a href="#example" class="headerlink" title="example"></a>example</h2><p><code>adb logcat命令</code></p><p>在cmd窗口中输入如下命令，就可以像Studio中的Logcat窗口中显示日志信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">//格式1：打印默认日志数据</span><br><span class="line">adb logcat </span><br><span class="line"></span><br><span class="line">//格式2：需要打印日志详细时间的简单数据</span><br><span class="line">adb logcat -v time</span><br><span class="line"></span><br><span class="line">//格式3：需要打印级别为Error的信息</span><br><span class="line">adb logcat *:E</span><br><span class="line"></span><br><span class="line">//格式4：需要打印时间和级别是Error的信息</span><br><span class="line">adb logcat -v time *:E</span><br><span class="line"></span><br><span class="line">//格式5：将日志保存到电脑固定的位置，比如D:\log.txt</span><br><span class="line">adb logcat -v time &gt;D:\log.txt</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HookTemplate</span> <span class="keyword">implements</span> <span class="title class_">IXposedHookLoadPackage</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleLoadPackage</span><span class="params">(XC_LoadPackage.LoadPackageParam lpparam)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">HOOK_PACKAGE_NAME</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        XposedBridge.log(<span class="string">&quot;【handleLoadPackage】&quot;</span> + lpparam.packageName);<span class="comment">//任何一个app启动时都会调用</span></span><br><span class="line">        <span class="keyword">if</span> (lpparam.packageName.equals(HOOK_PACKAGE_NAME)) &#123;<span class="comment">//匹配指定的包名</span></span><br><span class="line">            <span class="type">Class</span> <span class="variable">hook_clazz</span> <span class="operator">=</span> lpparam.classLoader.loadClass(</span><br><span class="line">                    <span class="string">&quot;&quot;</span>); <span class="comment">// 需要hook的类名</span></span><br><span class="line">            XposedHelpers.findAndHookMethod(hook_clazz, <span class="string">&quot;hook的方法名&quot;</span>, <span class="type">int</span>.class, <span class="type">int</span>.class, <span class="keyword">new</span> <span class="title class_">XC_MethodHook</span>() &#123;</span><br><span class="line">                <span class="comment">//int.class, int.class传入的参数类型</span></span><br><span class="line">                <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">beforeHookedMethod</span><span class="params">(MethodHookParam param)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">                    XposedBridge.log(<span class="string">&quot;Called beforeHookedMethod&quot;</span>);</span><br><span class="line">                    <span class="type">Object</span> <span class="variable">thisObject</span> <span class="operator">=</span> param.thisObject; <span class="comment">// 获取当钱的对象</span></span><br><span class="line">                    XposedHelpers.getObjectField(thisObject, <span class="string">&quot;&quot;</span>) <span class="comment">/*getObjectField(Object obj, String fieldName)</span></span><br><span class="line"><span class="comment">Returns the value of an object field in the given object instance.*/</span> </span><br><span class="line">                    param.method; <span class="comment">// 获取方法</span></span><br><span class="line">                    param.args; <span class="comment">// 获取参数</span></span><br><span class="line">                    param.setResult() <span class="comment">// </span></span><br><span class="line">                    </span><br><span class="line">                    XposedBridge.log(<span class="string">&quot;Changed args 0 to &quot;</span> + param.args[<span class="number">0</span>]);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">afterHookedMethod</span><span class="params">(MethodHookParam param)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">                    param.getResult(); <span class="comment">// 获取方法返回的结果</span></span><br><span class="line">                    </span><br><span class="line">                    XposedBridge.log(<span class="string">&quot;Called afterHookedMethod&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HookDemo</span> <span class="keyword">implements</span> <span class="title class_">IXposedHookLoadPackage</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleLoadPackage</span><span class="params">(XC_LoadPackage.LoadPackageParam lpparam)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        XposedBridge.log(<span class="string">&quot;【handleLoadPackage】&quot;</span> + lpparam.packageName);<span class="comment">//任何一个app启动时都会调用</span></span><br><span class="line">        <span class="keyword">if</span> (lpparam.packageName.equals(<span class="string">&quot;com.tencent.mm&quot;</span>))&#123;<span class="comment">//匹配指定的包名</span></span><br><span class="line">            <span class="comment">// 这个可以不写，如果写了下面xxxx替换成hook_clazz</span></span><br><span class="line">            <span class="type">Class</span> <span class="variable">hook_clazz</span> <span class="operator">=</span> lpparam.classLoader.loadClass(</span><br><span class="line">                    <span class="string">&quot;com.tencent.wcdb.database.SQLiteDatabase&quot;</span>); <span class="comment">// 需要hook的类名</span></span><br><span class="line">            XposedHelpers.findAndHookMethod(<span class="string">&quot;xxxx&quot;</span>,lpparam.classLoader, <span class="string">&quot;insertWithOnConflict&quot;</span>, String.class, String.class, ContentValues.class, <span class="type">int</span>.class, <span class="keyword">new</span> <span class="title class_">XC_MethodHook</span>() &#123;</span><br><span class="line">                <span class="comment">//                //int.class, int.class传入的参数类型</span></span><br><span class="line">                <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">beforeHookedMethod</span><span class="params">(MethodHookParam param)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">                    XposedBridge.log(<span class="string">&quot;Called beforeHookedMethod&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">afterHookedMethod</span><span class="params">(MethodHookParam param)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">                    XposedBridge.log(<span class="string">&quot;帮你hook&quot;</span>);</span><br><span class="line">                    <span class="type">Object</span> <span class="variable">tableName</span> <span class="operator">=</span> param.args[<span class="number">0</span>];</span><br><span class="line">                    <span class="type">Object</span> <span class="variable">oj</span> <span class="operator">=</span> param.args[<span class="number">1</span>];</span><br><span class="line">                    <span class="type">ContentValues</span> <span class="variable">content</span>  <span class="operator">=</span> (ContentValues)param.args[<span class="number">2</span>];</span><br><span class="line">                    XposedBridge.log(String.format(<span class="string">&quot;hook tableName %s，%s&quot;</span>, tableName, oj));</span><br><span class="line">                    <span class="keyword">for</span> (String key:content.keySet())&#123;</span><br><span class="line">                        XposedBridge.log(String.format(<span class="string">&quot;hook Key:%s | Value:%s&quot;</span>,key, content.get(key)));</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> hook </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hook </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java的反射</title>
      <link href="/post/f7e69fc7.html"/>
      <url>/post/f7e69fc7.html</url>
      
        <content type="html"><![CDATA[<h2 id="java的文件加载过程"><a href="#java的文件加载过程" class="headerlink" title="java的文件加载过程"></a>java的文件加载过程</h2><p><img src="/../images/java/%E7%B1%BB%E5%8A%A0%E8%BD%BD%E8%BF%87%E7%A8%8B.png"></p><h2 id="正射和反射"><a href="#正射和反射" class="headerlink" title="正射和反射"></a>正射和反射</h2><p>一般情况下，我们使用某个类时必定知道它是什么类，是用来做什么的。于是我们直接对这个类进行实例化，之后使用这个类对象进行操作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Apple</span> <span class="variable">apple</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Apple</span>(); <span class="comment">//直接初始化，「正射」</span></span><br><span class="line">apple.setPrice(<span class="number">4</span>);</span><br></pre></td></tr></table></figure><p>上面这样子进行类对象的初始化，我们可以理解为「正」。</p><p>而反射则是一开始并不知道我要初始化的类对象是什么，自然也无法使用 new 关键字来创建对象了。</p><p>这时候，我们使用 JDK 提供的反射 API 进行反射调用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">clz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;com.chenshuyi.reflect.Apple&quot;</span>);</span><br><span class="line"><span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> clz.getMethod(<span class="string">&quot;setPrice&quot;</span>, <span class="type">int</span>.class);</span><br><span class="line"><span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> clz.getConstructor();</span><br><span class="line"><span class="type">Object</span> <span class="variable">object</span> <span class="operator">=</span> constructor.newInstance();</span><br><span class="line">method.invoke(object, <span class="number">4</span>);</span><br></pre></td></tr></table></figure><p>上面两段代码的执行结果，其实是完全一样的。但是其思路完全不一样，第一段代码在未运行时就已经确定了要运行的类（Apple），而第二段代码则是在运行时通过字符串值才得知要运行的类（com.chenshuyi.reflect.Apple）。</p><h2 id="什么是反射？"><a href="#什么是反射？" class="headerlink" title="什么是反射？"></a>什么是反射？</h2><p>可以参考：<a href="https://blog.csdn.net/qq_35029061/article/details/84025745">https://blog.csdn.net/qq_35029061/article/details/84025745</a></p><p><strong>反射就是在运行时才知道要操作的类是什么，并且可以在运行时获取类的完整构造，并调用对应的方法。</strong></p><h2 id="在-Java-API-中，获取-Class-类对象有三种方法："><a href="#在-Java-API-中，获取-Class-类对象有三种方法：" class="headerlink" title="在 Java API 中，获取 Class 类对象有三种方法："></a>在 Java API 中，获取 Class 类对象有三种方法：</h2><p><strong>第一种，使用 Class.forName 静态方法。</strong>当你知道该类的全路径名时，你可以使用该方法获取 Class 类对象。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Class clz = Class.forName(&quot;java.lang.String&quot;);</span><br></pre></td></tr></table></figure><p><strong>第二种，使用 .class 方法。</strong></p><p>这种方法只适合在编译前就知道操作的 Class。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Class clz = String.class;</span><br></pre></td></tr></table></figure><p><strong>第三种，使用类对象的 getClass() 方法。</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String str = new String(&quot;Hello&quot;);</span><br><span class="line">Class clz = str.getClass();</span><br></pre></td></tr></table></figure><h2 id="通过反射创建类对象"><a href="#通过反射创建类对象" class="headerlink" title="通过反射创建类对象"></a>通过反射创建类对象</h2><p>通过反射创建类对象主要有两种方式：通过 Class 对象的 newInstance() 方法、通过 Constructor 对象的 newInstance() 方法。</p><p>第一种：通过 Class 对象的 newInstance() 方法。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Class clz = Apple.class;</span><br><span class="line">Apple apple = (Apple)clz.newInstance();</span><br></pre></td></tr></table></figure><p>第二种：通过 Constructor 对象的 newInstance() 方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Class clz = Apple.class;</span><br><span class="line">Constructor constructor = clz.getConstructor();</span><br><span class="line">Apple apple = (Apple)constructor.newInstance();</span><br></pre></td></tr></table></figure><p>通过 Constructor 对象创建类对象可以选择特定构造方法，而通过 Class 对象则只能使用默认的无参数构造方法。下面的代码就调用了一个有参数的构造方法进行了类对象的初始化。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Class clz = Apple.class;</span><br><span class="line">Constructor constructor = clz.getConstructor(String.class, int.class);</span><br><span class="line">Apple apple = (Apple)constructor.newInstance(&quot;红富士&quot;, 15);</span><br></pre></td></tr></table></figure><h2 id="通过反射获取类属性、方法、构造器等"><a href="#通过反射获取类属性、方法、构造器等" class="headerlink" title="通过反射获取类属性、方法、构造器等"></a>通过反射获取类属性、方法、构造器等</h2><p><strong>通过 Class 类获取成员变量、成员方法、接口、超类、构造方法等</strong></p><p>​       getName()：获得类的完整名字。<br>　　getFields()：获得类的public类型的属性。<br>　　getDeclaredFields()：获得类的所有属性。包括private 声明的和继承类。<br>　　getMethods()：获得类的public类型的方法。<br>　　getDeclaredMethods()：获得类的所有方法。包括private 声明的和继承类。<br>　　getMethod(String name, Class[] parameterTypes)：获得类的特定方法，name参数指定方法的名字，parameterTypes 参数指定方法的参数类型。<br>　　getConstructors()：获得类的public类型的构造方法。<br>　　getConstructor(Class[] parameterTypes)：获得类的特定构造方法，parameterTypes 参数指定构造方法的参数类型。<br>　　newInstance()：通过类的不带参数的构造方法创建这个类的一个对象。</p><p>示例如下：</p><p>我们通过 Class 对象的 getFields() 方法可以获取 Class 类的属性，但无法获取私有属性。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Class clz = Apple.class;</span><br><span class="line">Field[] fields = clz.getFields();</span><br><span class="line">for (Field field : fields) &#123;</span><br><span class="line">    System.out.println(field.getName());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">price</span><br></pre></td></tr></table></figure><p>而如果使用 Class 对象的 getDeclaredFields() 方法则可以获取包括私有属性在内的所有属性：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Class clz = Apple.class;</span><br><span class="line">Field[] fields = clz.getDeclaredFields();</span><br><span class="line">for (Field field : fields) &#123;</span><br><span class="line">    System.out.println(field.getName());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">name</span><br><span class="line">price</span><br></pre></td></tr></table></figure><p>与获取类属性一样，当我们去获取类方法、类构造器时，如果要获取私有方法或私有构造器，则必须使用有 declared 关键字的方法。</p><h2 id="demo："><a href="#demo：" class="headerlink" title="demo："></a>demo：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Apple</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> price;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getPrice</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPrice</span><span class="params">(<span class="type">int</span> price)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.price = price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> indi.jane.study.reflect_demo;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DemoReflect</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="comment">//正常的调用</span></span><br><span class="line">        <span class="type">Apple</span> <span class="variable">apple</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Apple</span>();</span><br><span class="line">        apple.setPrice(<span class="number">5</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;Apple Price:&quot;</span> + apple.getPrice());</span><br><span class="line">        <span class="comment">// 使用反射调用</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">clz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;indi.jane.study.reflect_demo.Apple&quot;</span>);</span><br><span class="line">        <span class="comment">// 获取 Class 类的属性，但无法获取私有属性</span></span><br><span class="line">        Field[] fields = clz.getFields();</span><br><span class="line">        <span class="keyword">for</span> (Field field : fields) &#123;</span><br><span class="line">            System.out.println(field.getName());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 获取私有属性在内的所有属性</span></span><br><span class="line">        Field[] fields2 = clz.getDeclaredFields();</span><br><span class="line">        <span class="keyword">for</span> (Field field : fields2) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;&quot;</span> + field.getName());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 使用反射调用</span></span><br><span class="line">        <span class="type">Method</span> <span class="variable">setPriceMethod</span> <span class="operator">=</span> clz.getMethod(<span class="string">&quot;setPrice&quot;</span>, <span class="type">int</span>.class);</span><br><span class="line">        <span class="type">Method</span> <span class="variable">getPriceMethod</span> <span class="operator">=</span> clz.getMethod(<span class="string">&quot;getPrice&quot;</span>);</span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">appleConstructor</span> <span class="operator">=</span> clz.getConstructor();</span><br><span class="line">        <span class="type">Object</span> <span class="variable">appleObj</span> <span class="operator">=</span> appleConstructor.newInstance();</span><br><span class="line">        setPriceMethod.invoke(appleObj, <span class="number">14</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;Apple Price:&quot;</span> + getPriceMethod.invoke(appleObj));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ip代理池的搭建</title>
      <link href="/post/e5aebd10.html"/>
      <url>/post/e5aebd10.html</url>
      
        <content type="html"><![CDATA[<h1 id="ip搭建"><a href="#ip搭建" class="headerlink" title="ip搭建"></a>ip搭建</h1><h3 id="各种IP地址的获取及接入方式"><a href="#各种IP地址的获取及接入方式" class="headerlink" title="各种IP地址的获取及接入方式"></a><strong>各种IP地址的获取及接入方式</strong></h3><h4 id="vps"><a href="#vps" class="headerlink" title="vps"></a>vps</h4><ul><li>VPS（Virtual Private Server 虚拟专用服务器）技术，将一台服务器分割成多个虚拟专享服务器的优质服务。实现VPS的技术分为容器技术，和虚拟化技术 [1]  。在容器或虚拟机中，每个VPS都可选配独立公网IP地址、独立操作系统、实现不同VPS间磁盘空间、内存、CPU资源、进程和系统配置的隔离，为用户和应用程序模拟出“独占”使用计算资源的体验。VPS可以像独立服务器一样，重装操作系统，安装程序，单独重启服务器。VPS为使用者提供了管理配置的自由，可用于企业虚拟化，也可以用于IDC资源租用</li></ul><h4 id="PPPoE-家庭宽带"><a href="#PPPoE-家庭宽带" class="headerlink" title="PPPoE (家庭宽带)"></a><strong>PPPoE (家庭宽带)</strong></h4><ul><li><p>PPP协议也叫点对点协议（英语：Point-to-Point Protocol，PPP），是一个历史悠久的协议，定义于1992年，备忘录编号RFC 1331。</p><p>它的另外一个名字更为我们所熟知——宽带拨号。 当前我们所用的宽带连接技术，无论ADSL还是光纤接入，在数据链路层上，都使用PPP技术。我们在运营商办理宽带时，如果采用ADSL接入， 运营商会为我们提供一个ADSL Modem，如果使用光纤接入， 运营商为我们提供一个光猫，也叫ONU。 ONU 与 ADSL Modem 为我们建立了与ISP通信的物理层，我们会发现，直接将光猫或ADSL Modem上面的以太网口接入电脑是不行的， 这是因为由于运营商需要AAA，也就是 验证、授权和记账（Authentication、Authorization、Accounting ）。 在我们看来，我们需要“拨号” 才能上网。 “拨号”，就是建立了一个PPP连接。 PPP协议提供了认证的能力， 这也就是为什么我们在“拨号”的时候，可以输入 用户名、密码。 而运营商可以通过用户名和密码来对我们进行认证的原因。</p><p>在建立了PPP连接之后， 在操作系统看来， PPP连接表现为一个网卡，当然这个网卡并不是物理上的网卡，而是一个虚拟的逻辑网卡， 与这个逻辑的网卡进行通信，PPP协议的驱动程序会自动为我们完成PPP协议的封包和拆包工作， 在我们看来，除了由于PPP协议的8个字节开销，导致MTU比正常的要小一些之外, 这个网卡和一般的物理网卡工作起来并没有什么区别。</p><p>一般来说，在PPP连接建立之后， 远端的ISP设备， 称为BAS(接入服务器)，会为PPP链接的客户端赋予一个IP地址. 这个IP地址在几年前一般都是公网IP地址， 现在有很多是NAT过的IP地址. 它们来源于BAS服务器上配置的地址池，通常IP地址池的划分是于区县级的，也有部分城市经过改造，可能是市级，甚至是省级的。</p><p>PPP拨号在爬虫对抗中是很可靠的IP来源，因为它与用户的IP段重合，如果服务提供商贸然封杀IP，会导致严重的误杀， 当然局限性也很大，如果想获取一个地区IP地址，就需要在这个地区架设机房。所需要的时间精力比较大。</p></li></ul><h3 id="获取ip的渠道"><a href="#获取ip的渠道" class="headerlink" title="获取ip的渠道"></a>获取ip的渠道</h3><h5 id="1-ip的选择"><a href="#1-ip的选择" class="headerlink" title="1.ip的选择"></a>1.ip的选择</h5><p>很多ip代理商，代理种类也很多（私密代理，高匿名代理，隧道代理，独享代理，开放代理），价格也不一样。这种最常见，但是质量可能不太高，有很多公司会把一些代理ip公司提供的ip拉入黑名单。</p><p>一些ip可以通过<a href="https://www.ipip.net/">https://www.ipip.net/</a> 来查看ip可用性</p><h5 id="2-通过vps主机拨号换ip"><a href="#2-通过vps主机拨号换ip" class="headerlink" title="2.通过vps主机拨号换ip"></a>2.通过vps主机拨号换ip</h5><p>通过adsl拨号，切换ip，拨号可能会受vps影响，拨号可能失败，或者等待时间长。</p><p>这种方式比之前会比较麻烦，但是这种适合大规模的抓取，直接搭建一个搭建ip库。</p><p>通过把vps服务器配置成代理服务器（有的可能不支持）</p><p>程序  -&gt; 代理服务（使用代理软件（tinyproxy或者squid），然后每次拨号切换ip） -&gt; 互联网</p><p><strong>2.1. 使用TinyProxy</strong></p><p>Tinyproxy 是一个轻量级的开源 web 代理守护进程，其设计目标是快而小。它适用于需要完整 HTTP 代理特性，但系统资源又不足以运行大型代理的场景，比如嵌入式部署。</p><p>Tinyproxy 对小规模网络非常有用，这样的场合下大型代理会使系统资源紧张，或有安全风险。Tinyproxy 的一个关键特性是其缓冲连接的理念。从效果上看， Tinyproxy 对服务器的响应进行了高速缓冲，然后按照客户端能够处理的最高速度进行响应。该特性极大的降低了网络延滞带来的问题。</p><p>思路：</p><p>安装tinyproxy，然后启动代理服务，通过程序可以访问绑定的ip。但是这里有一个缺陷。vps是通过拨号改变ip的，ip一旦改变，程序就不知道了。</p><p>解决：</p><ol><li>这时候需要在新增一个ip管理的一个服务，来收集各个vps主机上的ip信息，然后聚合一起放入一个队列或者数据库。</li><li>通过绑定域名（买一个主域名，然后每个vps配置一个子域名），在通过dns解析服务（阿里或者腾讯的dns服务），解析各个vps的ip，各个vps通过官方的接口更新ip。这样每个域名地址访问一个对应的vps，最后通过各个域名对应的变化的ip，来构建ip池。</li></ol><p><strong>2.2. 使用Squid</strong></p><p>Squid是Web的缓存代理，支持HTTP，HTTPS，FTP等。通过缓存和重用经常请求的网页，它减少了带宽并缩短了响应时间</p><p>cache_peer的配置：</p><p>通过squid.conf配置文件中的cache_peer选项来配置代理服务器阵列，通过其他的选项来控制选择代理伙伴的方法。Cache_peer的使用格式如下：</p><p>cache_peer hostname type http_port icp_port option</p><p>共有5个选项可以配置：</p><ol><li><p>hostname：指被请求的同级子代理服务器或父代理服务器。可以用主机名或ip地址表示；</p></li><li><p>type：指明hostname的类型，是同级子代理服务器还是父代理服务器，也即parent（父） 还是 sibling（子）；</p></li><li><p>http_port：hostname的监听端口；</p></li><li><p>icp_port：hostname上的ICP监听端口，对于不支持ICP协议的可指定7；</p></li><li><p>options：可以包含一个或多个关键</p><ol><li>proxy-only：指明从peer得到的数据在本地不进行缓存，缺省地，squid是要缓存这部分数据的；</li><li>weight&#x3D;n：用于你有多个peer的情况，这时如果多于一个以上的peer拥有你请求的数据时，squid通过计算每个peer的ICP响应时间来 决定其weight的值，然后squid向其中拥有最大weight的peer发出ICP请求。也即weight值越大，其优先级越高。当然你也可以手工 指定其weight值；</li><li>no-query：不向该peer发送ICP请求。如果该peer不可用时，可以使用该选项；</li><li>Default：有点象路由表中的缺省路由，该peer将被用作最后的尝试手段。当你只有一个父代理服务器并且其不支持ICP协议时，可以使用default和no-query选项让所有请求都发送到该父代理服务器；</li><li>login&#x3D;user:password：当你的父代理服务器要求用户认证时可以使用该选项来进行认证。</li><li>round-robin：负载均衡，设置了之后会在配置的二级代理之间进行切换选取</li><li>weighted-round-robin：有权重的负载均衡，同时会根据二级代理的往返时间来改变选取权重，越快的选取概率越高。</li><li>more <a href="http://www.squid-cache.org/Doc/config/cache_peer/">http://www.squid-cache.org/Doc/config/cache_peer/</a></li></ol></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cache_peer hostname type http-port icp-port [options]</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cache_peer 58.22.22.124 parent 2053 0 no-query proxy-only weighted-round-robin login=germey:Yuy3z92hwRmJe2X6fs3BH6aWnt7xePoL</span><br></pre></td></tr></table></figure><p>如果有非常多的代理池，那么可以根据这个格式来写入一个 conf 文件里面，一个代理一个，Squid 引用这个文件即可</p><p>这个 conf 文件可以保存为 peers.conf，然后在 Squid 的配置文件 squid.conf 里面引入即可，例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">include /etc/squid/peers.conf</span><br></pre></td></tr></table></figure><p>这样，Squid 的 cache peers 会被设置为有权重的负载均衡模式，当有请求来的时候，Squid 会随机选一个 cache peer 转发，同时 Squid 还会检测每一个 cache peer 的有效性，我们也不用再单独实现检测逻辑了，省去了一大麻烦。</p><p>嗯，利用上面的方法，我就能维护一个隧道代理了，这样一来，我就可以完成：</p><p>•爬虫的代理直接设置为该 Squid 的 host 和 port 即可。</p><p>•获取到的代理直接写入 peers.conf 配置文件里面，不用再去额外检测代理有效性，Squid 会自动检测。</p><p>•代理池的维护和取用和转发由 Squid 的 cache_peer 机制自动实现，我们不用再去关心随机选取的问题了。</p><p> Squid 高匿代理的关键配置：</p><p>参考：<a href="https://github.com/Python3WebSpider/ProxyTunnel">https://github.com/Python3WebSpider/ProxyTunnel</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">request_header_access Via deny all</span><br><span class="line">request_header_access X-Forwarded-For deny all</span><br></pre></td></tr></table></figure><p><strong>优化方案</strong></p><p>难道我有几万个 IP，每次更新都要写入 Squid 文件吗？写入之后要重启吧，Squid 重启的时候这个代理不就没法用了吗？</p><p>这个问题，一个更好的解决方案是二级代理使用 ADSL 拨号代理服务器，peers.conf 里面配置这些 ADSL 拨号代理，这样 IP 的切换由 ADSL 拨号代理控制，本机 Squid 不用再动 peers.conf 配置文件，也不用重启了，同时还能检测拨号代理的有效性，实现永久可用。</p>]]></content>
      
      
      <categories>
          
          <category> ip代理池 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ip代理池 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常见的混淆反爬措施</title>
      <link href="/post/544a10a3.html"/>
      <url>/post/544a10a3.html</url>
      
        <content type="html"><![CDATA[<h1 id="sojson混淆"><a href="#sojson混淆" class="headerlink" title="sojson混淆"></a>sojson混淆</h1><p><a href="https://www.sojson.com/jsobfuscator.html">https://www.sojson.com/jsobfuscator.html</a></p><p>未混淆的代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot; hi jack&quot;</span>);</span><br></pre></td></tr></table></figure><p>混淆之后的代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> encode_version = <span class="string">&#x27;sojson.v5&#x27;</span>, bteax = <span class="string">&#x27;__0x846a6&#x27;</span>,  __0x846a6=[<span class="string">&#x27;EcKowo4Yfw==&#x27;</span>,<span class="string">&#x27;w7fDr2wEUg==&#x27;</span>,<span class="string">&#x27;KwgLP8Om&#x27;</span>,<span class="string">&#x27;wo8eKcKMeQ==&#x27;</span>,<span class="string">&#x27;w6AMAcKhwrDCtXY=&#x27;</span>,<span class="string">&#x27;OcK+wqw=&#x27;</span>,<span class="string">&#x27;54my5p+t5Y+97766w55z5L+j5a2j5p6R5b2B56mV77+n6LyW6Ky75pej5o6z5ouO5Lia55iE5bW85L2i&#x27;</span>];(<span class="keyword">function</span>(<span class="params">_0x5e9976,_0x4f844c</span>)&#123;<span class="keyword">var</span> _0x560038=<span class="keyword">function</span>(<span class="params">_0x55cc79</span>)&#123;<span class="keyword">while</span>(--_0x55cc79)&#123;_0x5e9976[<span class="string">&#x27;push&#x27;</span>](_0x5e9976[<span class="string">&#x27;shift&#x27;</span>]());&#125;&#125;;<span class="title function_">_0x560038</span>(++_0x4f844c);&#125;(__0x846a6,<span class="number">0x14d</span>));<span class="keyword">var</span> _0x2e2f=<span class="keyword">function</span>(<span class="params">_0x4006c7,_0x5002dc</span>)&#123;_0x4006c7=_0x4006c7-<span class="number">0x0</span>;<span class="keyword">var</span> _0x35bf6b=__0x846a6[_0x4006c7];<span class="keyword">if</span>(_0x2e2f[<span class="string">&#x27;initialized&#x27;</span>]===<span class="literal">undefined</span>)&#123;(<span class="keyword">function</span>(<span class="params"></span>)&#123;<span class="keyword">var</span> _0x42ba13=<span class="keyword">typeof</span> <span class="variable language_">window</span>!==<span class="string">&#x27;undefined&#x27;</span>?<span class="attr">window</span>:<span class="keyword">typeof</span> process===<span class="string">&#x27;object&#x27;</span>&amp;&amp;<span class="keyword">typeof</span> <span class="built_in">require</span>===<span class="string">&#x27;function&#x27;</span>&amp;&amp;<span class="keyword">typeof</span> <span class="variable language_">global</span>===<span class="string">&#x27;object&#x27;</span>?<span class="attr">global</span>:<span class="variable language_">this</span>;<span class="keyword">var</span> _0x786960=<span class="string">&#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=&#x27;</span>;_0x42ba13[<span class="string">&#x27;atob&#x27;</span>]||(_0x42ba13[<span class="string">&#x27;atob&#x27;</span>]=<span class="keyword">function</span>(<span class="params">_0x4fdcdf</span>)&#123;<span class="keyword">var</span> _0x11216a=<span class="title class_">String</span>(_0x4fdcdf)[<span class="string">&#x27;replace&#x27;</span>](<span class="regexp">/=+$/</span>,<span class="string">&#x27;&#x27;</span>);<span class="keyword">for</span>(<span class="keyword">var</span> _0x1293c7=<span class="number">0x0</span>,_0x2f43b9,_0x14a91b,_0x4eca59=<span class="number">0x0</span>,_0x807f0f=<span class="string">&#x27;&#x27;</span>;_0x14a91b=_0x11216a[<span class="string">&#x27;charAt&#x27;</span>](_0x4eca59++);~_0x14a91b&amp;&amp;(_0x2f43b9=_0x1293c7%<span class="number">0x4</span>?_0x2f43b9*<span class="number">0x40</span>+<span class="attr">_0x14a91b</span>:_0x14a91b,_0x1293c7++%<span class="number">0x4</span>)?_0x807f0f+=<span class="title class_">String</span>[<span class="string">&#x27;fromCharCode&#x27;</span>](<span class="number">0xff</span>&amp;_0x2f43b9&gt;&gt;(-<span class="number">0x2</span>*_0x1293c7&amp;<span class="number">0x6</span>)):<span class="number">0x0</span>)&#123;_0x14a91b=_0x786960[<span class="string">&#x27;indexOf&#x27;</span>](_0x14a91b);&#125;<span class="keyword">return</span> _0x807f0f;&#125;);&#125;());<span class="keyword">var</span> _0x11317c=<span class="keyword">function</span>(<span class="params">_0x4ae5a9,_0x244e96</span>)&#123;<span class="keyword">var</span> _0x19abd2=[],_0x316817=<span class="number">0x0</span>,_0x337c30,_0x51f6fc=<span class="string">&#x27;&#x27;</span>,_0x2e1d01=<span class="string">&#x27;&#x27;</span>;_0x4ae5a9=<span class="title function_">atob</span>(_0x4ae5a9);<span class="keyword">for</span>(<span class="keyword">var</span> _0x155526=<span class="number">0x0</span>,_0x10959d=_0x4ae5a9[<span class="string">&#x27;length&#x27;</span>];_0x155526&lt;_0x10959d;_0x155526++)&#123;_0x2e1d01+=<span class="string">&#x27;%&#x27;</span>+(<span class="string">&#x27;00&#x27;</span>+_0x4ae5a9[<span class="string">&#x27;charCodeAt&#x27;</span>](_0x155526)[<span class="string">&#x27;toString&#x27;</span>](<span class="number">0x10</span>))[<span class="string">&#x27;slice&#x27;</span>](-<span class="number">0x2</span>);&#125;_0x4ae5a9=<span class="built_in">decodeURIComponent</span>(_0x2e1d01);<span class="keyword">for</span>(<span class="keyword">var</span> _0x3bb377=<span class="number">0x0</span>;_0x3bb377&lt;<span class="number">0x100</span>;_0x3bb377++)&#123;_0x19abd2[_0x3bb377]=_0x3bb377;&#125;<span class="keyword">for</span>(_0x3bb377=<span class="number">0x0</span>;_0x3bb377&lt;<span class="number">0x100</span>;_0x3bb377++)&#123;_0x316817=(_0x316817+_0x19abd2[_0x3bb377]+_0x244e96[<span class="string">&#x27;charCodeAt&#x27;</span>](_0x3bb377%_0x244e96[<span class="string">&#x27;length&#x27;</span>]))%<span class="number">0x100</span>;_0x337c30=_0x19abd2[_0x3bb377];_0x19abd2[_0x3bb377]=_0x19abd2[_0x316817];_0x19abd2[_0x316817]=_0x337c30;&#125;_0x3bb377=<span class="number">0x0</span>;_0x316817=<span class="number">0x0</span>;<span class="keyword">for</span>(<span class="keyword">var</span> _0x129acb=<span class="number">0x0</span>;_0x129acb&lt;_0x4ae5a9[<span class="string">&#x27;length&#x27;</span>];_0x129acb++)&#123;_0x3bb377=(_0x3bb377+<span class="number">0x1</span>)%<span class="number">0x100</span>;_0x316817=(_0x316817+_0x19abd2[_0x3bb377])%<span class="number">0x100</span>;_0x337c30=_0x19abd2[_0x3bb377];_0x19abd2[_0x3bb377]=_0x19abd2[_0x316817];_0x19abd2[_0x316817]=_0x337c30;_0x51f6fc+=<span class="title class_">String</span>[<span class="string">&#x27;fromCharCode&#x27;</span>](_0x4ae5a9[<span class="string">&#x27;charCodeAt&#x27;</span>](_0x129acb)^_0x19abd2[(_0x19abd2[_0x3bb377]+_0x19abd2[_0x316817])%<span class="number">0x100</span>]);&#125;<span class="keyword">return</span> _0x51f6fc;&#125;;_0x2e2f[<span class="string">&#x27;rc4&#x27;</span>]=_0x11317c;_0x2e2f[<span class="string">&#x27;data&#x27;</span>]=&#123;&#125;;_0x2e2f[<span class="string">&#x27;initialized&#x27;</span>]=!![];&#125;<span class="keyword">var</span> _0x33781b=_0x2e2f[<span class="string">&#x27;data&#x27;</span>][_0x4006c7];<span class="keyword">if</span>(_0x33781b===<span class="literal">undefined</span>)&#123;<span class="keyword">if</span>(_0x2e2f[<span class="string">&#x27;once&#x27;</span>]===<span class="literal">undefined</span>)&#123;_0x2e2f[<span class="string">&#x27;once&#x27;</span>]=!![];&#125;_0x35bf6b=_0x2e2f[<span class="string">&#x27;rc4&#x27;</span>](_0x35bf6b,_0x5002dc);_0x2e2f[<span class="string">&#x27;data&#x27;</span>][_0x4006c7]=_0x35bf6b;&#125;<span class="keyword">else</span>&#123;_0x35bf6b=_0x33781b;&#125;<span class="keyword">return</span> _0x35bf6b;&#125;;<span class="variable language_">console</span>[<span class="string">&#x27;log&#x27;</span>](<span class="title function_">_0x2e2f</span>(<span class="string">&#x27;0x0&#x27;</span>,<span class="string">&#x27;%C$L&#x27;</span>));;(<span class="keyword">function</span>(<span class="params">_0x46ba4e,_0x455fb0,_0x3f0f92</span>)&#123;<span class="keyword">var</span> _0x5c4ab4=&#123;<span class="string">&#x27;MdVnn&#x27;</span>:<span class="title function_">_0x2e2f</span>(<span class="string">&#x27;0x1&#x27;</span>,<span class="string">&#x27;@^DM&#x27;</span>),<span class="string">&#x27;Upspt&#x27;</span>:<span class="keyword">function</span> <span class="title function_">_0x26dc97</span>(<span class="params">_0x3947d4,_0x23ceb9</span>)&#123;<span class="keyword">return</span> _0x3947d4!==_0x23ceb9;&#125;,<span class="string">&#x27;AIUhm&#x27;</span>:<span class="string">&#x27;undefined&#x27;</span>,<span class="string">&#x27;TnDsF&#x27;</span>:<span class="string">&#x27;sojson.v5&#x27;</span>,<span class="string">&#x27;QONCf&#x27;</span>:<span class="keyword">function</span> <span class="title function_">_0x5d53bb</span>(<span class="params">_0x3d3c24,_0x2f92ee</span>)&#123;<span class="keyword">return</span> _0x3d3c24+_0x2f92ee;&#125;,<span class="string">&#x27;rMAWU&#x27;</span>:<span class="title function_">_0x2e2f</span>(<span class="string">&#x27;0x2&#x27;</span>,<span class="string">&#x27;RHT#&#x27;</span>),<span class="string">&#x27;XAHkM&#x27;</span>:<span class="string">&#x27;删除版本号，js会定期弹窗&#x27;</span>&#125;;_0x3f0f92=<span class="string">&#x27;al&#x27;</span>;<span class="keyword">try</span>&#123;_0x3f0f92+=_0x5c4ab4[<span class="title function_">_0x2e2f</span>(<span class="string">&#x27;0x3&#x27;</span>,<span class="string">&#x27;@^DM&#x27;</span>)];_0x455fb0=encode_version;<span class="keyword">if</span>(!(_0x5c4ab4[<span class="string">&#x27;Upspt&#x27;</span>](<span class="keyword">typeof</span> _0x455fb0,_0x5c4ab4[<span class="title function_">_0x2e2f</span>(<span class="string">&#x27;0x4&#x27;</span>,<span class="string">&#x27;4aKX&#x27;</span>)])&amp;&amp;_0x455fb0===_0x5c4ab4[<span class="title function_">_0x2e2f</span>(<span class="string">&#x27;0x5&#x27;</span>,<span class="string">&#x27;azOV&#x27;</span>)]))&#123;_0x46ba4e[_0x3f0f92](_0x5c4ab4[<span class="title function_">_0x2e2f</span>(<span class="string">&#x27;0x6&#x27;</span>,<span class="string">&#x27;8iGz&#x27;</span>)](<span class="string">&#x27;删除&#x27;</span>,_0x5c4ab4[<span class="string">&#x27;rMAWU&#x27;</span>]));&#125;&#125;<span class="keyword">catch</span>(_0x3905a3)&#123;_0x46ba4e[_0x3f0f92](_0x5c4ab4[<span class="string">&#x27;XAHkM&#x27;</span>]);&#125;&#125;(<span class="variable language_">window</span>));;encode_version = <span class="string">&#x27;sojson.v5&#x27;</span>;</span><br></pre></td></tr></table></figure><h1 id="jjencode"><a href="#jjencode" class="headerlink" title="jjencode"></a>jjencode</h1><p><a href="https://utf-8.jp/public/jjencode.html">https://utf-8.jp/public/jjencode.html</a></p><p>未混淆：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot; hi jack&quot;</span>);</span><br></pre></td></tr></table></figure><p>混淆：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">_=~[];_=&#123;<span class="attr">___</span>:++_,<span class="attr">$$$$</span>:(![]+<span class="string">&quot;&quot;</span>)[_],<span class="attr">__$</span>:++_,<span class="attr">$_$_</span>:(![]+<span class="string">&quot;&quot;</span>)[_],<span class="attr">_$_</span>:++_,<span class="attr">$_$$</span>:(&#123;&#125;+<span class="string">&quot;&quot;</span>)[_],<span class="attr">$$_$</span>:(_[_]+<span class="string">&quot;&quot;</span>)[_],<span class="attr">_$$</span>:++_,<span class="attr">$$$_</span>:(!<span class="string">&quot;&quot;</span>+<span class="string">&quot;&quot;</span>)[_],<span class="attr">$__</span>:++_,<span class="attr">$_$</span>:++_,<span class="attr">$$__</span>:(&#123;&#125;+<span class="string">&quot;&quot;</span>)[_],<span class="attr">$$_</span>:++_,<span class="attr">$$$</span>:++_,<span class="attr">$___</span>:++_,<span class="attr">$__$</span>:++_&#125;;_.<span class="property">$_</span>=(_.<span class="property">$_</span>=_+<span class="string">&quot;&quot;</span>)[_.<span class="property">$_$</span>]+(_.<span class="property">_$</span>=_.<span class="property">$_</span>[_.<span class="property">__$</span>])+(_.<span class="property">$$</span>=(_.<span class="property">$</span>+<span class="string">&quot;&quot;</span>)[_.<span class="property">__$</span>])+((!_)+<span class="string">&quot;&quot;</span>)[_.<span class="property">_$$</span>]+(_.<span class="property">__</span>=_.<span class="property">$_</span>[_.<span class="property">$$_</span>])+(_.<span class="property">$</span>=(!<span class="string">&quot;&quot;</span>+<span class="string">&quot;&quot;</span>)[_.<span class="property">__$</span>])+(_.<span class="property">_</span>=(!<span class="string">&quot;&quot;</span>+<span class="string">&quot;&quot;</span>)[_.<span class="property">_$_</span>])+_.<span class="property">$_</span>[_.<span class="property">$_$</span>]+_.<span class="property">__</span>+_.<span class="property">_$</span>+_.<span class="property">$</span>;_.<span class="property">$$</span>=_.<span class="property">$</span>+(!<span class="string">&quot;&quot;</span>+<span class="string">&quot;&quot;</span>)[_.<span class="property">_$$</span>]+_.<span class="property">__</span>+_.<span class="property">_</span>+_.<span class="property">$</span>+_.<span class="property">$$</span>;_.<span class="property">$</span>=(_.<span class="property">___</span>)[_.<span class="property">$_</span>][_.<span class="property">$_</span>];_.$(_.$(_.<span class="property">$$</span>+<span class="string">&quot;\&quot;&quot;</span>+_.<span class="property">$$__</span>+_.<span class="property">_$</span>+<span class="string">&quot;\\&quot;</span>+_.<span class="property">__$</span>+_.<span class="property">$_$</span>+_.<span class="property">$$_</span>+<span class="string">&quot;\\&quot;</span>+_.<span class="property">__$</span>+_.<span class="property">$$_</span>+_.<span class="property">_$$</span>+_.<span class="property">_$</span>+(![]+<span class="string">&quot;&quot;</span>)[_.<span class="property">_$_</span>]+_.<span class="property">$$$_</span>+<span class="string">&quot;.&quot;</span>+(![]+<span class="string">&quot;&quot;</span>)[_.<span class="property">_$_</span>]+_.<span class="property">_$</span>+<span class="string">&quot;\\&quot;</span>+_.<span class="property">__$</span>+_.<span class="property">$__</span>+_.<span class="property">$$$</span>+<span class="string">&quot;(\\\&quot;\\&quot;</span>+_.<span class="property">$__</span>+_.<span class="property">___</span>+<span class="string">&quot;\\&quot;</span>+_.<span class="property">__$</span>+_.<span class="property">$_$</span>+_.<span class="property">___</span>+<span class="string">&quot;\\&quot;</span>+_.<span class="property">__$</span>+_.<span class="property">$_$</span>+_.<span class="property">__$</span>+<span class="string">&quot;\\&quot;</span>+_.<span class="property">$__</span>+_.<span class="property">___</span>+<span class="string">&quot;\\&quot;</span>+_.<span class="property">__$</span>+_.<span class="property">$_$</span>+_.<span class="property">_$_</span>+_.<span class="property">$_$_</span>+_.<span class="property">$$__</span>+<span class="string">&quot;\\&quot;</span>+_.<span class="property">__$</span>+_.<span class="property">$_$</span>+_.<span class="property">_$$</span>+<span class="string">&quot;\\\&quot;);&quot;</span>+<span class="string">&quot;\&quot;&quot;</span>)())();</span><br></pre></td></tr></table></figure><h1 id="jsfuck"><a href="#jsfuck" class="headerlink" title="jsfuck"></a>jsfuck</h1><p><a href="https://www.bugku.com/tools/jsfuck/#">https://www.bugku.com/tools/jsfuck/#</a></p><p>未混淆：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot; hi jack&quot;</span>);</span><br></pre></td></tr></table></figure><p>混淆：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(![]+[])[!+[]+!+[]]][([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(![]+[])[!+[]+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(![]+[])[!+[]+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(![]+[])[!+[]+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(![]+[])[!+[]+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]]((!![]+[])[+!+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+([][[]]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+!+[]]+(+[![]]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(![]+[])[!+[]+!+[]]])[+!+[]+[+!+[]]]+(!![]+[])[!+[]+!+[]+!+[]]+(+(!+[]+!+[]+!+[]+[+!+[]]))[(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(![]+[])[!+[]+!+[]]])[+!+[]+[+[]]]+([]+[])[([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(![]+[])[!+[]+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(![]+[])[!+[]+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(![]+[])[!+[]+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(![]+[])[!+[]+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]][([][[]]+[])[+!+[]]+(![]+[])[+!+[]]+((+[])[([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(![]+[])[!+[]+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(![]+[])[!+[]+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(![]+[])[!+[]+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(![]+[])[!+[]+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]]+[])[+!+[]+[+!+[]]]+(!![]+[])[!+[]+!+[]+!+[]]]](!+[]+!+[]+!+[]+[!+[]+!+[]])+(![]+[])[+!+[]]+(![]+[])[!+[]+!+[]])()(([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(![]+[])[!+[]+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(![]+[])[!+[]+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(![]+[])[!+[]+!+[]]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(+(+!+[]+[+!+[]]+(!![]+[])[!+[]+!+[]+!+[]]+[!+[]+!+[]]+[+[]])+[])[+!+[]]+(![]+[])[!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(![]+[])[!+[]+!+[]]])[+!+[]+[+[]]]+(![]+[+[]]+([]+[])[([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(![]+[])[!+[]+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(![]+[])[!+[]+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(![]+[])[!+[]+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(![]+[])[!+[]+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]])[!+[]+!+[]+[+[]]]+([][[]]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(![]+[])[!+[]+!+[]]])[!+[]+!+[]+[!+[]+!+[]]]+([]+[])[(![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(![]+[])[!+[]+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(!![]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(![]+[])[!+[]+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(![]+[])[!+[]+!+[]]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(![]+[])[!+[]+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]]()[+!+[]+[!+[]+!+[]]]+(+[![]]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(![]+[])[!+[]+!+[]]])[+!+[]+[+!+[]]]+(+(+!+[]+[+[]]+[+!+[]]))[(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(![]+[])[!+[]+!+[]]])[+!+[]+[+[]]]+([]+[])[([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(![]+[])[!+[]+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(![]+[])[!+[]+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(![]+[])[!+[]+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(![]+[])[!+[]+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]][([][[]]+[])[+!+[]]+(![]+[])[+!+[]]+((+[])[([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(![]+[])[!+[]+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(![]+[])[!+[]+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(![]+[])[!+[]+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(![]+[])[!+[]+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]]+[])[+!+[]+[+!+[]]]+(!![]+[])[!+[]+!+[]+!+[]]]](!+[]+!+[]+[+!+[]])[+!+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(+[![]]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(![]+[])[!+[]+!+[]]])[+!+[]+[+!+[]]]+([][(!![]+[])[!+[]+!+[]+!+[]]+([][[]]+[])[+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(!![]+[])[!+[]+!+[]+!+[]]+(![]+[])[!+[]+!+[]+!+[]]]()+[])[!+[]+!+[]+!+[]]+(![]+[])[+!+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(![]+[])[!+[]+!+[]]]+[])[!+[]+!+[]+!+[]]+(+(!+[]+!+[]+[+[]]))[(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(![]+[])[!+[]+!+[]]])[+!+[]+[+[]]]+([]+[])[([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(![]+[])[!+[]+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(![]+[])[!+[]+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(![]+[])[!+[]+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(![]+[])[!+[]+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]][([][[]]+[])[+!+[]]+(![]+[])[+!+[]]+((+[])[([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(![]+[])[!+[]+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(![]+[])[!+[]+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(![]+[])[!+[]+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(![]+[])[!+[]+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]]+[])[+!+[]+[+!+[]]]+(!![]+[])[!+[]+!+[]+!+[]]]](!+[]+!+[]+[+!+[]])+([]+[])[(![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(![]+[])[!+[]+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(!![]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(![]+[])[!+[]+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(![]+[])[!+[]+!+[]]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(![]+[])[!+[]+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]]()[+!+[]+[!+[]+!+[]]]+([+[]]+![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(![]+[])[!+[]+!+[]]])[!+[]+!+[]+[+[]]]+([]+[])[(![]+[])[!+[]+!+[]]+([![]]+[][[]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(+(!+[]+!+[]+[+[]]))[(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(![]+[])[!+[]+!+[]]])[+!+[]+[+[]]]+([]+[])[([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(![]+[])[!+[]+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(![]+[])[!+[]+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(![]+[])[!+[]+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(![]+[])[!+[]+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]][([][[]]+[])[+!+[]]+(![]+[])[+!+[]]+((+[])[([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(![]+[])[!+[]+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(![]+[])[!+[]+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([][[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(![]+[])[!+[]+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(![]+[])[!+[]+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]]+[])[+!+[]+[+!+[]]]+(!![]+[])[!+[]+!+[]+!+[]]]](!+[]+!+[]+[+!+[]])](([]+[])[(![]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(![]+[])[!+[]+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(!![]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(![]+[])[!+[]+!+[]]]+[])[!+[]+!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(![]+[])[!+[]+!+[]]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(![]+[])[!+[]+!+[]]])[+!+[]+[+[]]]+(!![]+[])[+!+[]]]()[+!+[]+[!+[]+!+[]]])[+!+[]+[!+[]+!+[]+!+[]+!+[]]])</span><br></pre></td></tr></table></figure><h1 id="aaendoced"><a href="#aaendoced" class="headerlink" title="aaendoced"></a>aaendoced</h1><p><a href="https://utf-8.jp/public/aaencode.html">https://utf-8.jp/public/aaencode.html</a></p><p>未混淆：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot; hi jack&quot;</span>);</span><br></pre></td></tr></table></figure><p>混淆：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ﾟωﾟﾉ= <span class="regexp">/｀ｍ´）ﾉ ~┻━┻   /</span><span class="regexp">/*´∇｀*/</span> [<span class="string">&#x27;_&#x27;</span>]; o=(ﾟｰﾟ)  =_=<span class="number">3</span>; c=(ﾟΘﾟ) =(ﾟｰﾟ)-(ﾟｰﾟ); (ﾟДﾟ) =(ﾟΘﾟ)= (o^_^o)/ (o^_^o);(ﾟДﾟ)=&#123;ﾟΘﾟ: <span class="string">&#x27;_&#x27;</span> ,ﾟωﾟﾉ : ((ﾟωﾟﾉ==<span class="number">3</span>) +<span class="string">&#x27;_&#x27;</span>) [ﾟΘﾟ] ,ﾟｰﾟﾉ :(ﾟωﾟﾉ+ <span class="string">&#x27;_&#x27;</span>)[o^_^o -(ﾟΘﾟ)] ,ﾟДﾟﾉ:((ﾟｰﾟ==<span class="number">3</span>) +<span class="string">&#x27;_&#x27;</span>)[ﾟｰﾟ] &#125;; (ﾟДﾟ) [ﾟΘﾟ] =((ﾟωﾟﾉ==<span class="number">3</span>) +<span class="string">&#x27;_&#x27;</span>) [c^_^o];(ﾟДﾟ) [<span class="string">&#x27;c&#x27;</span>] = ((ﾟДﾟ)+<span class="string">&#x27;_&#x27;</span>) [ (ﾟｰﾟ)+(ﾟｰﾟ)-(ﾟΘﾟ) ];(ﾟДﾟ) [<span class="string">&#x27;o&#x27;</span>] = ((ﾟДﾟ)+<span class="string">&#x27;_&#x27;</span>) [ﾟΘﾟ];(ﾟoﾟ)=(ﾟДﾟ) [<span class="string">&#x27;c&#x27;</span>]+(ﾟДﾟ) [<span class="string">&#x27;o&#x27;</span>]+(ﾟωﾟﾉ +<span class="string">&#x27;_&#x27;</span>)[ﾟΘﾟ]+ ((ﾟωﾟﾉ==<span class="number">3</span>) +<span class="string">&#x27;_&#x27;</span>) [ﾟｰﾟ] + ((ﾟДﾟ) +<span class="string">&#x27;_&#x27;</span>) [(ﾟｰﾟ)+(ﾟｰﾟ)]+ ((ﾟｰﾟ==<span class="number">3</span>) +<span class="string">&#x27;_&#x27;</span>) [ﾟΘﾟ]+((ﾟｰﾟ==<span class="number">3</span>) +<span class="string">&#x27;_&#x27;</span>) [(ﾟｰﾟ) - (ﾟΘﾟ)]+(ﾟДﾟ) [<span class="string">&#x27;c&#x27;</span>]+((ﾟДﾟ)+<span class="string">&#x27;_&#x27;</span>) [(ﾟｰﾟ)+(ﾟｰﾟ)]+ (ﾟДﾟ) [<span class="string">&#x27;o&#x27;</span>]+((ﾟｰﾟ==<span class="number">3</span>) +<span class="string">&#x27;_&#x27;</span>) [ﾟΘﾟ];(ﾟДﾟ) [<span class="string">&#x27;_&#x27;</span>] =(o^_^o) [ﾟoﾟ] [ﾟoﾟ];(ﾟεﾟ)=((ﾟｰﾟ==<span class="number">3</span>) +<span class="string">&#x27;_&#x27;</span>) [ﾟΘﾟ]+ (ﾟДﾟ) .ﾟДﾟﾉ+((ﾟДﾟ)+<span class="string">&#x27;_&#x27;</span>) [(ﾟｰﾟ) + (ﾟｰﾟ)]+((ﾟｰﾟ==<span class="number">3</span>) +<span class="string">&#x27;_&#x27;</span>) [o^_^o -ﾟΘﾟ]+((ﾟｰﾟ==<span class="number">3</span>) +<span class="string">&#x27;_&#x27;</span>) [ﾟΘﾟ]+ (ﾟωﾟﾉ +<span class="string">&#x27;_&#x27;</span>) [ﾟΘﾟ]; (ﾟｰﾟ)+=(ﾟΘﾟ); (ﾟДﾟ)[ﾟεﾟ]=<span class="string">&#x27;\\&#x27;</span>; (ﾟДﾟ).ﾟΘﾟﾉ=(ﾟДﾟ+ ﾟｰﾟ)[o^_^o -(ﾟΘﾟ)];(oﾟｰﾟo)=(ﾟωﾟﾉ +<span class="string">&#x27;_&#x27;</span>)[c^_^o];(ﾟДﾟ) [ﾟoﾟ]=<span class="string">&#x27;\&quot;&#x27;</span>;(ﾟДﾟ) [<span class="string">&#x27;_&#x27;</span>] ( (ﾟДﾟ) [<span class="string">&#x27;_&#x27;</span>] (ﾟεﾟ+(ﾟДﾟ)[ﾟoﾟ]+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((o^_^o) +(o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) +(o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟｰﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ ((ﾟｰﾟ) + (o^_^o))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+ (c^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ (ﾟｰﾟ)+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟΘﾟ)+ ((ﾟｰﾟ) + (ﾟΘﾟ))+ (o^_^o)+ (ﾟДﾟ)[ﾟεﾟ]+(ﾟｰﾟ)+ ((o^_^o) - (ﾟΘﾟ))+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (ﾟΘﾟ))+ (ﾟΘﾟ)+ (ﾟДﾟ)[ﾟεﾟ]+((ﾟｰﾟ) + (o^_^o))+ (o^_^o)+ (ﾟДﾟ)[ﾟoﾟ]) (ﾟΘﾟ)) (<span class="string">&#x27;_&#x27;</span>);</span><br></pre></td></tr></table></figure><h1 id="packer"><a href="#packer" class="headerlink" title="packer"></a>packer</h1><p><a href="http://dean.edwards.name/packer/">http://dean.edwards.name/packer/</a></p><p>未混淆：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot; hi jack&quot;</span>);</span><br></pre></td></tr></table></figure><p>混淆：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">eval</span>(<span class="keyword">function</span>(<span class="params">p,a,c,k,e,r</span>)&#123;e=<span class="title class_">String</span>;<span class="keyword">if</span>(!<span class="string">&#x27;&#x27;</span>.<span class="title function_">replace</span>(<span class="regexp">/^/</span>,<span class="title class_">String</span>))&#123;<span class="keyword">while</span>(c--)r[c]=k[c]||c;k=[<span class="keyword">function</span>(<span class="params">e</span>)&#123;<span class="keyword">return</span> r[e]&#125;];e=<span class="keyword">function</span>(<span class="params"></span>)&#123;<span class="keyword">return</span><span class="string">&#x27;\\w+&#x27;</span>&#125;;c=<span class="number">1</span>&#125;;<span class="keyword">while</span>(c--)<span class="keyword">if</span>(k[c])p=p.<span class="title function_">replace</span>(<span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="string">&#x27;\\b&#x27;</span>+<span class="title function_">e</span>(c)+<span class="string">&#x27;\\b&#x27;</span>,<span class="string">&#x27;g&#x27;</span>),k[c]);<span class="keyword">return</span> p&#125;(<span class="string">&#x27;0.1(&quot; 2 3&quot;);&#x27;</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="string">&#x27;console|log|hi|jack&#x27;</span>.<span class="title function_">split</span>(<span class="string">&#x27;|&#x27;</span>),<span class="number">0</span>,&#123;&#125;))</span><br></pre></td></tr></table></figure><h1 id="AST混淆"><a href="#AST混淆" class="headerlink" title="AST混淆"></a>AST混淆</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">UglifyJS</span> = <span class="built_in">require</span>(<span class="string">&quot;uglify-js&quot;</span>);</span><br><span class="line"><span class="comment">// 定义用于混淆的 JavaScript 代码</span></span><br><span class="line"><span class="keyword">var</span> code = <span class="string">`</span></span><br><span class="line"><span class="string">var ins = 1 + 2, ss = &quot;abc&quot;;</span></span><br><span class="line"><span class="string">function pack(a, b)&#123;</span></span><br><span class="line"><span class="string">    return a + b + ss;</span></span><br><span class="line"><span class="string">&#125;;</span></span><br><span class="line"><span class="string">var pp = pack(ins, 6);</span></span><br><span class="line"><span class="string">console.log(pp);</span></span><br><span class="line"><span class="string">`</span></span><br><span class="line"><span class="keyword">var</span> astree = <span class="title class_">UglifyJS</span>.<span class="title function_">parse</span>(code); <span class="comment">// 解析代码并生成语法树</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> trans = <span class="keyword">new</span> <span class="title class_">UglifyJS</span>.<span class="title class_">TreeTransformer</span>(<span class="keyword">function</span> (<span class="params">node</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (node <span class="keyword">instanceof</span> <span class="title class_">UglifyJS</span>.<span class="property">AST_String</span> || node <span class="keyword">instanceof</span> <span class="title class_">UglifyJS</span>.<span class="property">AST_Number</span>) &#123;<span class="comment">// 过滤出 String 对象和 Number 对象   </span></span><br><span class="line">            <span class="comment">// 混淆逻辑</span></span><br><span class="line">            <span class="comment">// 过滤出 String 对象和 Number 对象    </span></span><br><span class="line">            <span class="keyword">var</span> charhex = <span class="title function_">charTo16</span>(node.<span class="property">value</span>);</span><br><span class="line">            node.<span class="property">value</span> = charhex;</span><br><span class="line">            <span class="keyword">return</span> node; <span class="comment">// 更新语法树</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 数字、字母转16进制</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">charTo16</span>(<span class="params">s</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> result = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;s.<span class="title function_">toString</span>().<span class="property">length</span>; i++) &#123;</span><br><span class="line">            <span class="comment">// 用“&amp;#x”作为“\x”的替代，后期换回</span></span><br><span class="line">            <span class="keyword">var</span> res = <span class="string">&quot;&amp;#xsfsd2a1~~&quot;</span> + s.<span class="title function_">toString</span>().<span class="title function_">charCodeAt</span>(i).<span class="title function_">toString</span>(<span class="number">16</span>);</span><br><span class="line">            result += res;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">astree.<span class="title function_">transform</span>(trans);  <span class="comment">//遍历AST树</span></span><br><span class="line"><span class="keyword">var</span> ncode = astree.<span class="title function_">print_to_string</span>(); <span class="comment">//从AST还原成字符串</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ncode)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ncode.<span class="title function_">replace</span>(<span class="regexp">/&amp;#x/g</span>, <span class="string">&quot;\\x&quot;</span>));</span><br></pre></td></tr></table></figure><h1 id="obfuscator混淆"><a href="#obfuscator混淆" class="headerlink" title="obfuscator混淆"></a>obfuscator混淆</h1><p><a href="https://obfuscator.io/">https://obfuscator.io/</a></p>]]></content>
      
      
      <categories>
          
          <category> 反爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 反爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常见的web反爬措施</title>
      <link href="/post/462f787a.html"/>
      <url>/post/462f787a.html</url>
      
        <content type="html"><![CDATA[<h3 id="1-window-navigator-webdriver"><a href="#1-window-navigator-webdriver" class="headerlink" title="1.window.navigator.webdriver"></a>1.window.navigator.webdriver</h3><p>这个只能检测webdriver驱动浏览器的渲染工具，splash就不行（基于webkit）</p><h4 id="step1：打开淘宝网"><a href="#step1：打开淘宝网" class="headerlink" title="step1：打开淘宝网"></a>step1：打开淘宝网</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium.webdriver <span class="keyword">import</span> Chrome</span><br><span class="line">url = <span class="string">&quot;https://www.taobao.com/&quot;</span></span><br><span class="line">driver =Chrome()</span><br><span class="line">driver.get(url)</span><br></pre></td></tr></table></figure><h4 id="step2：打开console，输入window-navigator-webdriver发现等于true"><a href="#step2：打开console，输入window-navigator-webdriver发现等于true" class="headerlink" title="step2：打开console，输入window.navigator.webdriver发现等于true"></a>step2：打开console，输入window.navigator.webdriver发现等于true</h4><h4 id="step3：解决的思路是，让这个值变成undefined，js代码操作如下："><a href="#step3：解决的思路是，让这个值变成undefined，js代码操作如下：" class="headerlink" title="step3：解决的思路是，让这个值变成undefined，js代码操作如下："></a>step3：解决的思路是，让这个值变成undefined，js代码操作如下：</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperties</span>(</span><br><span class="line">navigator,&#123;</span><br><span class="line"><span class="attr">webdriver</span>:&#123;<span class="attr">get</span>:<span class="function">()=&gt;</span><span class="literal">undefined</span>&#125;</span><br><span class="line">&#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><strong>注意：</strong></p><p><strong><code>driver.get(网址)</code>的时候，浏览器会打开网站，加载页面并运行网站自带的js代码。所以在你重设 <code>window.navigator.webdriver</code>之前，实际上网站早就已经知道你是模拟浏览器了</strong></p><h4 id="step4：解决"><a href="#step4：解决" class="headerlink" title="step4：解决"></a>step4：解决</h4><p>注意，更新版本最新</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium.webdriver <span class="keyword">import</span> Chrome</span><br><span class="line">url = <span class="string">&quot;https://www.taobao.com/&quot;</span></span><br><span class="line">driver =Chrome()</span><br><span class="line">driver.execute_cdp_cmd(<span class="string">&quot;Page.addScriptToEvaluateOnNewDocument&quot;</span>, &#123;</span><br><span class="line">  <span class="string">&quot;source&quot;</span>: <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Object.defineProperty(navigator, &#x27;webdriver&#x27;, &#123;</span></span><br><span class="line"><span class="string">      get: () =&gt; undefined</span></span><br><span class="line"><span class="string">    &#125;)</span></span><br><span class="line"><span class="string">  &quot;&quot;&quot;</span></span><br><span class="line">&#125;)</span><br><span class="line">driver.get(url)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>或者用mitmproxy代理来过检测</p><h4 id="番外："><a href="#番外：" class="headerlink" title="番外："></a>番外：</h4><p>Xvfb  + selenium <a href="https://gist.github.com/amberj/6695353">https://gist.github.com/amberj/6695353</a></p><h3 id="2-headers请求参数反爬"><a href="#2-headers请求参数反爬" class="headerlink" title="2. headers请求参数反爬"></a>2. headers请求参数反爬</h3><h4 id="1-User-Agent身份信息验证"><a href="#1-User-Agent身份信息验证" class="headerlink" title="1.User-Agent身份信息验证"></a>1.User-Agent身份信息验证</h4><p>你是java，python，c++，还是浏览器</p><h4 id="2-cookie认证"><a href="#2-cookie认证" class="headerlink" title="2.cookie认证"></a>2.cookie认证</h4><h4 id="3-headers请求的顺序"><a href="#3-headers请求的顺序" class="headerlink" title="3.headers请求的顺序"></a>3.headers请求的顺序</h4><p>顺序不一样，请求结果不一样</p><h3 id="3-url中参数验证"><a href="#3-url中参数验证" class="headerlink" title="3.url中参数验证"></a>3.url中参数验证</h3><p>什么sign，cp，as，x-sign</p><h3 id="4-websocket"><a href="#4-websocket" class="headerlink" title="4.websocket"></a>4.websocket</h3><p>参考：<a href="https://juejin.im/post/5c80b768f265da2dae514d4f#comment">https://juejin.im/post/5c80b768f265da2dae514d4f#comment</a></p><p>WebSocket是一种在单个TCP连接上进行全双工通信的协议。它使得客户端和服务器之间的数据交换变得更加简单，允许服务端主动向客户端推送数据。在WebSocket API中，浏览器和服务器只需要完成一次握手，两者之间就直接可以创建持久性的连接，并进行双向数据传输。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">from</span> aiowebsocket.converses <span class="keyword">import</span> AioWebSocket</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">startup</span>(<span class="params">uri</span>):</span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">with</span> AioWebSocket(uri) <span class="keyword">as</span> aws:</span><br><span class="line">        converse = aws.manipulator</span><br><span class="line">        <span class="comment"># 客户端给服务端发送消息</span></span><br><span class="line">        <span class="keyword">await</span> converse.send(<span class="string">&#x27;&#123;&quot;action&quot;:&quot;subscribe&quot;,&quot;args&quot;:[&quot;QuoteBin5m:14&quot;]&#125;&#x27;</span>)</span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            mes = <span class="keyword">await</span> converse.receive()</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;&#123;time&#125;-Client receive: &#123;rec&#125;&#x27;</span></span><br><span class="line">                  .<span class="built_in">format</span>(time=datetime.now().strftime(<span class="string">&#x27;%Y-%m-%d %H:%M:%S&#x27;</span>), rec=mes))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    remote = <span class="string">&#x27;wss://api.bbxapp.vip/v1/ifcontract/realTime&#x27;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        asyncio.get_event_loop().run_until_complete(startup(remote))</span><br><span class="line">    <span class="keyword">except</span> KeyboardInterrupt <span class="keyword">as</span> exc:</span><br><span class="line">        logging.info(<span class="string">&#x27;Quit.&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="5-图片伪装反爬"><a href="#5-图片伪装反爬" class="headerlink" title="5.图片伪装反爬"></a>5.图片伪装反爬</h3><p>通过图片的形式把数据显示。</p><p>解决的办法就是识别图片里面的信息</p><h3 id="6-css偏移反爬"><a href="#6-css偏移反爬" class="headerlink" title="6.css偏移反爬"></a>6.css偏移反爬</h3><p>通过css样式的设置，导致显示位移的偏移覆盖。</p><p>解决的方法：</p><p>1.找到原本显示的标签的属性值，关键的属性，width（所占的位置大小），left（偏移位置）</p><p>2.覆盖原本位置的标签的属性，看left位置和之前的对比，如果在范围内重合就是覆盖了</p><h3 id="7-svg映射反爬"><a href="#7-svg映射反爬" class="headerlink" title="7.svg映射反爬"></a>7.svg映射反爬</h3><p>SVG 意为可缩放矢量图形（Scalable Vector Graphics）</p><p>反爬额策略是在标签中映射字体</p><h5 id="第一步：找到css样式地址，以及svg地址"><a href="#第一步：找到css样式地址，以及svg地址" class="headerlink" title="第一步：找到css样式地址，以及svg地址"></a>第一步：找到css样式地址，以及svg地址</h5><h5 id="第二步：找到对应的符号对应的css的background属性的x，y值"><a href="#第二步：找到对应的符号对应的css的background属性的x，y值" class="headerlink" title="第二步：找到对应的符号对应的css的background属性的x，y值"></a>第二步：找到对应的符号对应的css的background属性的x，y值</h5><h5 id="第三步：找到css样式属性中对应的svg的y的的位置，只要css中y的值大于等于svg的值，就可以了"><a href="#第三步：找到css样式属性中对应的svg的y的的位置，只要css中y的值大于等于svg的值，就可以了" class="headerlink" title="第三步：找到css样式属性中对应的svg的y的的位置，只要css中y的值大于等于svg的值，就可以了"></a>第三步：找到css样式属性中对应的svg的y的的位置，只要css中y的值大于等于svg的值，就可以了</h5><h5 id="第四步：找svg中x的值，通过svg中font-size的值（为什么是这个值，因为这个值就是排版的距离），然后取x的值除以font-size的值，向上取整数"><a href="#第四步：找svg中x的值，通过svg中font-size的值（为什么是这个值，因为这个值就是排版的距离），然后取x的值除以font-size的值，向上取整数" class="headerlink" title="第四步：找svg中x的值，通过svg中font-size的值（为什么是这个值，因为这个值就是排版的距离），然后取x的值除以font-size的值，向上取整数"></a>第四步：找svg中x的值，通过svg中font-size的值（为什么是这个值，因为这个值就是排版的距离），然后取x的值除以font-size的值，向上取整数</h5><h5 id="第五步：找到的位置在x值中找"><a href="#第五步：找到的位置在x值中找" class="headerlink" title="第五步：找到的位置在x值中找"></a>第五步：找到的位置在x值中找</h5><h3 id="7-WOFF字体反爬"><a href="#7-WOFF字体反爬" class="headerlink" title="7.WOFF字体反爬"></a>7.WOFF字体反爬</h3><p>woff是一种网页所采用的字体格式的标准。与此类似的还有tff格式的字体。</p><p>反爬的套路：</p><p>用woff或者tff字体，你看不懂就行了。</p><p>小知识：</p><p>TTGlyph 节点下，name为所绘制的文字，contour节点为字型信息。pt 中的 x, y 为关键点的坐标，on的值 1表示直线，0表示弧形。name 为文字名，一个表识。标准字体的name即为所绘文字的unicode16进制编码。</p><p>转换：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">result = hex(ord(&quot;你&quot;))</span><br></pre></td></tr></table></figure><p>一个文字张什么样子是由x、y、on来决定的。拿到一个非标准字体中某个文字的x、y、on后，在对应的标准字体文件中寻找最相近的x、y、on以及其表达的文字，这样所找到的文字即为解密后的文字</p><p>第一步：找到字体之间的映射关系</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> fontTools.ttLib <span class="keyword">import</span> TTFont</span><br><span class="line">font = TTFont(<span class="string">&#x27;movie.woff&#x27;</span>)  <span class="comment"># 打开当前目录的movie.woff文件</span></span><br><span class="line">font.saveXML(<span class="string">&#x27;movie.xml&#x27;</span>)  <span class="comment"># 另存为movie.xml</span></span><br></pre></td></tr></table></figure><p>第二步：用字体解析器，查看字体 <a href="https://font.qqe2.com/">https://font.qqe2.com/</a></p><p>第三步：手写映射关系</p><p>这个映射的关系，分俩种：</p><p>1.这个字体完整的就能对应</p><p>直接把映射的关系写入，然后直接解析</p><p>2.这个字体形很相似，但是坐标信息不完全一样</p><p>解析加密的字体文件，将每个文字、on、及xy对应关系取出来。然后用on值在上面的字典中快速取出一组on值相同的字型（大多数只有一个），然后再在这组字型中匹配一个最相近的字型，得出对应的文字即可</p><p>匹配最相近的字型方法：遍历候选字型，计算每个字型xy的特征与源word xy特征相除后的方差（相除是因为 同一字体xy是成比例缩放的），然后取方差最小的字型。</p><p>案例：</p><p><a href="https://book.qidian.com/info/1020263803">https://book.qidian.com/info/1020263803</a></p><h3 id="8-浏览器的特征"><a href="#8-浏览器的特征" class="headerlink" title="8.浏览器的特征"></a>8.浏览器的特征</h3><p>浏览的特征除了navigator还有很多的特征，比如serAgent，cookieEnable，platform，plugins等。window.navigator.userAgent和window.navigator.platform结合判断。</p><h3 id="9-浏览器指纹"><a href="#9-浏览器指纹" class="headerlink" title="9.浏览器指纹"></a>9.浏览器指纹</h3><p>他是把很多浏览器的特征，其中包括硬件的特征信息（mac地址，cpu核心类型等），浏览器的特征信息，以及uuid，cookie，token，ip地址等等。还有像canvas，webgl技术获取指纹</p><p><a href="https://docs.fingerprintjs.com/pro/">https://docs.fingerprintjs.com/pro/</a></p><h3 id="10-隐藏链接反爬"><a href="#10-隐藏链接反爬" class="headerlink" title="10.隐藏链接反爬"></a>10.隐藏链接反爬</h3><p>在需要爬取的数据标签中穿插地雷</p><h3 id="11-验证码-96"><a href="#11-验证码-96" class="headerlink" title="11.验证码&#96;"></a>11.验证码&#96;</h3><h4 id="1-基础的字符验证码（数字-字符）"><a href="#1-基础的字符验证码（数字-字符）" class="headerlink" title="1.基础的字符验证码（数字+字符）"></a>1.基础的字符验证码（数字+字符）</h4><p>pytesseract识别一般的可还好些，噪点多不行。其他方式</p><h4 id="2-计算型验证码"><a href="#2-计算型验证码" class="headerlink" title="2.计算型验证码"></a>2.计算型验证码</h4><p>一张图里面有一些四则运算，输入结果即可验证。</p><h4 id="3-滑动验证"><a href="#3-滑动验证" class="headerlink" title="3.滑动验证"></a>3.滑动验证</h4><p>腾讯滑动，网易易盾滑动，极验滑动，顶象滑动</p><h4 id="4-拼图验证码"><a href="#4-拼图验证码" class="headerlink" title="4.拼图验证码"></a>4.拼图验证码</h4><h4 id="5-文字点选验证码"><a href="#5-文字点选验证码" class="headerlink" title="5.文字点选验证码"></a>5.文字点选验证码</h4><h4 id="6-物体识别点选验证"><a href="#6-物体识别点选验证" class="headerlink" title="6.物体识别点选验证"></a>6.物体识别点选验证</h4><h3 id="12-css伪类元素反爬"><a href="#12-css伪类元素反爬" class="headerlink" title="12.css伪类元素反爬"></a>12.css伪类元素反爬</h3><p>通过js操作css的伪类插入内容，无法直接获取数据</p><h3 id="13-TLS"><a href="#13-TLS" class="headerlink" title="13.TLS"></a>13.TLS</h3><p>不同的 TLS implementation （浏览器 &#x2F; 各种语言的 HTTP 库）在建立 TLS 连接的时候发送的信息（支持的密码学套件 &#x2F; 签名算法之类的）不一样。如果对面使用了某些流行的 HTTP 库，并且没有试图模仿浏览器的行为的话，你可以利用 tls fingerprint 把它和正常的浏览器区分开来。</p><p>比如目前 Chrome 的 tls fingerprint 是 e47eae8f8c4887b6 ，可以在这里查看详细信息 <a href="https://tlsfingerprint.io/id/e47eae8f8c4887b6">https://tlsfingerprint.io/id/e47eae8f8c4887b6</a></p>]]></content>
      
      
      <categories>
          
          <category> 反爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 反爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js的hook方法和技巧</title>
      <link href="/post/cd83947e.html"/>
      <url>/post/cd83947e.html</url>
      
        <content type="html"><![CDATA[<h1 id="hook是什么"><a href="#hook是什么" class="headerlink" title="hook是什么"></a>hook是什么</h1><p>hook作用就是在你关键代码位置前或者后进行一些处理</p><h1 id="如何定位"><a href="#如何定位" class="headerlink" title="如何定位"></a>如何定位</h1><ul><li>搜索</li><li>断点调试<ul><li>xhr</li><li>dom</li><li>event</li><li>自定义</li></ul></li><li>使用油猴插件脚本进行hook<ul><li>json</li><li>cookie</li><li>window attr</li><li>eval&#x2F;function</li><li>等等</li></ul></li></ul><h1 id="chrome调试的方法"><a href="#chrome调试的方法" class="headerlink" title="chrome调试的方法"></a>chrome调试的方法</h1><ul><li>官方文档：<a href="https://developers.google.com/web/tools/chrome-devtools/javascript/">https://developers.google.com/web/tools/chrome-devtools/javascript/</a></li><li>sources中几个按钮：<ul><li>Filesystem<ul><li>让devtools加载本地文件系统，并能在code editor中编辑，相当于IDE</li></ul></li><li>Overriders<ul><li>将远程文件代理到本地</li></ul></li><li>Snippets<ul><li>运行代码片段</li></ul></li></ul></li></ul><h1 id="无限debugger解决方案（操作chrome浏览器）"><a href="#无限debugger解决方案（操作chrome浏览器）" class="headerlink" title="无限debugger解决方案（操作chrome浏览器）"></a>无限debugger解决方案（操作chrome浏览器）</h1><ul><li>禁止所有的断点<ul><li>在chrome的断点调试栏点击取消所有断点</li><li>这样做虽然可以取消别人断点，但是自己也无法下断点分析了</li></ul></li><li>禁止某处的断点<ul><li>在sources的操作窗口点击想要取消断点的那一行号，右键点击取消断点</li></ul></li><li>条件断点<ul><li>和上述操作差不多，只是选择条件设置</li></ul></li><li>远程js映射到本地的文件<ul><li>Windows 下可以使用 Fiddler</li><li>Mac 下可以使用 Charles</li><li>Chrome 开发工具自带的 Override</li><li>需要特殊环境才能下载的Reres和 Resource Override插件<ul><li>有坑，使用前需要设置允许本地文件，详细查看（<a href="https://github.com/annnhan/ReRes%EF%BC%89">https://github.com/annnhan/ReRes）</a></li><li>不要美化代码</li></ul></li></ul></li><li>中间工具替换字符串特征（fiddler，chales）<ul><li>使用工具把debugger这个关键字替换成字符串或者修改逻辑使得debugger不生效</li><li>示例fiddler<ul><li>在fiddler界面点击Autoresponder选项</li><li>下面rule editor选择上面选择请求的地址，下面选择替换的html，然后save</li><li>重新打开</li></ul></li><li>示例chales<ul><li>抓包url，右键点击map local</li></ul></li></ul></li><li>使用reres插件替换特征字符串<ul><li>通过reres插件，修改原来代码的，然后映射</li><li>点开添加规则之后：<ul><li>If URL match栏，填入的是匹配 URL 的规则，这里填入的是一个正则表达式，比如我想配置github.com&#x2F;login这个域名，可以使用*:&#x2F;&#x2F;github.com&#x2F;login*这样的方式匹配，或者使用偷懒的方式直接匹配网站路径下的文件^<a href="https://www.xxxaaa.cn/js/jquery.min.js">https://www.xxxAAA.cn/js/jquery.min.js</a></li><li>If URL match注意事项：不要填开头的&#x2F;和结束的&#x2F;x，如&#x2F;.<em>&#x2F;g请写成.</em></li><li><code>Response栏，填写的是映射的响应地址，比如在 Window 下，我想要将 E 盘下的 index.js 文件映射回去，使用本地地址的方式是file:///E:/index.js，使用线上地址的方式是http://localhost:3000/xxx/index.js</code></li><li>Response注意事项：线上地址以http:&#x2F;&#x2F;开头，本地地址以file:&#x2F;&#x2F;&#x2F;开头，Mac 推荐使用超级右键可以直接复制文件路径，同时上一点中提到的线上地址需要启动一个可以访问静态文件的服务，可以使用 Flask 快速搭建一个。</li><li>添加完成，点击保存，重新加载页面即可。</li></ul></li></ul></li><li>利用油猴插件删除debugger特征</li><li>重写关键函数<ul><li>分析代码的逻辑，把关键的debugger函数在console重写为空。</li></ul></li><li><a href="https://qqe2.com/Video/default.html%EF%BC%8C%E5%87%BA%E7%8E%B0debugger%E5%90%8E%EF%BC%8C%E5%9C%A8console%E8%BE%93%E5%85%A5%EF%BC%9AFunction.prototype.constructor">https://qqe2.com/Video/default.html，出现debugger后，在console输入：Function.prototype.constructor</a> &#x3D; function(){},然后点击切换回sources，点击继续运行。前提是(function(){}).constructor &#x3D;&#x3D;&#x3D; Function为True才可以。</li><li>思路<ul><li>分过debugger的代码流程，重写逻辑</li></ul></li></ul><h1 id="举个比方，打个例子"><a href="#举个比方，打个例子" class="headerlink" title="举个比方，打个例子"></a>举个比方，打个例子</h1><p>我们通过 JSON.stringify 的 hook 来了解具体的操作方式。JSON.stringify 的作用是将一个对象转换为字符串，常用于与服务端交换数据时。假设请求时需要将 {“name”: “sfhfpc”, “pwd”: “39ik-0ake-2jz3”, “client”: 1, “_sign”: “298zudju27zyeh58zmgj293ozl48zjr829zmg92&#x3D;”} 这样一个对象发送给服务端，那么很有可能需要在 JavaScript 代码里构造这样一个对象并将其转换为字符串的形式，最后发给服务端。既然知道有这样的过程，那么我们就编写一个 hook 函数，对 JSON.stringify 进行 hook。也就是比 JSON.stringify 先一步获得消息，在为所欲为后将原函数（JSON.stringify）返回。具体的 hook 代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ==UserScript==</span></span><br><span class="line"><span class="comment">// @name         New Userscript</span></span><br><span class="line"><span class="comment">// @namespace    http://tampermonkey.net/</span></span><br><span class="line"><span class="comment">// @version      0.1</span></span><br><span class="line"><span class="comment">// @description  try to take over the world!</span></span><br><span class="line"><span class="comment">// @author       You</span></span><br><span class="line"><span class="comment">// @match        http://*/*</span></span><br><span class="line"><span class="comment">// @grant        none</span></span><br><span class="line"><span class="comment">// ==/UserScript==</span></span><br><span class="line"></span><br><span class="line">(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="string">&#x27;use strict&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> stringifg = <span class="title class_">JSON</span>.<span class="property">stringify</span>;</span><br><span class="line"><span class="title class_">JSON</span>.<span class="property">stringify</span> = <span class="keyword">function</span>(<span class="params">input</span>)&#123;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;stringify - &gt; &quot;</span>, input);</span><br><span class="line"><span class="keyword">debugger</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="title function_">stringify</span>(input)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p>这里用了 (function(){})(); 来确保函数自动执行，TamperMonkey 还允许我们设置执行的时间（run-at 参数正是这个作用）。也就是说系统在调用 JSON.stringify 之前，这个函数就被hook函数劫下了，调用 JSON.stringify 的时候调用的其实是我们设定的hook函数。</p><h1 id="油猴脚本编写"><a href="#油猴脚本编写" class="headerlink" title="油猴脚本编写"></a>油猴脚本编写</h1><p>官方文档：<a href="https://www.tampermonkey.net/documentation.php">https://www.tampermonkey.net/documentation.php</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ==UserScript==</span></span><br><span class="line"><span class="comment">// @name         New Userscript</span></span><br><span class="line"><span class="comment">// @namespace    http://tampermonkey.net/</span></span><br><span class="line"><span class="comment">// @version      0.1</span></span><br><span class="line"><span class="comment">// @description  try to take over the world!</span></span><br><span class="line"><span class="comment">// @author       You</span></span><br><span class="line"><span class="comment">// @match        http://*/*</span></span><br><span class="line"><span class="comment">// @grant        none</span></span><br><span class="line"><span class="comment">// ==/UserScript==</span></span><br><span class="line"></span><br><span class="line">(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="string">&#x27;use strict&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Your code here...</span></span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><ol><li>首先来看看脚本的内容，上面是一大排注释，这些注释可以非常有用的，它表明了脚本的各个属性。下面来简单介绍一下。<ul><li>属性名作用</li><li>name油猴脚本的名字</li><li>namespace命名空间，类似于Java的包名，用来区分相同名称的脚本，一般写成作者名字或者网址就可以了</li><li>version脚本版本，油猴脚本的更新会读取这个版本号</li><li>description描述，用来告诉用户这个脚本是干什么用的</li><li>author 作者名字</li><li>match只有匹配的网址才会执行对应的脚本，例如*、http:&#x2F;&#x2F;*、<a href="http://www.baidu.com/*%E7%AD%89%EF%BC%8C%E5%8F%82%E8%A7%81%E8%B0%B7%E6%AD%8C%E5%BC%80%E5%8F%91%E8%80%85%E6%96%87%E6%A1%A3">http://www.baidu.com/*等，参见谷歌开发者文档</a></li><li>grant指定脚本运行所需权限，如果脚本拥有相应的权限，就可以调用油猴扩展提供的API与浏览器进行交互。如果设置为none的话，则不使用沙箱环境，脚本会直接运行在网页的环境中，这时候无法使用大部分油猴扩展的API。如果不指定的话，油猴会默认添加几个最常用的API</li><li>require如果脚本依赖其他js库的话，可以使用require指令，在运行脚本之前先加载其他库，常见用法是加载jquery</li><li>connect当用户使用GM_xmlhttpRequest请求远程数据的时候，需要使用connect指定允许访问的域名，支持域名、子域名、IP地址以及*通配符</li><li>updateURL脚本更新网址，当油猴扩展检查更新的时候，会尝试从这个网址下载脚本，然后比对版本号确认是否更新</li></ul></li></ol><h1 id="收集常用的js的hook脚本"><a href="#收集常用的js的hook脚本" class="headerlink" title="收集常用的js的hook脚本"></a>收集常用的js的hook脚本</h1><h2 id="document下的createElement-方法的hook-查看创建了什么元素"><a href="#document下的createElement-方法的hook-查看创建了什么元素" class="headerlink" title="document下的createElement()方法的hook,查看创建了什么元素"></a>document下的createElement()方法的hook,查看创建了什么元素</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="string">&#x27;use strict&#x27;</span></span><br><span class="line">   <span class="keyword">var</span> _createElement = <span class="variable language_">document</span>.<span class="property">createElement</span>.<span class="title function_">bind</span>(<span class="variable language_">document</span>);</span><br><span class="line">   <span class="variable language_">document</span>.<span class="property">createElement</span> = <span class="keyword">function</span>(<span class="params">elm</span>)&#123;</span><br><span class="line">   <span class="comment">// 这里做判断 是否创建了script这个元素    </span></span><br><span class="line">   <span class="keyword">if</span>(elm == <span class="string">&#x27;body&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">debugger</span>;</span><br><span class="line">   &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">_createElement</span>(elm);</span><br><span class="line">&#125;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><h2 id="headers-hook-当header中包含Authorization时，则插入断点"><a href="#headers-hook-当header中包含Authorization时，则插入断点" class="headerlink" title="headers hook  当header中包含Authorization时，则插入断点"></a><strong>headers hook</strong>  当header中包含Authorization时，则插入断点</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> code = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="keyword">var</span> org = <span class="variable language_">window</span>.<span class="property">XMLHttpRequest</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">setRequestHeader</span>;</span><br><span class="line"><span class="variable language_">window</span>.<span class="property">XMLHttpRequest</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">setRequestHeader</span> = <span class="keyword">function</span>(<span class="params">key,value</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(key==<span class="string">&#x27;Authorization&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">debugger</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> org.<span class="title function_">apply</span>(<span class="variable language_">this</span>,<span class="variable language_">arguments</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> script = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;script&#x27;</span>);</span><br><span class="line">script.<span class="property">textContent</span> = <span class="string">&#x27;(&#x27;</span> + code + <span class="string">&#x27;)()&#x27;</span>;</span><br><span class="line">(<span class="variable language_">document</span>.<span class="property">head</span>||<span class="variable language_">document</span>.<span class="property">documentElement</span>).<span class="title function_">appendChild</span>(script);</span><br><span class="line">script.<span class="property">parentNode</span>.<span class="title function_">removeChild</span>(script);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="请求hook-当请求的url里包含MmEwMD时，则插入断点"><a href="#请求hook-当请求的url里包含MmEwMD时，则插入断点" class="headerlink" title="请求hook  当请求的url里包含MmEwMD时，则插入断点"></a><strong>请求hook</strong>  当请求的url里包含MmEwMD时，则插入断点</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> code = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="keyword">var</span> open = <span class="variable language_">window</span>.<span class="property">XMLHttpRequest</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">open</span>;</span><br><span class="line"><span class="variable language_">window</span>.<span class="property">XMLHttpRequest</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">open</span> = <span class="keyword">function</span> (<span class="params">method, url, <span class="keyword">async</span></span>)&#123;</span><br><span class="line">    <span class="keyword">if</span> (url.<span class="title function_">indexOf</span>(<span class="string">&quot;MmEwMD&quot;</span>)&gt;-<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">debugger</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> open.<span class="title function_">apply</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>);</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> script = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;script&#x27;</span>);</span><br><span class="line">script.<span class="property">textContent</span> = <span class="string">&#x27;(&#x27;</span> + code + <span class="string">&#x27;)()&#x27;</span>;</span><br><span class="line">(<span class="variable language_">document</span>.<span class="property">head</span>||<span class="variable language_">document</span>.<span class="property">documentElement</span>).<span class="title function_">appendChild</span>(script);</span><br><span class="line">script.<span class="property">parentNode</span>.<span class="title function_">removeChild</span>(script);</span><br></pre></td></tr></table></figure><h2 id="docuemnt-getElementById-以及value属性的hook"><a href="#docuemnt-getElementById-以及value属性的hook" class="headerlink" title="docuemnt.getElementById 以及value属性的hook"></a><strong>docuemnt.getElementById 以及value属性的hook</strong></h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// docuemnt.getElementById 以及value属性的hook,可以参考完成innerHTML的hook</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="property">getElementById</span> = <span class="keyword">function</span>(<span class="params">id</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> value = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#&#x27;</span> + id).<span class="property">value</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;DOM操作 id: &#x27;</span>, id)</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#&#x27;</span>+ id), <span class="string">&#x27;value&#x27;</span>, &#123;</span><br><span class="line">            <span class="attr">get</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;getting -&#x27;</span>, id, <span class="string">&#x27;value -&#x27;</span>, value);</span><br><span class="line">                <span class="keyword">return</span> value;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">set</span>: <span class="keyword">function</span>(<span class="params">val</span>) &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;setting -&#x27;</span>, id, <span class="string">&#x27;value -&#x27;</span>, val)</span><br><span class="line">                value = val;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;---------华丽的分割线--------&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#&#x27;</span> + id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="检测函数是否被hook"><a href="#检测函数是否被hook" class="headerlink" title="检测函数是否被hook"></a>检测函数是否被hook</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="property">eval</span> == <span class="string">&#x27;native code&#x27;</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;发现eval函数被hook了&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">encry</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;ox0oo&quot;</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line">native_code = encry.<span class="title function_">toString</span>();</span><br><span class="line">hook_encry = encry;</span><br><span class="line"><span class="keyword">var</span> hook_encry = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hook&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">detect</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">// console.log(encry.toString());</span></span><br><span class="line">    <span class="keyword">if</span> (encry.<span class="title function_">toString</span>() != native_code)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">22131</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;detect&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="title function_">detect</span>() == <span class="string">&quot;detect&quot;</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">encry</span>());</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="comment">// console.log(encry())</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;11&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="过debugger"><a href="#过debugger" class="headerlink" title="过debugger"></a>过debugger</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Closure</span>(<span class="params">injectFunction</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!<span class="variable language_">arguments</span>.<span class="property">length</span>)</span><br><span class="line">                    <span class="keyword">return</span> injectFunction.<span class="title function_">apply</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>)</span><br><span class="line">                    <span class="variable language_">arguments</span>[<span class="variable language_">arguments</span>.<span class="property">length</span> - <span class="number">1</span>] = <span class="variable language_">arguments</span>[<span class="variable language_">arguments</span>.<span class="property">length</span> - <span class="number">1</span>].<span class="title function_">replace</span>(<span class="regexp">/debugger/g</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> injectFunction.<span class="title function_">apply</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> oldFunctionConstructor = <span class="variable language_">window</span>.<span class="property">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span>;</span><br><span class="line">        <span class="variable language_">window</span>.<span class="property">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> = <span class="title class_">Closure</span>(oldFunctionConstructor)</span><br><span class="line">            <span class="comment">//fix native function</span></span><br><span class="line">            <span class="variable language_">window</span>.<span class="property">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span>.<span class="property">toString</span> = oldFunctionConstructor.<span class="property">toString</span>.<span class="title function_">bind</span>(oldFunctionConstructor);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> oldFunction = <span class="title class_">Function</span>;</span><br><span class="line">        <span class="variable language_">window</span>.<span class="property">Function</span> = <span class="title class_">Closure</span>(oldFunction)</span><br><span class="line">            <span class="comment">//fix native function</span></span><br><span class="line">            <span class="variable language_">window</span>.<span class="property">Function</span>.<span class="property">toString</span> = oldFunction.<span class="property">toString</span>.<span class="title function_">bind</span>(oldFunction);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> oldEval = <span class="built_in">eval</span>;</span><br><span class="line">        <span class="variable language_">window</span>.<span class="property">eval</span> = <span class="title class_">Closure</span>(oldEval)</span><br><span class="line">            <span class="comment">//fix native function</span></span><br><span class="line">            <span class="variable language_">window</span>.<span class="property">eval</span>.<span class="property">toString</span> = oldEval.<span class="property">toString</span>.<span class="title function_">bind</span>(oldEval);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// hook GeneratorFunction</span></span><br><span class="line">        <span class="keyword">var</span> oldGeneratorFunctionConstructor = <span class="title class_">Object</span>.<span class="title function_">getPrototypeOf</span>(<span class="keyword">function</span>  * () &#123;&#125;).<span class="property">constructor</span></span><br><span class="line">            <span class="keyword">var</span> newGeneratorFunctionConstructor = <span class="title class_">Closure</span>(oldGeneratorFunctionConstructor)</span><br><span class="line">            newGeneratorFunctionConstructor.<span class="property">toString</span> = oldGeneratorFunctionConstructor.<span class="property">toString</span>.<span class="title function_">bind</span>(oldGeneratorFunctionConstructor);</span><br><span class="line">        <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(oldGeneratorFunctionConstructor.<span class="property"><span class="keyword">prototype</span></span>, <span class="string">&quot;constructor&quot;</span>, &#123;</span><br><span class="line">            <span class="attr">value</span>: newGeneratorFunctionConstructor,</span><br><span class="line">            <span class="attr">writable</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">configurable</span>: <span class="literal">true</span></span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// hook Async Function</span></span><br><span class="line">        <span class="keyword">var</span> oldAsyncFunctionConstructor = <span class="title class_">Object</span>.<span class="title function_">getPrototypeOf</span>(<span class="keyword">async</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;).<span class="property">constructor</span></span><br><span class="line">            <span class="keyword">var</span> newAsyncFunctionConstructor = <span class="title class_">Closure</span>(oldAsyncFunctionConstructor)</span><br><span class="line">            newAsyncFunctionConstructor.<span class="property">toString</span> = oldAsyncFunctionConstructor.<span class="property">toString</span>.<span class="title function_">bind</span>(oldAsyncFunctionConstructor);</span><br><span class="line">        <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(oldAsyncFunctionConstructor.<span class="property"><span class="keyword">prototype</span></span>, <span class="string">&quot;constructor&quot;</span>, &#123;</span><br><span class="line">            <span class="attr">value</span>: newAsyncFunctionConstructor,</span><br><span class="line">            <span class="attr">writable</span>: <span class="literal">false</span>,</span><br><span class="line">            <span class="attr">configurable</span>: <span class="literal">true</span></span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// hook dom</span></span><br><span class="line">        <span class="keyword">var</span> oldSetAttribute = <span class="variable language_">window</span>.<span class="property">Element</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">setAttribute</span>;</span><br><span class="line">        <span class="variable language_">window</span>.<span class="property">Element</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">setAttribute</span> = <span class="keyword">function</span> (<span class="params">name, value</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">typeof</span> value == <span class="string">&quot;string&quot;</span>)</span><br><span class="line">                value = value.<span class="title function_">replace</span>(<span class="regexp">/debugger/g</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">                    <span class="comment">// 向上调用</span></span><br><span class="line">                    oldSetAttribute.<span class="title function_">call</span>(<span class="variable language_">this</span>, name, value)</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">var</span> oldContentWindow = <span class="title class_">Object</span>.<span class="title function_">getOwnPropertyDescriptor</span>(<span class="title class_">HTMLIFrameElement</span>.<span class="property"><span class="keyword">prototype</span></span>, <span class="string">&quot;contentWindow&quot;</span>).<span class="property">get</span></span><br><span class="line">            <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(<span class="variable language_">window</span>.<span class="property">HTMLIFrameElement</span>.<span class="property"><span class="keyword">prototype</span></span>, <span class="string">&quot;contentWindow&quot;</span>, &#123;</span><br><span class="line">            <span class="title function_">get</span>(<span class="params"></span>) &#123;</span><br><span class="line">                <span class="keyword">var</span> newV = oldContentWindow.<span class="title function_">call</span>(<span class="variable language_">this</span>)</span><br><span class="line">                    <span class="keyword">if</span> (!newV.<span class="property">inject</span>) &#123;</span><br><span class="line">                        newV.<span class="property">inject</span> = <span class="literal">true</span>;</span><br><span class="line">                        core.<span class="title function_">call</span>(newV, globalConfig, newV);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">return</span> newV</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure><h2 id="过debugger—1-constructor-构造器构造出来的"><a href="#过debugger—1-constructor-构造器构造出来的" class="headerlink" title="过debugger—1   constructor 构造器构造出来的"></a><strong>过debugger—1</strong>   <strong>constructor</strong> 构造器构造出来的</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> _constructor = constructor;</span><br><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> = <span class="keyword">function</span>(<span class="params">s</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (s == <span class="string">&quot;debugger&quot;</span>)&#123;</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(s);</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> <span class="title function_">_constructor</span>(s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="过debugger—2-eval"><a href="#过debugger—2-eval" class="headerlink" title="过debugger—2  eval"></a>过debugger—2  eval</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">function</span>(<span class="params"></span>) &#123; </span><br><span class="line">    <span class="string">&#x27;use strict&#x27;</span>;</span><br><span class="line">    <span class="keyword">var</span> eval_ = <span class="variable language_">window</span>.<span class="property">eval</span>;</span><br><span class="line">    <span class="variable language_">window</span>.<span class="property">eval</span> = <span class="keyword">function</span>(<span class="params">x</span>)&#123;</span><br><span class="line">    eval_(x.<span class="title function_">replace</span>(<span class="string">&quot;debugger;&quot;</span>,<span class="string">&quot;  ; &quot;</span>));</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="variable language_">window</span>.<span class="property">eval</span>.<span class="property">toString</span> = eval_.<span class="property">toString</span>;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><h2 id="json-hook"><a href="#json-hook" class="headerlink" title="json hook"></a>json hook</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> my_stringify = <span class="title class_">JSON</span>.<span class="property">stringify</span>;</span><br><span class="line"><span class="title class_">JSON</span>.<span class="property">stringify</span> = <span class="keyword">function</span> (<span class="params">params</span>) &#123;</span><br><span class="line">    <span class="comment">//这里可以添加其他逻辑比如 debugger</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;json_stringify params:&quot;</span>,params);</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">my_stringify</span>(params);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> my_parse = <span class="title class_">JSON</span>.<span class="property">parse</span>;</span><br><span class="line"><span class="title class_">JSON</span>.<span class="property">parse</span> = <span class="keyword">function</span> (<span class="params">params</span>) &#123;</span><br><span class="line">    <span class="comment">//这里可以添加其他逻辑比如 debugger</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;json_parse params:&quot;</span>,params);</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">my_parse</span>(params);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="对象属性hook-属性自定义"><a href="#对象属性hook-属性自定义" class="headerlink" title="对象属性hook 属性自定义"></a>对象属性hook 属性自定义</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">// 严格模式，检查所有错误</span></span><br><span class="line">    <span class="string">&#x27;use strict&#x27;</span></span><br><span class="line">    <span class="comment">// document 为要hook的对象 ,属性是cookie</span></span><br><span class="line">    <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(<span class="variable language_">document</span>,<span class="string">&#x27;cookie&#x27;</span>,&#123;</span><br><span class="line">        <span class="comment">// hook set方法也就是赋值的方法，get就是获取的方法</span></span><br><span class="line">        <span class="attr">set</span>: <span class="keyword">function</span>(<span class="params">val</span>)&#123;</span><br><span class="line">            <span class="comment">// 这样就可以快速给下面这个代码行下断点，从而快速定位设置cookie的代码</span></span><br><span class="line">            <span class="keyword">debugger</span>;  <span class="comment">// 在此处自动断下</span></span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Hook捕获到set-cookie -&gt;&#x27;</span>,val);</span><br><span class="line">            <span class="keyword">return</span> val;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><h2 id="cookies-hook（不是万能的-有些时候hook不到）"><a href="#cookies-hook（不是万能的-有些时候hook不到）" class="headerlink" title="cookies hook（不是万能的 有些时候hook不到）"></a>cookies hook（不是万能的 有些时候hook不到）</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> cookie_cache = <span class="variable language_">document</span>.<span class="property">cookie</span>;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(<span class="variable language_">document</span>, <span class="string">&#x27;cookie&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">get</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Getting cookie&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span> cookie_cache;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">set</span>: <span class="keyword">function</span>(<span class="params">val</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Seting cookie&quot;</span>,val);</span><br><span class="line">        <span class="keyword">var</span> cookie = val.<span class="title function_">split</span>(<span class="string">&quot;;&quot;</span>)[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">var</span> ncookie = cookie.<span class="title function_">split</span>(<span class="string">&quot;=&quot;</span>);</span><br><span class="line">        <span class="keyword">var</span> flag = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">var</span> cache = cookie_cache.<span class="title function_">split</span>(<span class="string">&quot;; &quot;</span>);</span><br><span class="line">        cache = cache.<span class="title function_">map</span>(<span class="keyword">function</span>(<span class="params">a</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span> (a.<span class="title function_">split</span>(<span class="string">&quot;=&quot;</span>)[<span class="number">0</span>] === ncookie[<span class="number">0</span>])&#123;</span><br><span class="line">                flag = <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">return</span> cookie;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> a;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> code = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> org = <span class="variable language_">document</span>.<span class="property">cookie</span>.<span class="title function_">__lookupSetter__</span>(<span class="string">&#x27;cookie&#x27;</span>);</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">__defineSetter__</span>(<span class="string">&quot;cookie&quot;</span>,<span class="keyword">function</span>(<span class="params">cookie</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(cookie.<span class="title function_">indexOf</span>(<span class="string">&#x27;TSdc75a61a&#x27;</span>)&gt;-<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">debugger</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        org = cookie;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">__defineGetter__</span>(<span class="string">&quot;cookie&quot;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;<span class="keyword">return</span> org;&#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> script = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;script&#x27;</span>);</span><br><span class="line">script.<span class="property">textContent</span> = <span class="string">&#x27;(&#x27;</span> + code + <span class="string">&#x27;)()&#x27;</span>;</span><br><span class="line">(<span class="variable language_">document</span>.<span class="property">head</span>||<span class="variable language_">document</span>.<span class="property">documentElement</span>).<span class="title function_">appendChild</span>(script);</span><br><span class="line">script.<span class="property">parentNode</span>.<span class="title function_">removeChild</span>(script);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当cookie中匹配到了 TSdc75a61a， 则插入断点。</span></span><br></pre></td></tr></table></figure><h2 id="window-attr"><a href="#window-attr" class="headerlink" title="window attr"></a>window attr</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义hook属性</span></span><br><span class="line"><span class="keyword">var</span> window_flag_1 = <span class="string">&quot;_t&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> window_flag_2 = <span class="string">&quot;ccc&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> key_value_map = &#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> window_value = <span class="variable language_">window</span>[window_flag_1];</span><br><span class="line"></span><br><span class="line"><span class="comment">// hook</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(<span class="variable language_">window</span>, window_flag_1, &#123;</span><br><span class="line">    <span class="attr">get</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Getting&quot;</span>,<span class="variable language_">window</span>,window_flag_1,<span class="string">&quot;=&quot;</span>,window_value);</span><br><span class="line">        <span class="comment">//debugger</span></span><br><span class="line">        <span class="keyword">return</span> window_value</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">set</span>: <span class="keyword">function</span>(<span class="params">val</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Setting&quot;</span>,<span class="variable language_">window</span>, window_flag_1, <span class="string">&quot;=&quot;</span>,val);</span><br><span class="line">        <span class="comment">//debugger</span></span><br><span class="line">        window_value = val;</span><br><span class="line">        key_value_map[<span class="variable language_">window</span>[window_flag_1]] = window_flag_1;</span><br><span class="line">        <span class="title function_">set_obj_attr</span>(<span class="variable language_">window</span>[window_flag_1],window_flag_2);</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">set_obj_attr</span>(<span class="params">obj,attr</span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> obj_attr_value = obj[attr];</span><br><span class="line">    <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj,attr, &#123;</span><br><span class="line">        <span class="attr">get</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Getting&quot;</span>, key_value_map[obj],attr, <span class="string">&quot;=&quot;</span>, obj_attr_value);</span><br><span class="line">            <span class="comment">//debugger</span></span><br><span class="line">            <span class="keyword">return</span> obj_attr_value;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">set</span>: <span class="keyword">function</span>(<span class="params">val</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Setting&quot;</span>, key_value_map[obj], attr, <span class="string">&quot;=&quot;</span>, val);</span><br><span class="line">            <span class="comment">//debugger</span></span><br><span class="line">            obj_attr_value = val;</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="eval-x2F-Function"><a href="#eval-x2F-Function" class="headerlink" title="eval&#x2F;Function"></a>eval&#x2F;Function</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="property">__cr_eval</span> = <span class="variable language_">window</span>.<span class="property">eval</span>;</span><br><span class="line"><span class="keyword">var</span> myeval = <span class="keyword">function</span>(<span class="params">src</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(src);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;========= eval end ===========&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">window</span>.<span class="property">__cr_eval</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> _myeval = myeval.<span class="title function_">bind</span>(<span class="literal">null</span>);</span><br><span class="line">_myeval.<span class="property">toString</span> = <span class="variable language_">window</span>.<span class="property">__cr_eval</span>.<span class="property">toString</span>;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(<span class="variable language_">window</span>, <span class="string">&#x27;eval&#x27;</span>,&#123;<span class="attr">value</span>: _myeval&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">_cr_fun</span> = <span class="variable language_">window</span>.<span class="property">Function</span></span><br><span class="line"><span class="keyword">var</span> myfun = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> args = <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">slice</span>.<span class="title function_">call</span>(<span class="variable language_">arguments</span>, <span class="number">0</span>, -<span class="number">1</span>).<span class="title function_">join</span>(<span class="string">&quot;,&quot;</span>), src = <span class="variable language_">arguments</span>[<span class="variable language_">arguments</span>.<span class="property">lenght</span> -<span class="number">1</span>];</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(src);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;======== Function end =============&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">window</span>.<span class="property">_cr_fun</span>.<span class="title function_">apply</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">myfun.<span class="property">toString</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;<span class="keyword">return</span> <span class="variable language_">window</span>.<span class="property">_cr_fun</span> + <span class="string">&quot;&quot;</span>&#125; <span class="comment">//小花招，这里防止代码里检测原生函数</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(<span class="variable language_">window</span>, <span class="string">&quot;Function&quot;</span>,&#123;<span class="attr">value</span>: myfun&#125;)</span><br></pre></td></tr></table></figure><h2 id="websocket-hook"><a href="#websocket-hook" class="headerlink" title="websocket hook"></a>websocket hook</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// 1、webcoket 一般都是json数据格式传输，那么发生之前需要JSON.stringify  </span></span><br><span class="line"><span class="keyword">var</span> my_stringify = <span class="title class_">JSON</span>.<span class="property">stringify</span>;</span><br><span class="line"><span class="title class_">JSON</span>.<span class="property">stringify</span> = <span class="keyword">function</span> (<span class="params">params</span>) &#123;</span><br><span class="line">    <span class="comment">//这里可以添加其他逻辑比如 debugger</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;json_stringify params:&quot;</span>,params);</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">my_stringify</span>(params);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> my_parse = <span class="title class_">JSON</span>.<span class="property">parse</span>;</span><br><span class="line"><span class="title class_">JSON</span>.<span class="property">parse</span> = <span class="keyword">function</span> (<span class="params">params</span>) &#123;</span><br><span class="line">    <span class="comment">//这里可以添加其他逻辑比如 debugger</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;json_parse params:&quot;</span>,params);</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">my_parse</span>(params);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2  webScoket 绑定在windows对象，上，根据浏览器的不同，websokcet名字可能不一样 </span></span><br><span class="line"><span class="comment">//chrome window.WebSocket  firfox window.MozWebSocket;</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">_WebSocket</span> = <span class="variable language_">window</span>.<span class="property">WebSocket</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// hook send</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">_WebSocket</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">send</span> = <span class="keyword">function</span> (<span class="params">data</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">info</span>(<span class="string">&quot;Hook WebSocket&quot;</span>, data);</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">send</span>(data)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(<span class="variable language_">window</span>, <span class="string">&quot;WebSocket&quot;</span>,&#123;<span class="attr">value</span>: <span class="title class_">WebSocket</span>&#125;)</span><br></pre></td></tr></table></figure><h2 id="hook-正则-——-1"><a href="#hook-正则-——-1" class="headerlink" title="hook 正则 —— 1"></a>hook 正则 —— 1</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> _RegExp = <span class="title class_">RegExp</span>;</span><br><span class="line">    <span class="title class_">RegExp</span> = <span class="keyword">function</span> (<span class="params">pattern, modifiers</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Some codes are setting regexp&quot;</span>);</span><br><span class="line">        <span class="keyword">debugger</span>;</span><br><span class="line">        <span class="keyword">if</span> (modifiers) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="title function_">_RegExp</span>(pattern, modifiers);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="title function_">_RegExp</span>(pattern);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="title class_">RegExp</span>.<span class="property">toString</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;function setInterval() &#123; [native code] &#125;&quot;</span></span><br><span class="line">    &#125;;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><h2 id="hook-正则-2-加在sojson头部过字符串格式化检测"><a href="#hook-正则-2-加在sojson头部过字符串格式化检测" class="headerlink" title="hook 正则 2 加在sojson头部过字符串格式化检测"></a>hook 正则 2 加在sojson头部过字符串格式化检测</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> _RegExp = <span class="title class_">RegExp</span>;</span><br><span class="line">            <span class="title class_">RegExp</span> = <span class="keyword">function</span> (<span class="params">pattern, modifiers</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (pattern == <span class="built_in">decodeURIComponent</span>(<span class="string">&quot;%5Cw%2B%20*%5C(%5C)%20*%7B%5Cw%2B%20*%5B&#x27;%7C%22%5D.%2B%5B&#x27;%7C%22%5D%3B%3F%20*%7D&quot;</span>) || pattern == <span class="built_in">decodeURIComponent</span>(<span class="string">&quot;function%20*%5C(%20*%5C)&quot;</span>)</span><br><span class="line">                     || pattern == <span class="built_in">decodeURIComponent</span>(<span class="string">&quot;%5C%2B%5C%2B%20*(%3F%3A_0x(%3F%3A%5Ba-f0-9%5D)%7B4%2C6%7D%7C(%3F%3A%5Cb%7C%5Cd)%5Ba-z0-9%5D%7B1%2C4%7D(%3F%3A%5Cb%7C%5Cd))&quot;</span>) || pattern == <span class="built_in">decodeURIComponent</span>(<span class="string">&quot;(%5C%5C%5Bx%7Cu%5D(%5Cw)%7B2%2C4%7D)%2B&quot;</span>)) &#123;</span><br><span class="line">                    pattern = <span class="string">&#x27;.*?&#x27;</span>;</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;发现sojson检测特征，已帮您处理。&quot;</span>)</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (modifiers) &#123;</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;疑似最后一个检测...已帮您处理。&quot;</span>)</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;已通过全部检测，请手动处理debugger后尽情调试吧！&quot;</span>)</span><br><span class="line">                    <span class="keyword">return</span> <span class="title function_">_RegExp</span>(pattern, modifiers);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="title function_">_RegExp</span>(pattern);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="title class_">RegExp</span>.<span class="property">toString</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> _RegExp.<span class="title function_">toString</span>();</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;)();</span><br></pre></td></tr></table></figure><h2 id="hook-canvas-定位图片生成的地方"><a href="#hook-canvas-定位图片生成的地方" class="headerlink" title="hook canvas (定位图片生成的地方)"></a>hook canvas (定位图片生成的地方)</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="string">&#x27;use strict&#x27;</span>;</span><br><span class="line">    <span class="keyword">let</span> create_element = <span class="variable language_">document</span>.<span class="property">createElement</span>.<span class="title function_">bind</span>(doument);</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">createElement</span> = <span class="keyword">function</span> (<span class="params">_element</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;create_element:&quot;</span>,_element);</span><br><span class="line">        <span class="keyword">if</span> (_element === <span class="string">&quot;canvas&quot;</span>) &#123;</span><br><span class="line">            <span class="keyword">debugger</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">create_element</span>(_element);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><h2 id="setInterval-定时器"><a href="#setInterval-定时器" class="headerlink" title="setInterval 定时器"></a>setInterval 定时器</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            setInterval_ = <span class="built_in">setInterval</span>;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;原函数已被重命名为setInterval_&quot;</span>)</span><br><span class="line">            <span class="built_in">setInterval</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;;</span><br><span class="line">            <span class="built_in">setInterval</span>.<span class="property">toString</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;有函数正在检测setInterval是否被hook&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> setInterval_.<span class="title function_">toString</span>();</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;)();</span><br></pre></td></tr></table></figure><h2 id="console-log-检测-（不让你输出调试）"><a href="#console-log-检测-（不让你输出调试）" class="headerlink" title="console.log 检测 （不让你输出调试）"></a>console.log 检测 （不让你输出调试）</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> oldConsole = [<span class="string">&quot;debug&quot;</span>, <span class="string">&quot;error&quot;</span>, <span class="string">&quot;info&quot;</span>, <span class="string">&quot;log&quot;</span>, <span class="string">&quot;warn&quot;</span>, <span class="string">&quot;dir&quot;</span>, <span class="string">&quot;dirxml&quot;</span>, <span class="string">&quot;table&quot;</span>, <span class="string">&quot;trace&quot;</span>, <span class="string">&quot;group&quot;</span>, <span class="string">&quot;groupCollapsed&quot;</span>, <span class="string">&quot;groupEnd&quot;</span>, <span class="string">&quot;clear&quot;</span>, <span class="string">&quot;count&quot;</span>, <span class="string">&quot;countReset&quot;</span>, <span class="string">&quot;assert&quot;</span>, <span class="string">&quot;profile&quot;</span>, <span class="string">&quot;profileEnd&quot;</span>, <span class="string">&quot;time&quot;</span>, <span class="string">&quot;timeLog&quot;</span>, <span class="string">&quot;timeEnd&quot;</span>, <span class="string">&quot;timeStamp&quot;</span>, <span class="string">&quot;context&quot;</span>, <span class="string">&quot;memory&quot;</span>].<span class="title function_">map</span>(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">var</span> old = <span class="variable language_">console</span>[key];</span><br><span class="line">            <span class="variable language_">console</span>[key] = <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;;</span><br><span class="line">            <span class="variable language_">console</span>[key].<span class="property">toString</span> = old.<span class="property">toString</span>.<span class="title function_">bind</span>(old)</span><br><span class="line">                <span class="keyword">return</span> old;</span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> hook </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hook </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>初识websocket</title>
      <link href="/post/6846cc9a.html"/>
      <url>/post/6846cc9a.html</url>
      
        <content type="html"><![CDATA[<h2 id="websocket的介绍"><a href="#websocket的介绍" class="headerlink" title="websocket的介绍"></a>websocket的介绍</h2><blockquote><p>WebSocket是一种在单个TCP连接上进行全双工通讯的协议。WebSocket通信协议于2011年被IETF定为标准RFC 6455，并由RFC7936补充规范。WebSocket API也被W3C定为标准。</p><p>WebSocket使得客户端和服务器之间的数据交换变得更加简单，允许服务端主动向客户端推送数据。在WebSocket API中，浏览器和服务器只需要完成一次握手，两者之间就直接可以创建持久性的连接，并进行双向数据传输。</p></blockquote><p>上面是维基百科的介绍.<br>简单的讲，websocket 和http一样，都是一种网络传输协议</p><h2 id="WebSocket-和-HTTP-的区别"><a href="#WebSocket-和-HTTP-的区别" class="headerlink" title="WebSocket 和 HTTP 的区别"></a>WebSocket 和 HTTP 的区别</h2><p>http 协议是用在应用层的协议，他是基于 tcp 协议的，http 协议建立链接也必须要有三次握手才能发送信息。 http 链接分为短链接，长链接，短链接是每次请求都要三次握手才能发送自己的信息。即每一个 request 对应一个 response。长链接是在一定的期限内保持链接。保持 TCP 连接不断开。客户端与服务器通信，必须要有客户端发起然后服务器返回结果。客户端是主动的，服务器是被动的。 WebSocket 他是为了解决客户端发起多个 http 请求到服务器资源浏览器必须要经过长时间的轮训问题而生的，他实现了多路复用，他是全双工通信。在 webSocket 协议下客服端和浏览器可以同时发送信息。 建立了 WenSocket 之后服务器不必在浏览器发送 request 请求之后才能发送信息到浏览器。这时的服务器已有主动权想什么时候发就可以发送信息到服务器。而且信息当中不必在带有 head 的部分信息了与 http 的长链接通信来说，这种方式，不仅能降低服务器的压力。而且信息当中也减少了部分多余的信息。</p><h2 id="HTTP-的长连接与-websocket-的持久连接"><a href="#HTTP-的长连接与-websocket-的持久连接" class="headerlink" title="HTTP 的长连接与 websocket 的持久连接"></a>HTTP 的长连接与 websocket 的持久连接</h2><p>HTTP1.1 的连接默认使用长连接（ persistent connection ）， 即在一定的期限内保持链接，客户端会需要在短时间内向服务端请求大量的资源，保持 TCP 连接不断开。客户端与服务器通信，必须要有客户端发起然后服务器返回结果。客户端是主动的，服务器是被动的。 在一个 TCP 连接上可以传输多个 Request&#x2F;Response 消息对，所以本质上还是 Request&#x2F;Response 消息对，仍然会造成资源的浪费、实时性不强等问题。 如果不是持续连接，即短连接，那么每个资源都要建立一个新的连接，HTTP 底层使用的是 TCP，那么每次都要使用三次握手建立 TCP 连接，即每一个 request 对应一个 response，将造成极大的资源浪费。 长轮询，即客户端发送一个超时时间很长的 Request，服务器 hold 住这个连接，在有新数据到达时返回 Response websocket 的持久连接 只需建立一次 Request&#x2F;Response 消息对，之后都是 TCP 连接，避免了需要多次建立 Request&#x2F;Response 消息对而产生的冗余头部信息。</p><p><strong>客户端请求</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">GET / HTTP/1.1</span><br><span class="line">Upgrade: websocket</span><br><span class="line">Connection: Upgrade</span><br><span class="line">Host: example.com</span><br><span class="line">Origin: http://example.com</span><br><span class="line">Sec-WebSocket-Key: sN9cRrP/n9NdMgdcy2VJFQ==</span><br><span class="line">Sec-WebSocket-Version: 13</span><br></pre></td></tr></table></figure><p><strong>服务器响应</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 101 Switching Protocols</span><br><span class="line">Upgrade: websocket</span><br><span class="line">Connection: Upgrade</span><br><span class="line">Sec-WebSocket-Accept: fFBooB7FAkLlXgRSz0BT3v4hq5s=</span><br><span class="line">Sec-WebSocket-Location: ws://example.com/</span><br></pre></td></tr></table></figure><p><strong>和http字段不一样的地方</strong></p><ul><li>Connection必须设置Upgrade，表示客户端希望连接升级。</li><li>Upgrade字段必须设置Websocket，表示希望升级到Websocket协议。</li><li>Sec-WebSocket-Key是随机的字符串，服务器端会用这些数据来构造出一个SHA-1的信息摘要。把“Sec-WebSocket-Key”加上一个特殊字符串“258EAFA5-E914-47DA-95CA-C5AB0DC85B11”，然后计算SHA-1摘要，之后进行BASE-64编码，将结果做为“Sec-WebSocket-Accept”头的值，返回给客户端。如此操作，可以尽量避免普通HTTP请求被误认为Websocket协议。</li><li>Sec-WebSocket-Version 表示支持的Websocket版本。RFC6455要求使用的版本是13，之前草案的版本均应当弃用。</li><li>Origin字段是可选的，通常用来表示在浏览器中发起此Websocket连接所在的页面，类似于Referer。但是，与Referer不同的是，Origin只包含了协议和主机名称。</li><li>其他一些定义在HTTP协议中的字段，如Cookie等，也可以在Websocket中使用。</li></ul><p>可以看到只是在http协议上增加了几个硬性规定，http协议的user-agent,cookie都可以在websocket握手过程中使用</p><p><strong>抓包时候的注意事项:因为websocket只有一次握手，握手成功后就可以双方发送消息了，假如你打开网页后没有找到你要抓的数据，那么你就需要重新刷新网页，让他重新握手一次</strong></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>初识Protobuf</title>
      <link href="/post/87eb1013.html"/>
      <url>/post/87eb1013.html</url>
      
        <content type="html"><![CDATA[<h2 id="常见数据加密三种方式"><a href="#常见数据加密三种方式" class="headerlink" title="常见数据加密三种方式"></a>常见数据加密三种方式</h2><p>常见的对数据加密有三种情况：</p><p>第一种是，用诸如AES这类加密算法对数据加密，然后在用key进行解密，这类的数据解密的难度不是很大，弄清楚是用的什么加密算法就能反解。</p><p>第二种是，用“私有”协议把数据序列化，只有了解该协议的细节才有可能把数据反序列化出来。</p><p>第三种是，用第三方厂商的协议来数据序列化，自己搞不出来私有协议的就选用第三方厂商的。比如用 Google 的 Protobuf ，来做数据序列化，也就是数据“加密”。</p><h2 id="Protobuf介绍"><a href="#Protobuf介绍" class="headerlink" title="Protobuf介绍"></a>Protobuf介绍</h2><p>Protobuf应该是Protoc buffers（协议缓冲区），官方解释直接翻译官网的介绍，概括一下就是：Protocol buffers are a flexible, efficient, automated mechanism for serializing structured data – think XML, but smaller, faster, and simpler. You define how you want your data to be structured once, then you can use special generated source code to easily write and read your structured data to and from a variety of data streams and using a variety of languages. You can even update your data structure without breaking deployed programs that are compiled against the “old” format. </p><p>翻译一下就是：协议缓冲区是一种灵活，高效，自动化的机制，用于序列化结构化数据 - 想想XML，但更小，更快，更简单。 您可以定义数据的结构化结构，然后使用特殊生成的源代码轻松地将结构化数据写入和读取各种数据流，并使用各种语言。 您甚至可以更新数据结构，而不会破坏根据“旧”格式编译的已部署程序。</p><p><strong>protobuf是一种与平台无关，语言无关、可扩展且轻便高效序列化数据结构的协议，可用于网络通讯和数据存储。想象你有一个Person类，类里面有很多成员属性，然后你想把一个Person对象发送到另外一台机器上，一般而言，你是不能直接将这个对象是发送过去的，你需要将这个类序列化，以字节流的形式发送，那么你如何将你的对象序列化，就是一个问题，而且你还要考虑到接收端将数据反序列化。Protobuf就是来做这个事情的，它本身与具体语言无关，支持绝大多数主流编程语言，如C++，java，python，C#等。或者，你可以理解为加密文件，你要发的汉子通过加密后编程了一堆不同排列的小圆点，只要你的朋友有这个加密文件，他就能将你加密的东西翻译过来。</strong></p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p><a href="https://github.com/protocolbuffers/protobuf/releases/">https://github.com/protocolbuffers/protobuf/releases/</a></p><p>在 Google 官方 github 地址下载 Protobuf  。下载一个 Protobuf 编译器和一个调用编译器的接口程序。这里有不同语言，不同操作系统。(注意要给 protoc 配置上环境变量，不然没法全局调用该命令。E:\python3.7.2\protoc-3.12.3-win64\bin，C:\Users\mr_zhang&gt;protoc –version输出)</p><ol><li><p>解压 protobuf-python-xx.zip 这是Python模块，cd到（protobuf-xx\python）目录里运行python3 setup.py build 和 python3 setup.py install 安装Python模块</p></li><li><p>Python编辑器里运行 import google.protobuf 可以检测是否安装成功。</p></li><li><p>E:\python3.7.2\protobuf-3.12.3\examples 目录下给出了实例</p></li><li><p>编写写一个 .proto 语法文件，<a href="https://colobu.com/2017/03/16/Protobuf3-language-guide/">https://colobu.com/2017/03/16/Protobuf3-language-guide/</a></p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">首先我们需要创建一个以.proto结尾的文件，可以在其中定义message来指定所需要序列化的数据格式。每一个message都是一个小的信息逻辑单元，包含一系列的name-value值对。以官网上的示例，我们创建一个addressbook.proto文件，内容如下所示。</span><br><span class="line"></span><br><span class="line">syntax = &quot;proto2&quot;;</span><br><span class="line"></span><br><span class="line">package tutorial;</span><br><span class="line"></span><br><span class="line">message Person &#123;</span><br><span class="line">  required string name = 1;</span><br><span class="line">  required int32 id = 2;</span><br><span class="line">  optional string email = 3;</span><br><span class="line"></span><br><span class="line">  enum PhoneType &#123;</span><br><span class="line">    MOBILE = 0;</span><br><span class="line">    HOME = 1;</span><br><span class="line">    WORK = 2;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  message PhoneNumber &#123;</span><br><span class="line">    required string number = 1;</span><br><span class="line">    optional PhoneType type = 2 [default = HOME];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  repeated PhoneNumber phones = 4;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">message AddressBook &#123;</span><br><span class="line">  repeated Person people = 1;</span><br><span class="line">protoc -I=\$SRC_DIR --python_out=\$DST_DIR \$SRC_DIR/addressbook.proto</span><br><span class="line">syntax=”proto2”代表版本，目前支持proto2和proto3，不写默认proto2。</span><br><span class="line">package类似于C++中的namespace概念。</span><br><span class="line">message是包含了各种类型字段的聚集，相当于struct，并且可以嵌套。</span><br><span class="line">proto3版本去掉了required和optional类型，保留了repeated(数组)。其中“＝1”，“＝2”表示每个元素的标识号，它会用在二进制编码中对域的标识，[1,15]之内的标志符在使用时占用一个字节，[16,2047]之内的标识号则占用2个字节，所以从最优化角度考虑，可以将[1,15]使用在一些较常用或repeated的元素上。同时为了考虑将来可能会增加新的标志符，我们要事先预留一些标志符。</span><br><span class="line">构建好addressbook.proto文件后，运行Protobuf编译器编译.proto文件，运行方法如下所示。其中-I表示.protoc所在的路径(如果你没有配置环境变量需要，配置了就不需要)，--python_out表示指定生成的目标文件存在的路径，最后的参数表示要编译的.proto文件。</span><br><span class="line"></span><br><span class="line">protoc -I=\$SRC_DIR --python_out=\$DST_DIR \$SRC_DIR/addressbook.proto</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">protoc --python_out=. demo01.proto</span><br></pre></td></tr></table></figure></li><li><p>编译完成之后会生成demo01_pb2.py文件，里面包含序列化和反序列化等方法。</p></li><li><p>如何使用生成的py文件</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">syntax = &quot;proto2&quot;;</span><br><span class="line"></span><br><span class="line">package tutorial;</span><br><span class="line"></span><br><span class="line">message Person &#123;</span><br><span class="line">  required string name = 1;</span><br><span class="line">  required int32 id = 2;</span><br><span class="line">  optional string email = 3;</span><br><span class="line"></span><br><span class="line">  enum PhoneType &#123;</span><br><span class="line">    MOBILE = 0;</span><br><span class="line">    HOME = 1;</span><br><span class="line">    WORK = 2;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  message PhoneNumber &#123;</span><br><span class="line">    required string number = 1;</span><br><span class="line">    optional PhoneType type = 2 [default = HOME];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  repeated PhoneNumber phones = 4;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">message AddressBook &#123;</span><br><span class="line">// singular：一个格式良好的消息应该有0个或者1个这种字段（但是不能超过1个）。</span><br><span class="line">// repeated：在一个格式良好的消息中，这种字段可以重复任意多次（包括0次）。重复的值的顺序会被保留</span><br><span class="line">  repeated Person people = 1; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">######################################</span><br><span class="line"></span><br><span class="line">import demo01_pb2</span><br><span class="line">address_book = demo01_pb2.AddressBook()</span><br><span class="line">person = address_book.people.add()</span><br><span class="line">phone = person.phones.add()</span><br><span class="line"># 赋值</span><br><span class="line">person.name = &quot;jane&quot;</span><br><span class="line">person.id = 89757</span><br><span class="line">person.email = &quot;lucking@goole.com&quot;</span><br><span class="line"></span><br><span class="line">phone.number = &quot;123421212&quot;</span><br><span class="line">phone.type = 2</span><br><span class="line"></span><br><span class="line">print(address_book.SerializeToString())</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>逆向解析 Protobuf，protoc –decode_raw &lt; 需要解析的文件</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\mr_zhang\Desktop\protobuf&gt;protoc --decode_raw &lt; data_file.bin</span><br><span class="line">1 &#123;</span><br><span class="line">  1: <span class="string">&quot;jane&quot;</span></span><br><span class="line">  2: 89757</span><br><span class="line">  3: <span class="string">&quot;lucking@goole.com&quot;</span></span><br><span class="line">  4 &#123;</span><br><span class="line">    1 &#123;</span><br><span class="line">      6: 0x3231323132343332</span><br><span class="line">    &#125;</span><br><span class="line">    2: 2</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>逆向出 .proto 文件格式，根据你自己写的，对比结果，然后从结果推出文件格式</p></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>python调用js代码</title>
      <link href="/post/8d64ccf8.html"/>
      <url>/post/8d64ccf8.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-pyexecjs"><a href="#1-pyexecjs" class="headerlink" title="1.pyexecjs"></a>1.pyexecjs</h1><ul><li>安装<code>pip install PyExecJS</code></li><li>用法：<ul><li><code>import execjs    execjs.eval(js代码)   或者   js = js代码   ctx = execjs.compile(js)   result = ctx.call(js函数，参数)   </code></li></ul></li><li>存在的问题：<ul><li>执行编码的输入输出操作出现报错<ul><li>解决方案，可以把参数使用base64编码一下</li></ul></li><li>执行大型js会慢</li></ul></li></ul><h1 id="2-selenium"><a href="#2-selenium" class="headerlink" title="2.selenium"></a>2.selenium</h1><ul><li>用法<ul><li><code>js = “js代码” result = browser.execute_script(js)</code></li></ul></li></ul><h1 id="3-pyppeteer"><a href="#3-pyppeteer" class="headerlink" title="3.pyppeteer"></a>3.pyppeteer</h1><ul><li><p>用法</p><ul><li>&#96;&#96;&#96;python<br>  await page.evaluate(“””<br>  () &#x3D;&gt;{<br>      Object.defineProperties(navigator,{<br>          webdriver:{<br>          get: () &#x3D;&gt; false<br>          }<br>      })<br>  }<br>  “””)  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- ```python</span><br><span class="line">    # -*- coding: utf-8 -*-</span><br><span class="line">    import asyncio</span><br><span class="line">    import time</span><br><span class="line">    from pyppeteer.launcher import launch</span><br><span class="line">    &#x27;&#x27;&#x27;</span><br><span class="line">    pip uninstall websockets</span><br><span class="line">    pip install websockets==6.0</span><br><span class="line">    </span><br><span class="line">    &#x27;&#x27;&#x27;</span><br><span class="line">    from utils_bag.exe_js import js1, js3, js4, js5</span><br><span class="line">    from fake_useragent import UserAgent</span><br><span class="line">    </span><br><span class="line">    loop = asyncio.get_event_loop()</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    async def main(url, img_addr, index):</span><br><span class="line">        cookies = []</span><br><span class="line">        # browser = await launch(&#123;&#x27;headless&#x27;: False, &#x27;args&#x27;:</span><br><span class="line">        # [&#x27;--proxy-server=&#x27;.format(proxy)], &#x27;executablePath&#x27;:</span><br><span class="line">        # &#x27;chrome-win/chrome.exe&#x27;, &#125;)</span><br><span class="line">        browser = await launch(&#123;&#x27;headless&#x27;: False, &#x27;args&#x27;: [&#x27;--no-sandbox&#x27;], &#x27;executablePath&#x27;: r&#x27;chrome-win\chrome.exe&#x27;, &#125;)</span><br><span class="line">        page = await browser.newPage()</span><br><span class="line">        await page.setUserAgent(&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.99 Safari/537.36&#x27;)</span><br><span class="line">        await page.goto(url)</span><br><span class="line">        time.sleep(5)</span><br><span class="line">        for cookie in cookies:</span><br><span class="line">            await page.setCookie(cookie)</span><br><span class="line">        await page.goto(url)</span><br><span class="line">        await page.evaluateOnNewDocument(&#x27;() =&gt;&#123; Object.defineProperties(navigator,&#x27;</span><br><span class="line">                                         &#x27;&#123; webdriver:&#123; get: () =&gt; false &#125; &#125;) &#125;&#x27;)</span><br><span class="line">        await page.evaluate(js1)</span><br><span class="line">        await page.evaluate(js3)</span><br><span class="line">        await page.evaluate(js4)</span><br><span class="line">        await page.evaluate(js5)</span><br><span class="line">        try:</span><br><span class="line">            await page.click(&#x27;#sufei-dialog-close&#x27;)</span><br><span class="line">        except Exception as e:</span><br><span class="line">            print(e)</span><br><span class="line">        time.sleep(5)</span><br><span class="line">        try:</span><br><span class="line">            print(&#x27;-------------------&#x27;)</span><br><span class="line">            await page.evaluate(&#x27;&#x27;&#x27;(function () &#123;</span><br><span class="line">                                var y = 0;</span><br><span class="line">                                var step = 100;</span><br><span class="line">                                window.scroll(0, 0);</span><br><span class="line">                                function f() &#123;</span><br><span class="line">                                    if (y &lt; document.body.scrollHeight) &#123;</span><br><span class="line">                                        y += step;</span><br><span class="line">                                        window.scroll(0, y);</span><br><span class="line">                                        setTimeout(f, 100);</span><br><span class="line">                                    &#125; else &#123;</span><br><span class="line">                                        window.scroll(0, 0);</span><br><span class="line">                                        document.title += &quot;scroll-done&quot;;</span><br><span class="line">                                    &#125;</span><br><span class="line">                                &#125;</span><br><span class="line">                                setTimeout(f, 1000);</span><br><span class="line">                            &#125;)();</span><br><span class="line">                        &#x27;&#x27;&#x27;)</span><br><span class="line">        except Exception as err:</span><br><span class="line">            print(err)</span><br><span class="line">        # js_border = &#x27;&#x27;&#x27;</span><br><span class="line">        #         a1 = document.querySelectorAll(&#x27;.tshop-pbsm-shop-srch-list .grid .item3line1 .item .detail a.item-name, .tshop-pbsm-shop-srch-list .rmd-bd .item3line1 .item .detail a.item-name, .tshop-pbsm-shop-srch-list .grid .item30line1 .item .detail a.item-name, .tshop-pbsm-shop-srch-list .rmd-bd .item30line1 .item .detail a.item-name, .tshop-pbsm-shop-srch-list .grid .item4line1 .item .detail a.item-name, .tshop-pbsm-shop-srch-list .rmd-bd .item4line1 .item .detail a.item-name&#x27;);</span><br><span class="line">        #         a1[&#123;&#125;].style.color=&quot;red&quot;;</span><br><span class="line">        #         a1[&#123;&#125;].style.textDecoration=&#x27;underline&#x27;;</span><br><span class="line">        #         a2 = document.querySelectorAll(&#x27;.tshop-pbsm-shop-srch-list .grid .item3line1 .item .photo a img, .tshop-pbsm-shop-srch-list .rmd-bd .item3line1 .item .photo a img&#x27;);</span><br><span class="line">        #         a2[&#123;&#125;].style = &#x27;border-bottom-color:green;border:5px solid black&#x27;;</span><br><span class="line">        #         a2[&#123;&#125;].style = &#x27;border-bottom-color:green;border:5px solid black&#x27;;</span><br><span class="line">        # &#x27;&#x27;&#x27;.format(index)</span><br><span class="line">        # await page.evaluate(js_border)</span><br><span class="line">        position = await page.evaluate(&#x27;&#x27;&#x27;</span><br><span class="line">            () =&gt; &#123;</span><br><span class="line">            a2 = document.querySelectorAll(&#x27;.tshop-pbsm-shop-srch-list .grid .item3line1 .item .photo a img, .tshop-pbsm-shop-srch-list .rmd-bd .item3line1 .item .photo a img&#x27;)</span><br><span class="line">            p = a2[%s].getBoundingClientRect()</span><br><span class="line">            return &#123;</span><br><span class="line">            left:p[&quot;left&quot;],</span><br><span class="line">            right:p[&quot;right&quot;],</span><br><span class="line">            top:p[&quot;top&quot;],</span><br><span class="line">            bottom:p[&quot;bottom&quot;],</span><br><span class="line">    </span><br><span class="line">            &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#x27;&#x27;&#x27; % (index))</span><br><span class="line">        time.sleep(10)</span><br><span class="line">        await page.screenshot(&#123;</span><br><span class="line">            &quot;path&quot;: &#x27;&#123;&#125;&#x27;.format(img_addr),</span><br><span class="line">            &quot;fullPage&quot;: True</span><br><span class="line">        &#125;)</span><br><span class="line">        time.sleep(10)</span><br><span class="line">        await browser.close()</span><br><span class="line">        return position</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    def callback(task):</span><br><span class="line">        return task.result()</span><br><span class="line">    </span><br><span class="line">    def screenshot(url, img_addr, index=1):</span><br><span class="line">        coroutine = main(url, img_addr, index)</span><br><span class="line">        task = loop.create_task(coroutine)</span><br><span class="line">        task.add_done_callback(callback)</span><br><span class="line">        loop.run_until_complete(task)</span><br><span class="line">        result = task.result()</span><br><span class="line">        return result</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">        screenshot(</span><br><span class="line">            &#x27;https://shop449187140.taobao.com/search.htm?pageNo=2&#x27;,</span><br><span class="line">            &quot;./sqs.png&quot;)</span><br><span class="line">    </span><br></pre></td></tr></table></figure></li></ul></li></ul><h1 id="4-nodejs"><a href="#4-nodejs" class="headerlink" title="4.nodejs"></a>4.nodejs</h1><ul><li>方案<ul><li>所有的python代码直接用js写，不在跨语言</li><li>rpc<ul><li>使用nodejs的Express框架搭建个服务，然后用python调用</li></ul></li></ul></li><li>缺点<ul><li>nodejs中没有window对象<ul><li>需要自己创建，或者使用jsdom之类的库</li></ul></li><li>base64中window.btoa,btoa() 方法用于创建一个base64编码的字符串。</li></ul></li></ul><h1 id="5-pip-install-PyJSCaller"><a href="#5-pip-install-PyJSCaller" class="headerlink" title="5.pip install PyJSCaller"></a>5.pip install PyJSCaller</h1><h2 id="https-github-com-ZSAIm-PyJSCaller"><a href="#https-github-com-ZSAIm-PyJSCaller" class="headerlink" title="https://github.com/ZSAIm/PyJSCaller"></a><a href="https://github.com/ZSAIm/PyJSCaller">https://github.com/ZSAIm/PyJSCaller</a></h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> jscaller</span><br><span class="line">example_js= <span class="string">&quot;&quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">function add(a, b)&#123;</span></span><br><span class="line"><span class="string">return a + b;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&quot;</span><span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">ctx = jscaller.<span class="title function_">compile</span>(<span class="string">&#x27;example.js&#x27;</span>, timeout=<span class="number">3</span>)</span><br><span class="line"><span class="title function_">print</span>(ctx.<span class="title function_">call</span>(<span class="string">&#x27;add&#x27;</span>, <span class="number">1</span>, <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> jscaller.<span class="title function_">session</span>(<span class="string">&#x27;example.js&#x27;</span>) <span class="keyword">as</span> <span class="attr">sess</span>:</span><br><span class="line">    add, math = sess.<span class="title function_">get</span>(<span class="string">&#x27;add&#x27;</span>, <span class="string">&#x27;Math&#x27;</span>)</span><br><span class="line">    res1 = <span class="title function_">add</span>(<span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">    res2 = math.<span class="property">PI</span> + math.<span class="property">E</span></span><br><span class="line">    sess.<span class="title function_">call</span>(res1, res2)</span><br><span class="line"></span><br><span class="line"><span class="title function_">print</span>(res1.<span class="title function_">get_value</span>())</span><br><span class="line"><span class="title function_">print</span>(res2.<span class="title function_">get_value</span>())</span><br><span class="line"><span class="title function_">print</span>(jscaller.<span class="built_in">eval</span>(<span class="string">&quot;&#x27;Hello World!&#x27;.toUpperCase()&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">5.859874482048838</span></span><br><span class="line"><span class="variable constant_">HELLO</span> <span class="variable constant_">WORLD</span>!</span><br></pre></td></tr></table></figure><h1 id="6-python"><a href="#6-python" class="headerlink" title="6.python"></a>6.python</h1><p>直接引用npm包，解决一些加密包的依赖问题。</p><p>我的目录：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">│  js_aes.py</span><br><span class="line">│  package-lock.json</span><br><span class="line">│</span><br><span class="line">└  node_modules</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> execjs</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> binascii <span class="keyword">import</span> b2a_hex, a2b_hex</span><br><span class="line"></span><br><span class="line">text = <span class="string">&#x27;123&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">js_aes</span>(<span class="params">text</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    引用nodejs的原生aes加密</span></span><br><span class="line"><span class="string">    :param text:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    jscode = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    function encryptByAES(pwd) &#123;</span></span><br><span class="line"><span class="string">        var cryptoJS = require(&quot;crypto-js&quot;);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        let i = cryptoJS.enc.Utf8.parse(&quot;12345678901234561234567890123456&quot;);</span></span><br><span class="line"><span class="string">        let t = cryptoJS.enc.Utf8.parse(pwd);</span></span><br><span class="line"><span class="string">        let o = cryptoJS.enc.Utf8.parse(&quot;1234567890123456&quot;);</span></span><br><span class="line"><span class="string">        return cryptoJS.AES.encrypt(t, i, &#123;</span></span><br><span class="line"><span class="string">                    iv: o,</span></span><br><span class="line"><span class="string">                    mode: cryptoJS.mode.CBC,</span></span><br><span class="line"><span class="string">                    padding: cryptoJS.pad.Pkcs7</span></span><br><span class="line"><span class="string">                &#125;).ciphertext.toString()</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    ctx = execjs.<span class="built_in">compile</span>(jscode)</span><br><span class="line">    encrypto = ctx.call(<span class="string">&quot;encryptByAES&quot;</span>, text)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> encrypto</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(js_aes(text))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">py_aes</span>(<span class="params">text</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    python3的aes加密</span></span><br><span class="line"><span class="string">    :param text:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    key = <span class="string">b&quot;12345678901234561234567890123456&quot;</span>  <span class="comment"># 长度必须为16</span></span><br><span class="line">    text = text.encode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">    iv_str = <span class="string">&quot;1234567890123456&quot;</span></span><br><span class="line">    iv = <span class="string">&quot;16-Bytes--String&quot;</span></span><br><span class="line">    cryptor = AES.new(key, AES.MODE_CBC, iv=iv_str.encode())</span><br><span class="line">    pad = <span class="number">16</span> - <span class="built_in">len</span>(text) % <span class="number">16</span></span><br><span class="line">    text = text + (<span class="built_in">chr</span>(pad) * pad).encode(<span class="string">&quot;utf-8&quot;</span>)  <span class="comment"># 相当于JS里面的 padding: cryptoJS.pad.Pkcs7</span></span><br><span class="line">    ciphertext = cryptor.encrypt(text)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> b2a_hex(ciphertext).decode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(py_aes(text))</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>frida的安装</title>
      <link href="/post/Infinity.html"/>
      <url>/post/Infinity.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h1><p>Frida是个轻量级别的hook框架</p><h2 id="是Python-API，但JavaScript调试逻辑"><a href="#是Python-API，但JavaScript调试逻辑" class="headerlink" title="是Python API，但JavaScript调试逻辑"></a>是Python API，但JavaScript调试逻辑</h2><p>Frida的核心是用C编写的，并将<a href="https://links.jianshu.com/go?to=https://developers.google.com/v8/">Google的V8引擎</a>注入到目标进程中，在这些进程中，JS可以完全访问内存，挂钩函数甚至调用进程内的本机函数来执行。</p><p>使用Python和JS可以使用无风险的API进行快速开发。Frida可以帮助您轻松捕获JS中的错误并为您提供异常而不是崩溃。<br> 。<br> 关于frda学习路线了，Frida的学习还是蛮简单的，只需要了解两方面的内容：<br> 1）主控端和目标进程的交互（message）<br> 2）Python接口和js接口（查文档）</p><p>frida框架分为两部分：<br> 1）一部分是运行在系统上的交互工具frida CLI。<br> 2）另一部分是运行在目标机器上的代码注入工具 frida-serve。</p><h1 id="2-资源和环境"><a href="#2-资源和环境" class="headerlink" title="2. 资源和环境"></a>2. 资源和环境</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Windows10 X64</span><br><span class="line">Python <span class="number">3.7</span></span><br><span class="line">mi <span class="number">6</span>  Anroid <span class="number">8.1</span></span><br><span class="line">Frida官网：https:<span class="comment">//www.frida.re/</span></span><br><span class="line">Frida源码：https:<span class="comment">//github.com/frida</span></span><br></pre></td></tr></table></figure><h1 id="3-运作模式"><a href="#3-运作模式" class="headerlink" title="3.运作模式"></a>3.运作模式</h1><p>Frida通过其强大的仪器核心Gum提供动态检测，Gum是用C语言编写的。因为这种检测逻辑很容易发生变化，所以通常需要用脚本语言编写，这样在开发和维护它时会得到一个简短的反馈循环。这就是GumJS发挥作用的地方。只需几行C就可以在运行时内运行一段JavaScript，它可以完全访问Gum的API，允许您挂钩函数，枚举加载的库，导入和导出的函数，读写内存，扫描模式的内存等</p><h1 id="4-Frida安装"><a href="#4-Frida安装" class="headerlink" title="4. Frida安装"></a>4. Frida安装</h1><p>Frida的安装很简单，需要在windows安装frida客户端和在安卓安装frida服务端。</p><ul><li>python工具包安装<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pip install frida==12.8.0</span><br><span class="line">pip install frida-tools==5.3.0</span><br><span class="line">pip install objection==1.8.4</span><br></pre></td></tr></table></figure></li></ul><h2 id="1、windows安装客户端"><a href="#1、windows安装客户端" class="headerlink" title="1、windows安装客户端"></a>1、windows安装客户端</h2><ul><li>查看frida版本<code>frida --version</code></li></ul><h2 id="2、手机中安装Frida服务端"><a href="#2、手机中安装Frida服务端" class="headerlink" title="2、手机中安装Frida服务端"></a>2、手机中安装Frida服务端</h2><p>frida-server：<br><a href="https://github.com/frida/frida/releases/download/12.8.0/frida-inject-12.8.0-android-arm.xz">https://github.com/frida/frida/releases/download/12.8.0/frida-inject-12.8.0-android-arm.xz</a></p><ul><li><p>查看Android手机设备设置<code>getprop ro.product.cpu.abi</code></p></li><li><p>根据cpu版本去下载相应版本,手机是arm64-v8a的，找到相应的服务器server</p></li><li><p>将frida-server下载下来，加压出来，为了简单，重命名为fs-12.8.0，将放到手机，并进行端口转发，运行frida</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">adb shell</span><br><span class="line">su root </span><br><span class="line">adb push fs-12.8.0 /data/local/tmp</span><br><span class="line">chmod 755 fs-12.8.0</span><br><span class="line">./fs-12.8.0 &amp;</span><br></pre></td></tr></table></figure></li></ul><p>如果运行不了，关闭liunx的SELinux： <code>echo 0 &gt; /sys/fs/selinux/enforce</code>。</p><p>另打开一个cmd，查看frida-server是否运行成功。<br><code>frida-ps -U</code></p><h1 id="Frida工具"><a href="#Frida工具" class="headerlink" title="Frida工具"></a>Frida工具</h1><p>工具总体概述<br>Frida提供了四个工具，frida-trace，frida-ps，frida，frida-discover，这些工具都位于python的Scripts路径下</p><h2 id="注意端口转发"><a href="#注意端口转发" class="headerlink" title="注意端口转发"></a>注意端口转发</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb forward tcp:27042 tcp:27042</span><br></pre></td></tr></table></figure><h1 id="frida命令"><a href="#frida命令" class="headerlink" title="frida命令"></a>frida命令</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">Usage: frida [options] target</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">  --version             show program&#x27;s version number and exit</span><br><span class="line">  -h, --help            show this help message and exit</span><br><span class="line">  -D ID, --device=ID    connect to device with the given ID</span><br><span class="line">  -U, --usb             connect to USB device</span><br><span class="line">  -R, --remote          connect to remote frida-server</span><br><span class="line">  -H HOST, --host=HOST  connect to remote frida-server on HOST</span><br><span class="line">  -f FILE, --file=FILE  spawn FILE</span><br><span class="line">  -F, --attach-frontmost</span><br><span class="line">                        attach to frontmost application</span><br><span class="line">  -n NAME, --attach-name=NAME</span><br><span class="line">                        attach to NAME</span><br><span class="line">  -p PID, --attach-pid=PID</span><br><span class="line">                        attach to PID</span><br><span class="line">  --stdio=inherit|pipe  stdio behavior when spawning (defaults to “inherit”)</span><br><span class="line">  --runtime=duk|v8      script runtime to use (defaults to “duk”)</span><br><span class="line">  --debug               enable the Node.js compatible script debugger</span><br><span class="line">  -l SCRIPT, --load=SCRIPT</span><br><span class="line">                        load SCRIPT</span><br><span class="line">  -P PARAMETERS_JSON, --parameters=PARAMETERS_JSON</span><br><span class="line">                        Parameters as JSON, same as Gadget</span><br><span class="line">  -C CMODULE, --cmodule=CMODULE</span><br><span class="line">                        load CMODULE</span><br><span class="line">  -c CODESHARE_URI, --codeshare=CODESHARE_URI</span><br><span class="line">                        load CODESHARE_URI</span><br><span class="line">  -e CODE, --eval=CODE  evaluate CODE</span><br><span class="line">  -q                    quiet mode (no prompt) and quit after -l and -e</span><br><span class="line">  --no-pause            automatically start main thread after startup</span><br><span class="line">  -o LOGFILE, --output=LOGFILE</span><br><span class="line">                        output to log file</span><br><span class="line">  --exit-on-error       exit with code 1 after encountering any exception in</span><br><span class="line">                        the SCRIPT</span><br></pre></td></tr></table></figure><p>“-U” 参数代表我们连接的是远程USB server，同理你也可以使用其他参数来连接，”-f “参数则表示在手机端启动一个你指定的android程序，那个FILE则表示应用的包名，通常”-f”这个参数配合”–no-pause”参数来使用，因为可能不让进程恢复的话可能会有奇怪的问题，”-p” 与”-n”命令分别表示attach到进程的名字或者pid，”-l”参数则是代表需要注入的javascript脚本，而这个javascript的脚本就是我们所写的hook代码，完成函数的hook，内存的dump等一系列功能</p>]]></content>
      
      
      <categories>
          
          <category> frida </category>
          
      </categories>
      
      
        <tags>
            
            <tag> frida </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于frida的objection工具的使用</title>
      <link href="/post/2e5769ea.html"/>
      <url>/post/2e5769ea.html</url>
      
        <content type="html"><![CDATA[<p>摘录<a href="http://strivemario.work/archives/8eec80c3.html">http://strivemario.work/archives/8eec80c3.html</a></p><p>官方仓库: <a href="https://github.com/sensepost/objection">objection</a></p><hr><h2 id="安装前置条件"><a href="#安装前置条件" class="headerlink" title="安装前置条件"></a>安装前置条件</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1. python版本 &gt; 3.4</span><br><span class="line">2. pip版本 &gt; 9.0</span><br></pre></td></tr></table></figure><h2 id="安装命令"><a href="#安装命令" class="headerlink" title="安装命令"></a>安装命令</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install objection</span><br></pre></td></tr></table></figure><p>安装完成后, 直接输入<code>objection</code>, 就可以看到食用方法了</p><h2 id="简单使用一下"><a href="#简单使用一下" class="headerlink" title="简单使用一下"></a>简单使用一下</h2><p>CmdLine:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">Usage: objection [OPTIONS] COMMAND [ARGS]...</span><br><span class="line"></span><br><span class="line">       _   _         _   _</span><br><span class="line">   ___| |_|_|___ ___| |_|_|___ ___</span><br><span class="line">  | . | . | | -_|  _|  _| | . |   |</span><br><span class="line">  |___|___| |___|___|_| |_|___|_|_|</span><br><span class="line">        |___|(object)inject(ion)</span><br><span class="line">  </span><br><span class="line">       Runtime Mobile Exploration</span><br><span class="line">          by: @leonjza from @sensepost</span><br><span class="line"></span><br><span class="line">  By default, communications will happen over USB, unless the --network</span><br><span class="line">  option is provided.</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">  -N, --network            Connect using a network connection instead of USB.</span><br><span class="line">                           [default: False]</span><br><span class="line"></span><br><span class="line">  -h, --host TEXT          [default: 127.0.0.1]</span><br><span class="line">  -p, --port INTEGER       [default: 27042]</span><br><span class="line">  -ah, --api-host TEXT     [default: 127.0.0.1]</span><br><span class="line">  -ap, --api-port INTEGER  [default: 8888]</span><br><span class="line">  -g, --gadget TEXT        Name of the Frida Gadget/Process to connect to.</span><br><span class="line">                           [default: Gadget]</span><br><span class="line"></span><br><span class="line">  -S, --serial TEXT        A device serial to connect to.</span><br><span class="line">  -d, --debug              Enable debug mode with verbose output. (Includes</span><br><span class="line">                           agent <span class="built_in">source</span> map <span class="keyword">in</span> stack traces)</span><br><span class="line"></span><br><span class="line">  --<span class="built_in">help</span>                   Show this message and <span class="built_in">exit</span>.</span><br><span class="line"></span><br><span class="line">Commands:</span><br><span class="line">  api          Start the objection API server <span class="keyword">in</span> headless mode.</span><br><span class="line">  device-type  Get information about an attached device.</span><br><span class="line">  explore      Start the objection exploration REPL.</span><br><span class="line">  patchapk     Patch an APK with the frida-gadget.so.</span><br><span class="line">  patchipa     Patch an IPA with the FridaGadget dylib.</span><br><span class="line">  run          Run a single objection <span class="built_in">command</span>.</span><br><span class="line">  version      Prints the current version and exists.</span><br></pre></td></tr></table></figure><p>参数详解：<br>-N 使用网络代替usb、-h 使用ip、-s 设备号、-d debug模式、-g 安卓没有root权限，可以把app进行重新打包，即使安卓没有root权限，也可以连接frida。</p><ul><li><p>使用前几个使用tips</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. 空格键: 忘记命令直接输入空格键, 会有提示与补全</span><br><span class="line">2. help: help [command] 会有详细介绍指定命令的作用与例子</span><br><span class="line">3. jobs: 任务管理系统, 可以方便的查看与删除任务</span><br></pre></td></tr></table></figure></li><li><p>启动Frida-server并转发端口</p></li><li><p>附加需要调试的app, 进入交互界面</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">objection -g [packageName] explore</span><br></pre></td></tr></table></figure></li><li><p>可以使用该env命令枚举与所讨论的应用程序相关的其他有趣目录: <code>env</code></p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">com.opera.mini.native on (samsung: 6.0.1) [usb] <span class="comment"># env</span></span><br><span class="line"></span><br><span class="line">Name                    Path</span><br><span class="line">----------------------  ------------------------------------------------------------</span><br><span class="line">filesDirectory          /data/user/0/com.opera.mini.native/files</span><br><span class="line">cacheDirectory          /data/user/0/com.opera.mini.native/cache</span><br><span class="line">externalCacheDirectory  /storage/emulated/0/Android/data/com.opera.mini.native/cache</span><br><span class="line">codeCacheDirectory      /data/user/0/com.opera.mini.native/code_cache</span><br><span class="line">obbDir                  /storage/emulated/0/Android/obb/com.opera.mini.native</span><br><span class="line">packageCodePath         /data/app/com.opera.mini.native-1/base.apk</span><br></pre></td></tr></table></figure></li><li><p>我们可以使用以下file download命令从远程文件系统中下载文件:<br>  <code>file download [file] [outfile]</code></p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">com.opera.mini.native on (samsung: 6.0.1) [usb] # file download fhash.dat fhash.dat</span><br><span class="line">Downloading /data/user/0/com.opera.mini.native/cache/fhash.dat to fhash.dat</span><br></pre></td></tr></table></figure></li><li><p>可以列出app具有的所有avtivity: <code>android hooking list activities</code></p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">com.opera.mini.native on (samsung: 6.0.1) [usb] # android hooking list activities</span><br><span class="line">com.facebook.ads.AudienceNetworkActivity</span><br><span class="line">com.google.android.gms.ads.AdActivity</span><br><span class="line">com.google.android.gms.auth.api.signin.internal.SignInHubActivity</span><br><span class="line">com.google.android.gms.common.api.GoogleApiActivity</span><br><span class="line">com.opera.android.AssistActivity</span><br><span class="line">com.opera.android.MiniActivity</span><br><span class="line">com.opera.android.ads.AdmobIntentInterceptor</span><br><span class="line">com.opera.mini.android.Browser</span><br><span class="line"></span><br><span class="line">Found 8 classes</span><br></pre></td></tr></table></figure></li><li><p>启动指定avtivity: <code>android intent launch_activity [class_activity]</code></p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">com.opera.mini.native on (samsung: 6.0.1) [usb] # android intent launch_activity com.facebook.ads.AudienceNetworkActivity</span><br><span class="line">Launching Activity: com.facebook.ads.AudienceNetworkActivity...</span><br></pre></td></tr></table></figure></li><li><p>RPC 调用命令: <code>curl -s &quot;http://127.0.0.1:8888/rpc/invoke/androidHookingListActivities&quot;</code></p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ curl -s &quot;http://127.0.0.1:8888/rpc/invoke/androidHookingListActivities&quot;</span><br><span class="line">[&quot;com.reddit.frontpage.StartActivity&quot;,&quot;com.reddit.frontpage.IntroductionActivity&quot;, ... snip ...]</span><br></pre></td></tr></table></figure></li><li><p>RPC调用执行脚本:<code>url -X POST -H &quot;Content-Type: text/javascript&quot; http://127.0.0.1:8888/script/runonce -d &quot;@script.js&quot;</code></p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cat</span> script.js</span><br><span class="line">&#123;</span><br><span class="line">    send(Frida.version);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[&#123;<span class="string">&quot;payload&quot;</span>:<span class="string">&quot;12.8.0&quot;</span>,<span class="string">&quot;type&quot;</span>:<span class="string">&quot;send&quot;</span>&#125;]</span><br></pre></td></tr></table></figure></li></ul><h2 id="API介绍"><a href="#API介绍" class="headerlink" title="API介绍"></a>API介绍</h2><ul><li><p>Memory 指令</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">memory list modules //枚举当前进程模块</span><br><span class="line">memory list exports [lib_name] //查看指定模块的导出函数</span><br><span class="line">memory list exports libart.so --json /root/libart.json //将结果保存到json文件中</span><br><span class="line">memory search --string --offsets-only //搜索内存</span><br></pre></td></tr></table></figure></li><li><p>android heap</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//堆内存中搜索指定类的实例, 可以获取该类的实例id</span><br><span class="line">search instances search instances com.xx.xx.class</span><br><span class="line"></span><br><span class="line">//直接调用指定实例下的方法</span><br><span class="line">android heap execute [ins_id] [func_name]</span><br><span class="line"></span><br><span class="line">//自定义frida脚本, 执行实例的方法</span><br><span class="line">android heap execute [ins_id]</span><br></pre></td></tr></table></figure></li><li><p>root</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//尝试关闭app的root检测</span><br><span class="line">android root disable</span><br><span class="line"></span><br><span class="line">//尝试模拟root环境</span><br><span class="line">android root simulate</span><br></pre></td></tr></table></figure></li><li><p>ui</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//截图</span><br><span class="line">android ui screenshot [image.png]</span><br><span class="line"></span><br><span class="line">//设置FLAG_SECURE权限</span><br><span class="line">android ui FLAG_SECURE false</span><br></pre></td></tr></table></figure></li><li><p>内存漫游</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">//列出内存中所有的类</span><br><span class="line">android hooking list classes</span><br><span class="line"></span><br><span class="line">//在内存中所有已加载的类中搜索包含特定关键词的类</span><br><span class="line">android hooking search classes [search_name] </span><br><span class="line"></span><br><span class="line">//在内存中所有已加载的方法中搜索包含特定关键词的方法</span><br><span class="line">android hooking search methods [search_name] </span><br><span class="line"></span><br><span class="line">//直接生成hook代码</span><br><span class="line">android hooking generate simple [class_name]</span><br></pre></td></tr></table></figure></li><li><p>hook 方式</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line">hook指定方法, 如果有重载会hook所有重载,如果有疑问可以看</span><br><span class="line">--dump-args : 打印参数</span><br><span class="line">--dump-backtrace : 打印调用栈</span><br><span class="line">--dump-return : 打印返回值</span><br><span class="line">*/</span><br><span class="line">//hook类中的方法</span><br><span class="line">android hooking watch class_method com.xxx.xxx.methodName --dump-args --dump-backtrace --dump-return</span><br><span class="line"></span><br><span class="line">//hook指定类, 会打印该类下的所有的调用</span><br><span class="line">android hooking watch class com.xxx.xxx</span><br><span class="line"></span><br><span class="line">//设置返回值(只支持bool类型)</span><br><span class="line">android hooking set return_value com.xxx.xxx.methodName false</span><br></pre></td></tr></table></figure></li><li><p>Spawn方式Hook</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">objection -g packageName explore --startup-command &#x27;[obejection_command]&#x27;</span><br></pre></td></tr></table></figure></li><li><p>activity和service操作</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">//枚举activity</span><br><span class="line">android hooking list activities</span><br><span class="line"></span><br><span class="line">//启动activity</span><br><span class="line">android intent launch_activity [activity_class]</span><br><span class="line"></span><br><span class="line">//枚举services</span><br><span class="line">android hooking list services</span><br><span class="line"></span><br><span class="line">//启动services</span><br><span class="line">android intent launch_service [services_class]</span><br></pre></td></tr></table></figure></li><li><p>任务管理器</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//查看任务列表</span><br><span class="line">jobs list</span><br><span class="line"></span><br><span class="line">//关闭任务</span><br><span class="line">jobs kill [task_id]</span><br></pre></td></tr></table></figure></li><li><p>关闭app的ssl校验</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android sslpinning disable</span><br></pre></td></tr></table></figure></li><li><p>监控系统剪贴板</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//获取Android剪贴板服务上的句柄并每5秒轮询一次用于数据。 如果发现新数据，与之前的调查不同，则该数据将被转储到屏幕上。</span><br><span class="line">help android  clipboard</span><br></pre></td></tr></table></figure></li><li><p>执行命令行</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">help android shell_exec [command]</span><br></pre></td></tr></table></figure></li><li><p>插件编写 : <a href="https://github.com/sensepost/objection/wiki/Plugins">objection pluging</a></p></li></ul><h2 id="使用参考"><a href="#使用参考" class="headerlink" title="使用参考"></a>使用参考</h2><p><a href="https://www.anquanke.com/post/id/197657">https://www.anquanke.com/post/id/197657</a></p>]]></content>
      
      
      <categories>
          
          <category> frida </category>
          
      </categories>
      
      
        <tags>
            
            <tag> frida </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>flask的request对象和数据渲染</title>
      <link href="/post/508ae6b3.html"/>
      <url>/post/508ae6b3.html</url>
      
        <content type="html"><![CDATA[<h2 id="request对象的属性"><a href="#request对象的属性" class="headerlink" title="request对象的属性"></a>request对象的属性</h2><p><code>from flask import request</code></p><ul><li>path：base_url</li><li>full_path：url</li><li>host：url_root                 </li><li>host_url</li><li>args：Werkzeug的ImmutableMultiDict对象。存储解析后的查询字符串，可通过字典方式获取键值。如果你想获取未解析的原生查询字符串，可以用query_string属性</li><li>blueprint:当前蓝本的名称</li><li>cookies：一个包含所有随请求提交的cookies的字典</li><li>data：包含字符串形式的请求数据</li><li>endpoint：于当前请求相匹配的端点值</li><li>files：Werkzeug的MultiDict对象，包含所有上传文件，可以使用字典的形式获取文件。使用的键为文件input标签中的name值，对应的值为Werkzeug的FileStorage对象。可以调用save()方法并传入保存路径来保存文件</li><li>form：Werkzeug的ImmutableMultiDict对象。于files类似，包含解析后的表单数据。表单字段值通过input标签的name属性值作为键获取</li><li>values：Werkzeug的CombinedMultiDict对象，结合了args和form属性的值<br>  get_data(cache&#x3D;True,as_text&#x3D;False,parse_from_data&#x3D;False)：获取请求中的数据，默认读取为字节字符串（bytestring），将as_text设为True则返回值将是解码后的unicode字符串</li><li>get_json(self,force&#x3D;False,silent&#x3D;False,cache&#x3D;True)：作为json解析并返回数据，如果MIME类型不是json，返回None（除非force设为True）；解析出错则抛出Werkzeug提供的BadRequest异常（如果未开启调试模式，则返回400错误响应），如果silent设为True则返回None；cache设置是否缓存解析后的json数据</li><li>headers：一个Werkzeug的EnvironHeaders对象，包含首部字段，可以以字典的形式操作</li><li>json：包含解析后的json数据，内部调用get_json()，可通过字典的方式获取键值</li><li>method：请求的HTTP方法</li><li>referrer：请求发起的源URL，即referer</li><li>scheme：请求的URL模式（http或https）</li><li>user_agent：用户代理（User Agent, UA），包含了用户的客户端类型，操作系统类型等信息</li></ul><h2 id="模板渲染和响应"><a href="#模板渲染和响应" class="headerlink" title="模板渲染和响应"></a>模板渲染和响应</h2><h3 id="模板渲染"><a href="#模板渲染" class="headerlink" title="模板渲染"></a>模板渲染</h3><p><code>from flask import render_template</code></p><h3 id="返回json数据"><a href="#返回json数据" class="headerlink" title="返回json数据"></a>返回json数据</h3><p><code>from flask import jsonify</code></p><h3 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h3><p><code>from flask import redirect</code>，默认的状态码code&#x3D;302，临时重定向。</p><p>301 redirect: 301 代表永久性转移(Permanently Moved)</p><p>302 redirect: 302 代表暂时性转移(Temporarily Moved )</p><h3 id="自定义状态码响应头"><a href="#自定义状态码响应头" class="headerlink" title="自定义状态码响应头"></a>自定义状态码响应头</h3><p>1.返回一个元祖，格式：(resposne（响应的内容）, status（状态码）, headers（响应头额外的参数，字典或者列表）)的形式</p><p>2.make_response方法</p><h3 id="cookie使用"><a href="#cookie使用" class="headerlink" title="cookie使用"></a>cookie使用</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> make_response, request</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">set_cookie</span>():</span><br><span class="line">res = make_response(<span class="string">&quot;xxx&quot;</span>)</span><br><span class="line">res.set_cookie(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;cookies&quot;</span>)</span><br><span class="line"><span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_cookie</span>():</span><br><span class="line">res = make_response(<span class="string">&quot;xxx&quot;</span>)</span><br><span class="line">request.cookies,get(<span class="string">&quot;name&quot;</span>)</span><br><span class="line"><span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><h3 id="session"><a href="#session" class="headerlink" title="session"></a>session</h3><p>设置的时候注意：</p><p>RuntimeError: The session is unavailable because no secret key was set.  Set the secret_key on the application to something unique and secret.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> session</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.secret_key = <span class="string">&quot;232gft&amp;&amp;*54&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/sess&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">set_session</span>():</span><br><span class="line">    session[<span class="string">&quot;sess&quot;</span>] = <span class="string">&quot;1213&quot;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;ok&quot;</span></span><br><span class="line">    </span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/gsess&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_session</span>():</span><br><span class="line">    s = session.get(<span class="string">&quot;sess&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> s</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> flask </category>
          
      </categories>
      
      
        <tags>
            
            <tag> flask </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>flask的路由和蓝图</title>
      <link href="/post/33812d0c.html"/>
      <url>/post/33812d0c.html</url>
      
        <content type="html"><![CDATA[<h2 id="查看所有的路由的路径"><a href="#查看所有的路由的路径" class="headerlink" title="查看所有的路由的路径"></a>查看所有的路由的路径</h2><p>1.<code>flask routes</code> 命令行</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Endpoint     Methods  Rule</span><br><span class="line">-----------  -------  ----------------</span><br><span class="line">hello_world  GET      /</span><br><span class="line">static       GET      /&lt;path:filename&gt;</span><br></pre></td></tr></table></figure><p>2.<code>app.url_map</code>代码中</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Map([&lt;Rule &#x27;/static/&lt;filename&gt;&#x27; (GET, OPTIONS, HEAD) -&gt; static&gt;])</span><br></pre></td></tr></table></figure><h2 id="url路由转换器"><a href="#url路由转换器" class="headerlink" title="url路由转换器"></a>url路由转换器</h2><p>普通的转换器默认是str类型</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/user/&lt;id&gt;&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hello_world</span>(<span class="params"><span class="built_in">id</span></span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">f&#x27;Hello <span class="subst">&#123;<span class="built_in">id</span>&#125;</span>!&#x27;</span></span><br></pre></td></tr></table></figure><p>带类型的转换器</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># # 默认转换器</span></span><br><span class="line"><span class="comment"># DEFAULT_CONVERTERS = &#123;</span></span><br><span class="line"><span class="comment">#     &#x27;default&#x27;:          UnicodeConverter,</span></span><br><span class="line"><span class="comment">#     &#x27;string&#x27;:           UnicodeConverter,</span></span><br><span class="line"><span class="comment">#     &#x27;any&#x27;:              AnyConverter,</span></span><br><span class="line"><span class="comment">#     &#x27;path&#x27;:             PathConverter,</span></span><br><span class="line"><span class="comment">#     &#x27;int&#x27;:              IntegerConverter,</span></span><br><span class="line"><span class="comment">#     &#x27;float&#x27;:            FloatConverter,</span></span><br><span class="line"><span class="comment">#     &#x27;uuid&#x27;:             UUIDConverter,</span></span><br><span class="line"><span class="comment"># &#125;</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/user/&lt;int:user_id&gt;&#x27;</span>,methods=[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hello_world</span>(<span class="params">user_id</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">f&#x27;Hello <span class="subst">&#123;user_id&#125;</span>!&#x27;</span></span><br></pre></td></tr></table></figure><p>自定义转换器</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> werkzeug.routing <span class="keyword">import</span> BaseConverter <span class="comment"># 导入基类</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 自定义</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PhoneConverter</span>(<span class="title class_ inherited__">BaseConverter</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    手机格式</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    regex = <span class="string">r&#x27;1[3-9]\d&#123;9&#125;&#x27;</span></span><br><span class="line">    </span><br><span class="line"><span class="comment"># 将转换器类，添加到转换器字典中，转换器使用时的名称叫phone</span></span><br><span class="line">app.url_map.converters[<span class="string">&#x27;phone&#x27;</span>] = PhoneConverter</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/phone_number/&lt;phone:phone_id&gt;&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hello_world</span>(<span class="params">phone_id</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">type</span>(phone_id))</span><br><span class="line">    <span class="keyword">return</span> <span class="string">f&#x27;Phone number is <span class="subst">&#123;phone_id&#125;</span>!&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.定义类，继承自BaseConverter</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyRegexConverter</span>(<span class="title class_ inherited__">BaseConverter</span>):</span><br><span class="line">    <span class="comment"># 2.重写init方法,接收两个参数</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, <span class="built_in">map</span>, regex</span>):</span><br><span class="line">        <span class="comment"># 3.初始化父类成员变量，还有子类自己的规则</span></span><br><span class="line">        <span class="built_in">super</span>(MyRegexConverter, self).__init__(<span class="built_in">map</span>)</span><br><span class="line">        self.regex = regex</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4.将转换器类，添加到系统默认的转换器列表中</span></span><br><span class="line">app.url_map.converters[<span class="string">&#x27;wdc&#x27;</span>] = MyRegexConverter</span><br><span class="line"></span><br><span class="line"><span class="comment"># 三位整数</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&lt;wdc(&quot;\d&#123;3&#125;&quot;):num&gt;&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hello_world</span>(<span class="params">num</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">f&#x27;这一个数是<span class="subst">&#123;num&#125;</span>&#x27;</span></span><br><span class="line"><span class="comment"># 四位整数</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&lt;wdc(&quot;\d&#123;4&#125;&quot;):num&gt;&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hello_world_1</span>(<span class="params">num</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">f&#x27;这一个数是<span class="subst">&#123;num&#125;</span>&#x27;</span></span><br><span class="line"><span class="comment"># 手机号</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&lt;wdc(&quot;1[3-9]\d&#123;9&#125;&quot;):num&gt;&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hello_world_2</span>(<span class="params">num</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">f&#x27;这是一个手机号<span class="subst">&#123;num&#125;</span>&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="蓝图"><a href="#蓝图" class="headerlink" title="蓝图"></a>蓝图</h2><p>django中一个命令<code>python manage.py startapp &lt;app_name&gt;</code>用于创建一个application，用于创建不同的应用，flask中也需要把不同模块的处理分离，flask的蓝图大概也是类似的功能。</p><p>flask使用Blueprint让应用实现模块化，在Flask中，Blueprint具有如下属性：</p><ul><li>一个项目可以具有多个Blueprint</li><li>可以将一个Blueprint注册到任何一个未使用的URL下比如 “&#x2F;”、“&#x2F;sample”或者子域名</li><li>在一个应用中，一个模块可以注册多次</li><li>Blueprint可以单独具有自己的模板、静态文件或者其它的通用操作方法，它并不是必须要实现应用的视图和函数的</li><li>在一个应用初始化时，就应该要注册需要使用的Blueprint</li></ul><p>定义蓝图：</p><p>1.创建一个蓝图</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Blueprint</span><br><span class="line">user_bp = Blueprint(<span class="string">&#x27;user&#x27;</span>, __name___)</span><br></pre></td></tr></table></figure><p>2.在这个蓝图对象进行操作，注册路由，指定静态文件夹，模板文件等</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># users/__init__.py，代码：</span></span><br><span class="line">user_blu = Blueprint(<span class="string">&quot;users&quot;</span>, __name__, static_folder=<span class="string">&#x27;static_users&#x27;</span>)</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</span><br><span class="line"><span class="comment"># users/views.py</span></span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> user_blu</span><br><span class="line"><span class="meta">@user_blu.route(<span class="params"><span class="string">&#x27;/login&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>():</span><br><span class="line">    <span class="keyword">return</span> </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>3.在应用对象上注册这个蓝图</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动单独文件 main.py，代码：</span></span><br><span class="line"><span class="keyword">from</span> users <span class="keyword">import</span> user_blu</span><br><span class="line">app.register_blueprint(user_blu, url_prefix=<span class="string">&#x27;/users&#x27;</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> flask </category>
          
      </categories>
      
      
        <tags>
            
            <tag> flask </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>flask的异常处理</title>
      <link href="/post/ca5a7c64.html"/>
      <url>/post/ca5a7c64.html</url>
      
        <content type="html"><![CDATA[<h2 id="abort函数和自定义错误信息"><a href="#abort函数和自定义错误信息" class="headerlink" title="abort函数和自定义错误信息"></a>abort函数和自定义错误信息</h2><h3 id="abort-函数可以传递两种方式"><a href="#abort-函数可以传递两种方式" class="headerlink" title="abort()函数可以传递两种方式"></a>abort()函数可以传递两种方式</h3><ol><li><p><strong>一种是传递状态码信息，例如：abort(404)  ,前端就会报出已经默认好的404错误信息</strong></p></li><li><p><strong>另外一种方式是传递响应体的信息，abort(Response(“内容”))，Response() ，里面的信息会在前端上面显示出来</strong></p></li></ol><h3 id="自定义错误信息-用装饰器"><a href="#自定义错误信息-用装饰器" class="headerlink" title="自定义错误信息,用装饰器"></a>自定义错误信息,用装饰器</h3><p>定义一个视图函数 <strong>这个函数的返回值会是前端所看到的最终的结果</strong>，这个视图函数的<strong>装饰器来定义错误的类型</strong></p><p><strong>@app.errorhandler(404)  #  定义404的错误类型</strong></p><p><strong>自定义的错误类型，可以是状态码，可以是异常类名称（例如：ZeroDivisionError）</strong></p>]]></content>
      
      
      <categories>
          
          <category> flask </category>
          
      </categories>
      
      
        <tags>
            
            <tag> flask </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>flask的请求下上文和钩子</title>
      <link href="/post/734466bf.html"/>
      <url>/post/734466bf.html</url>
      
        <content type="html"><![CDATA[<h2 id="请求钩子"><a href="#请求钩子" class="headerlink" title="请求钩子"></a>请求钩子</h2><ul><li>before_first_request<ul><li>在处理第一个请求前执行</li></ul></li><li>before_request<ul><li>在每次请求前执行</li><li>如果在某修饰的函数中返回了一个响应，视图函数将不再被调用.</li></ul></li><li>after_request<ul><li>如果没有抛出错误，在每次请求后执行</li><li>接受一个参数︰视图函数作出的响应</li><li>在此函数中可以对响应值在返回之前做最后一步修改处理。</li><li>需要将参数中的响应在此参数中进行返回</li></ul></li><li>teardown_request :<ul><li>在每次请求后执行</li><li>接受一个参数:错误信息，如果有相关错误抛出</li></ul></li></ul><h2 id="上下文"><a href="#上下文" class="headerlink" title="上下文"></a>上下文</h2><ul><li>current_app 程序上下文，当前激活程序的程序的实例</li><li>g 程序上下文，处理请求时用作临时存储的对象。每次请求会重设这个对象</li><li>request 请求上下文，请求对象，封装了客户端发出的http请求的内容</li><li>session 请求上下文，用户会话</li></ul>]]></content>
      
      
      <categories>
          
          <category> flask </category>
          
      </categories>
      
      
        <tags>
            
            <tag> flask </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>认识flask的app</title>
      <link href="/post/11aed9bf.html"/>
      <url>/post/11aed9bf.html</url>
      
        <content type="html"><![CDATA[<h2 id="flask简介"><a href="#flask简介" class="headerlink" title="flask简介"></a>flask简介</h2><p>Flask是使用Python编写的Web微框架。Web框架可以让我们不用关心底层的请求响应处理，更方便高效地编写Web程序。因为Flask核心简单且易于扩展，所以被称作微框架（micro framework）。Flask有两个主要依赖，一个是WSGI（Web Server Gateway Interface，Web服务器网关接口）工具集——Werkzeug（<a href="http://werkzeug.pocoo.org/%EF%BC%89%EF%BC%8C%E5%8F%A6%E4%B8%80%E4%B8%AA%E6%98%AFJinja2%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E%EF%BC%88http://jinja.pocoo.org/%EF%BC%89%E3%80%82Flask%E5%8F%AA%E4%BF%9D%E7%95%99%E4%BA%86Web%E5%BC%80%E5%8F%91%E7%9A%84%E6%A0%B8%E5%BF%83%E5%8A%9F%E8%83%BD%EF%BC%8C%E5%85%B6%E4%BB%96%E7%9A%84%E5%8A%9F%E8%83%BD%E9%83%BD%E7%94%B1%E5%A4%96%E9%83%A8%E6%89%A9%E5%B1%95%E6%9D%A5%E5%AE%9E%E7%8E%B0%EF%BC%8C%E6%AF%94%E5%A6%82%E6%95%B0%E6%8D%AE%E5%BA%93%E9%9B%86%E6%88%90%E3%80%81%E8%A1%A8%E5%8D%95%E8%AE%A4%E8%AF%81%E3%80%81%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E7%AD%89%E3%80%82%E5%A6%82%E6%9E%9C%E6%B2%A1%E6%9C%89%E5%90%88%E9%80%82%E7%9A%84%E6%89%A9%E5%B1%95%EF%BC%8C%E4%BD%A0%E7%94%9A%E8%87%B3%E5%8F%AF%E4%BB%A5%E8%87%AA%E5%B7%B1%E5%8A%A8%E6%89%8B%E5%BC%80%E5%8F%91%E3%80%82Flask%E4%B8%8D%E4%BC%9A%E6%9B%BF%E4%BD%A0%E5%81%9A%E5%86%B3%E5%AE%9A%EF%BC%8C%E4%B9%9F%E4%B8%8D%E4%BC%9A%E9%99%90%E5%88%B6%E4%BD%A0%E7%9A%84%E9%80%89%E6%8B%A9%E3%80%82%E6%80%BB%E4%B9%8B%EF%BC%8CFlask%E5%8F%AF%E4%BB%A5%E5%8F%98%E6%88%90%E4%BB%BB%E4%BD%95%E4%BD%A0%E6%83%B3%E8%A6%81%E7%9A%84%E4%B8%9C%E8%A5%BF%EF%BC%8C%E4%B8%80%E5%88%87%E9%83%BD%E7%94%B1%E4%BD%A0%E5%81%9A%E4%B8%BB%E3%80%82">http://werkzeug.pocoo.org/），另一个是Jinja2模板引擎（http://jinja.pocoo.org/）。Flask只保留了Web开发的核心功能，其他的功能都由外部扩展来实现，比如数据库集成、表单认证、文件上传等。如果没有合适的扩展，你甚至可以自己动手开发。Flask不会替你做决定，也不会限制你的选择。总之，Flask可以变成任何你想要的东西，一切都由你做主。</a></p><p>官方文档：<a href="https://dormousehole.readthedocs.io/en/latest/">https://dormousehole.readthedocs.io/en/latest/</a></p><h2 id="简单的demo"><a href="#简单的demo" class="headerlink" title="简单的demo"></a>简单的demo</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">传入Flask类构造方法的第一个参数是模块或包的名称，我们应该使用特殊变量__name__。</span></span><br><span class="line"><span class="string">Python会根据所处的模块来赋予__name__变量相应的值，对于我们的程序来说（app.py），这个值为app。</span></span><br><span class="line"><span class="string">除此之外，这也会帮助Flask在相应的文件夹里找到需要的资源，比如模板和静态文件。</span></span><br><span class="line"><span class="string">static_url_path：静态文件访问路劲，可以不传，默认：/ + static</span></span><br><span class="line"><span class="string">static_folder：静态文件存储的文件夹，可以不传，默认为：static</span></span><br><span class="line"><span class="string">template_folder：模板文件存储的文件夹，可以不传，默认：templates</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">app = Flask(__name__, static_url_path=<span class="string">&quot;&quot;</span>, static_folder=<span class="string">&quot;&quot;</span>, template_folder=<span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">app.route（）装饰器把根地址/和index（）函数绑定起来，当用户访问这个URL时就会触发index（）函数。</span></span><br><span class="line"><span class="string">这个视图函数可以像其他普通函数一样执行任意操作，比如从数据库中获取信息，获取请求信息，对用户输入的数据进行计算和处理等。</span></span><br><span class="line"><span class="string">最后，视图函数返回的值将作为响应的主体，一般来说，响应的主体就是呈现在浏览器窗口的HTML页面</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hello_world</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Hello World!&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run()</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><code>flask run</code> 启动服务</li><li><code>flask run--host=0.0.0.0</code> 指定运行的host</li><li><code>flask run--port=8000</code> 指定运行的端口</li><li><code>flask shell</code> Python Shell可以执行exit（）或quit（）退出，在Windows系统上可以使用Ctrl+Z并按Enter退出；在Linux和macOS则可以使用Ctrl+D退出。</li></ul><h2 id="创建管理环境变量的文件"><a href="#创建管理环境变量的文件" class="headerlink" title="创建管理环境变量的文件"></a>创建管理环境变量的文件</h2><p><code>Tip: There are .env or .flaskenv files present. Do &quot;pip install python-dotenv&quot; to use them.</code> </p><p>项目根目录下分别创建两个文件：.env和.flaskenv。.flaskenv用来存储和Flask相关的公开环境变量，比如FLASK_APP；而.env用来存储包含敏感信息的环境变量，比如后面我们会用来配置Email服务器的账户名与密码。在.flaskenv或.env文件中，环境变量使用键值对的形式定义，每行一个，以#开头的为注释</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 开发环境</span><br><span class="line">FLASK_ENV=development</span><br></pre></td></tr></table></figure><p><strong>注意：</strong>.env包含敏感信息，除非是私有项目，否则绝对不能提交到Git仓库中。当你开发一个新项目时，记得把它的名称添加到.gitignore文件中</p><h2 id="安装检测文件变化的模块"><a href="#安装检测文件变化的模块" class="headerlink" title="安装检测文件变化的模块"></a>安装检测文件变化的模块</h2><p><code>pip install watchdog</code></p><h2 id="引入orm的包"><a href="#引入orm的包" class="headerlink" title="引入orm的包"></a>引入orm的包</h2><p><code>install flask-sqlalchemy</code></p><h2 id="配置信息"><a href="#配置信息" class="headerlink" title="配置信息"></a>配置信息</h2><p>Flask将配置信息保存到了<code>app.config</code>属性中，该属性如下所示：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;Config &#123;&#x27;ENV&#x27;: &#x27;development&#x27;, &#x27;DEBUG&#x27;: True, &#x27;TESTING&#x27;: False, &#x27;PROPAGATE_EXCEPTIONS&#x27;: None, &#x27;PRESERVE_CONTEXT_ON_EXCEPTION&#x27;: None, &#x27;SECRET_KEY&#x27;: None,</span><br><span class="line">&#x27;PERMANENT_SESSION_LIFETIME&#x27;: datetime.timedelta(days=31), &#x27;USE_X_SENDFILE&#x27;: False, &#x27;SERVER_NAME&#x27;: None, &#x27;APPLICATION_ROOT&#x27;: &#x27;/&#x27;, &#x27;SESSION_COOKIE_NAME&#x27;:</span><br><span class="line">&#x27;session&#x27;, &#x27;SESSION_COOKIE_DOMAIN&#x27;: None, &#x27;SESSION_COOKIE_PATH&#x27;: None, &#x27;SESSION_COOKIE_HTTPONLY&#x27;: True, &#x27;SESSION_COOKIE_SECURE&#x27;: False, &#x27;SESSION_COOKIE_S</span><br><span class="line">AMESITE&#x27;: None, &#x27;SESSION_REFRESH_EACH_REQUEST&#x27;: True, &#x27;MAX_CONTENT_LENGTH&#x27;: None, &#x27;SEND_FILE_MAX_AGE_DEFAULT&#x27;: datetime.timedelta(seconds=43200), &#x27;TRAP_B</span><br><span class="line">AD_REQUEST_ERRORS&#x27;: None, &#x27;TRAP_HTTP_EXCEPTIONS&#x27;: False, &#x27;EXPLAIN_TEMPLATE_LOADING&#x27;: False, &#x27;PREFERRED_URL_SCHEME&#x27;: &#x27;http&#x27;, &#x27;JSON_AS_ASCII&#x27;: True, &#x27;JSON_</span><br><span class="line">SORT_KEYS&#x27;: True, &#x27;JSONIFY_PRETTYPRINT_REGULAR&#x27;: False, &#x27;JSONIFY_MIMETYPE&#x27;: &#x27;application/json&#x27;, &#x27;TEMPLATES_AUTO_RELOAD&#x27;: None, &#x27;MAX_COOKIE_SIZE&#x27;: 4093&#125;&gt;</span><br></pre></td></tr></table></figure><h3 id="获取配置信息的方式"><a href="#获取配置信息的方式" class="headerlink" title="获取配置信息的方式"></a>获取配置信息的方式</h3><ul><li>app.config.get(name)</li><li>app.config[name]</li></ul><h3 id="设置配置信息"><a href="#设置配置信息" class="headerlink" title="设置配置信息"></a>设置配置信息</h3><p><strong>app.config.from_obj(配置的对象)</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Config</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">KEY = <span class="string">&quot;2312312WEDQDQWD&quot;</span></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.config.from_object(Config)</span><br></pre></td></tr></table></figure><p>继承配置：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">BaseConfig</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    SECRET_KEY = os.getenv(<span class="string">&#x27;SECRET_KEY&#x27;</span>, <span class="string">&#x27;dev key&#x27;</span>)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DevelopmentConfig</span>(<span class="title class_ inherited__">BaseConfig</span>):</span><br><span class="line">    SQLALCHEMY_DATABASE_URI = prefix + os.path.join(basedir, <span class="string">&#x27;data-dev.db&#x27;</span>)</span><br></pre></td></tr></table></figure><p><strong>app.config.from_pyfile(配置文件)</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">app = Flask(__name__)</span><br><span class="line">app.config.from_pyfile(<span class="string">&#x27;setting.py&#x27;</span>)</span><br></pre></td></tr></table></figure><p><strong>app.config.from_envvar(环境变量名)</strong></p><p>工厂模式加载flask对象：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">create_flask_app</span>(<span class="params">config</span>):</span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.config.配置</span><br><span class="line"><span class="keyword">return</span> app</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> flask </category>
          
      </categories>
      
      
        <tags>
            
            <tag> flask </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python开发环境</title>
      <link href="/post/34964073.html"/>
      <url>/post/34964073.html</url>
      
        <content type="html"><![CDATA[<h1 id="python开发环境"><a href="#python开发环境" class="headerlink" title="python开发环境"></a>python开发环境</h1><h2 id="python的环境"><a href="#python的环境" class="headerlink" title="python的环境"></a>python的环境</h2><h3 id="env"><a href="#env" class="headerlink" title="env"></a>env</h3><p>The venv module provides support for creating lightweight “virtual environments” with their own site directories, optionally isolated from system site directories. Each virtual environment has its own Python binary (which matches the version of the binary that was used to create this environment) and can have its own independent set of installed Python packages in its site directories.</p><p>Venv 模块支持创建具有自己站点目录的轻量级“虚拟环境” ，可以选择从系统站点目录中隔离出来。每个虚拟环境都有自己的 Python 二进制文件(与用于创建此环境的二进制文件的版本相匹配) ，并且可以在其站点目录中拥有自己独立安装的 Python 包集。</p><p><a href="https://docs.python.org/3/library/venv.html">文档</a></p><h2 id="virtualenv"><a href="#virtualenv" class="headerlink" title="virtualenv"></a>virtualenv</h2><p>Virtualenv 是一个创建独立 Python 环境的工具</p><p><a href="https://virtualenv.pypa.io/en/latest/">https://virtualenv.pypa.io/en/latest/</a></p><h4 id="virtualenvwrapper"><a href="#virtualenvwrapper" class="headerlink" title="virtualenvwrapper"></a><a href="https://pypi.org/project/virtualenvwrapper">virtualenvwrapper</a></h4><p>virtualenv 的一组扩展</p><h2 id="pyenv-pyenv官方不支持-Windows-系统，但是也可以用https-github-com-pyenv-win-pyenv-win"><a href="#pyenv-pyenv官方不支持-Windows-系统，但是也可以用https-github-com-pyenv-win-pyenv-win" class="headerlink" title="pyenv(pyenv官方不支持 Windows 系统，但是也可以用https://github.com/pyenv-win/pyenv-win)"></a>pyenv(pyenv官方不支持 Windows 系统，但是也可以用<a href="https://github.com/pyenv-win/pyenv-win">https://github.com/pyenv-win/pyenv-win</a>)</h2><p><a href="https://github.com/pyenv/pyenv#windows">https://github.com/pyenv/pyenv#windows</a></p><p>pyenv lets you easily switch between multiple versions of Python. It’s simple, unobtrusive, and follows the UNIX tradition of single-purpose tools that do one thing well.</p><ul><li><code>pyenv</code>：简单的 Python 版本管理工具。</li><li><code>virtualenv</code>：创建独立 Python 环境的工具。</li><li><code>virtualenvwrapper</code>：virtualenv 的一组扩展。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">~/.bash_profile: 每个用户都可使用该文件输入专用于自己使用的shell信息,当用户登录时,该文件仅仅执行一次!默认情况下,他设置一些环境变量,执行用户的.bashrc文件.</span><br><span class="line">~/.bashrc: 该文件包含专用于你的``bash` `shell的``bash``信息,当登录时以及每次打开新的shell时,该该文件被读取.</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Ubuntu的环境</p><h3 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h3><p>sudo apt-get update</p><p>安装依赖库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install git gcc make openssl libssl-dev libbz2-dev libreadline-dev libsqlite3-dev</span><br></pre></td></tr></table></figure><h3 id="安裝pyenv"><a href="#安裝pyenv" class="headerlink" title="安裝pyenv"></a>安裝pyenv</h3><p><a href="https://github.com/pyenv/pyenv">https://github.com/pyenv/pyenv</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/pyenv/pyenv.git ~/.pyenv</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;export PYENV_ROOT=&quot;$HOME/.pyenv&quot;&#x27;</span> &gt;&gt; ~/.bashrc</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;export PATH=&quot;$PYENV_ROOT/bin:$PATH&quot;&#x27;</span> &gt;&gt; ~/.bashrc</span><br><span class="line"><span class="built_in">echo</span> -e <span class="string">&#x27;if command -v pyenv 1&gt;/dev/null 2&gt;&amp;1; then\n eval &quot;$(pyenv init -)&quot;\nfi&#x27;</span> &gt;&gt; ~/.bashrc</span><br></pre></td></tr></table></figure><p>在使用 pyenv 之前，重新初始化 shell 环境，执行如下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">exec</span> <span class="variable">$SHELL</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install -y make build-essential libssl-dev zlib1g-dev libbz2-dev \</span><br><span class="line">libreadline-dev libsqlite3-dev wget curl llvm libncurses5-dev libncursesw5-dev \</span><br><span class="line">xz-utils tk-dev libffi-dev liblzma-dev python-openssl git</span><br></pre></td></tr></table></figure><h3 id="安裝virtualenv"><a href="#安裝virtualenv" class="headerlink" title="安裝virtualenv"></a>安裝virtualenv</h3><p><a href="https://github.com/pyenv/pyenv-virtualenv">https://github.com/pyenv/pyenv-virtualenv</a></p><ol><li><p><strong>Check out pyenv-virtualenv into plugin directory</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/pyenv/pyenv-virtualenv.git $(pyenv root)/plugins/pyenv-virtualenv</span><br></pre></td></tr></table></figure></li><li><p>(OPTIONAL) <strong>Add <code>pyenv virtualenv-init</code> to your shell</strong> to enable auto-activation of virtualenvs. This is entirely optional but pretty useful. See “Activate virtualenv” below.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="string">&#x27;eval &quot;$(pyenv virtualenv-init -)&quot;&#x27;</span> &gt;&gt; ~/.bash_profile</span><br></pre></td></tr></table></figure><p><strong>Fish shell note</strong>: Add this to your <code>~/.config/fish/config.fish</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">status --is-interactive; and pyenv init - | <span class="built_in">source</span></span><br><span class="line">status --is-interactive; and pyenv virtualenv-init - | <span class="built_in">source</span></span><br></pre></td></tr></table></figure><p><strong>Zsh note</strong>: Modify your <code>~/.zshenv</code> file instead of <code>~/.bash_profile</code>.</p><p><strong>Pyenv note</strong>: You may also need to add <code>eval &quot;$(pyenv init -)&quot;</code> to your profile if you haven’t done so already.</p></li><li><p><strong>Restart your shell to enable pyenv-virtualenv</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">exec</span> <span class="string">&quot;<span class="variable">$SHELL</span>&quot;</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="pyenv使用"><a href="#pyenv使用" class="headerlink" title="pyenv使用"></a>pyenv使用</h3><h4 id="安装python的版本"><a href="#安装python的版本" class="headerlink" title="安装python的版本"></a>安装python的版本</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">v=3.7.2;wget https://npm.taobao.org/mirrors/python/<span class="variable">$v</span>/Python-<span class="variable">$v</span>.tar.xz -P ~/.pyenv/cache/;pyenv install <span class="variable">$v</span> </span><br></pre></td></tr></table></figure><h4 id="查看-pyenv-已经托管了哪些-python-版本"><a href="#查看-pyenv-已经托管了哪些-python-版本" class="headerlink" title="查看 pyenv 已经托管了哪些 python 版本"></a>查看 pyenv 已经托管了哪些 python 版本</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pyenv versions</span><br></pre></td></tr></table></figure><h4 id="选择python版本"><a href="#选择python版本" class="headerlink" title="选择python版本"></a>选择python版本</h4><p>pyenv global 3.5.0 &#x2F;&#x2F;设置全局版本，即系统使用的将是此版本</p><p>pyenv local 3.5.0 &#x2F;&#x2F;当前目录下的使用版本，有点类似virtualenv</p><h3 id="安装virtualenvwrapper"><a href="#安装virtualenvwrapper" class="headerlink" title="安装virtualenvwrapper"></a>安装virtualenvwrapper</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install -i https://pypi.tuna.tsinghua.edu.cn/simple virtualenvwrapper</span><br></pre></td></tr></table></figure><p>配置环境</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">  </span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;export WORKON_HOME=&quot;/home/jane/.virtualenv/&quot;&#x27;</span> &gt;&gt; ~/.bashrc</span><br><span class="line"><span class="built_in">source</span> /home/jane/.pyenv/versions/3.7.2/bin/virtualenvwrapper.sh</span><br></pre></td></tr></table></figure><h3 id="virtualenvwrapper使用"><a href="#virtualenvwrapper使用" class="headerlink" title="virtualenvwrapper使用"></a>virtualenvwrapper使用</h3><h4 id="创建虚拟环境"><a href="#创建虚拟环境" class="headerlink" title="创建虚拟环境"></a>创建虚拟环境</h4><p>利用 virtualenvwrapper，我们可以使用下面的命令轻松创建一个虚拟环境。</p><blockquote><p>mkvirtualenv spider</p></blockquote><p>之后我们就有了一个叫做 spider 的虚拟环境。它被存放在 $WORKON_HOME&#x2F;spider 目录下。</p><h5 id="新建虚拟环境之后会自动激活虚拟环境。如果我们平时想要进入某个虚拟环境，可以用下面的命令。"><a href="#新建虚拟环境之后会自动激活虚拟环境。如果我们平时想要进入某个虚拟环境，可以用下面的命令。" class="headerlink" title="新建虚拟环境之后会自动激活虚拟环境。如果我们平时想要进入某个虚拟环境，可以用下面的命令。"></a>新建虚拟环境之后会自动激活虚拟环境。如果我们平时想要进入某个虚拟环境，可以用下面的命令。</h5><blockquote><p>workon spider</p></blockquote><p>这也就是为什么环境变量中存放虚拟环境的目录为啥叫做WORKON_HOME。顺便说一句，workon 后面可是可以支持用 tab自动补全的哟。</p><h5 id="同样，离开虚拟环境，可以使用。"><a href="#同样，离开虚拟环境，可以使用。" class="headerlink" title="同样，离开虚拟环境，可以使用。"></a>同样，离开虚拟环境，可以使用。</h5><blockquote><p>deactivate</p></blockquote><h5 id="另外，删除虚拟环境也一样简单。"><a href="#另外，删除虚拟环境也一样简单。" class="headerlink" title="另外，删除虚拟环境也一样简单。"></a>另外，删除虚拟环境也一样简单。</h5><blockquote><p>rmvirtualenv spider</p></blockquote><h2 id="Python-虚拟环境和依赖管理工具"><a href="#Python-虚拟环境和依赖管理工具" class="headerlink" title="Python 虚拟环境和依赖管理工具"></a>Python 虚拟环境和依赖管理工具</h2><h3 id="Pipenv"><a href="#Pipenv" class="headerlink" title="Pipenv"></a>Pipenv</h3><p>Pipenv 是 Python.org 官方推进的 Python 包管理工具，旨在将所有包管理工具（如 bundler、composer、npm、cargo、yarn 等）的优点集中应用于 Python 领域中的工具。它对各个平台都有很好的支持。</p><p>Pipenv 可以为你的项目自动创建和管理虚拟环境，并且在你安装&#x2F;删除包时自动在 Pipfile 中添加&#x2F;移除相应的包。它同时生成一个非常重要的 Pipfile.lock 文件，来保证所构建环境的确定性。</p><p><strong>相当于自动帮你集成了pip 和 virtualenv的管理</strong></p><h3 id="Poetry"><a href="#Poetry" class="headerlink" title="Poetry"></a>Poetry</h3><p>是一个 Python 虚拟环境和依赖管理工具，另外它还提供了包管理功能，比如打包和发布等。</p><p><a href="https://python-poetry.org/docs/">https://python-poetry.org/docs/</a></p><h3 id="Miniconda"><a href="#Miniconda" class="headerlink" title="Miniconda"></a>Miniconda</h3><p>摘录：<a href="http://greyli.com/miniconda-is-another-good-choice/">http://greyli.com/miniconda-is-another-good-choice/</a></p><p>对于常规的 Python 开发来说，Anaconda 太重了，而且主要面向科学计算领域，但是精简版的 Miniconda 却是一个很好的 Python 版本和虚拟环境管理工具。</p><p>更重要的是 Miniconda 兼容三个主流操作系统，而且不同平台使用同样的命令和接口（Conda 4.6 以上）。这大概算是个人偏好，因为我总在写东西给别人看，所以总是喜欢兼容主流操作系统并且接口统一的解决方案。而且另一方面 pyenv、virtualenvwrapper、direnv 等等相关替代工具都没有原生 Windows 支持</p><p>先来理清几个概念：</p><ul><li>Conda：包、依赖和环境管理器。</li><li>Anaconda（某种蟒蛇的名字）：面向数据科学的 Python 发行版，包含 conda、conda-build、Python 和 100+ 常用的数据科学常用的库及其依赖。</li><li>Miniconda：精简版的 Anaconda，也是一个 Python 发行版，只包含 conda、Python 和一些基本的包。</li></ul><h1 id="windows下虚拟环境的安装与配置"><a href="#windows下虚拟环境的安装与配置" class="headerlink" title="windows下虚拟环境的安装与配置"></a>windows下虚拟环境的安装与配置</h1><h2 id="1-安装虚拟环境"><a href="#1-安装虚拟环境" class="headerlink" title="1.安装虚拟环境"></a>1.安装虚拟环境</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install virtualenv </span><br></pre></td></tr></table></figure><h2 id="2-通过豆瓣源安装，寻找python豆瓣源镜像"><a href="#2-通过豆瓣源安装，寻找python豆瓣源镜像" class="headerlink" title="2.通过豆瓣源安装，寻找python豆瓣源镜像"></a><strong>2.通过豆瓣源安装，寻找python豆瓣源镜像</strong></h2><p> 豆瓣源路径：<a href="https://pypi.douban.com/simple">https://pypi.douban.com/simple</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install -i https://pypi.douban.com/simple/ django   #安装</span><br><span class="line">pip uninstall django  #卸载</span><br></pre></td></tr></table></figure><h2 id="3-新建-virtualenv，新建虚拟环境"><a href="#3-新建-virtualenv，新建虚拟环境" class="headerlink" title="3.新建 virtualenv，新建虚拟环境"></a><strong>3.新建 virtualenv，新建虚拟环境</strong></h2><ul><li>选择一个用来存放虚拟环境的文件，如E:&#x2F;python3</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd E:python3  # 进入该文件</span><br><span class="line">virtualenv envname   # 创建一个名字为envname的虚拟环境</span><br><span class="line">dir     # 查看当前目录可以知道一个envname的文件已经被创建</span><br><span class="line">virtualenv -p python2 envname  # 如果安装了多个python版本，如py2和py3，需要指定使用哪个创建虚拟环境</span><br></pre></td></tr></table></figure><p><strong>注意：</strong></p><ul><li>如果不识别virtualenv命令，可能是python安装路径没添加到系统环境变量或没安装virtualenv或没有重新打开一个cmd窗口；</li><li>启动虚拟环境</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cd envname # 进入虚拟环境文件</span><br><span class="line">cd Scripts # 进入相关的启动文件夹</span><br><span class="line"></span><br><span class="line">activate  # 启动虚拟环境</span><br><span class="line">deactivate # 退出虚拟环境</span><br></pre></td></tr></table></figure><h2 id="4-virtualenvwrapper，新建虚拟环境"><a href="#4-virtualenvwrapper，新建虚拟环境" class="headerlink" title="4.virtualenvwrapper，新建虚拟环境"></a>4.virtualenvwrapper，新建虚拟环境</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pip install virtualenvwrapper-win # 虚拟环境管理包</span><br><span class="line">workon #显示所有虚拟环境</span><br><span class="line">mkvirtualenv py3scrapy  #新建虚拟环境，默认放在C盘Envs中,可以创建环境变量WORKON_HOME,E:\python3\Envs,将Envs放在自己想要的位置</span><br><span class="line">deactivate  #退出编辑</span><br></pre></td></tr></table></figure><h2 id="virtualenvwrapper-常用命令"><a href="#virtualenvwrapper-常用命令" class="headerlink" title="virtualenvwrapper 常用命令"></a>virtualenvwrapper 常用命令</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">1.退出当前虚拟环境</span><br><span class="line"></span><br><span class="line">$deactivate</span><br><span class="line"></span><br><span class="line">2.列出虚拟环境列表</span><br><span class="line"></span><br><span class="line">$lsvirtualenv -b</span><br><span class="line"></span><br><span class="line">env1</span><br><span class="line"></span><br><span class="line">env2</span><br><span class="line"></span><br><span class="line">3.切换虚拟环境</span><br><span class="line"></span><br><span class="line">$workon env2</span><br><span class="line"></span><br><span class="line">4.进入当前虚拟环境</span><br><span class="line"></span><br><span class="line">$cdvirtualenv</span><br><span class="line"></span><br><span class="line">5.删除虚拟环境</span><br><span class="line"></span><br><span class="line">$rmvirtualenv env1</span><br><span class="line"></span><br><span class="line">6.进入当前环境的site-packages</span><br><span class="line"></span><br><span class="line">$cdsitepackages</span><br><span class="line"></span><br><span class="line">7.查看环境中安装了哪些包</span><br><span class="line"></span><br><span class="line">$lssitepackages</span><br><span class="line"></span><br><span class="line">8.复制虚拟环境</span><br><span class="line"></span><br><span class="line">$cpvirtualenv env1 env3</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> python开发环境 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python开发环境 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>分治算法</title>
      <link href="/post/7474c898.html"/>
      <url>/post/7474c898.html</url>
      
        <content type="html"><![CDATA[<h2 id="分治算法（Divide-ans-conquer-D-amp-C）"><a href="#分治算法（Divide-ans-conquer-D-amp-C）" class="headerlink" title="分治算法（Divide ans conquer ,D&amp;C）"></a>分治算法（Divide ans conquer ,D&amp;C）</h2><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>我之前看算法图解这本书，看他讲分治算法有一个很好的例子，我觉得这个例子让我理解分治的思想。</p><p><strong>有一个农场主，想把一块长为168m，宽为64m的土地均匀的分成方块，要求分出的方块尽可能的最大</strong>。</p><p>1.首先的想法就是想划分一个最大的方块看行不行，以宽64m为边长，肯定是最大的方块。但是这样会剩下</p><p>40m的土地无法分割，于是转换思路。</p><p>2.把剩下的土地（40*64），在细分，<strong>适用于这小块的地方的最大的块也是适用于整块土地</strong>。后面这句话不好理解，于是我去查阅了欧几里得算法。</p><p><a href="https://baike.baidu.com/item/%E6%AC%A7%E5%87%A0%E9%87%8C%E5%BE%B7%E7%AE%97%E6%B3%95/9002848">欧几里德算法</a>（Euclidean algorithm），是求最大公约数的一种方法。它的具体做法是：用较大数除以较小数，再用出现的余数（第一余数）去除除数，再用出现的余数（第二余数）去除第一余数，如此反复，直到最后余数是0为止。如果是求两个数的最大公约数，那么最后的除数就是这两个数的最大公约数。直接看下面的例子就懂了:</p><p>先看几个概念：</p><p><strong>公约数</strong>，亦称“公因数”。它是指能同时整除几个整数的数。</p><p>公约数中最大的称为<strong>最大公约数</strong></p><p>求104和40的最大公约数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">104 % 40 = 24</span><br><span class="line">40 % 24 = 16</span><br><span class="line">24 % 16 = 8</span><br><span class="line">16 % 8 = 0</span><br><span class="line">结论：8就是104和40的最大公约数</span><br></pre></td></tr></table></figure><p>回到划分土地，就转换成了，168和64的最大公约数，如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">168 % 64 = 40</span><br><span class="line">64 % 40 = 24</span><br><span class="line">40 % 24 = 16</span><br><span class="line">24 % 16 = 8</span><br><span class="line">16 % 8 = 0</span><br><span class="line">结论：8x8是划分的最大的</span><br></pre></td></tr></table></figure><h3 id="分治算法的意义"><a href="#分治算法的意义" class="headerlink" title="分治算法的意义"></a>分治算法的意义</h3><p>把一个较大的问题分解成几个较小的子问题，然后找到子问题的解决方法之后，再找到合适的方法，把他们组合起来最整个问题的解。</p><h3 id="分治法适用的情况"><a href="#分治法适用的情况" class="headerlink" title="分治法适用的情况"></a>分治法适用的情况</h3><p>   分治法所能解决的问题一般具有以下几个特征：</p><ol><li><p>该问题的规模缩小到一定的程度就可以容易地解决</p></li><li><p>该问题可以分解为若干个规模较小的相同问题，即该问题具有最优子结构性质。</p></li><li><p>利用该问题分解出的子问题的解可以合并为该问题的解；</p></li><li><p>该问题所分解出的各个子问题是相互独立的，即子问题之间不包含公共的子子问题。</p></li></ol><p>第一条特征是绝大多数问题都可以满足的，因为问题的计算复杂性一般是随着问题规模的增加而增加；</p><p><strong>第二条特征是应用分治法的前提</strong>它也是大多数问题可以满足的，此特征反映了递归思想的应用；、</p><p><strong>第三条特征是关键，能否利用分治法完全取决于问题是否具有第三条特征</strong>，如果<strong>具备了第一条和第二条特征，而不具备第三条特征，则可以考虑用贪心法或动态规划法</strong>。</p><p><strong>第四条特征涉及到分治法的效率</strong>，如果各子问题是不独立的则分治法要做许多不必要的工作，重复地解公共的子问题，此时虽然可用分治法，但<strong>一般用动态规划法较好</strong>。</p><h3 id="分治法的基本步骤"><a href="#分治法的基本步骤" class="headerlink" title="分治法的基本步骤"></a>分治法的基本步骤</h3><p>分治法在每一层递归上都有三个步骤：</p><p>   1.分解：将原问题分解为若干个规模较小，相互独立，与原问题形式相同的子问题；</p><p>   2.解决：若子问题规模较小而容易被解决则直接解，否则递归地解各个子问题</p><p>   3.合并：将各个子问题的解合并为原问题的解。</p><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><h3 id="求最大数"><a href="#求最大数" class="headerlink" title="求最大数"></a>求最大数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 基本子算法（子问题规模小于等于 2 时）</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_max</span>(<span class="params">max_list</span>):</span><br><span class="line">    <span class="comment"># print(max_list)</span></span><br><span class="line">    <span class="comment"># return max(max_list)  # 这里偷个懒！</span></span><br><span class="line">    <span class="keyword">return</span> max_list[<span class="number">0</span>] <span class="keyword">if</span> max_list[<span class="number">0</span>] &gt; max_list[<span class="number">1</span>] <span class="keyword">else</span> max_list[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 分治法</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">solve2</span>(<span class="params">init_list</span>):</span><br><span class="line">    n = <span class="built_in">len</span>(init_list)</span><br><span class="line">    <span class="keyword">if</span> n &lt;= <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> init_list[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">if</span> n &lt; <span class="number">2</span>:  <span class="comment"># 若问题规模小于等于 2，解决</span></span><br><span class="line">        <span class="keyword">return</span> get_max(init_list)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 分解（子问题规模为 n/2）</span></span><br><span class="line">    left_list, right_list = init_list[:n // <span class="number">2</span>], init_list[n // <span class="number">2</span>:]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 递归（树），分治</span></span><br><span class="line">    left_max, right_max = solve2(left_list), solve2(right_list)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 合并</span></span><br><span class="line">    <span class="keyword">return</span> get_max([left_max, right_max])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># 测试数据</span></span><br><span class="line">    test_list = [<span class="number">12</span>, <span class="number">2</span>, <span class="number">23</span>, <span class="number">45</span>, <span class="number">67</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">45</span>, <span class="number">63</span>, <span class="number">24</span>, <span class="number">23</span>]</span><br><span class="line">    <span class="comment"># 求最大值</span></span><br><span class="line">    <span class="built_in">print</span>(solve2(test_list))  <span class="comment"># 67</span></span><br></pre></td></tr></table></figure><h3 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 子问题算法（子问题规模为 1）</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">is_in_list</span>(<span class="params">init_list, el</span>):</span><br><span class="line">     <span class="keyword">return</span> [<span class="literal">False</span>, <span class="literal">True</span>][init_list[<span class="number">0</span>] == el]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 分治法</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">solve</span>(<span class="params">init_list, el</span>):</span><br><span class="line">     n = <span class="built_in">len</span>(init_list)</span><br><span class="line">     <span class="keyword">if</span> n == <span class="number">1</span>:  <span class="comment"># 若问题规模等于 1，直接解决</span></span><br><span class="line">          <span class="keyword">return</span> is_in_list(init_list, el)</span><br><span class="line"></span><br><span class="line">     <span class="comment"># 分解（子问题规模为 n/2）</span></span><br><span class="line">     left_list, right_list = init_list[:n // <span class="number">2</span>], init_list[n // <span class="number">2</span>:]</span><br><span class="line"></span><br><span class="line">     <span class="comment"># 递归（树），分治，合并</span></span><br><span class="line">     res = solve(left_list, el) <span class="keyword">or</span> solve(right_list, el)</span><br><span class="line"></span><br><span class="line">     <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">     <span class="comment"># # 测试数据</span></span><br><span class="line">     <span class="comment"># test_list = [12, 2, 23, 45, 67, 3, 2, 4, 45, 63, 24, 23]</span></span><br><span class="line">     <span class="comment"># # 查找</span></span><br><span class="line">     <span class="comment"># print(solve(test_list, 45))  # True</span></span><br><span class="line">     <span class="comment"># print(solve(test_list, 5))  # F</span></span><br><span class="line">     <span class="built_in">print</span>(is_in_list([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>], <span class="number">1</span>))</span><br></pre></td></tr></table></figure><h3 id="找到第n小的数"><a href="#找到第n小的数" class="headerlink" title="找到第n小的数"></a>找到第n小的数</h3><p>假定经过一趟分划后，长度为n的原表被分成两个左右两个子表，其中，长度为p的左子表包括主元及其左边的元素，右子表包括主元右边的元素。那么：</p><ul><li>若k&#x3D;p，则主元即为第k小元素；</li><li>若k&lt;p ，第k小元素必定在左子表中，需求解的子问题成为在左子表中求第k小元素；</li><li>若k&gt;p，则第k小元素必定在右子表中，需求解的子问题成为在右子表中求第k-p小元素。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 划分（基于主元 pivot），注意：非就地划分</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">partition</span>(<span class="params">seq</span>):</span><br><span class="line">    pi = seq[<span class="number">0</span>]  <span class="comment"># 挑选主元</span></span><br><span class="line">    lo = [x <span class="keyword">for</span> x <span class="keyword">in</span> seq[<span class="number">1</span>:] <span class="keyword">if</span> x &lt;= pi]  <span class="comment"># 所有小的元素</span></span><br><span class="line">    hi = [x <span class="keyword">for</span> x <span class="keyword">in</span> seq[<span class="number">1</span>:] <span class="keyword">if</span> x &gt; pi]  <span class="comment"># 所有大的元素</span></span><br><span class="line">    <span class="keyword">return</span> lo, pi, hi</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查找第 k 小的元素</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">select</span>(<span class="params">seq, k</span>):</span><br><span class="line">    <span class="comment"># 分解</span></span><br><span class="line">    lo, pi, hi = partition(seq)</span><br><span class="line">    <span class="built_in">print</span>(lo, pi, hi)</span><br><span class="line">    m = <span class="built_in">len</span>(lo)</span><br><span class="line">    <span class="keyword">if</span> m == k- <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> pi  <span class="comment"># 解决！</span></span><br><span class="line">    <span class="keyword">elif</span> m &lt; k:</span><br><span class="line">        <span class="keyword">return</span> select(hi, k - m - <span class="number">1</span>)  </span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> select(lo, k)  </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    seq = [<span class="number">3</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">13</span>, <span class="number">93</span>, <span class="number">0</span>, <span class="number">100</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">2</span>]</span><br><span class="line">    <span class="built_in">print</span>(select(seq, <span class="number">0</span>))</span><br><span class="line">    <span class="built_in">print</span>(select(seq, <span class="number">1</span>))</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="找到第n大的数"><a href="#找到第n大的数" class="headerlink" title="找到第n大的数"></a>找到第n大的数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 划分（基于主元 pivot），注意：非就地划分</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">partition</span>(<span class="params">seq</span>):</span><br><span class="line">     pi = seq[<span class="number">0</span>]  <span class="comment"># 挑选主元</span></span><br><span class="line">     lo = [x <span class="keyword">for</span> x <span class="keyword">in</span> seq[<span class="number">1</span>:] <span class="keyword">if</span> x &lt;= pi]  <span class="comment"># 所有小的元素</span></span><br><span class="line">     hi = [x <span class="keyword">for</span> x <span class="keyword">in</span> seq[<span class="number">1</span>:] <span class="keyword">if</span> x &gt; pi]  <span class="comment"># 所有大的元素</span></span><br><span class="line">     <span class="keyword">return</span> lo, pi, hi</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查找第 k 小的元素</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">select</span>(<span class="params">seq, k</span>):</span><br><span class="line">     <span class="comment"># 分解</span></span><br><span class="line">     lo, pi, hi = partition(seq)</span><br><span class="line">     m = <span class="built_in">len</span>(hi)</span><br><span class="line">     <span class="keyword">if</span> m == k - <span class="number">1</span>:</span><br><span class="line">          <span class="keyword">return</span> pi  <span class="comment"># 解决！</span></span><br><span class="line">     <span class="keyword">elif</span> m &lt; k:</span><br><span class="line">          <span class="keyword">return</span> select(lo, k - m - <span class="number">1</span>)</span><br><span class="line">     <span class="keyword">else</span>:</span><br><span class="line">         <span class="keyword">return</span> select(hi, k) </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">     seq = [<span class="number">3</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">13</span>, <span class="number">93</span>, <span class="number">0</span>, <span class="number">100</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">2</span>]</span><br><span class="line">     <span class="built_in">print</span>(select(seq, <span class="number">1</span>))</span><br><span class="line">     <span class="built_in">print</span>(select(seq, <span class="number">2</span>))</span><br></pre></td></tr></table></figure><h3 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">li = [<span class="number">100</span>, <span class="number">2</span>, <span class="number">89</span>, <span class="number">98</span>, <span class="number">23</span>, <span class="number">76</span>, <span class="number">38</span>, <span class="number">85</span>, <span class="number">12</span>, <span class="number">9</span>, <span class="number">4</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">quick_sort2</span>(<span class="params">li</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(li) &lt; <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> li</span><br><span class="line">    tmp = li[<span class="number">0</span>]</span><br><span class="line">    left_list = [x <span class="keyword">for</span> x <span class="keyword">in</span> li[<span class="number">1</span>:] <span class="keyword">if</span> x &lt; tmp]</span><br><span class="line">    right_list = [x <span class="keyword">for</span> x <span class="keyword">in</span> li[<span class="number">1</span>:] <span class="keyword">if</span> x &gt; tmp]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> quick_sort2(left_list) + [tmp] + quick_sort2(right_list)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">li = quick_sort2(li)</span><br><span class="line"><span class="built_in">print</span>(li)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构和算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python单链表的表示</title>
      <link href="/post/95221c2a.html"/>
      <url>/post/95221c2a.html</url>
      
        <content type="html"><![CDATA[<h2 id="单链表"><a href="#单链表" class="headerlink" title="单链表"></a>单链表</h2><p>单链表是一种链式存取的数据结构，用一组地址任意的存储单元存放线性表中的数据元素。链表中的数据是以结点来表示的，每个结点的构成：元素(数据元素的映象) + 指针(指示后继元素存储位置)，元素就是存储数据的存储单元，指针就是连接每个结点的地址数据。– 百度百科</p><h2 id="python单链表的定义"><a href="#python单链表的定义" class="headerlink" title="python单链表的定义"></a>python单链表的定义</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Node</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    单链表的节点定义</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, item</span>):</span><br><span class="line">        self.item = item  <span class="comment"># 表示数据元素</span></span><br><span class="line">        self.<span class="built_in">next</span> = <span class="literal">None</span>  <span class="comment"># 表示指针</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SingleLinkList</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    头结点记录链表的长度</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, li, method=<span class="string">&quot;tail&quot;</span></span>):</span><br><span class="line">        <span class="keyword">if</span> method == <span class="string">&quot;head&quot;</span>:</span><br><span class="line">            self.create_link_head(li)</span><br><span class="line">        <span class="keyword">elif</span> method == <span class="string">&quot;tail&quot;</span>:</span><br><span class="line">            self.create_link_tail(li)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_link_head</span>(<span class="params">self, li</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        从头插入数据，所以输出的顺序是逆序的。</span></span><br><span class="line"><span class="string">        头插法的思路：从头节点开始让每一个元素的next指针，指向当前的节点</span></span><br><span class="line"><span class="string">        插入的过程如下：</span></span><br><span class="line"><span class="string">        A:[data][next]</span></span><br><span class="line"><span class="string">                        \</span></span><br><span class="line"><span class="string">                          </span></span><br><span class="line"><span class="string">        head:[data][next] -&gt; A:[data][next]</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">        :param li:</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        self.head = Node(<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> li:</span><br><span class="line">            n = Node(item)</span><br><span class="line">            n.<span class="built_in">next</span> = self.head.<span class="built_in">next</span></span><br><span class="line">            self.head.<span class="built_in">next</span> = n</span><br><span class="line">            self.head.item += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_link_tail</span>(<span class="params">self, li</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        从尾部插入数据，所以输出的顺序是正序的。</span></span><br><span class="line"><span class="string">        尾插法的思路：定义一个尾节点（这个尾结点等于头结点），让尾节点的指针指向每一个元素，然后更新这个尾节点为当前的节点</span></span><br><span class="line"><span class="string">        current -&gt; current</span></span><br><span class="line"><span class="string">        tail:[data][next] -&gt; A:[data][next]</span></span><br><span class="line"><span class="string">        :param li:</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        self.head = Node(<span class="number">0</span>)</span><br><span class="line">        self.tail = self.head</span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> li:</span><br><span class="line">            p = Node(item)</span><br><span class="line">            self.tail.<span class="built_in">next</span> = p</span><br><span class="line">            self.tail = p</span><br><span class="line">            self.head.item += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__len__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.head.item</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">li = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">s = SingleLinkList(li)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="单链表的基本操作"><a href="#单链表的基本操作" class="headerlink" title="单链表的基本操作"></a>单链表的基本操作</h2><h3 id="单链表的遍历"><a href="#单链表的遍历" class="headerlink" title="单链表的遍历"></a>单链表的遍历</h3><p><strong>通过指针一直往后找：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">p = self.head.<span class="built_in">next</span></span><br><span class="line"><span class="keyword">while</span> p:</span><br><span class="line">    data = p.item</span><br><span class="line">    <span class="built_in">print</span>(data)</span><br><span class="line">    p = p.<span class="built_in">next</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Node</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    单链表的节点定义</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, item</span>):</span><br><span class="line">        self.item = item  <span class="comment"># 表示数据元素</span></span><br><span class="line">        self.<span class="built_in">next</span> = <span class="literal">None</span>  <span class="comment"># 表示指针</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SingleLinkList</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    头结点记录链表的长度</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, li, method=<span class="string">&quot;tail&quot;</span></span>):</span><br><span class="line">        <span class="keyword">if</span> method == <span class="string">&quot;head&quot;</span>:</span><br><span class="line">            self.create_link_head(li)</span><br><span class="line">        <span class="keyword">elif</span> method == <span class="string">&quot;tail&quot;</span>:</span><br><span class="line">            self.create_link_tail(li)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_link_head</span>(<span class="params">self, li</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        从头插入数据，所以输出的顺序是逆序的。</span></span><br><span class="line"><span class="string">        头插法的思路：从头节点开始让每一个元素的next指针，指向当前的节点</span></span><br><span class="line"><span class="string">        插入的过程如下：</span></span><br><span class="line"><span class="string">        A:[data][next]</span></span><br><span class="line"><span class="string">                        \</span></span><br><span class="line"><span class="string">                          </span></span><br><span class="line"><span class="string">        head:[data][next] -&gt; A:[data][next]</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">        :param li:</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        self.head = Node(<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> li:</span><br><span class="line">            n = Node(item)</span><br><span class="line">            n.<span class="built_in">next</span> = self.head.<span class="built_in">next</span></span><br><span class="line">            self.head.<span class="built_in">next</span> = n</span><br><span class="line">            self.head.item += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_link_tail</span>(<span class="params">self, li</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        从尾部插入数据，所以输出的顺序是正序的。</span></span><br><span class="line"><span class="string">        尾插法的思路：定义一个尾节点（这个尾结点等于头结点），让尾节点的指针指向每一个元素，然后更新这个尾节点为当前的节点</span></span><br><span class="line"><span class="string">        current -&gt; current</span></span><br><span class="line"><span class="string">        tail:[data][next] -&gt; A:[data][next]</span></span><br><span class="line"><span class="string">        :param li:</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        self.head = Node(<span class="number">0</span>)</span><br><span class="line">        self.tail = self.head</span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> li:</span><br><span class="line">            p = Node(item)</span><br><span class="line">            self.tail.<span class="built_in">next</span> = p</span><br><span class="line">            self.tail = p</span><br><span class="line">            self.head.item += <span class="number">1</span></span><br><span class="line">            </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">travel_linklist</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        遍历单链表</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        p = self.head.<span class="built_in">next</span></span><br><span class="line">        <span class="keyword">while</span> p:</span><br><span class="line">            data = p.item</span><br><span class="line">            <span class="built_in">print</span>(data)</span><br><span class="line">            p = p.<span class="built_in">next</span></span><br><span class="line">            </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__len__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.head.item</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">li = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">s = SingleLinkList(li)</span><br><span class="line">    s.travel_linklist()</span><br></pre></td></tr></table></figure><h3 id="单链表的插入"><a href="#单链表的插入" class="headerlink" title="单链表的插入"></a>单链表的插入</h3><p><code>待插入节点的data</code>连接待插入节点next，当前<code>节点</code>的<code>next</code>指向插入节点的next</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">insert_node[data][next]</span><br><span class="line">/\</span><br><span class="line">current_node[data][next]current_node_next[data][next]</span><br><span class="line"></span><br><span class="line">代码：</span><br><span class="line">insert_node.next = current_node_next</span><br><span class="line">current_node.next = insert_node</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Node</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    单链表的节点定义</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, item</span>):</span><br><span class="line">        self.item = item  <span class="comment"># 表示数据元素</span></span><br><span class="line">        self.<span class="built_in">next</span> = <span class="literal">None</span>  <span class="comment"># 表示指针</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SingleLinkList</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    头结点记录链表的长度</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, li, method=<span class="string">&quot;tail&quot;</span></span>):</span><br><span class="line">        <span class="keyword">if</span> method == <span class="string">&quot;head&quot;</span>:</span><br><span class="line">            self.create_link_head(li)</span><br><span class="line">        <span class="keyword">elif</span> method == <span class="string">&quot;tail&quot;</span>:</span><br><span class="line">            self.create_link_tail(li)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_link_head</span>(<span class="params">self, li</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        从头插入数据，所以输出的顺序是逆序的。</span></span><br><span class="line"><span class="string">        头插法的思路：从头节点开始让每一个元素的next指针，指向当前的节点</span></span><br><span class="line"><span class="string">        插入的过程如下：</span></span><br><span class="line"><span class="string">        A:[data][next]</span></span><br><span class="line"><span class="string">                        \</span></span><br><span class="line"><span class="string">                          </span></span><br><span class="line"><span class="string">        head:[data][next] -&gt; A:[data][next]</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">        :param li:</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        self.head = Node(<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> li:</span><br><span class="line">            n = Node(item)</span><br><span class="line">            n.<span class="built_in">next</span> = self.head.<span class="built_in">next</span></span><br><span class="line">            self.head.<span class="built_in">next</span> = n</span><br><span class="line">            self.head.item += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">create_link_tail</span>(<span class="params">self, li</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        从尾部插入数据，所以输出的顺序是正序的。</span></span><br><span class="line"><span class="string">        尾插法的思路：定义一个尾节点（这个尾结点等于头结点），让尾节点的指针指向每一个元素，然后更新这个尾节点为当前的节点</span></span><br><span class="line"><span class="string">        current -&gt; current</span></span><br><span class="line"><span class="string">        tail:[data][next] -&gt; A:[data][next]</span></span><br><span class="line"><span class="string">        :param li:</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        self.head = Node(<span class="number">0</span>)</span><br><span class="line">        self.tail = self.head</span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> li:</span><br><span class="line">            p = Node(item)</span><br><span class="line">            self.tail.<span class="built_in">next</span> = p</span><br><span class="line">            self.tail = p</span><br><span class="line">            self.head.item += <span class="number">1</span></span><br><span class="line">            </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">travel_linklist</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        遍历单链表</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        p = self.head.<span class="built_in">next</span></span><br><span class="line">        <span class="keyword">while</span> p:</span><br><span class="line">            data = p.item</span><br><span class="line">            <span class="built_in">print</span>(data)</span><br><span class="line">            p = p.<span class="built_in">next</span></span><br><span class="line">            </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">insert</span>(<span class="params">self, curr_node, insert_node</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        单链表的插入</span></span><br><span class="line"><span class="string">        :param curr_node: 要插入的当前节点</span></span><br><span class="line"><span class="string">        :param insert_node: 插入的节点</span></span><br><span class="line"><span class="string">        :return: </span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        insert_node.<span class="built_in">next</span> = curr_node.<span class="built_in">next</span></span><br><span class="line">        curr_node.<span class="built_in">next</span> = insert_node</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__len__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.head.item</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">li = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">s = SingleLinkList(li)</span><br></pre></td></tr></table></figure><h2 id="单链表的删除"><a href="#单链表的删除" class="headerlink" title="单链表的删除"></a>单链表的删除</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">   x 删除</span><br><span class="line">删除前：current_node[data][next] -&gt; node1[data][next] -&gt; node[data][next]</span><br><span class="line">删除后：current_node[data][next]  -&gt; node[data][next]</span><br><span class="line">代码：</span><br><span class="line">rm_node = curr_node.next</span><br><span class="line">curr_node.next = curr_node.next.next</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构和算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>scrapy的Spider类</title>
      <link href="/post/f3ca6d2.html"/>
      <url>/post/f3ca6d2.html</url>
      
        <content type="html"><![CDATA[<h2 id="scrapy的Spider类"><a href="#scrapy的Spider类" class="headerlink" title="scrapy的Spider类"></a>scrapy的Spider类</h2><p>Spider：scrapy.Spider, 是所有 Spider 的基类，它是最基础的爬虫，所有的 spider 都会继承 scrapy.Spider。它提供了 start_requests() 的默认实现，读取并请求 spider 属性中的 start_urls，并根据返回的 response 调用 spider 中的 parse 方法。</p><p><strong>spiders(Lib\site-packages\scrapy\spiders)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">├── __init__.py</span><br><span class="line">├── crawl.py</span><br><span class="line">├── feed.py</span><br><span class="line">├── init.py</span><br><span class="line">└── sitemap.py</span><br></pre></td></tr></table></figure><h3 id="自定义爬虫类"><a href="#自定义爬虫类" class="headerlink" title="自定义爬虫类"></a>自定义爬虫类</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TemplateSpidersSpider</span>(scrapy.Spider):</span><br><span class="line">    name = <span class="string">&#x27;template_spiders&#x27;</span></span><br><span class="line">    allowed_domains = [<span class="string">&#x27;*&#x27;</span>]</span><br><span class="line">    start_urls = [<span class="string">&#x27;http://*/&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">parse</span>(<span class="params">self, response</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="init-py：Spider类"><a href="#init-py：Spider类" class="headerlink" title="__init__.py：Spider类"></a><code>__init__.py</code>：<strong>Spider类</strong></h3><p>Base class for scrapy spiders. All spiders must inherit from this<br>class.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">start_requests</span>(<span class="params">self</span>):</span><br><span class="line">    cls = self.__class__</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> self.start_urls <span class="keyword">and</span> <span class="built_in">hasattr</span>(self, <span class="string">&#x27;start_url&#x27;</span>):</span><br><span class="line">        <span class="keyword">raise</span> AttributeError(</span><br><span class="line">            <span class="string">&quot;Crawling could not start: &#x27;start_urls&#x27; not found &quot;</span></span><br><span class="line">            <span class="string">&quot;or empty (but found &#x27;start_url&#x27; attribute instead, &quot;</span></span><br><span class="line">            <span class="string">&quot;did you miss an &#x27;s&#x27;?)&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> method_is_overridden(cls, Spider, <span class="string">&#x27;make_requests_from_url&#x27;</span>):</span><br><span class="line">        warnings.warn(</span><br><span class="line">            <span class="string">&quot;Spider.make_requests_from_url method is deprecated; it &quot;</span></span><br><span class="line">            <span class="string">&quot;won&#x27;t be called in future Scrapy releases. Please &quot;</span></span><br><span class="line">            <span class="string">&quot;override Spider.start_requests method instead &quot;</span></span><br><span class="line">            <span class="string">f&quot;(see <span class="subst">&#123;cls.__module__&#125;</span>.<span class="subst">&#123;cls.__name__&#125;</span>).&quot;</span>,</span><br><span class="line">        )</span><br><span class="line">        <span class="keyword">for</span> url <span class="keyword">in</span> self.start_urls:</span><br><span class="line">            <span class="keyword">yield</span> self.make_requests_from_url(url) <span class="comment"># 封装request的请求</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">for</span> url <span class="keyword">in</span> self.start_urls:</span><br><span class="line">            <span class="keyword">yield</span> Request(url, dont_filter=<span class="literal">True</span>) <span class="comment"># 封装request的请求</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">make_requests_from_url</span>(<span class="params">self, url</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot; This method is deprecated. &quot;&quot;&quot;</span></span><br><span class="line">    warnings.warn(</span><br><span class="line">        <span class="string">&quot;Spider.make_requests_from_url method is deprecated: &quot;</span></span><br><span class="line">        <span class="string">&quot;it will be removed and not be called by the default &quot;</span></span><br><span class="line">        <span class="string">&quot;Spider.start_requests method in future Scrapy releases. &quot;</span></span><br><span class="line">        <span class="string">&quot;Please override Spider.start_requests method instead.&quot;</span></span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">return</span> Request(url, dont_filter=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>self.start_urls是你编写爬虫类时候的start_urls &#x3D; [‘http:&#x2F;&#x2F;*&#x2F;‘]，作为请求的开始链接。如果想更灵活可以直接重写父类的方法start_requests。注意scrapy所有的请求和响应的对象都会被封装正Request对象和Response对象。</p><p><strong>在源码中我们可以看到很多attr相关的方法，下面看看他们的作用</strong>：</p><p>关于getattr，hasattr和setattr用法和作用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 简单测试</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Demo</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.name = <span class="string">&quot;jack&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">demo = Demo()</span><br><span class="line">x = <span class="built_in">getattr</span>(demo, <span class="string">&quot;name&quot;</span>, <span class="literal">None</span>)  <span class="comment"># getattr() 函数用于返回一个对象属性值</span></span><br><span class="line">y = <span class="built_in">hasattr</span>(demo, <span class="string">&quot;name&quot;</span>)  <span class="comment"># hasattr() 函数用于判断对象是否包含对应的属性</span></span><br><span class="line"><span class="built_in">setattr</span>(demo, <span class="string">&quot;name&quot;</span>, <span class="string">&quot;rose&quot;</span>)  <span class="comment"># 函数用于设置属性值，该属性不一定是存在的</span></span><br><span class="line"><span class="built_in">print</span>(x)</span><br><span class="line"><span class="built_in">print</span>(y)</span><br><span class="line"><span class="built_in">print</span>(demo.name)</span><br><span class="line"></span><br><span class="line">result：</span><br><span class="line">------------------</span><br><span class="line">jack</span><br><span class="line"><span class="literal">True</span></span><br><span class="line">rose</span><br><span class="line">------------------</span><br></pre></td></tr></table></figure><h3 id="python的反射"><a href="#python的反射" class="headerlink" title="python的反射"></a>python的反射</h3><p>在反射机制就是在运行时，动态的确定对象的类型，并可以通过字符串调用对象属性、方法、导入模块，是一种基于字符串的事件驱动。通过字符串的形式，去模块寻找指定函数，并执行。利用字符串的形式去对象（模块）中操作（查找&#x2F;获取&#x2F;删除&#x2F;添加）成员。</p><p>上面所用到的一切关于attr的函数其实就是是一种反射。</p>]]></content>
      
      
      <categories>
          
          <category> scrapy </category>
          
      </categories>
      
      
        <tags>
            
            <tag> scrapy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>scrapy的CrawlSpider类</title>
      <link href="/post/6ab2803d.html"/>
      <url>/post/6ab2803d.html</url>
      
        <content type="html"><![CDATA[<h2 id="scrapy的CrawlSpider类"><a href="#scrapy的CrawlSpider类" class="headerlink" title="scrapy的CrawlSpider类"></a>scrapy的CrawlSpider类</h2><p>CrawlSpider：scrapy.spiders.CrawlSpider，规则爬虫，提供了一个新的属性 rules，该属性是一个包含一个或多个 Rule 对象的集合，每个 Rule 对爬取网站的动作定义了特定的规则。</p><p><strong>spiders(Lib\site-packages\scrapy\spiders)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">├── __init__.py</span><br><span class="line">├── crawl.py</span><br><span class="line">├── feed.py</span><br><span class="line">├── init.py</span><br><span class="line">└── sitemap.py</span><br></pre></td></tr></table></figure><h3 id="自定义爬虫类"><a href="#自定义爬虫类" class="headerlink" title="自定义爬虫类"></a>自定义爬虫类</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> scrapy.spiders.crawl <span class="keyword">import</span> CrawlSpider <span class="comment"># 或者from scrapy.spiders import CrawlSpider，因为在__init__.py文件中以及帮你初始化导入了</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TemplateSpidersSpider</span>(<span class="title class_ inherited__">CrawlSpider</span>):</span><br><span class="line">    name = <span class="string">&#x27;template_spiders&#x27;</span></span><br><span class="line">    allowed_domains = [<span class="string">&#x27;*&#x27;</span>]</span><br><span class="line">    start_urls = [<span class="string">&#x27;http://*/&#x27;</span>]</span><br><span class="line">    </span><br><span class="line">    rules = ()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">parse</span>(<span class="params">self, response</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="crawl：CrawlSpider类"><a href="#crawl：CrawlSpider类" class="headerlink" title="crawl：CrawlSpider类"></a><code>crawl</code>：CrawlSpider类</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">_get_method</span>(<span class="params">method, spider</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">callable</span>(method):</span><br><span class="line">        <span class="keyword">return</span> method</span><br><span class="line">    <span class="keyword">elif</span> <span class="built_in">isinstance</span>(method, <span class="built_in">str</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">getattr</span>(spider, method, <span class="literal">None</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">_default_link_extractor = LinkExtractor()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Rule</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params"></span></span><br><span class="line"><span class="params">        self,</span></span><br><span class="line"><span class="params">        link_extractor=<span class="literal">None</span>,</span></span><br><span class="line"><span class="params">        callback=<span class="literal">None</span>,</span></span><br><span class="line"><span class="params">        cb_kwargs=<span class="literal">None</span>,</span></span><br><span class="line"><span class="params">        follow=<span class="literal">None</span>,</span></span><br><span class="line"><span class="params">        process_links=<span class="literal">None</span>,</span></span><br><span class="line"><span class="params">        process_request=<span class="literal">None</span>,</span></span><br><span class="line"><span class="params">        errback=<span class="literal">None</span>,</span></span><br><span class="line"><span class="params">    </span>):</span><br><span class="line">        self.link_extractor = link_extractor <span class="keyword">or</span> _default_link_extractor</span><br><span class="line">        self.callback = callback</span><br><span class="line">        self.errback = errback</span><br><span class="line">        self.cb_kwargs = cb_kwargs <span class="keyword">or</span> &#123;&#125;</span><br><span class="line">        self.process_links = process_links <span class="keyword">or</span> _identity</span><br><span class="line">        self.process_request = process_request <span class="keyword">or</span> _identity_process_request</span><br><span class="line">        self.follow = follow <span class="keyword">if</span> follow <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">else</span> <span class="keyword">not</span> callback</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_compile</span>(<span class="params">self, spider</span>):</span><br><span class="line">        self.callback = _get_method(self.callback, spider)</span><br><span class="line">        self.errback = _get_method(self.errback, spider)</span><br><span class="line">        self.process_links = _get_method(self.process_links, spider)</span><br><span class="line">        self.process_request = _get_method(self.process_request, spider)</span><br><span class="line">        </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CrawlSpider</span>(<span class="title class_ inherited__">Spider</span>):</span><br><span class="line"></span><br><span class="line">    rules: <span class="type">Sequence</span>[Rule] = ()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, *a, **kw</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__(*a, **kw)</span><br><span class="line">        self._compile_rules()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_parse</span>(<span class="params">self, response, **kwargs</span>):</span><br><span class="line">        <span class="keyword">return</span> self._parse_response(</span><br><span class="line">            response=response,</span><br><span class="line">            callback=self.parse_start_url,</span><br><span class="line">            cb_kwargs=kwargs,</span><br><span class="line">            follow=<span class="literal">True</span>,</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">parse_start_url</span>(<span class="params">self, response, **kwargs</span>):</span><br><span class="line">        <span class="keyword">return</span> []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">process_results</span>(<span class="params">self, response, results</span>):</span><br><span class="line">        <span class="keyword">return</span> results</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_build_request</span>(<span class="params">self, rule_index, link</span>):</span><br><span class="line">        <span class="keyword">return</span> Request(</span><br><span class="line">            url=link.url,</span><br><span class="line">            callback=self._callback,</span><br><span class="line">            errback=self._errback,</span><br><span class="line">            meta=<span class="built_in">dict</span>(rule=rule_index, link_text=link.text),</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_requests_to_follow</span>(<span class="params">self, response</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(response, HtmlResponse):</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        seen = <span class="built_in">set</span>()</span><br><span class="line">        <span class="keyword">for</span> rule_index, rule <span class="keyword">in</span> <span class="built_in">enumerate</span>(self._rules):</span><br><span class="line">            links = [lnk <span class="keyword">for</span> lnk <span class="keyword">in</span> rule.link_extractor.extract_links(response)</span><br><span class="line">                     <span class="keyword">if</span> lnk <span class="keyword">not</span> <span class="keyword">in</span> seen]</span><br><span class="line">            <span class="keyword">for</span> link <span class="keyword">in</span> rule.process_links(links):</span><br><span class="line">                seen.add(link)</span><br><span class="line">                request = self._build_request(rule_index, link)</span><br><span class="line">                <span class="keyword">yield</span> rule.process_request(request, response)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_callback</span>(<span class="params">self, response</span>):</span><br><span class="line">        rule = self._rules[response.meta[<span class="string">&#x27;rule&#x27;</span>]]</span><br><span class="line">        <span class="keyword">return</span> self._parse_response(response, rule.callback, rule.cb_kwargs, rule.follow)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_errback</span>(<span class="params">self, failure</span>):</span><br><span class="line">        rule = self._rules[failure.request.meta[<span class="string">&#x27;rule&#x27;</span>]]</span><br><span class="line">        <span class="keyword">return</span> self._handle_failure(failure, rule.errback)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_parse_response</span>(<span class="params">self, response, callback, cb_kwargs, follow=<span class="literal">True</span></span>):</span><br><span class="line">        <span class="keyword">if</span> callback:</span><br><span class="line">            cb_res = callback(response, **cb_kwargs) <span class="keyword">or</span> ()</span><br><span class="line">            cb_res = self.process_results(response, cb_res)</span><br><span class="line">            <span class="keyword">for</span> request_or_item <span class="keyword">in</span> iterate_spider_output(cb_res):</span><br><span class="line">                <span class="keyword">yield</span> request_or_item</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> follow <span class="keyword">and</span> self._follow_links:</span><br><span class="line">            <span class="keyword">for</span> request_or_item <span class="keyword">in</span> self._requests_to_follow(response):</span><br><span class="line">                <span class="keyword">yield</span> request_or_item</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_handle_failure</span>(<span class="params">self, failure, errback</span>):</span><br><span class="line">        <span class="keyword">if</span> errback:</span><br><span class="line">            results = errback(failure) <span class="keyword">or</span> ()</span><br><span class="line">            <span class="keyword">for</span> request_or_item <span class="keyword">in</span> iterate_spider_output(results):</span><br><span class="line">                <span class="keyword">yield</span> request_or_item</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_compile_rules</span>(<span class="params">self</span>):</span><br><span class="line">        self._rules = []</span><br><span class="line">        <span class="keyword">for</span> rule <span class="keyword">in</span> self.rules:</span><br><span class="line">            self._rules.append(copy.copy(rule))</span><br><span class="line">            self._rules[-<span class="number">1</span>]._<span class="built_in">compile</span>(self)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">from_crawler</span>(<span class="params">cls, crawler, *args, **kwargs</span>):</span><br><span class="line">        spider = <span class="built_in">super</span>().from_crawler(crawler, *args, **kwargs)</span><br><span class="line">        spider._follow_links = crawler.settings.getbool(<span class="string">&#x27;CRAWLSPIDER_FOLLOW_LINKS&#x27;</span>, <span class="literal">True</span>)</span><br><span class="line">        <span class="keyword">return</span> spider</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>rules: Sequence[Rule] &#x3D; () # 提取规则必须是Rule类对象</li><li>当实例初始化的时候会自动调用self._compile_rules()，然后在Rule类中调用__compile(self)，<strong>注意self代表的是类的实例</strong>。最后调用各自的方法。</li><li>重写了父类的_parse，然后调用self._parse_response</li></ul>]]></content>
      
      
      <categories>
          
          <category> scrapy </category>
          
      </categories>
      
      
        <tags>
            
            <tag> scrapy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TravisCI+Hexo博客自动部署</title>
      <link href="/post/6a366505.html"/>
      <url>/post/6a366505.html</url>
      
        <content type="html"><![CDATA[<h2 id="Travis-CI简介"><a href="#Travis-CI简介" class="headerlink" title="Travis CI简介"></a>Travis CI简介</h2><p>Travis CI是在软件开发领域中的一个在线的，分布式的持续集成服务（免费开源）。</p><h3 id="持续集成"><a href="#持续集成" class="headerlink" title="持续集成"></a>持续集成</h3><p>持续集成（Continuous integration，缩写 CI）是一种软件工程流程，即团队开发成员经常集成他们的工作，通常每个成员每天至少集成一次，也就意味着每天可能会发生多次集成。每次集成都通过自动化的构建（包括编译，发布，自动化测试）来验证，从而尽早地发现集成错误</p><h3 id="基本配置和使用"><a href="#基本配置和使用" class="headerlink" title="基本配置和使用"></a>基本配置和使用</h3><ol><li>打开<a href="https://travis-ci.org/">Travis</a>官网，然后登陆你的github账号</li><li>打开你的github，点击你的头像，找到settings，再点击左侧的Developer settings，点击Personal access tokens，点击右上角的Generate new token，填入Note（取个名称），下面一些权限，该设置的设置。然后生成，会出现一个token值，<strong>注意：第一次生成记得保存一下，因为你下次打开它不会显示。如果忘记，打开设置，可以看到提示：如果您丢失或忘记了此令牌，可以重新生成它，但是请注意，使用此令牌的所有脚本或应用程序都需要更新。</strong></li><li>打开travis你配置好的github项目中的setting，找到Environment Variables选项，然后添加。<ol><li>第一个参数：github_token（就是一个名称好关联到github，后面配置中会用到这个变量来授权操作github的权限）。</li><li>第二个参数：github产生的token。</li><li>里面有几个配置，看<a href="https://docs.travis-ci.com/user/web-ui/#build-pushed-branches">配置</a>。</li></ol></li><li>在你仓库怎增加 <code>.travis.yml</code> 文件，这个文件定义了构建的步骤，例如<a href="https://docs.travis-ci.com/user/job-lifecycle/#customizing-the-installation-phase">安装依赖</a>等等。</li><li>将 <code>.travis.yml</code> 文件推送到你的远端仓库，然后就会触发 Travis CI 构建；</li><li>登录 <a href="https://travis-ci.com/">Travis CI</a>然后选择你的仓库查看构建任务的执行详情；</li></ol><h2 id="Hexo-Travis-CI"><a href="#Hexo-Travis-CI" class="headerlink" title="Hexo + Travis CI"></a>Hexo + Travis CI</h2><h2 id="创建分支"><a href="#创建分支" class="headerlink" title="创建分支"></a>创建分支</h2><p>建立一个分支，名字随意。把之前写的博客源文件拷贝到该分支下，并删除<code>node_modules</code>、<code>public</code>文件夹。</p><h3 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h3><p><strong>这个分支就是你以后提交代码更新博客的分支，在提交的时候注意不能有.git文件。不然会出现该文件夹不会推送到远端。因为我是引用的别主题，里面默认有.git导致推送之后显示不了页面。</strong></p><p>我的.travis.yml配置：</p><p>下面有写没有的可以直接注释了，仅供参考。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 指定构建环境是Node.js，当前版本是稳定版</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">node_js</span></span><br><span class="line"><span class="attr">node_js:</span> <span class="string">stable</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置全局的变量，$&#123;GH_REF&#125;引用</span></span><br><span class="line"><span class="attr">env:</span></span><br><span class="line"> <span class="attr">global:</span></span><br><span class="line">   <span class="bullet">-</span> <span class="attr">URL_REPO:</span> <span class="string">&lt;github仓库地址，去掉前面的https://&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置只检测blog-source分支的push变动</span></span><br><span class="line"><span class="attr">branches:</span></span><br><span class="line">  <span class="attr">only:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">blog-source</span></span><br><span class="line"></span><br><span class="line"><span class="string">设置缓存文件</span></span><br><span class="line"><span class="attr">cache:</span></span><br><span class="line">  <span class="attr">directories:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">node_modules</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># #在构建之前安装hexo环境</span></span><br><span class="line"><span class="comment"># before_install:</span></span><br><span class="line"><span class="comment">#   - npm install -g hexo-cli</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># #安装git插件和搜索功能插件</span></span><br><span class="line"><span class="comment"># install:</span></span><br><span class="line"><span class="comment">#   - npm install</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置git提交名，邮箱；替换真实token到_config.yml文件</span></span><br><span class="line"><span class="attr">before_script:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">git</span> <span class="string">config</span> <span class="string">user.name</span> <span class="string">&quot;名称&quot;</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">git</span> <span class="string">config</span> <span class="string">user.email</span> <span class="string">&quot;邮箱&quot;</span></span><br><span class="line">  <span class="comment"># 替换同目录下的_config.yml文件中github_token字符串为travis后台刚才配置的变量(Environment Variables中的$&#123;github_token&#125;)，注&gt;意此处sed命令用了双引号。单引号无效！</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">sed</span> <span class="string">-i</span> <span class="string">&quot;s/github_token/$&#123;github_token&#125;/g&quot;</span> <span class="string">_config.yml</span> <span class="string">||</span> <span class="string">exit</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行清缓存，生成网页操作</span></span><br><span class="line"><span class="attr">script:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">hexo</span> <span class="string">clean</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">hexo</span> <span class="string">generate</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">hexo</span> <span class="string">deploy</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># configure notifications (email, IRC, campfire etc)</span></span><br><span class="line"><span class="comment"># please update this section to your needs!</span></span><br><span class="line"><span class="comment"># https://docs.travis-ci.com/user/notifications/</span></span><br><span class="line"><span class="comment"># notifications:</span></span><br><span class="line"><span class="comment">#   email:</span></span><br><span class="line"><span class="comment">#     - 2855512028@qq.com</span></span><br><span class="line"><span class="comment">#   on_success: change</span></span><br><span class="line"><span class="comment">#   on_failure: always</span></span><br></pre></td></tr></table></figure><p>我的_config配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/one-command-deployment</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">    <span class="attr">repo:</span> <span class="string">https://github_token@&lt;github仓库地址，去掉前面的https://&gt;</span> <span class="comment"># 这里的github_token就是前面脚本替换的位置，在.travis.yml 文件中，会使用环境变量 GH_TOKEN 替换掉它的。因为构建机器上没有配置 ssh 免密，所以需要使用这种 token+http 的方式实现代码的推送</span></span><br><span class="line">    <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><h2 id="提交分支"><a href="#提交分支" class="headerlink" title="提交分支"></a>提交分支</h2><p>每次更新把你的md写好之后，直接push，Travis CI会自动帮你集成。</p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TravisCI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>什么是爬虫</title>
      <link href="/post/c3d01f49.html"/>
      <url>/post/c3d01f49.html</url>
      
        <content type="html"><![CDATA[<h2 id="什么是爬虫？"><a href="#什么是爬虫？" class="headerlink" title="什么是爬虫？"></a>什么是爬虫？</h2><h4 id="百度说："><a href="#百度说：" class="headerlink" title="百度说："></a>百度说：</h4><p>网络爬虫，是一种按照一定的规则，自动地抓取万维网信息的程序或者脚本。</p><h4 id="某书上说："><a href="#某书上说：" class="headerlink" title="某书上说："></a>某书上说：</h4><p>它是指自动的连接到互联网站点，读取网页中的内容或者存放在网络上的各种信息，并按照某种策略对目标的信息进行采集。</p><h4 id="大神说："><a href="#大神说：" class="headerlink" title="大神说："></a>大神说：</h4><p>但凡你看得到摸得到的数据，我都能拿下来。</p><h2 id="我理解的爬虫概念"><a href="#我理解的爬虫概念" class="headerlink" title="我理解的爬虫概念"></a>我理解的爬虫概念</h2><h4 id="1-我理解这个词汇爬虫（spider），它是一种动作，像一只蜘蛛一样在一张很大网（web）在爬行。假设这张网是一张很大的图，每个顶点代表就是一类信息。"><a href="#1-我理解这个词汇爬虫（spider），它是一种动作，像一只蜘蛛一样在一张很大网（web）在爬行。假设这张网是一张很大的图，每个顶点代表就是一类信息。" class="headerlink" title="1. 我理解这个词汇爬虫（spider），它是一种动作，像一只蜘蛛一样在一张很大网（web）在爬行。假设这张网是一张很大的图，每个顶点代表就是一类信息。"></a>1. 我理解这个词汇爬虫（spider），它是一种动作，像一只蜘蛛一样在一张很大网（web）在爬行。假设这张网是一张很大的图，每个顶点代表就是一类信息。<img src="https://s2.best-wallpaper.net/wallpaper/1920x1200/1510/Insect-spider-web-green-leaves-water-drops_1920x1200.jpg" alt="spider网"></h4><h4 id><a href="#" class="headerlink" title></a></h4><h2 id="我如何理解爬虫（web端）"><a href="#我如何理解爬虫（web端）" class="headerlink" title="我如何理解爬虫（web端）"></a>我如何理解爬虫（web端）</h2><p>既然说信息都放在一张很大很大网上，那么首先理解这张网（web）。</p><h3 id="这张网的基础组成"><a href="#这张网的基础组成" class="headerlink" title="这张网的基础组成"></a>这张网的基础组成</h3><h4 id="html（超文本传输协议）"><a href="#html（超文本传输协议）" class="headerlink" title="html（超文本传输协议）"></a>html（超文本传输协议）</h4><p><strong>超文本标记语言</strong>（英语：HyperText Markup Language 简称：HTML）是一种用于创建网页的标准标记语言。</p><p><strong>网页浏览器</strong>可以读取HTML文件，并将其渲染成可视化网页</p><p><strong>HTML元素</strong>是构建网站的基石。HTML允许嵌入图像与对象，并且可以用于创建交互式表单，它被用来结构化信息——例如标题、段落和列表等等，也可用来在一定程度上描述文档的外观和语义。</p><h4 id="css（层叠样式表）"><a href="#css（层叠样式表）" class="headerlink" title="css（层叠样式表）"></a>css（层叠样式表）</h4><p>CSS 描述了在屏幕、纸质、音频等其它媒体上的元素应该如何被渲染的问题。</p><h4 id="JavaScript-JS"><a href="#JavaScript-JS" class="headerlink" title="JavaScript ( JS)"></a>JavaScript ( JS)</h4><ul><li><p>介绍维基百科地址：<a href="https://zh.wikipedia.org/wiki/JavaScript">https://zh.wikipedia.org/wiki/JavaScript</a></p></li><li><p>发展初期，JavaScript的标准并未确定，同期有Netscape的JavaScript，微软的JScript和CEnvi的ScriptEase三足鼎立。1997年，在ECMA（欧洲计算机制造商协会）的协调下，由Netscape、Sun、微软、Borland组成的工作组确定统一标准：ECMA-262。</p></li><li><p>JavaScript 的标准是 ECMAScript 。截至 2012 年，所有的现代浏览器都完整的支持  ECMAScript 5.1，旧版本的浏览器至少支持 ECMAScript 3 标准。2015年6月17日，ECMA国际组织发布了 ECMAScript 的第六版，该版本正式名称为 ECMAScript 2015，但通常被称为 ECMAScript 6 或者 ES6。自此，ECMAScript 每年发布一次新标准。本文档目前覆盖了最新 ECMAScript 的草案，也就是 ECMAScript2020</p></li></ul><h4 id="传输协议"><a href="#传输协议" class="headerlink" title="传输协议"></a>传输协议</h4><ul><li>http（超文本传输协议）<ul><li>工作在应用层，基于tcp传输，默认端口80</li></ul></li><li>进阶版https（http+（ssl&#x2F;tls) ）（默认端口443）<ul><li>由于http协议在传输的过程中没有任何加密，，导致传输非常不安全，因此，在http基础上添加了一种非对称加密，保护传输的可靠性。</li></ul></li><li>tcp协议<ul><li>面向连接的，可靠的数据传输协议。位于传输层</li></ul></li></ul><h4 id="传输的地址"><a href="#传输的地址" class="headerlink" title="传输的地址"></a>传输的地址</h4><ul><li><p>url</p><ul><li>在WWW（万维网）上，任何一个信息资源都有统一的并且在网上唯一的地址，这个地址就叫做URL。URL也被称为网页地址，是因特网上标准的资源的地址(Address)</li><li>url格式的基本组成<ul><li>第一部分-协议（scheme）<ul><li>该URL的协议是什么</li></ul></li><li>第二部分-域名（domain）<ul><li>是指存放资源的服务器的<a href="https://baike.baidu.com/item/%E5%9F%9F%E5%90%8D%E7%B3%BB%E7%BB%9F">域名系统</a>(DNS) 主机名或 IP 地址</li><li>域名分为顶级域名<a href="http://www.baidu.com、二级域名baike.baidu.com、三级域名baike.tieba.baidu.com/">www.baidu.com、二级域名baike.baidu.com、三级域名baike.tieba.baidu.com</a></li></ul></li><li>第三部分-端口（port）<ul><li>用来区分同一台服务器上不同服务的标识</li></ul></li><li>第三部分-路劲（path）<ul><li>由零或多个“&#x2F;”符号隔开的字符串，一般用来表示主机上的一个目录或文件地址。</li></ul></li><li>第四部分-参数（parameters）<ul><li>这是用于指定特殊参数的可选项</li></ul></li></ul></li></ul></li><li><p>ip地址</p><ul><li>它能够唯一确定Internet上每台计算机、每个用户的位置。Internet上主机与主机之间要实现通信，每一台主机都必须要有一个地址，而且这个地址应该是唯一的，不允许重复。依靠这个唯一的主机地址，就可以在Internet浩瀚的海洋里找到任意一台主机。</li></ul></li><li><p>dns和域名</p><ul><li>由于IP地址具有不方便记忆并且不能显示地址组织的名称和性质等缺点，人们设计出了域名，并通过网域名称系统（DNS，Domain Name System）来将域名和IP地址相互映射，使人更方便地访问互联网，而不用去记住能够被机器直接读取的IP地址数串。</li></ul></li></ul><h3 id="web浏览器和服务器交互的过程"><a href="#web浏览器和服务器交互的过程" class="headerlink" title="web浏览器和服务器交互的过程"></a>web浏览器和服务器交互的过程</h3><ol><li>从浏览器解析主机名</li><li>浏览器查询主机ip地址（dns）</li><li>浏览器获取端口号80或者443</li><li>浏览器发起tcp连接（三次握手建立连接）<strong>tcp双向传输</strong><ul><li>第一次：客户端发送请求到服务器，服务器知道客户端发送，自己接收正常。</li><li>第二次：服务器发给客户端，客户端知道自己发送、接收正常，服务器接收、发送正常。</li><li>第三次：客户端接收服务器，服务器知道客户端发送，接收正常，自己接收，发送也正常。</li></ul></li><li>浏览器发送请求的报文</li><li>服务器返回响应的报文</li><li>浏览器渲染http或https响应的内容</li><li>关闭连接（TCP四次挥手）<ul><li>第一次：客户端请求断开</li><li>第二次：服务器确认客户端的断开请求</li><li>第三次：服务器请求断开</li><li>第四次：客户端确认服务器的断开</li></ul></li></ol><h3 id="socket"><a href="#socket" class="headerlink" title="socket"></a>socket</h3><p>socket是应用层和tcp&#x2F;ip协议簇通信的中间软件的抽象层，它是一组<strong>接口</strong>。<img src="/../images/spider/%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%9E%8B.png" alt="网络模型"></p><p><img src="/../images/spider/socket.jpg" alt="socket"></p><h3 id="socket编程"><a href="#socket编程" class="headerlink" title="socket编程"></a>socket编程</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> ssl</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">set_headers</span>(<span class="params">head</span>):</span><br><span class="line">    headers = [<span class="string">&quot;&#123;&#125;:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(k, item) <span class="keyword">for</span> k, item <span class="keyword">in</span> head.items()]</span><br><span class="line">    headers.insert(<span class="number">0</span>, <span class="string">&quot;GET / HTTP/1.1&quot;</span>)</span><br><span class="line">    headers.append(<span class="string">&quot;\r\n&quot;</span>)</span><br><span class="line">    res = <span class="string">&quot;\r\n&quot;</span>.join(headers)</span><br><span class="line">    <span class="keyword">return</span> res.encode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">client</span>(<span class="params">url, charset=<span class="literal">None</span>, headers=<span class="literal">None</span></span>):</span><br><span class="line">    conn = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">    <span class="comment"># 默认添加请求头</span></span><br><span class="line">    <span class="keyword">if</span> headers == <span class="literal">None</span>:</span><br><span class="line">        headers = <span class="string">&#x27;User-Agent: Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1)&#x27;</span></span><br><span class="line">    <span class="comment"># http协议处理</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;http://&#x27;</span> <span class="keyword">in</span> url:</span><br><span class="line">        url = url.replace(<span class="string">&#x27;http://&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        port = <span class="number">80</span></span><br><span class="line">    <span class="comment"># https协议处理</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;https://&#x27;</span> <span class="keyword">in</span> url:</span><br><span class="line">        conn = ssl.wrap_socket(conn)</span><br><span class="line">        url = url.replace(<span class="string">&#x27;https://&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        port = <span class="number">443</span></span><br><span class="line">    url = url <span class="keyword">if</span> <span class="string">&#x27;/&#x27;</span> <span class="keyword">in</span> url <span class="keyword">else</span> url + <span class="string">&#x27;/&#x27;</span></span><br><span class="line">    urlSplit = url.split(<span class="string">&#x27;/&#x27;</span>, <span class="number">1</span>)</span><br><span class="line">    <span class="comment"># 连接服务器</span></span><br><span class="line">    conn.connect((urlSplit[<span class="number">0</span>], port))</span><br><span class="line">    <span class="comment"># 发送报文处理</span></span><br><span class="line">    <span class="comment"># bMsg = &#x27;GET /&#123;1&#125; HTTP/1.1\r\nHost: &#123;0&#125;\r\n&#123;2&#125;\r\nConnection: close\r\n\r\n&#x27;.format(urlSplit[0], urlSplit[1],                                                                    # headers)</span></span><br><span class="line">    client_headers = &#123;</span><br><span class="line">        <span class="string">&quot;Connection&quot;</span>: <span class="string">&quot;close&quot;</span>,</span><br><span class="line">        <span class="comment"># &quot;Connection&quot;: &quot;keep-alive&quot;,</span></span><br><span class="line">        <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36&quot;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># 发送报文</span></span><br><span class="line">    <span class="comment"># print(bMsg.encode())</span></span><br><span class="line">    <span class="built_in">print</span>(set_headers(client_headers))</span><br><span class="line">    bMsg = set_headers(client_headers)</span><br><span class="line">    conn.send(bMsg)</span><br><span class="line">    html = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="comment"># 循环接收html字节数据</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        data = conn.recv(<span class="number">1024</span>)</span><br><span class="line">        <span class="keyword">if</span> data:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                html += data.decode(charset)</span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                <span class="keyword">pass</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            conn.close()</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">return</span> html.split(<span class="string">&#x27;\r\n\r\n&#x27;</span>)[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">import</span> time</span><br><span class="line">    start = time.time()</span><br><span class="line">    html = client(<span class="string">&#x27;https://www.baidu.com&#x27;</span>, charset=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(html)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;程序结束: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(time.time() - start))</span><br><span class="line"><span class="comment"># print(&#x27;with out hook&#x27;)</span></span><br><span class="line"><span class="comment"># a = requests.get(&#x27;https://www.baidu.com/&#x27;)</span></span><br><span class="line"><span class="comment"># print(a.raw._fp.msg, a.content)</span></span><br><span class="line"><span class="comment"># print(&#x27;done!&#x27;)</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="IO"><a href="#IO" class="headerlink" title="IO"></a>IO</h3><p><img src="/../images/spider/IO%E6%93%8D%E4%BD%9C%E6%9C%AC%E8%B4%A8.png" alt="IO操作本质"></p><ul><li>io是input&#x2F;output输入输出的缩写。它描述了计算机的输入输出数据流动的过程。</li><li>一次io的过程<ul><li>进程发起读取数据的io调用</li><li>操作系统把外部的数据加载到内核区</li><li>操作系统把数据拷贝到进程的缓冲区</li></ul></li><li>基于上面的过程，我们可以看出，后面俩步的过程之间，就有很多问题，由此产生了很多模型<ul><li>阻塞 I&#x2F;O（blocking IO）</li><li>非阻塞 I&#x2F;O（nonblocking IO）</li><li>I&#x2F;O 多路复用（ IO multiplexing）</li><li>信号驱动 I&#x2F;O（ signal driven IO）</li><li>异步 I&#x2F;O（asynchronous IO）</li></ul></li></ul><h4 id="阻塞IO模型"><a href="#阻塞IO模型" class="headerlink" title="阻塞IO模型"></a>阻塞IO模型</h4><p>在用户空间调用 recvfrom，系统调用直到数据包达到且被复制到应用进程的缓冲区中或中间发生异常返回，在这个期间进程会一直等待。进程从调用 recvfrom 开始到它返回的整段时间内都是被阻塞的，因此，被称为阻塞 IO 模型。</p><p>阻塞IO模型图如下所示：</p><p><img src="/../images/spider/blocking-io.jpg" alt="blocking-io"></p><h4 id="非阻塞IO模型"><a href="#非阻塞IO模型" class="headerlink" title="非阻塞IO模型"></a>非阻塞IO模型</h4><p>recvfrom 从应用到内核的时，如果该缓冲区没有数据，就会直接返回 EWOULDBLOCK 错误，一般都对非阻塞 IO 模型进行轮询检查这个状态，看看内核是不是有数据到来。</p><p>也就是说非阻塞的 recvform 系统调用调用之后，进程并没有被阻塞，内核马上返回给进程。</p><p>如果数据还没准备好，此时会返回一个 error。进程在返回之后，可以干点别的事情，然后再发起 recvform 系统调用。重复上面的过程，循环往复的进行 recvform 系统调用，这个过程通常被称之为轮询。<br>轮询检查内核数据，直到数据准备好，再拷贝数据到进程，进行数据处理。需要注意，拷贝数据整个过程，进程仍然是属于阻塞的状态。<br>模型图如下所示:</p><p><img src="/../images/spider/non-blocking-io.jpg" alt="non-blocking-io"></p><h4 id="IO复用模型"><a href="#IO复用模型" class="headerlink" title="IO复用模型"></a>IO复用模型</h4><p>Linux 提供 select、poll、epoll，进程通过将一个或者多个 fd 传递给 select、poll、epoll 系统调用，阻塞在 select 操作（这个是内核级别的调用）上，这样的话，可以同时监听多个 fd 是否处于就绪状态。其中，</p><p>select&#x2F;poll 是顺序扫描 fd 是否就绪，而且支持的 fd 数量有限；<br>epoll 是基于事件驱动方式代替顺序扫描性能更高。</p><p>模型如下所示：</p><p><img src="/../images/spider/io-multiplexing.jpg" alt="io-multiplexing"></p><h4 id="信号驱动IO模型"><a href="#信号驱动IO模型" class="headerlink" title="信号驱动IO模型"></a>信号驱动IO模型</h4><p>首先需要开启 socket 信号驱动 IO 功能，并通过系统调用 sigaction 执行一个信号处理函数（非阻塞，立即返回）。当数据就绪时，会为该进程生成一个 SIGIO 信号，通过信号回调通知应用程序调用 recvfrom 来读取数据，并通知主循环喊出处理数据。</p><p>过程如下图所示：</p><p><img src="/../images/spider/sigio.jpg" alt="sigio"></p><h4 id="异步IO模型"><a href="#异步IO模型" class="headerlink" title="异步IO模型"></a>异步IO模型</h4><p>相对于同步IO，异步IO不是顺序执行。用户进程进行aio_read系统调用之后，无论内核数据是否准备好，都会直接返回给用户进程，然后用户态进程可以去做别的事情。等到socket数据准备好了，内核直接复制数据给进程，然后从内核向进程发送通知。IO两个阶段，进程都是非阻塞的。<strong>应用程序并不需要主动发起拷贝动作</strong>。<br>异步过程如下图所示：</p><p><img src="/../images/spider/aio.jpg" alt="aio"></p><h4 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h4><p><img src="/../images/spider/IO-compact.png" alt="aio"></p><h4 id="IO复用之select、poll、epoll简介"><a href="#IO复用之select、poll、epoll简介" class="headerlink" title="IO复用之select、poll、epoll简介"></a>IO复用之select、poll、epoll简介</h4><p>epoll是linux所特有，而select是POSIX所规定，一般操作系统均有实现。</p><h5 id="select"><a href="#select" class="headerlink" title="select"></a>select</h5><p>select本质是通过设置或检查存放fd标志位的数据结构来进行下一步处理。缺点是：</p><ol><li>select 使用固定长度的 BitsMap，表示文件描述符集合，而且所支持的文件描述符的个数是有限制的，在 Linux 系统中，由内核中的 FD_SETSIZE 限制， 默认最大值为 1024，只能监听 0~1023 的文件描述符。</li><li>对socket进行扫描时是线性扫描，即采用轮询方法，效率低。当套接字比较多的时候，每次select()都要遍历FD_SETSIZE个socket来完成调度，不管socket是否活跃都遍历一遍。会浪费很多CPU时间。如果能给套接字注册某个回调函数，当他们活跃时，自动完成相关操作，就避免了轮询，这正是epoll与kqueue做的</li><li>需要维护一个用来存放大量fd的数据结构，会使得用户空间和内核空间在传递该结构时复制开销大</li></ol><h5 id="poll"><a href="#poll" class="headerlink" title="poll"></a>poll</h5><p>poll 不再用 BitsMap 来存储所关注的文件描述符，取而代之用动态数组，以链表形式来组织，突破了 select 的文件描述符个数限制，当然还会受到系统文件描述符限制。</p><p>poll本质和select相同，将用户传入的数据拷贝到内核空间，然后查询每个fd对应的设备状态，如果设备就绪则在设备等待队列中加入一项并继续遍历，如果遍历所有fd后没有发现就绪设备，则挂起当前进程，直到设备就绪或主动超时，被唤醒后又要再次遍历fd。它没有最大连接数的限制，原因是它是基于链表来存储的，但缺点是：</p><ol><li>大量的fd的数组被整体复制到用户态和内核空间之间，不管有无意义。</li><li>poll还有一个特点“水平触发”，如果报告了fd后，没有被处理，那么下次poll时再次报告该ffd。</li></ol><h5 id="epoll"><a href="#epoll" class="headerlink" title="epoll"></a>epoll</h5><p>epoll支持水平触发和边缘触发，最大特点在于边缘触发，只告诉哪些fd刚刚变为就绪态，并且只通知一次。还有一特点是，epoll使用“事件”的就绪通知方式，通过epoll_ctl注册fd，一量该fd就绪，内核就会采用类似callback的回调机制来激活该fd，epoll_wait便可以收到通知。epoll的优点：</p><p>第一点，epoll 在内核里使用红黑树来跟踪进程所有待检测的文件描述字，把需要监控的 socket 通过 epoll_ctl() 函数加入内核中的红黑树里，红黑树是个高效的数据结构，增删改一般时间复杂度是 O(logn)。而 select&#x2F;poll 内核里没有类似 epoll 红黑树这种保存所有待检测的 socket 的数据结构，所以 select&#x2F;poll 每次操作时都传入整个 socket 集合给内核，而 epoll 因为在内核维护了红黑树，可以保存所有待检测的 socket ，所以只需要传入一个待检测的 socket，减少了内核和用户空间大量的数据拷贝和内存分配。</p><p>第二点， epoll 使用事件驱动的机制，内核里维护了一个链表来记录就绪事件，当某个 socket 有事件发生时，通过回调函数内核会将其加入到这个就绪事件列表中，当用户调用 epoll_wait() 函数时，只会返回有事件发生的文件描述符的个数，不需要像 select&#x2F;poll 那样轮询扫描整个 socket 集合，大大提高了检测的效率。</p><blockquote><p>插个题外话，网上文章不少说，epoll_wait 返回时，对于就绪的事件，epoll 使用的是共享内存的方式，即用户态和内核态都指向了就绪链表，所以就避免了内存拷贝消耗。<br>这是错的！看过 epoll 内核源码的都知道，压根就没有使用共享内存这个玩意。你可以从下面这份代码看到， epoll_wait 实现的内核代码中调用了 __put_user 函数，这个函数就是将数据从内核拷贝到用户空间。 by 小林coding</p></blockquote><h4 id="select、poll、epoll区别总结："><a href="#select、poll、epoll区别总结：" class="headerlink" title="select、poll、epoll区别总结："></a>select、poll、epoll区别总结：</h4><p>epoll 支持两种事件触发模式，分别是边缘触发（edge-triggered，ET）和水平触发（level-triggered，LT）。</p><ul><li>使用边缘触发模式时，当被监控的 Socket 描述符上有可读事件发生时，服务器端只会从 epoll_wait 中苏醒一次，即使进程没有调用 read 函数从内核读取数据，也依然只苏醒一次，因此我们程序要保证一次性将内核缓冲区的数据读取完；</li><li>使用水平触发模式时，当被监控的 Socket 上有可读事件发生时，服务器端不断地从 epoll_wait 中苏醒，直到内核缓冲区数据被 read 函数读完才结束，目的是告诉我们有数据需要读取；</li></ul><table><thead><tr><th align="center"></th><th align="center">支持一个进程打开连接数</th><th align="center">IO效率</th><th align="center">消息传递方式</th></tr></thead><tbody><tr><td align="center">select</td><td align="center">32位机器1024个，64位2048个</td><td align="center">IO效率低</td><td align="center">内核需要将消息传递到用户空间，都需要内核拷贝动作</td></tr><tr><td align="center">poll</td><td align="center">无限制，原因基于链表存储</td><td align="center">IO效率低</td><td align="center">内核需要将消息传递到用户空间，都需要内核拷贝动作</td></tr><tr><td align="center">epoll</td><td align="center">有上限，但很大，2G内存20W左右</td><td align="center">只有活跃的socket才调用callback，IO效率高</td><td align="center">通过内核与用户空间共享一块内存来实现</td></tr></tbody></table><p><strong>source：xiaolin coding and google search</strong></p><h3 id="爬虫和上面的描述有什么关系"><a href="#爬虫和上面的描述有什么关系" class="headerlink" title="爬虫和上面的描述有什么关系"></a>爬虫和上面的描述有什么关系</h3><p>爬虫的本质是<strong>网络io</strong>，从网络请求数据下载到本地客户端。socket是对于爬虫就是底层网络请求的一个接口。</p><h3 id="多进程，多线程"><a href="#多进程，多线程" class="headerlink" title="多进程，多线程"></a>多进程，多线程</h3><h4 id="多进程"><a href="#多进程" class="headerlink" title="多进程"></a>多进程</h4><ul><li>进程是操作系统分配资源的最小单元, 线程是操作系统调度的最小单元。</li><li>一个应用程序至少包括1个进程，而1个进程包括1个或多个线程，线程的尺度更小。</li><li>每个进程在执行过程中拥有独立的内存单元，而一个线程的多个线程在执行过程中共享内存。</li></ul><p>多进程 python版</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Pool, cpu_count</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">long_time_task</span>(<span class="params">i</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;子进程: &#123;&#125; - 任务&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(os.getpid(), i))</span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;结果: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="number">8</span> ** <span class="number">20</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;CPU内核数:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(cpu_count()))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;当前母进程: &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(os.getpid()))</span><br><span class="line">    start = time.time()</span><br><span class="line">    p = Pool(<span class="number">4</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">        p.apply_async(long_time_task, args=(i,))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;等待所有子进程完成。&#x27;</span>)</span><br><span class="line">    p.close()</span><br><span class="line">    p.join()</span><br><span class="line">    end = time.time()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;总共用时&#123;&#125;秒&quot;</span>.<span class="built_in">format</span>((end - start)))</span><br></pre></td></tr></table></figure><h4 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h4><ul><li>线程是cpu调度和分配的基本单位</li></ul><p>多线程 python版</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">long_time_task</span>(<span class="params">i</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;当前子线程: &#123;&#125; 任务&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(threading.current_thread().name, i))</span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;结果: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="number">8</span> ** <span class="number">20</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    start = time.time()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;这是主线程：&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(threading.current_thread().name))</span><br><span class="line">    thread_list = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">3</span>):</span><br><span class="line">        t = threading.Thread(target=long_time_task, args=(i, ))</span><br><span class="line">        thread_list.append(t)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> thread_list:</span><br><span class="line">        t.start()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> thread_list:</span><br><span class="line">        t.join()</span><br><span class="line"></span><br><span class="line">    end = time.time()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;总共用时&#123;&#125;秒&quot;</span>.<span class="built_in">format</span>((end - start)))</span><br></pre></td></tr></table></figure><h4 id="进程切换与线程切换的区别？"><a href="#进程切换与线程切换的区别？" class="headerlink" title="进程切换与线程切换的区别？"></a>进程切换与线程切换的区别？</h4><p><a href="https://blog.csdn.net/github_37382319/article/details/97273713">https://blog.csdn.net/github_37382319/article/details/97273713</a></p><h4 id="全局解释器锁（GIL-和多进程多线程"><a href="#全局解释器锁（GIL-和多进程多线程" class="headerlink" title="全局解释器锁（GIL)和多进程多线程"></a>全局解释器锁（GIL)和多进程多线程</h4><ul><li>GIL<ul><li>全局解释器锁（英语：Global Interpreter Lock，缩写GIL），是计算机程序设计语言解释器用于同步线程的一种机制，它使得任何时刻仅有一个线程在执行。[1]即便在多核心处理器上，使用 GIL 的解释器也只允许同一时间执行一个线程。常见的使用 GIL 的解释器有CPython与Ruby MRI</li><li>多进程没有GIL限制可以利用多核处理器，但是多进程适合计算密集型任务。</li></ul></li></ul><p>多进程和多线程对比</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Pool, cpu_count</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">logging.basicConfig(level=logging.INFO, <span class="built_in">format</span>=<span class="string">&quot;%(process)d %(processName)s %(thread)d %(message)s&quot;</span>)</span><br><span class="line">log = logging</span><br><span class="line"><span class="comment"># def long_time_task(i):</span></span><br><span class="line"><span class="comment">#     print(&#x27;子进程: &#123;&#125; - 任务&#123;&#125;&#x27;.format(os.getpid(), i))</span></span><br><span class="line"><span class="comment">#     time.sleep(2)</span></span><br><span class="line"><span class="comment">#     print(&quot;结果: &#123;&#125;&quot;.format(8 ** 20))</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_download</span>(<span class="params">i</span>):</span><br><span class="line">    <span class="keyword">import</span> requests</span><br><span class="line">    s = requests.get(url=<span class="string">&quot;https://www.baidu.com/&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> s.status_code</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">calc_num</span>(<span class="params">i</span>):</span><br><span class="line">    <span class="built_in">sum</span> = <span class="number">0</span> </span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10000000</span>):</span><br><span class="line">        <span class="built_in">sum</span> += <span class="number">1</span></span><br><span class="line">    <span class="comment"># log.info(sum)</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sum</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># print(&quot;CPU内核数:&#123;&#125;&quot;.format(cpu_count()))</span></span><br><span class="line">    <span class="comment"># print(&#x27;当前母进程: &#123;&#125;&#x27;.format(os.getpid()))</span></span><br><span class="line">    start = time.time()</span><br><span class="line">    p = Pool(<span class="number">8</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">        p.apply_async(get_download, args=(i,), callback=<span class="keyword">lambda</span> x: <span class="built_in">print</span>(<span class="string">&quot;&#123;&#125; is callback&quot;</span>.<span class="built_in">format</span>(x)))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;等待所有子进程完成。&#x27;</span>)</span><br><span class="line">    p.close()</span><br><span class="line">    p.join()</span><br><span class="line">    end = time.time()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;总共用时&#123;&#125;秒&quot;</span>.<span class="built_in">format</span>((end - start)))</span><br><span class="line">   </span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">logging.basicConfig(</span><br><span class="line">    level=logging.INFO,</span><br><span class="line">    <span class="built_in">format</span>=<span class="string">&quot;%(process)d %(processName)s %(thread)d %(message)s&quot;</span>)</span><br><span class="line">log = logging</span><br><span class="line"></span><br><span class="line"><span class="comment"># def long_time_task(i):</span></span><br><span class="line"><span class="comment">#     print(&#x27;当前子线程: &#123;&#125; 任务&#123;&#125;&#x27;.format(threading.current_thread().name, i))</span></span><br><span class="line"><span class="comment">#     time.sleep(2)</span></span><br><span class="line"><span class="comment">#     print(&quot;结果: &#123;&#125;&quot;.format(8 ** 20))</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">calc_num</span>(<span class="params">i</span>):</span><br><span class="line">    <span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10000000</span>):</span><br><span class="line">        <span class="built_in">sum</span> += <span class="number">1</span></span><br><span class="line">    log.info(<span class="built_in">sum</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sum</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_download</span>(<span class="params">i</span>):</span><br><span class="line">    <span class="keyword">import</span> requests</span><br><span class="line">    s = requests.get(url=<span class="string">&quot;https://www.baidu.com/&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(s.url)</span><br><span class="line">    <span class="keyword">return</span> s.status_code</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    start = time.time()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;这是主线程：&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(threading.current_thread().name))</span><br><span class="line">    thread_list = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">        t = threading.Thread(target=calc_num, args=(i,))</span><br><span class="line">        thread_list.append(t)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> thread_list:</span><br><span class="line">        t.start()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> thread_list:</span><br><span class="line">        t.join()</span><br><span class="line"></span><br><span class="line">    end = time.time()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;总共用时&#123;&#125;秒&quot;</span>.<span class="built_in">format</span>((end - start)))</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="协程"><a href="#协程" class="headerlink" title="协程"></a>协程</h4><p>在python中，对于io来说，多进程没啥效率，多线程也只是单线程并发，既然这样好不如单线程直接来。要么换语言。</p><p>Python由于众所周知的GIL的原因，导致其线程无法发挥多核的并行计算能力（当然，后来有了multiprocessing，可以实现多进程并行）。既然在GIL之下，同一时刻只能有一个线程在运行，那么对于CPU密集的程序来说，线程之间的切换开销就成了拖累，而以I&#x2F;O为瓶颈的程序正是协程所擅长的：</p><p>多任务并发（非并行），每个任务在合适的时候挂起（发起I&#x2F;O）和恢复(I&#x2F;O结束)</p><p>Python中的协程经历了很长的一段发展历程。其大概经历了如下三个阶段：</p><ul><li><strong>最初的生成器变形yield&#x2F;send</strong></li><li><strong>引入@asyncio.coroutine和yield from</strong></li><li><strong>在最近的Python3.5版本中引入async&#x2F;await关键字</strong></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> inspect <span class="keyword">import</span>  getgeneratorstate</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">coro</span>(<span class="params">a</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;-&gt; start : a = &quot;</span>, a)</span><br><span class="line">    b = <span class="keyword">yield</span> a+<span class="number">1</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;-&gt; recive : b &quot;</span>, b)</span><br><span class="line">    c = <span class="keyword">yield</span> a+b</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;-&gt; recive : c &quot;</span>, c)</span><br><span class="line">    d = <span class="keyword">yield</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;-&gt; recive : d &quot;</span>, d)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    my_coro = coro(<span class="number">1</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="number">1</span>, getgeneratorstate(my_coro))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;1-next -&gt;&quot;</span>, my_coro.__next__())</span><br><span class="line">    <span class="built_in">print</span>(<span class="number">2</span>, getgeneratorstate(my_coro))</span><br><span class="line">    my_coro.send(<span class="number">2</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;2-next -&gt;&quot;</span>, my_coro.__next__())</span><br><span class="line">    <span class="comment"># my_coro.send(3)</span></span><br><span class="line">    <span class="comment"># my_coro.send(4)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(e)</span><br><span class="line">    <span class="built_in">print</span>(<span class="number">3</span>, getgeneratorstate(my_coro))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">now</span>(): <span class="keyword">return</span> time.time()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># callback事件回调处理</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">event_handler</span>(<span class="params">future</span>):</span><br><span class="line">    <span class="keyword">if</span> future:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;回调：&quot;</span> + future.result())</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;回调失败&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1.定义一个协程函数</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">hello</span>(<span class="params">name</span>):</span><br><span class="line">    <span class="keyword">return</span> name</span><br><span class="line">start_time = now()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.调用协程函数获取协程对象（coroutine协程对象）</span></span><br><span class="line">coroutine_obj = hello(<span class="string">&quot;world&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(coroutine_obj))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.获取默认的事件循环对象</span></span><br><span class="line">loop = asyncio.get_event_loop()  <span class="comment"># 获取当前线程的事件循环，loop是单例</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 4.根据协程对象创建task，下面三种方式都可以创建task</span></span><br><span class="line">task = loop.create_task(coroutine_obj)</span><br><span class="line"><span class="comment">#task = asyncio.ensure_future(coroutine_obj)</span></span><br><span class="line"><span class="comment">#task = asyncio.Task(coroutine_obj)</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(task))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5.设置回调函数</span></span><br><span class="line">task.add_done_callback(event_handler)</span><br><span class="line"></span><br><span class="line">end_time = now()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 6.启动事件循环</span></span><br><span class="line">loop.run_until_complete(task)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;耗时间：&quot;</span> + <span class="built_in">str</span>(start_time - end_time))</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>协程完整的工作流程是这样的</p><ul><li>定义&#x2F;创建协程对象</li><li>将协程转为task任务</li><li>定义事件循环对象容器</li><li>将task任务扔进事件循环对象中触发</li></ul><p>几个重要的概念</p><ul><li><code>event_loop 事件循环</code>：程序开启一个无限的循环，程序员会把一些函数（协程）注册到事件循环上。当满足事件发生的时候，调用相应的协程函数。</li><li><code>coroutine 协程</code>：协程对象，指一个使用async关键字定义的函数，它的调用不会立即执行函数，而是会返回一个协程对象。协程对象需要注册到事件循环，由事件循环调用。</li><li><code>future 对象</code>： 代表将来执行或没有执行的任务的结果。它和task上没有本质的区别</li><li><code>task 任务</code>：一个协程对象就是一个原生可以挂起的函数，任务则是对协程进一步封装，其中包含任务的各种状态。Task 对象是 Future 的子类，它将 coroutine 和 Future 联系在一起，将 coroutine 封装成一个 Future 对象。</li><li><code>async/await 关键字</code>：python3.5 用于定义协程的关键字，async定义一个协程，await用于挂起阻塞的异步调用接口。其作用在一定程度上类似于yield。</li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li>在异步编程模型与多线程模型之间还有一个不同：在多线程程序中，对于停止某个线程启动另外一个线程，其决定权并不在程序员手里而在操作系统那里，因此，程序员在编写程序过程中必须要假设在任何时候一个线程都有可能被停止而启动另外一个线程。相反，在异步模型中，一个任务要想运行必须显式放弃当前运行的任务的控制权。这也是相比多线程模型来说，最简洁的地方。 值得注意的是：将异步编程模型与同步模型混合在同一个系统中是可以的。但在介绍中的绝大多数时候，我们只研究在单个线程中的异步编程模型。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python，爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo 入门</title>
      <link href="/post/3e57632f.html"/>
      <url>/post/3e57632f.html</url>
      
        <content type="html"><![CDATA[<h1 id="查看官方的文档"><a href="#查看官方的文档" class="headerlink" title="查看官方的文档"></a>查看官方的文档</h1><p><a href="https://hexo.io/zh-cn/docs/index.html">https://hexo.io/zh-cn/docs/index.html</a></p><h1 id="win10系统"><a href="#win10系统" class="headerlink" title="win10系统"></a>win10系统</h1><h2 id="1-安装环境"><a href="#1-安装环境" class="headerlink" title="1.安装环境"></a>1.安装环境</h2><ul><li><a href="http://nodejs.org/">Node.js</a> (Node.js 版本需不低于 10.13，建议使用 Node.js 12.0 及以上版本)</li><li><a href="http://git-scm.com/">Git</a></li></ul><h2 id="2-安装所需的模块"><a href="#2-安装所需的模块" class="headerlink" title="2.安装所需的模块"></a>2.安装所需的模块</h2> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">安装以后，可以使用以下两种方式执行 Hexo：</span><br><span class="line"></span><br><span class="line">npx hexo &lt;command&gt;</span><br><span class="line"></span><br><span class="line">将 Hexo 所在的目录下的 node_modules 添加到环境变量之中即可直接使用 hexo &lt;command&gt;：</span><br><span class="line"></span><br><span class="line">echo &#x27;PATH=&quot;$PATH:./node_modules/.bin&quot;&#x27; &gt;&gt; ~/.profile</span><br></pre></td></tr></table></figure><h2 id="3-构建"><a href="#3-构建" class="headerlink" title="3.构建"></a>3.构建</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init &lt;folder&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd &lt;folder&gt;</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><p>_config.yml</p><pre><code>网站的 [配置](https://hexo.io/zh-cn/docs/configuration) 信息，您可以在此配置大部分的参数。</code></pre><h2 id="4-生成about页面"><a href="#4-生成about页面" class="headerlink" title="4.生成about页面"></a>4.生成about页面</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. hexo new page &quot;about&quot;</span><br><span class="line">2. 在_config.yml中的menu:中配置About: about  # 关于</span><br><span class="line">3. 在根目录的source会生成一个md文件，在这个md文件中写入相关的信息</span><br></pre></td></tr></table></figure><h2 id="5-hexo-server"><a href="#5-hexo-server" class="headerlink" title="5.hexo-server"></a>5.hexo-server</h2><p><code>npm install hexo-server --save</code></p><p>安装完成后，输入以下命令以启动服务器，您的网站会在 <a href="http://localhost:4000/">http://localhost:4000</a> 下启动。在服务器启动期间，Hexo 会监视文件变动并自动更新，您无须重启服务器。</p><h2 id="hexo的升级"><a href="#hexo的升级" class="headerlink" title="hexo的升级"></a>hexo的升级</h2><p>升级 Hexo:<br>使用淘宝源的 cnpm 替换 npm（可选，我用的还是npm）<br>npm install -g cnpm –registry&#x3D;<a href="https://registry.npm.taobao.org/">https://registry.npm.taobao.org</a></p><p>npm install -g cnpm                 # 升级 npm<br>npm cache clean -f                 # 清除 npm 缓存</p><h3 id="更新-package-json-中的-hexo-及个插件版本（更新-hexo-进入blog的根目录，执行如下命令）"><a href="#更新-package-json-中的-hexo-及个插件版本（更新-hexo-进入blog的根目录，执行如下命令）" class="headerlink" title="更新 package.json 中的 hexo 及个插件版本（更新 hexo: 进入blog的根目录，执行如下命令）"></a>更新 package.json 中的 hexo 及个插件版本（更新 hexo: 进入blog的根目录，执行如下命令）</h3><p>npm install -g npm-check           # 检查之前安装的插件，都有哪些是可以升级的<br>npm install -g npm-upgrade         # 升级系统中的插件<br>npm-check  # 这一步会让你选择那些更新那些不更新<br>npm-upgrade # 更新上一步你所选择的</p><h3 id="更新-hexo-及所有插件"><a href="#更新-hexo-及所有插件" class="headerlink" title="更新 hexo 及所有插件"></a>更新 hexo 及所有插件</h3><p>npm update</p><h3 id="确认-hexo-已经更新"><a href="#确认-hexo-已经更新" class="headerlink" title="确认 hexo 已经更新"></a>确认 hexo 已经更新</h3><p>hexo -v</p><h2 id="更新主题"><a href="#更新主题" class="headerlink" title="更新主题"></a>更新主题</h2><p><a href="https://butterfly.js.org/">https://butterfly.js.org/</a></p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
